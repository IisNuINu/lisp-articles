#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-11 10:44+0300\n"
"PO-Revision-Date: 2021-08-11 17:04+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:23
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:18:19.507266620\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:20:06.304952245\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"6415\"></a>A gentle introduction to\n"
"Compile-Time Computing â Part 1</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:18:19.507266620\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:20:06.304952245\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"6415\"></a>Нежное введение в вычисления во "
"время компиляции - Часть 1</h1>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:30
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?source=post_page-----"
"d4d96099cea0--------------------------------\">\n"
"  <font color=\"#000080\">\n"
"    <img src=\"a-gentle-introduction-to-compile-time-computing-"
"part-1_html_39aaac8f8c35ff7a.jpg\" name=\"Image1\" alt=\"Martin Cracauer\" "
"align=\"bottom\" width=\"28\" height=\"28\" border=\"1\"/>\n"
"  </font>\n"
"</a>\n"
"</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:35
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?source=post_page-----"
"d4d96099cea0--------------------------------\">Martin\n"
"Cracauer</a></p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:40
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer/a-gentle-introduction-to-"
"compile-time-computing-part-1-d4d96099cea0?source=post_page-----"
"d4d96099cea0--------------------------------\">Aug\n"
"30, 2017Â·8 min read</a></p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:46
msgid ""
"<p><a name=\"a5a4\"></a>I am finally sitting down writing about the\n"
"aspect of software <br/>\n"
"engineering that is most important to me.</p>"
msgstr ""
"<p><a name=\"a5a4\"></a>Я, наконец, сажусь и пишу о самом важном для меня "
"аспекте разработки программного обеспечения. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:51
msgid ""
"<p><img src=\"a-gentle-introduction-to-compile-time-computing-"
"part-1_html_c19f2ced434922.png\" name=\"Image2\" align=\"bottom\" width="
"\"500\" height=\"700\" border=\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:61
msgid ""
"<p><a name=\"e0e1\"></a>It is compile-time computing. Compile-time\n"
"computing means that the code you later compile isnât just what you\n"
"wrote down. What you compile later is also code that is âwrittenâ\n"
"by your code. Code generating code. Macros in a way, but not messy\n"
"tag-on macros. In Lisp you even use the same language for both,\n"
"enabling to re-use all your previous work for computation at both\n"
"compile time and run time.</p>"
msgstr ""
"<p><a name=\"e0e1\"></a>Это вычисления во время компиляции. \n"
"Вычисления во время компиляции означают, что код, который вы позже "
"компилируете, \n"
"- это не просто то, что вы записали. То, что вы компилируете позже, также "
"является \n"
"кодом, «написанным» вашим кодом. Код генерации кода. Макросы в некотором "
"роде, \n"
"но не запутанные макросы с тегами. В Лиспе вы даже используете один и тот же "
"язык \n"
"для обоих, что позволяет повторно использовать всю вашу предыдущую работу "
"для \n"
"вычислений как во время компиляции, так и во время выполнения.</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:67
msgid ""
"<p><a name=\"7dae\"></a><a name=\"rmm\"></a>Now whatâs the point? If\n"
"done correctly, compile-time computing allows you to keep every\n"
"single assumption that you make during programming in a single place.</p>"
msgstr ""
"<p><a name=\"7dae\"></a><a name=\"rmm\"></a>В чем здесь смысл? Если все "
"сделано правильно, \n"
"вычисления во время компиляции позволяют вам хранить все допущения, которые "
"вы \n"
"делаете во время программирования, в одном месте. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:82
msgid ""
"<p><a name=\"0240\"></a>Every time you leak one single assumption into\n"
"more than one single place you create a problem when you later change\n"
"your mind about that assumption. I think everybody here knows that a\n"
"reasonable, complete specification of a program before it is written\n"
"has never happened and never will. Changes are the nature of software\n"
"development, and they start a long, long time before the program\n"
"makes its first release. You need to be able to change your mind\n"
"about assumptions and have a single central control knob for every\n"
"single one of your old assumptions. You want to change one place and\n"
"have it propagate through your entire system, from that one\n"
"assumption you change in that one place. Only one human-written,\n"
"human-maintained place for each assumption.</p>"
msgstr ""
"<p><a name=\"0240\"></a>Каждый раз, когда вы просачиваете одно-"
"единственное \n"
"предположение более чем в одно место, вы создаете проблему, когда позже "
"меняете \n"
"свое мнение об этом предположении. Я думаю, что все здесь знают, что "
"разумной, \n"
"полной спецификации программы до того, как она будет написана, никогда не "
"было \n"
"и не будет. Изменения - это характер разработки программного обеспечения, \n"
"и они начинаются задолго до того, как программа пройдет свой первый "
"выпуск. \n"
"Вам необходимо изменить свое мнение о предположениях и иметь единую "
"центральную \n"
"ручку управления для каждого из ваших старых предположений. Вы хотите "
"изменить \n"
"одно место и заставить его распространяться по всей вашей системе, исходя из "
"того \n"
"единственного предположения, которое вы меняете в одном месте. Только одно "
"написанное \n"
"человеком место для каждого предположения. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:91
msgid ""
"<p><a name=\"aa8f\"></a><em>Small print first: Editing help from\n"
"@dcooper8. Thank you </em><strong><em>so</em></strong><em> much. This\n"
"was written when I still worked for Google on QPX, which is not the\n"
"case anymore. This article is an important part of my writing on\n"
"programmerâs focus and attention management, also see\n"
"</em><a href=\"https://medium.com/@MartinCracauer/on-attention-focus-and-"
"autism-in-the-tech-workplace-8246526fbbc0\">https://medium.com/"
"@MartinCracauer/on-attention-focus-and-autism-in-the-tech-"
"workplace-8246526fbbc0</a></p>"
msgstr ""
"<p><a name=\"aa8f\"></a><em>Сначала мелкий шрифт: справка по редактированию "
"от @dcooper8. \n"
"Большое ему спасибо. Это было написано, когда я все еще работал в Google над "
"QPX, \n"
"чего больше нет. Эта статья является важной частью моего изложения о "
"сосредоточении \n"
"и управлении вниманием программистов, также см\n"
"</em><a href=\"https://medium.com/@MartinCracauer/on-attention-focus-and-"
"autism-in-the-tech-workplace-8246526fbbc0\">https://medium.com/"
"@MartinCracauer/on-attention-focus-and-autism-in-the-tech-"
"workplace-8246526fbbc0</a></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:96
msgid ""
"<p><a name=\"a45f\"></a><strong>Letâs first have a look at what other\n"
"languages are doing:</strong></p>"
msgstr ""
"<p><a name=\"a45f\"></a><strong>Давайте сначала посмотрим, что делают другие "
"языки:</strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:109
msgid ""
"<p><a name=\"199c\"></a>Compile-time computing was a bit in fashion in\n"
"the C++ community a couple years ago, when templates became powerful\n"
"enough to do some limited amount of compile-time computing (which I\n"
"will abbreviate as âCTCâ from here on). It didnât go very far\n"
"due to the severe limitations of the compile-time programming\n"
"language in C++ (a language that only has one data type â C++ types\n"
"â and only one control construct â recursion â and it has no\n"
"concept of collection types and repeatedly iterating over them). I\n"
"ended up disappointed. I am still very glad it happened because it\n"
"put CTC on the map in many peopleâs mind.</p>"
msgstr ""
"<p><a name=\"199c\"></a>Вычисления во время компиляции были в моде в "
"сообществе \n"
"C++ пару лет назад, когда шаблоны стали достаточно мощными, чтобы "
"выполнять \n"
"некоторый ограниченный объем вычислений во время компиляции (которые я "
"буду \n"
"сокращать здесь и далее как «CTC»-compile-time computing). Это не зашло "
"слишком далеко \n"
"из-за серьезных ограничений языка программирования времени компиляции в C+"
"+ \n"
"(язык, который имеет только один тип данных - типы C++ - и только одну "
"управляющую \n"
"конструкцию - рекурсию - и в нем нет концепции типов коллекций. \n"
"и многократно повторяя их). Я разочаровался. Я до сих пор очень рад, что это "
"произошло, \n"
"потому что это сделало СТС заметным в умах многих людей. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:127
msgid ""
"<p><a name=\"f311\"></a>Other forms of CTC include the macros from C\n"
"and C++âs preprocessor, various forms of m4/m5 usage, and the D\n"
"language, all of which are also limited in both their expressive\n"
"power and in their ability to interact with the main language. For my\n"
"blog series I will use Common Lisp (âCLâ), because it is the only\n"
"language right now that has fully developed compile time computing. I\n"
"am aware that this makes it a bit harder to have a large audience\n"
"follow this. While CL has problem points even in my opinion, it is\n"
"what we have for compile-time computing. Whatever CLâs shortcoming\n"
"might be, having used CTC for decades I will not do without it.\n"
"Nothing else will allow us to write code that we will still\n"
"voluntarily maintain in 30+ years. Everything else is write-once and\n"
"then there either is âthe pain of maintaining The Legacy Systemâ\n"
"or a constant stream of re-writes with the associated second-system\n"
"effect.</p>"
msgstr ""
"<p><a name=\"f311\"></a>Другие формы CTC включают макросы из препроцессора C "
"и C++,\n"
"различные формы использования m4/m5 и язык D, все из которых также "
"ограничены \n"
"как по своей выразительной мощности, так и по способности взаимодействовать "
"с \n"
"основным языком. В своей серии блогов я буду использовать Common Lisp "
"(«CL»), \n"
"потому что на данный момент это единственный язык, в котором полностью "
"развиты \n"
"вычисления во время компиляции. Я понимаю, что при этом немного сложнее "
"привлечь \n"
"большую аудиторию к этому. Хотя у CL есть проблемы даже на мой взгляд, это "
"то, \n"
"что у нас есть для вычислений во время компиляции. Каким бы ни был "
"недостаток CL, \n"
"я, десятилетиями использую CTC, без него не обойдусь. Ничто другое не "
"позволит \n"
"нам написать код, который мы будем добровольно поддерживать через 30 с "
"лишним лет. \n"
"Все остальное - однократная запись, а затем либо «боль от поддержки "
"Унаследованной системы», \n"
"либо постоянный поток переписываний с соответствующим эффектом второй "
"системы. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:135
msgid ""
"<p><a name=\"5531\"></a>In Common Lisp, compile-time computing uses the\n"
"same language for compile and run time. Every function that you write\n"
"in CL you can invoke at runtime (like in a ânormalâ program) or\n"
"at compile time (to generate or modify other code based on a\n"
"concentrated specification).</p>"
msgstr ""
"<p><a name=\"5531\"></a>В Common Lisp вычисления во время компиляции "
"используют \n"
"один и тот же язык для компиляции и выполнения. Каждую функцию, которую вы "
"пишете на CL, \n"
"вы можете вызывать во время выполнения (например, в «нормальной» программе) "
"или \n"
"во время компиляции (для генерации или изменения другого кода на основе \n"
"концентрированной спецификации).</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:139
msgid "<p><a name=\"8bf6\"></a><strong>Want to follow with code?</strong></p>"
msgstr ""
"<p><a name=\"8bf6\"></a><strong>Хотите следовать с кодом? </strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:146
msgid ""
"<p><a name=\"319b\"></a>Now, for the reader who wants to follow\n"
"examples, this requires a small amount of set-up work. You have to\n"
"get a Common Lisp (CL) environment to try this out. A fairly minimal\n"
"set of things will do:</p>"
msgstr ""
"<p><a name=\"319b\"></a>Теперь, для читателя, который хочет следовать "
"примерам, \n"
"это требует небольшой работы по настройке. Вы должны получить среду Common "
"Lisp (CL), \n"
"чтобы попробовать это. Достаточен минимальный набор вещей:</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:154
msgid ""
"<p><a name=\"591a\"></a>1. You must have a code editor that shows\n"
"parenthesis that match (when typing a closing parenthesis it will\n"
"highlight the matching open one). You must have this. Everything else\n"
"is unusable for Lisp. It should also have automatic indentation if\n"
"you can get it.</p>"
msgstr ""
"<p><a name=\"591a\"></a>1. У вас должен быть редактор кода, в котором "
"отображаются \n"
"совпадающие круглые скобки (при вводе закрывающей скобки она выделяет "
"совпадающую открытую).\n"
"Вы должны это иметь. Все остальное для Лиспа непригодно. Он также должен "
"иметь \n"
"автоматический отступ, если вы можете его получить. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:162
msgid ""
"<p><a name=\"554d\"></a>2. you should have a Repl (commandline) that\n"
"allows you to repeat and edit commands. You can either use a CL\n"
"implementation that uses GNU readline for its input (such as CLISP),\n"
"or you can use an implementation like SBCL inside an Emacs shell\n"
"buffer</p>"
msgstr ""
"<p><a name=\"554d\"></a>2. у вас должна быть Repl (командная строка), \n"
"которая позволяет вам повторять и редактировать команды. Вы можете "
"использовать \n"
"реализацию CL, которая использует строку чтения GNU для ввода (например, "
"CLISP), \n"
"или вы можете использовать такую реализацию, как SBCL, внутри буфера "
"оболочки Emacs.</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:169
msgid ""
"<p><a name=\"825c\"></a>3. you can set up SLIME, which is a real IDE\n"
"inside Emacs. My examples will be simple enough that you will not\n"
"need this. On the other hand, Slime might help to play with debuggers\n"
"and explore the language.</p>"
msgstr ""
"<p><a name=\"825c\"></a>3. вы можете установить SLIME, которая является \n"
"настоящей IDE внутри Emacs. Мои примеры будут достаточно простыми, поэтому \n"
"вам это не понадобится. С другой стороны, Slime может помочь поиграть с \n"
"отладчиками и изучить язык.</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:175
msgid ""
"<p><a name=\"4dac\"></a>4. if you want to use any third-party libraries\n"
"(not required for my examples, but good for personal\n"
"experimentation), look into Quicklisp</p>"
msgstr ""
"<p><a name=\"4dac\"></a>4. сли вы хотите использовать какие-либо сторонние "
"библиотеки \n"
"(не обязательные для моих примеров, но подходящие для личных "
"экспериментов), \n"
"посмотрите на Quicklisp. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:190
msgid ""
"<p><a name=\"5e74\"></a>I recommend SBCL inside Emacs. SBCL is a\n"
"high-performance implementation with a compiler that allows you to\n"
"generally write overhead-free code; that means the compiled code can\n"
"run as fast as C code (exceptions and hacks apply, see my conference\n"
"talks about how ITA uses SBCL to be fast). It also has a good set of\n"
"compile-time warnings, including type mismatch warnings, and a\n"
"thriving community which does active development and helps people.\n"
"SBCL is available for Linux, the BSDs, on various processors\n"
"including ARM running on the Raspberry Pi, OSX and even Windows.\n"
"[Note from editor â You can get free pre-built install packages\n"
"with Emacs, Slime, and Gendl (built on CCL but with plans to offer\n"
"SBCL as well), for Linux, Mac, and Windows, from gendl.org]</p>"
msgstr ""
"<p><a name=\"5e74\"></a>Я рекомендую SBCL внутри Emacs. SBCL - это "
"высокопроизводительная\n"
"реализация с компилятором, которая позволяет вам писать код без накладных "
"расходов; \n"
"это означает, что скомпилированный код может работать так же быстро, как код "
"C \n"
"(применяются исключения и хаки, см. мою конференцию, где рассказывается о "
"том, \n"
"как ITA использует SBCL, чтобы быть быстрым). Он также имеет хороший набор \n"
"предупреждений во время компиляции, включая предупреждения о несоответствии "
"типов, \n"
"и процветающее сообщество, которое активно разрабатывает и помогает людям. \n"
"SBCL доступен для Linux, BSD, на различных процессорах, включая ARM, "
"работающую \n"
"на Raspberry Pi, OSX и даже Windows. [Примечание редактора - вы можете "
"получить \n"
"бесплатные предварительно созданные установочные пакеты с Emacs, Slime и "
"Gendl \n"
"(построенные на CCL, но с планами предлагать также SBCL) для Linux, Mac и \n"
"Windows с gendl.org] </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:209
msgid ""
"<p><a name=\"68b2\"></a>Alternatives: various efforts have been made to\n"
"have mechanisms related to Lisp macros in other languages â â\n"
"usually Lisp derivatives that try to make Lisp look more accessible\n"
"by dropping the parenthesis-based syntax. I havenât found that they\n"
"allow full compile time computing in the sense that I will outline\n"
"here. It is always a âwe implemented the most common uses of CL\n"
"macrosâ and I find that that they usually drop what I need to do. I\n"
"would be very thankful of readers would contribute implementations of\n"
"what I will show here in Dylan or any of the JVM based Lisp\n"
"derivatives. For now I will stick with CL. Donât get me wrong. Even\n"
"in my opinion CL can get tough to read once do you clever enough\n"
"macros. But if you take into account what kind of expressive power\n"
"those macros provide, and how much more maintainable they make things\n"
"compared to spreading facts all over the source code, it looks\n"
"reasonable. I would be all for having an even better language with\n"
"full-featured compile time computing.</p>"
msgstr ""
"<p><a name=\"68b2\"></a>Альтернативы: были предприняты различные усилия "
"для \n"
"создания механизмов, связанных с макросами Lisp на других языках - \n"
"обычно производных от Lisp, которые пытаются сделать Lisp более доступным, \n"
"отказавшись от синтаксиса, основанного на скобках. Я не обнаружил, что они \n"
"позволяют выполнять вычисления в течение всего времени компиляции в том "
"смысле, \n"
"который я здесь опишу. Это всегда «мы реализовали наиболее распространенные "
"варианты\n"
"использования макросов CL», и я считаю, что они обычно отбрасывают то, \n"
"что мне нужно делать. Я был бы очень благодарен читателям, которые "
"предоставят \n"
"реализации того, что я покажу здесь, в Dylan или любых производных от Lisp "
"на основе JVM. \n"
"А пока я буду придерживаться CL. Не поймите меня неправильно. Даже на мой "
"взгляд, \n"
"CL может стать трудночитаемым, если вы достаточно умны для макросов. Но "
"если \n"
"принять во внимание, какую выразительную силу обеспечивают эти макросы и "
"насколько \n"
"они более удобны в обслуживании по сравнению с распространением фактов по \n"
"всему исходному коду, это выглядит разумным. Я был бы полностью за то, "
"чтобы \n"
"иметь еще лучший язык с полнофункциональными вычислениями во время "
"компиляции. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:223
msgid ""
"<p><a name=\"364c\"></a>Lisp macros can also enhance <em>readability</em>\n"
"significantly. One early example is that Lisp compile-time computing\n"
"allows you to create any literal object you want â without needing\n"
"compiler or parser support for it. If you want a literal object in\n"
"your source code that is baked into your binary that is a hashtable\n"
"pointing to a bunch of arrays with complex numbers â not a problem.\n"
"Even if the language doesnât have syntax for the literal you want\n"
"yet, you can add it thanks to compile-time computing. You will have\n"
"to get over (into)the parenthesis thing, though, and for that you\n"
"need an editor with parenthesis matching display and ideally\n"
"indentation support for Lisp.</p>"
msgstr ""
"<p><a name=\"364c\"></a>Макросы Lisp также могут значительно улучшить "
"<em>читаемость</em>.\n"
" Одним из первых примеров является то, что вычисления во время компиляции "
"Lisp \n"
"позволяют вам создавать любой литеральный(буквальный) объект, который вы "
"хотите, \n"
"без необходимости поддержки компилятора или парсера для него. Если вам "
"нужен \n"
"литеральный(буквальный) объект в вашем исходном коде, который \"запечен\" в "
"вашем \n"
"двоичном файле, то есть хэш-таблица, указывающая на кучу массивов с "
"комплексными числами \n"
"- не проблема. Даже если в языке еще нет синтаксиса для нужного вам "
"литерала, \n"
"вы можете добавить его благодаря вычислениям во время компиляции. Однако вам "
"придется \n"
"перейти (в) скобки, и для этого вам понадобится редактор с отображением "
"соответствия \n"
"скобок и, в идеале, поддержкой отступов для Lisp. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:235
msgid ""
"<p><a name=\"c202\"></a>Last but certainly not least, there is also\n"
"<em>Diff Efficiency. </em>What the heck is âdiff efficiencyâ? It\n"
"means that if you look at a <code class=\"western\">git diff</code> of\n"
"your code versus a different state of your code, then you only see\n"
"the actual functional change. Not a lot of boilerplate. Not a lot of\n"
"copy and pasted slight variants of that functional change. If you use\n"
"syntax highlighting then it will work correctly, because you donât\n"
"embed an alien language inside your primary languageâs source code.\n"
"One assumption, one place. One assumption changed, one place changed.</p>"
msgstr ""
"<p><a name=\"c202\"></a>И последнее, но не менее важное: есть еще <em>Diff "
"Efficiency</em>\n"
"(дифференцированная эффективность). Что, черт возьми, такое "
"«дифференциальная эффективность»? \n"
"Это означает, что если вы посмотрите на <code class=\"western\">git diff</"
"code> вашего кода \n"
"по сравнению с другим состоянием вашего кода, вы увидите только фактическое "
"функциональное\n"
"изменение. Не много шаблонов. Не много копий и вставленных небольших "
"вариантов этого\n"
"функционального изменения. Если вы используете подсветку синтаксиса, она "
"будет работать\n"
"правильно, потому что вы не встраиваете чужой язык в исходный код вашего "
"основного языка. \n"
"Одно предположение, одно место. Одно предположение изменилось, одно место "
"поменялось.</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:241
msgid ""
"<p><a name=\"bd79\"></a>(side note: IDEs that âhelpâ you do large\n"
"boilerplate changes automatically but then do not re-collapse them\n"
"when you want to see diffs deserve to be burned at the stake)</p>"
msgstr ""
"<p><a name=\"bd79\"></a>(примечание: IDE, которые «помогают» вам вносить "
"большие \n"
"стандартные изменения автоматически, но затем не сворачивают их повторно, \n"
"когда вы хотите увидеть различия, заслуживающие того, чтобы их сожгли на "
"костре) </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:245
msgid "<p><a name=\"48eb\"></a><strong>In summary:</strong></p>"
msgstr "<p><a name=\"48eb\"></a><strong>В итоге:</strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:251
msgid ""
"<p><a name=\"5b4f\"></a>Compile-time computing allows you to keep every\n"
"single assumption you make during programming in one place, greatly\n"
"enhancing changeability.</p>"
msgstr ""
"<p><a name=\"5b4f\"></a>Вычисления во время компиляции позволяют вам хранить "
"все допущения, \n"
"которые вы делаете во время программирования, в одном месте, что значительно "
"повышает \n"
"возможность изменения.\n"
"</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:256
msgid ""
"<p><a name=\"4637\"></a>Programmers actually <em>want</em> to do that â\n"
"but irreducible repetition frustrates them greatly. Our tools suck.</p>"
msgstr ""
"<p><a name=\"4637\"></a>Программисты на самом деле <em>хотят </em>это "
"сделать, \n"
"но непреодолимое повторение их сильно расстраивает. \n"
"Наши инструменты - отстой.</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:261
msgid ""
"<p><a name=\"7571\"></a>Common Lisp is the language I currently use for\n"
"full compile-time computing.</p>"
msgstr ""
"<p><a name=\"7571\"></a>Common Lisp - это язык, который я в настоящее время "
"использую \n"
"для вычислений во время полной компиляции. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:279
msgid ""
"<p><a name=\"77d3\"></a>Inside the main source code, you will make\n"
"little âcustomâ mini-languages to concentrate information in a\n"
"compact space. Inside the main source code. Without going to a\n"
"different syntax inside special markers. You will do so without\n"
"needing an external program with a parser, much less by having to\n"
"generate code from Python. Those mini-languages are just defining\n"
"ways to express what you want in the source code that are most\n"
"convenient for you to tell them. Macros then make them usable without\n"
"having to modify the compiler or invoke any external tool. As a side\n"
"effect, it greatly keeps down the amount of boilerplate your program\n"
"requires. Boilerplate is bad for later changes since it blows up the\n"
"size of diffs generated from changes and you canât see âthe\n"
"pointâ about a given diff because itâs all full of interface\n"
"adjustments that have no impact on the programâs flow from this\n"
"change.</p>"
msgstr ""
"<p><a name=\"77d3\"></a>Внутри основного исходного кода вы создадите "
"небольшие \n"
"«нестандартные» мини-языки, чтобы сконцентрировать информацию в компактном "
"пространстве. \n"
"Внутри основного исходного кода. Не переходя к другому синтаксису внутри "
"специальных маркеров. \n"
"Вы сделаете это без необходимости во внешней программе с парсером, не говоря "
"уже о том, \n"
"чтобы генерировать код из Python. Эти мини-языки просто определяют способы "
"выразить то,\n"
"что вы хотите, в исходном коде, которые вам наиболее удобно им сказать. \n"
"Затем макросы делают их пригодными для использования без изменения "
"компилятора или \n"
"вызова какого-либо внешнего инструмента. Как побочный эффект, это "
"значительно снижает \n"
"количество шаблонов, которые требуются вашей программе. Boilerplate(шаблон) "
"плохо подходит \n"
"для последующих изменений, поскольку он увеличивает размер различий, \n"
"созданных в результате изменений, и вы не можете увидеть «суть» в данном "
"различии, \n"
"потому что он полон настроек интерфейса, которые не влияют на выполнение "
"программы \n"
"из-за этого изменения. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:298
msgid ""
"<p><a name=\"ee73\"></a><strong>About myself:</strong> I got introduced\n"
"to Common Lisp by Rainer Joswig <a href=\"https://twitter.com/RainerJoswig"
"\"><strong>@</strong>RainerJoswig</a>\n"
"(thank you so much!) at University of Hamburgâs AI department ca.\n"
"1992 (I studied Physics, but whoâs counting?). At the time I had\n"
"looked for the solution to all these problems in Smalltalk. That was\n"
"a first-class introduction using a Symbolics Lisp Machine running\n"
"Genera (of which I would get a couple later) and the famous IDE that\n"
"Macintosh Common Lisp was at the time. I started using CL and FreeBSD\n"
"at work, picked CMUCL and eventually did the work to open source\n"
"CMUâs Common Lisp â another thank you to Scott Fahlman\n"
"<a href=\"https://twitter.com/ScottFahlman\"><strong>@</strong>ScottFahlman</"
"a>.\n"
"CMUCL later developed into SBCL. In 2000â2001 I was hired by ITA\n"
"software to make their QPX search engine run stably on the open\n"
"source CMUCL, for the first commercial QPX customers. (also a\n"
"heartfelt thank you to everybody at Orbitz from me. It was an honor\n"
"working with you)</p>"
msgstr ""
"<p><a name=\"ee73\"></a><strong>О себе:</strong> Меня познакомил с Common "
"Lisp \n"
"Райнер Йосвиг @RainerJoswig (большое спасибо!) На факультете ИИ "
"Гамбургского \n"
"университета ок. 1992 (Я изучал физику, но кто считает?). В то время я "
"искал \n"
"решение всех этих проблем в Smalltalk. Это было первоклассное введение с "
"использованием \n"
"Symbolics Lisp Machine под управлением Genera (о которых я получу пару "
"позже) и \n"
"знаменитой IDE, которой в то время был Macintosh Common Lisp. Я начал "
"использовать \n"
"CL и FreeBSD на работе, выбрал CMUCL и, в конце концов, сделал работу над \n"
"Common Lisp CMU с открытым исходным кодом - еще одно спасибо Скотту Фалману "
"@ScottFahlman. \n"
"CMUCL позже превратился в SBCL. В 2000–2001 годах я был нанят ITA "
"Software, \n"
"чтобы обеспечить стабильную работу своей поисковой системы QPX на CMUCL с "
"открытым исходным \n"
"кодом для первых коммерческих клиентов QPX. (также сердечное спасибо всем в "
"Orbitz от меня. \n"
"Для меня было честью работать с вами) </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:310
msgid ""
"<p><a name=\"925a\"></a>Fact is that the maintainability and\n"
"ability-to-change-your-mind brought to us by Lisp was a key factor to\n"
"the success of ITA. If you work in the airline pricing field you\n"
"<em>really</em> need the ability to change your assumptions, on what\n"
"all those funny fare rules (turing-complete rules no less) <em>actually</"
"em>\n"
"mean. ITAâs success led to being bought by Google, where I am still\n"
"today (update â nope). Still fighting with the same codebase 15\n"
"years later and itâs still not clear whoâs winning (no, really, I\n"
"love QPX).</p>"
msgstr ""
"<p><a name=\"925a\"></a>Факт в том, что удобство сопровождения и способность "
"изменять \n"
"ваше мнение, предоставленные нам Lisp, были ключевыми факторами успеха "
"ITA. \n"
"Если вы работаете в сфере ценообразования авиакомпаний, вам действительно "
"нужна \n"
"возможность изменить свои предположения о том, что на самом деле означают "
"все \n"
"эти забавные правила тарифов (не менее полные по Тьюрингу). Успех ITA привел "
"к тому, \n"
"что меня купил Google, где я до сих пор нахожусь (обновление - уже нет). Все "
"еще борюсь \n"
"с той же кодовой базой 15 лет спустя, и до сих пор не ясно, кто выигрывает "
"(нет, правда, \n"
"я люблю QPX). </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:313
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:315
msgid "</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-1.html:318
msgid ""
"</body>\n"
"</html>"
msgstr ""
