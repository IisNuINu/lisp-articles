#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/Compile_Time_Debugging.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-11 10:44+0300\n"
"PO-Revision-Date: 2021-08-12 13:48+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/Compile_Time_Debugging.html:19
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T09:57:36.540310337\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T09:59:45.465237152\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h2 class=\"western\"><a name=\"cdd2\"></a>Debugging</h2>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T09:57:36.540310337\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T09:59:45.465237152\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h2 class=\"western\"><a name=\"cdd2\"></a>Отладка</h2>"

#: in_ed/Compile_Time_Debugging.html:22
msgid ""
"<p><img src=\"Compile_Time_Debugging_html_958a9d0a0a905f28.png\" name="
"\"Image1\" align=\"bottom\" width=\"500\" height=\"700\" border=\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/Compile_Time_Debugging.html:29
msgid ""
"<p><a name=\"c10d\"></a>Let us focus on the hack we introduced into the\n"
"macro to please C programmers by accepting âintâ as a type\n"
"specifier. Those hacks are always the beginning of interesting\n"
"debugging sessions.</p>"
msgstr ""
"<p><a name=\"c10d\"></a>Давайте сосредоточимся на хитрости, которую мы "
"внедрили \n"
"в макрос, чтобы угодить программистам на C, приняв «int» в качестве "
"спецификатора \n"
"типа. Эти хаки всегда являются началом интересных сеансов отладки. </p>"

#: in_ed/Compile_Time_Debugging.html:53
msgid ""
"<pre class=\"western\"><a name=\"db90\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype  \n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; &lt;== HACK HERE, with typo\n"
"                          (if (equalp (string (first arg)) &quot;"
"intt&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"<a name=\"6337\"></a>                t) ,name))...)</pre>\n"
"<p>\n"
"<a name=\"825d\"></a>As you can see, comparing the user string involved\n"
"a careful choice of conversions and the right comparison operator.\n"
"Letâs say you have a problem in that the comparison never matches\n"
"and you want to debug.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"db90\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype  \n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; &lt;== HACK HERE, with typo\n"
"                          (if (equalp (string (first arg)) &quot;"
"intt&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"<a name=\"6337\"></a>                t) ,name))...)</pre>\n"
"<p>\n"
"<a name=\"825d\"></a>Как видите, сравнение пользовательской строки требует \n"
"тщательного выбора преобразований и правильного оператора сравнения. \n"
"Допустим, у вас есть проблема в том, что сравнение никогда не подходит, \n"
"и вы хотите это отладить.\n"
"</p>"

#: in_ed/Compile_Time_Debugging.html:57
msgid "<p><a name=\"db1c\"></a>First thing is macroexpand:</p>"
msgstr ""
"<p><a name=\"db1c\"></a>Первое, что нужно сделать - это macroexpand: </p>"

#: in_ed/Compile_Time_Debugging.html:67
msgid ""
"<pre class=\"western\"><a name=\"f7c2\"></a>(macroexpand '(defunt meh5 ((int "
"p1) p2) (+ p1 p2)))\n"
"==&gt;\n"
"(PROGN                                                                          \n"
" (DECLAIM (FTYPE (FUNCTION (T INT) T) MEH5)) \n"
" (DEFUN MEH5 (P1 P2) (+ P1 P2)))</pre>\n"
"<p>\n"
"<a name=\"f4fe\"></a>OK, so that doesnât tell us much. It says that\n"
"the âintâ wasnât recognized, but we donât know why.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"f7c2\"></a>(macroexpand '(defunt meh5 ((int "
"p1) p2) (+ p1 p2)))\n"
"==&gt;\n"
"(PROGN                                                                          \n"
" (DECLAIM (FTYPE (FUNCTION (T INT) T) MEH5)) \n"
" (DEFUN MEH5 (P1 P2) (+ P1 P2)))</pre>\n"
"<p>\n"
"<a name=\"f4fe\"></a>Хорошо, но это мало что нам говорит. В нем говорится, \n"
"что int не был распознан, но мы не знаем почему.</p>"

#: in_ed/Compile_Time_Debugging.html:72
msgid ""
"<p><a name=\"a941\"></a>Now, since we have the entire language at our\n"
"disposal at compile time we can use debugging print:</p>"
msgstr ""
"<p><a name=\"a941\"></a>Теперь, когда в нашем распоряжении есть весь \n"
"язык во время компиляции, мы можем использовать отладочную печать: </p>"

#: in_ed/Compile_Time_Debugging.html:96
msgid ""
"<pre class=\"western\"><a name=\"aebb\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype  \n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; &lt;== HACK HERE, with typo\n"
"                          (if (equalp (string (print (first arg))) &quot;"
"intt&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"<a name=\"5e8f\"></a>                t) ,name))...)</pre>\n"
"<p>\n"
"<a name=\"b8d7\"></a>So we just put a (print â¦) around the value we\n"
"want to know about. It will be printed at macroexpand time. (print â¦)\n"
"returns its own argument, so you can just insert it into the program\n"
"flow.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"aebb\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype  \n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; &lt;== HACK HERE, with typo\n"
"                          (if (equalp (string (print (first arg))) &quot;"
"intt&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"<a name=\"5e8f\"></a>                t) ,name))...)</pre>\n"
"<p>\n"
"<a name=\"b8d7\"></a>Поэтому мы просто помещаем (печать …) вокруг значения,\n"
" о котором хотим знать. Оно будет напечатано во время макрорасширения. \n"
"(print…) возвращает собственный аргумент, поэтому вы можете просто "
"вставить \n"
"его в поток программы.</p>"

#: in_ed/Compile_Time_Debugging.html:100
msgid "<p><a name=\"8a52\"></a>More extensive:</p>"
msgstr "<p><a name=\"8a52\"></a>Более обширный: </p>"

#: in_ed/Compile_Time_Debugging.html:109
msgid ""
"<pre class=\"western\"><a name=\"3d18\"></a>(format t &quot;~%debug args: ~a "
"~a&quot; arg (type-of arg))\n"
"(if (listp arg)\n"
"     ;; &lt;== HACK HERE, with typo\n"
"     ;;(if (equalp (string (print (first arg))) &quot;intt&quot;)</pre>\n"
"<p>\n"
"<a name=\"c350\"></a>Thatâs using an actual printf statement and\n"
"gives you both the value and the type of the argument.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"3d18\"></a>(format t &quot;~%debug args: ~a "
"~a&quot; arg (type-of arg))\n"
"(if (listp arg)\n"
"     ;; &lt;== HACK HERE, with typo\n"
"     ;;(if (equalp (string (print (first arg))) &quot;intt&quot;)</pre>\n"
"<p>\n"
"<a name=\"c350\"></a>Это использует фактический оператор printf и дает вам "
"как значение, \n"
"так и тип аргумента.</p>"

#: in_ed/Compile_Time_Debugging.html:119
msgid ""
"<pre class=\"western\"><a name=\"7927\"></a>(macroexpand '(defunt meh5 ((int "
"p1) p2) (+ p1 p2)))\n"
"==&gt;                                                               \n"
"debug args: (INT P1) "
"CONS                                                                   \n"
"debug args: P2 SYMBOL\n"
";; expansion follows</pre>\n"
"<p>\n"
"<a name=\"82d2\"></a>So you can annotate the flow of the macro as you\n"
"see fit. You have the full language.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"7927\"></a>(macroexpand '(defunt meh5 ((int "
"p1) p2) (+ p1 p2)))\n"
"==&gt;                                                               \n"
"debug args: (INT P1) "
"CONS                                                                   \n"
"debug args: P2 SYMBOL\n"
";; expansion follows</pre>\n"
"<p>\n"
"<a name=\"82d2\"></a>Таким образом, вы можете аннотировать поток макроса по "
"своему усмотрению. \n"
"У вас есть полный язык.</p>"

#: in_ed/Compile_Time_Debugging.html:127
msgid ""
"<p><a name=\"d811\"></a>This printing at macro call time does not\n"
"influence the result in any way. Whether you have debug statement in\n"
"the macro or not, the result is properly fed into the compiler, while\n"
"the debug print statements just go to stdout or stderr or debugerr or\n"
"whatever you specified.</p>"
msgstr ""
"<p><a name=\"d811\"></a>Эта печать во время вызова макроса никак не влияет "
"на результат. \n"
"Независимо от того, есть ли у вас оператор отладки в макросе или нет, "
"результат правильно \n"
"передается в компилятор, в то время как операторы печати отладки просто "
"переходят(выводят)\n"
"в stdout, stderr или debugerr или что-то еще, что вы указали.</p>"

#: in_ed/Compile_Time_Debugging.html:133
msgid ""
"<p><a name=\"e3ef\"></a>In fact your can also open a file at compile\n"
"time and put all your print statements from macroexpansion into it,\n"
"for later reference.</p>"
msgstr ""
"<p><a name=\"e3ef\"></a>Фактически, вы также можете открыть файл во время \n"
"компиляции и поместить в него все операторы печати из макрорасширения \n"
"для дальнейшего использования. </p>"

#: in_ed/Compile_Time_Debugging.html:155
msgid ""
"<pre class=\"western\"><a name=\"0153\"></a>(defvar *expandlog* nil)\n"
"(setf *expandlog*\n"
"      (open &quot;expand.log&quot; :direction :output\n"
"            :if-does-not-exist :create\n"
"            :if-exists :append))\n"
"(defmacro defunt (name (&amp;rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype\n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (format *expandlog*\n"
"                             &quot;~%debug args: ~a ~a&quot; \n"
"                             arg (type-of arg))\n"
"                     (push\n"
"                      (if (listp arg)</pre>\n"
"<p>\n"
"<a name=\"6e2b\"></a>You can do that a million different ways. For\n"
"example if you only want the log around some macro invocations:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"0153\"></a>(defvar *expandlog* nil)\n"
"(setf *expandlog*\n"
"      (open &quot;expand.log&quot; :direction :output\n"
"            :if-does-not-exist :create\n"
"            :if-exists :append))\n"
"(defmacro defunt (name (&amp;rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype\n"
"               (function\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (format *expandlog*\n"
"                             &quot;~%debug args: ~a ~a&quot; \n"
"                             arg (type-of arg))\n"
"                     (push\n"
"                      (if (listp arg)</pre>\n"
"<p>\n"
"<a name=\"6e2b\"></a>Вы можете сделать это миллионами разных способов. \n"
"Например, если вам нужен журнал только для некоторых вызовов макросов: </p>"

#: in_ed/Compile_Time_Debugging.html:175
msgid ""
"<pre class=\"western\"><a name=\"330a\"></a>(defvar *expandlog* nil)\n"
"(defmacro defunt (name (&amp;rest args) &amp;body body)\n"
"  ;; as above)\n"
";; use macro without logfile printing\n"
"(defunt2 meh6a (p1 p2)\n"
"<a name=\"9f9e\"></a>  (+ p1 p2));; use macro with logfile printing\n"
"(setf *expandlog*\n"
"      (open &quot;expand.log&quot; :direction :output\n"
"            :if-does-not-exist :create\n"
"            :if-exists :append))\n"
"(defunt2 meh6b ((int p1) p2)\n"
"  (+ p1 p2)))\n"
"(close *expandlog*)\n"
";; important.  (format nil ...) works fine, print nothing\n"
";; (format closedfd ...) does not work\n"
"(setf *expandlog* nil)</pre>\n"
"<p>\n"
"<a name=\"8bd2\"></a>file âexpand.logâ contains:</p>"
msgstr ""

#: in_ed/Compile_Time_Debugging.html:182
msgid ""
"<pre class=\"western\"><a name=\"0504\"></a>debug args: (INT P1) CONS\n"
"debug args: P2 SYMBOL</pre>\n"
"<p>\n"
"<a name=\"68fd\"></a>Which is only the output from the second call to\n"
"meh6b, which is what we want.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"0504\"></a>debug args: (INT P1) CONS\n"
"debug args: P2 SYMBOL</pre>\n"
"<p>\n"
"<a name=\"68fd\"></a>Это только результат второго вызова meh6b, \n"
"чего мы и хотим.</p>"

#: in_ed/Compile_Time_Debugging.html:191
msgid ""
"<p><a name=\"92e0\"></a>It would be better style to put a (if\n"
"*expandlog* (format *expandlog*â¦) in the defunt2 macro. (format nil\n"
"â¦) works, but does the formatting and then sends it to /dev/null.\n"
"The formatting can cost time. Keep in mind that this time is taken\n"
"not at runtime, but at macroexpand time. The user wouldnât suffer\n"
"from the slowdown, just the lazy programmer.</p>"
msgstr ""
"<p><a name=\"92e0\"></a>Было бы лучше поместить (if *expandlog* (format "
"*expandlog*…) \n"
"в макрос defunt2.  (format nil …)  работает, но выполняет форматирование, а "
"затем \n"
"отправляет его в /dev/null. Форматирование может стоить Имейте в виду, что "
"это время \n"
"берется не во время выполнения, а во время макрорасширения. Пользователь не "
"пострадает \n"
"от замедления, только ленивый программист.</p>"

#: in_ed/Compile_Time_Debugging.html:199
msgid ""
"<p><a name=\"8d55\"></a>Since (format meh â¦) does not work when meh\n"
"is neither an open, working file descriptor nor nil nor t, you should\n"
"guard this in a block that ensures that some statements happen even\n"
"if nonlocal exit happens. This is equivalent to :finally clauses in\n"
"other languages exception handling:</p>"
msgstr ""
"<p><a name=\"8d55\"></a>Поскольку (format meh …) не работает, когда meh \n"
"не является ни открытым, ни рабочим дескриптором файла, ни nil, ни t, \n"
"вы должны защитить это в блоке, который гарантирует, что некоторые "
"операторы \n"
"будут выполняться, даже если произойдет нелокальный выход. Это "
"эквивалентно \n"
"предложениям :finally в других языках обработки: </p>"

#: in_ed/Compile_Time_Debugging.html:221
msgid ""
"<pre class=\"western\"><a name=\"acd6\"></a>(unwind-protect\n"
"     (progn\n"
"       ;; protected body\n"
"       (setf *expandlog*\n"
"             (open &quot;expand.log&quot; :direction :output\n"
"                   :if-does-not-exist :create\n"
"                   :if-exists :append))\n"
"       (defunt2 meh6b ((int p1) p2)\n"
"         (+ p1 p2)))\n"
"  (progn\n"
"    ;; these statements will be executed no matter what.\n"
"    ;; If the protected body has a nonlocal exit (throws\n"
"    ;; an exception through here, or if you interrupt\n"
"    ;; it with Control-C then these statements are still\n"
"    ;; executed like in a &quot;finally&quot; clause\n"
"    (close *expandlog*)\n"
"    (setf *expandlog* nil)</pre>\n"
"<p>\n"
"<a name=\"e5a5\"></a>So, yes, you have the full language at compile\n"
"time, even exception handling at compile time.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"acd6\"></a>(unwind-protect\n"
"     (progn\n"
"       ;; protected body\n"
"       (setf *expandlog*\n"
"             (open &quot;expand.log&quot; :direction :output\n"
"                   :if-does-not-exist :create\n"
"                   :if-exists :append))\n"
"       (defunt2 meh6b ((int p1) p2)\n"
"         (+ p1 p2)))\n"
"  (progn\n"
"    ;; these statements will be executed no matter what.\n"
"    ;; If the protected body has a nonlocal exit (throws\n"
"    ;; an exception through here, or if you interrupt\n"
"    ;; it with Control-C then these statements are still\n"
"    ;; executed like in a &quot;finally&quot; clause\n"
"    (close *expandlog*)\n"
"    (setf *expandlog* nil)</pre>\n"
"<p>\n"
"<a name=\"e5a5\"></a>Итак, да, у вас есть полный язык во время компиляции, \n"
"даже обработка исключений во время компиляции.</p>"

#: in_ed/Compile_Time_Debugging.html:240
msgid ""
"<h2 class=\"western\"><a name=\"bf57\"></a>A quick look at performance</h2>\n"
"<pre class=\"western\"><a name=\"25a6\"></a>(declaim (ftype (function "
"(fixnum fixnum) fixnum) moo1)\n"
"         (inline moo1))\n"
"(defun moo1 (p1 p2)\n"
"  (+ p1 p2))\n"
"(defun caller1 ()\n"
"  (let ((n 42)\n"
"        (new (+ (moo1 1\n"
"                      ;; disable compiler optimization\n"
"                      (the fixnum\n"
"                           (parse-integer &quot;2&quot;))))))\n"
"    (declare (fixnum n new))\n"
"    (if (= new 45)\n"
"        (print 'yes)\n"
"        (print 'no))))</pre>\n"
"<p>\n"
"<a name=\"a760\"></a>Disassemble it:</p>"
msgstr ""
"<h2 class=\"western\"><a name=\"bf57\"></a>Быстрый взгляд на "
"производительность </h2>\n"
"<pre class=\"western\"><a name=\"25a6\"></a>(declaim (ftype (function "
"(fixnum fixnum) fixnum) moo1)\n"
"         (inline moo1))\n"
"(defun moo1 (p1 p2)\n"
"  (+ p1 p2))\n"
"(defun caller1 ()\n"
"  (let ((n 42)\n"
"        (new (+ (moo1 1\n"
"                      ;; disable compiler optimization\n"
"                      (the fixnum\n"
"                           (parse-integer &quot;2&quot;))))))\n"
"    (declare (fixnum n new))\n"
"    (if (= new 45)\n"
"        (print 'yes)\n"
"        (print 'no))))</pre>\n"
"<p>\n"
"<a name=\"a760\"></a>Дизассемблируем его:</p>"

#: in_ed/Compile_Time_Debugging.html:243
msgid ""
"<pre class=\"western\"><a name=\"18ff\"></a>Yes, Master? CL-USER&gt; "
"(disassemble 'caller1)"
msgstr ""

#: in_ed/Compile_Time_Debugging.html:268
msgid ""
"; disassembly for "
"CALLER1                                                                                                                                    \n"
"; Size: 78 bytes. Origin: "
"#x52E3FF56                                                                                                                         \n"
"; 56:       4883EC10         SUB RSP, 16                      ; no-arg-"
"parsing entry "
"point                                                                   \n"
"; 5A:       488B158FFFFFFF   MOV RDX, [RIP-113]               ; "
"&quot;2&quot;                                                                                          \n"
"; 61:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 66:       48892C24         MOV [RSP], "
"RBP                                                                                                                  \n"
"; 6A:       488BEC           MOV RBP, "
"RSP                                                                                                                    \n"
"; 6D:       E8065BE6FF       CALL #x52CA5A78                  ; #&lt;FDEFN "
"PARSE-"
"INTEGER&gt;                                                                       \n"
"; 72:       4883C202         ADD RDX, "
"2                                                                                                                      \n"
"; 76:       4883FA5A         CMP RDX, "
"90                                                                                                                     \n"
"; 7A:       7514             JNE "
"L0                                                                                                                          \n"
"; 7C:       488B157DFFFFFF   MOV RDX, [RIP-131]               ; "
"'YES                                                                                         \n"
"; 83:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 88:       FF7508           PUSH QWORD PTR [RBP"
"+8]                                                                                                          \n"
"; 8B:       E94831EBFF       JMP #x52CF30D8                   ; #&lt;FDEFN "
"PRINT&gt;                                                                               \n"
"; 90: L0:   488B1579FFFFFF   MOV RDX, [RIP-135]               ; "
"'NO                                                                                          \n"
"; 97:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 9C:       FF7508           PUSH QWORD PTR [RBP"
"+8]                                                                                                          \n"
"; 9F:       E93431EBFF       JMP #x52CF30D8                   ; #&lt;FDEFN "
"PRINT&gt;                                                                               \n"
"NIL                                                                                                                                                          \n"
"Yes, Master? CL-USER&gt;</pre>\n"
"<p>\n"
"<a name=\"4f49\"></a>About what we expected. Ignore the function calls\n"
"to convert the integer and look at the actual arithmetic. Looks good.</p>"
msgstr ""
"; disassembly for "
"CALLER1                                                                                                                                    \n"
"; Size: 78 bytes. Origin: "
"#x52E3FF56                                                                                                                         \n"
"; 56:       4883EC10         SUB RSP, 16                      ; no-arg-"
"parsing entry "
"point                                                                   \n"
"; 5A:       488B158FFFFFFF   MOV RDX, [RIP-113]               ; "
"&quot;2&quot;                                                                                          \n"
"; 61:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 66:       48892C24         MOV [RSP], "
"RBP                                                                                                                  \n"
"; 6A:       488BEC           MOV RBP, "
"RSP                                                                                                                    \n"
"; 6D:       E8065BE6FF       CALL #x52CA5A78                  ; #&lt;FDEFN "
"PARSE-"
"INTEGER&gt;                                                                       \n"
"; 72:       4883C202         ADD RDX, "
"2                                                                                                                      \n"
"; 76:       4883FA5A         CMP RDX, "
"90                                                                                                                     \n"
"; 7A:       7514             JNE "
"L0                                                                                                                          \n"
"; 7C:       488B157DFFFFFF   MOV RDX, [RIP-131]               ; "
"'YES                                                                                         \n"
"; 83:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 88:       FF7508           PUSH QWORD PTR [RBP"
"+8]                                                                                                          \n"
"; 8B:       E94831EBFF       JMP #x52CF30D8                   ; #&lt;FDEFN "
"PRINT&gt;                                                                               \n"
"; 90: L0:   488B1579FFFFFF   MOV RDX, [RIP-135]               ; "
"'NO                                                                                          \n"
"; 97:       B902000000       MOV ECX, "
"2                                                                                                                      \n"
"; 9C:       FF7508           PUSH QWORD PTR [RBP"
"+8]                                                                                                          \n"
"; 9F:       E93431EBFF       JMP #x52CF30D8                   ; #&lt;FDEFN "
"PRINT&gt;                                                                               \n"
"NIL                                                                                                                                                          \n"
"Yes, Master? CL-USER&gt;</pre>\n"
"<p>\n"
"<a name=\"4f49\"></a>О том, чего мы ожидали. Игнорируйте вызовы функций, \n"
"чтобы преобразовать целое число, и посмотрите на фактическую арифметику.\n"
"Выглядит хорошо.</p>"

#: in_ed/Compile_Time_Debugging.html:276
msgid ""
"<p><a name=\"de30\"></a>Note that although SBCL normally uses tag bits\n"
"to identify integers it has omitted type tagging in this situation\n"
"since none of the integers involved escape this function. So they are\n"
"raw machine works, no tags. If they came in as parameters or going\n"
"out as return values they would have to be tagged.</p>"
msgstr ""
"<p><a name=\"de30\"></a>Обратите внимание, что хотя SBCL обычно использует \n"
"биты тегов для идентификации целых чисел, в этой ситуации не используется \n"
"тегирование типов, поскольку ни одно из задействованных целых чисел не "
"экранирует \n"
"эту функцию. Так что это сырые машинные работы, без тегов. Если они "
"поступают \n"
"как параметры или выходят как возвращаемые значения, их нужно будет пометить."
"</p>"

#: in_ed/Compile_Time_Debugging.html:282
msgid ""
"<p><a name=\"ec2c\"></a>This can be very important, and I mean business\n"
"building imports, when your Lisp code wants to access C data in a\n"
"memory mapped region. Say:</p>"
msgstr ""
"<p><a name=\"ec2c\"></a>Это может быть очень важно, и я имею в виду импорт \n"
"для построения бизнеса, когда ваш код на Лиспе хочет получить доступ к "
"данным \n"
"C в области отображения памяти. Скажем: </p>"

#: in_ed/Compile_Time_Debugging.html:302
msgid ""
"<pre class=\"western\"><a name=\"2d1f\"></a>struct foo {\n"
"  int bar;\n"
"  int baz;\n"
"} array[1024];</pre>\n"
"<p>\n"
"<a name=\"d1c7\"></a>SBCL and Clasp can access those slots in their\n"
"structure instances inside that array via a simple pointer deference\n"
"and then using the machine word. There is no conversion, and â more\n"
"importantly- there is no need to create any sort of âforeign\n"
"objectâ wrapper that would have to go through memory allocation and\n"
"whatnot. It is very rare for languages to be able to access raw data\n"
"in memory regions this way. In most cases that plan to âwrite the\n"
"low level parts in C and the higher level algorithms in &lt;foolang&gt;â\n"
"breaks down because of the need to convert the C data, in most cases\n"
"involving something that cause memory allocation. Thatâs very slow.\n"
"A malloc call, or a GC equivalent alloc and dealloc is incredibly\n"
"much more expensive than a pointer deference and arithmetic on a raw\n"
"word.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"2d1f\"></a>struct foo {\n"
"  int bar;\n"
"  int baz;\n"
"} array[1024];</pre>\n"
"<p>\n"
"<a name=\"d1c7\"></a>SBCL и Clasp могут получить доступ к этим слотам в "
"своих \n"
"экземплярах структуры внутри этого массива с помощью простого указателя, \n"
"а затем с помощью машинного слова. Здесь нет преобразования и, что более "
"важно, \n"
"нет необходимости создавать какую-либо оболочку для «посторонних объектов»,\n"
" которая должна была бы выполнять выделение памяти и тому подобное. \n"
"Языки очень редко могут получить доступ к необработанным данным в областях "
"памяти \n"
"таким образом. В большинстве случаев план «писать низкоуровневые части на "
"C \n"
"и алгоритмы более высокого уровня в  &lt;foolang&gt; терпит неудачу из-за \n"
"необходимости конвертировать данные C, в большинстве случаев вовлекая что-"
"то, \n"
"что вызывает выделение памяти. Это очень медленно. Вызов malloc или "
"эквивалентные \n"
"GC alloc и dealloc невероятно дороже, чем определение указателя и "
"арифметические \n"
"операции с необработанным словом. </p>"

#: in_ed/Compile_Time_Debugging.html:310
msgid ""
"<p><a name=\"88d7\"></a>You cannot make those mixed language systems\n"
"the way that ITA did with QPX (C data, Lisp algorithm) without\n"
"overhead-free raw word access. Even having to go through a function\n"
"call (as opposed to a simple dereference) puts you back by an order\n"
"of magnitude.</p>"
msgstr ""
"<p><a name=\"88d7\"></a>Вы не можете создать эти смешанные языковые системы "
"так, \n"
"как это сделала ITA с QPX (данные C, алгоритм Lisp), без доступа к исходным "
"словам \n"
"без накладных расходов. Даже необходимость выполнения вызова функции (в "
"отличие от простого разыменования) возвращает вас на порядок назад. </p>"

#: in_ed/Compile_Time_Debugging.html:313
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/Compile_Time_Debugging.html:315
msgid "</p>"
msgstr ""

#: in_ed/Compile_Time_Debugging.html:318
msgid ""
"</body>\n"
"</html>"
msgstr ""
