#
# NuINu <don't@send.my>, 2021, 2022.
#
#. extracted from in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 10:15+0300\n"
"PO-Revision-Date: 2022-01-05 23:16+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:32
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-12-28T08:11:02.891849983\"/>\n"
"\t<meta name=\"changed\" content=\"2021-12-28T10:04:19.434510581\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th5.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th5.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th6.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th6.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Lessons learned after working one year as a\n"
"Common Lisp Developer - The Good</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-12-28T08:11:02.891849983\"/>\n"
"\t<meta name=\"changed\" content=\"2021-12-28T10:04:19.434510581\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th5.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th5.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th6.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th6.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Карлос Д. - Уроки, полученные после одного года работы "
"разработчиком Common Lisp - Хорошее </h1>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:36
msgid ""
"<p><a href=\"https://cdagostino.io/posts/2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html\">March\n"
"28, 2018</a> \n"
"</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:43
msgid ""
"<p><em>I intented this to be a small post with some lessons learned\n"
"after working one year as a CL dev, however it turned out quite long\n"
"(two parts!). As always: All opinions are my own. This post is not\n"
"endorsed by anybody.</em></p>"
msgstr ""
"<p><em>Я задумал это как небольшой пост с некоторыми уроками, извлеченными "
"после \n"
"одного года работы разработчиком CL, однако он оказался довольно длинным "
"(две части!). \n"
"Как всегда: все мнения мои собственные. Этот пост никем не одобрен.</em></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:51
msgid ""
"<p><em>This post includes some Lisp code that works for AllegroCL, so\n"
"all the âlessonsâ noted here are after a year of writing CL using\n"
"Franzâs AllegroCL compiler, which is a very much batteries-included\n"
"Common Lisp implementation. So my experience will differ from someone\n"
"who has professional experience with, say, SBCL or LispWorks.</em></p>"
msgstr ""
"<p><em>Этот пост включает в себя некоторый код Lisp, который работает для "
"AllegroCL, \n"
"поэтому все «уроки», упомянутые здесь, сделаны после года написания CL с \n"
"использованием компилятора Franz AllegroCL, который представляет собой "
"реализацию \n"
"Common Lisp с очень большим количеством батарей. Так что мой опыт будет "
"отличаться \n"
"от опыта человека, имеющего профессиональный опыт, скажем, с SBCL или "
"LispWorks.</em></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:54
msgid "<h2 class=\"western\"><a name=\"intro\"></a>Intro</h2>"
msgstr "<h2 class=\"western\"><a name=\"intro\"></a>вступление</h2>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:59
msgid ""
"<p>If it wasnât clear already, my favorite language is Haskell. If\n"
"I could, Iâd work professionally as a Haskell dev always, but\n"
"thatâs not possible, as Haskell jobs are hard to come by, because\n"
"honestly there arenât that many places where Haskell fits.</p>"
msgstr ""
"<p>Если это еще  ясно, мой любимый язык - Haskell. Если бы я мог, я бы "
"всегда \n"
"профессионально работал разработчиком Haskell, но это невозможно, так как \n"
"работу с Haskell найти сложно, потому что, честно говоря, не так много "
"мест, \n"
"где подходит Haskell.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:62
msgid ""
"<h2 class=\"western\"><a name=\"landing-a-cl-job\"></a>Landing a CL job</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"landing-a-cl-job\"></a>Получение работы CL</"
"h2>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:71
msgid ""
"<p>As Iâve mentioned previously, I took up a job writing CL full\n"
"time. I was fortunate enough to be of interest to <a href=\"https://www."
"ravenpack.com/\">the\n"
"company</a>, even having CL experience limited to just tinkering at\n"
"home with it and various other Lisps. I didnât even know Emacs,\n"
"which of course wasnât required, but if youâre writing CL\n"
"professionally in anything other than Emacs, please send me a message\n"
"because Iâm interested in your setup â I couldnât make anything\n"
"work smoothly aside from Emacs+Slime/Sly/Whathaveyou.</p>"
msgstr ""
"<p>Как я уже упоминал ранее, я стал писать CL на полную ставку. Мне "
"посчастливилось быть \n"
"интересным для компании, даже имея опыт работы с CL, который ограничивался "
"просто вознёй \n"
"с ним дома и с другими Lisp-ами. Я даже не знал Emacs, что, конечно, не "
"требовалось, но \n"
"если вы пишете CL профессионально в чем-либо, кроме Emacs, пожалуйста, "
"отправьте мне \n"
"сообщение, потому что я заинтересован в вашей настройке - я не мог работать "
"без \n"
"проблем, кроме как в Emacs + Slime / Sly / Или что там у вас.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:75
msgid ""
"<h3 class=\"western\"><a name=\"book-recommendation\"></a>Book\n"
"recommendation</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"book-recommendation\"></a>Рекомендация "
"книги</h3>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:82
msgid ""
"<p><a name=\"fnref1\"></a>Once I had accepted a job offer, I had to\n"
"prepare and learn CL <strong>really fast</strong>. I was told I\n"
"shouldnât hurry, but I felt like I had to anyway. I didnât want\n"
"to be the guy asking ridiculous stuff on my first day<a href=\"2018-03-28-"
"one-year-common-lisp-developer-part-1-the-good.html#fn1\"><sup>1</sup></a>.\n"
"Of course, a lot of things just come with experience, but I found a\n"
"book that allowed me to hit the ground running.</p>"
msgstr ""
"<p><a name=\"fnref1\"></a>Как только я принял предложение о работе, мне "
"нужно было <strong>очень быстро</strong>\n"
"подготовиться и изучить CL. Мне сказали, что мне не следует торопиться, но я "
"все равно \n"
"чувствовал, что должен. Я не хотел быть тем парнем, который задает глупости "
"в свой первый \n"
"день<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref"
"\"><sup>1</sup></a>. \n"
"Конечно, многое приходит только с опытом, но я нашел книгу, которая "
"позволила мне сразу же \n"
"взяться за дело.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:87
msgid ""
"<p>The book is called <strong>Practical Common Lisp, by Peter Seibel</"
"strong>,\n"
"and it can be found in its online version here:</p>"
msgstr ""
"<p>Книга Питера Сейбеля называется <strong>Practical Common Lisp, by Peter "
"Seibel</strong>, и ее онлайн-версию можно найти здесь(есть русский перевод):"
"</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:93
msgid ""
"<p>â<b>Practical Common Lispâ by Peter\n"
"Seibel</b><br/>\n"
"<a href=\"http://gigamonkeys.com/book/\">http://gigamonkeys.com/book/</a></p>"
msgstr ""
"<p>â<b>Practical Common Lispâ by Peter\n"
"Seibel</b><br/>\n"
"<a href=\"http://gigamonkeys.com/book/\">http://gigamonkeys.com/book/</a></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:102
msgid ""
"<p>I have bookmarked many links from it, and I also have the\n"
"hardcover version. It is a timeless book. You donât have to get the\n"
"hard cover version, of course, as itâs freely online and itâs an\n"
"amazing reference to bookmark for when youâre writing some <code class="
"\"western\">format</code>\n"
"expression and you forgot how the hell to print floats with 3 decimal\n"
"spaces.</p>"
msgstr ""
"<p>Я добавил в закладки много ссылок из неё, и у меня также есть версия в "
"твердом переплете. \n"
"Это бессмертная книга. Вам, конечно, не обязательно получать версию в "
"твердом переплете, \n"
"поскольку она находится в свободном доступе в Интернете и является отличным "
"справочником по\n"
"закладкам, когда вы пишете какое-то выражение <code>format</code> и забыли, "
"как, черт возьми,\n"
"печатать числа с 3 десятичными разрядами.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:105
msgid "<h2 class=\"western\"><a name=\"lessons\"></a>Lessons</h2>"
msgstr "<h2 class=\"western\"><a name=\"lessons\"></a>Уроки</h2>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:110
msgid ""
"<p>So many things that I consider to be âgoodâ of Lisp can spill\n"
"into the âbadâ very easily, and viceversa. I think that might be\n"
"a characteristic of almost everything: Doing too much of something\n"
"Good can (and most likely will) be Bad.</p>"
msgstr ""
"<p>Так много вещей, которые я считаю «хорошими» в Лиспе, могут очень легко "
"превратиться \n"
"в «плохие», и наоборот. Я думаю, это может быть характерной чертой почти "
"всего: слишком \n"
"много делающее что-то хорошее может стать (и, скорее всего, будет) плохим.</"
"p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:114
msgid ""
"<h3 class=\"western\"><a name=\"the-good-cl-is-fancy-and-fast\"></a>The\n"
"Good: CL is fancy and <em>fast</em></h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"the-good-cl-is-fancy-and-fast\"></a>Плюсы: "
"CL модный и  <em>быстрый</em></h3>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:118
msgid ""
"<p>Some people (even - now former - coworkers) would constantly\n"
"mention the fact that parentheses were âuglyâ. In my opinion,\n"
"thatâs absolutely false.</p>"
msgstr ""
"<p>Некоторые люди (даже бывшие коллеги) постоянно упоминали о том, что "
"скобки «некрасивы». \n"
"На мой взгляд, это абсолютно неверно.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:125
msgid ""
"<p>Parentheses are one of the very few syntax tokens of the language.\n"
"In a language like Haskell you have some reserved âtokensâ of the\n"
"language, which you cannot modify, and you cannot have any identifier\n"
"name clash with a reserved token.</p>"
msgstr ""
"<p>Скобки - один из немногих синтаксических знаков языка. В таком языке, как "
"Haskell, \n"
"у вас есть некоторые зарезервированные «токены» языка, которые вы не можете "
"изменить, \n"
"и у вас не может быть конфликта имени идентификатора с зарезервированным "
"токеном.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:134
msgid ""
"<p><a name=\"fnref2\"></a>So for example, in Haskell I canât call an\n"
"identifier <code class=\"western\">let</code> or <code class=\"western"
"\">module</code>\n"
"because itâs expecting those to be reserved words of the language<a href="
"\"2018-03-28-one-year-common-lisp-developer-part-1-the-good."
"html#fn2\"><sup>2</sup></a>.\n"
"Much in the same way that in Java you canât call a variable <code class="
"\"western\">class</code>,\n"
"so everyone just writes <code class=\"western\">klass</code> when\n"
"theyâre doing some obviously misguided things with Reflection.</p>"
msgstr ""
"<p><a name=\"fnref2\"></a>Так, например, в Haskell я не могу вызвать "
"идентификатор <code>let</code> или \n"
"<code>module</code>, потому что он ожидает, что это будут зарезервированные "
"слова \n"
"языка<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref"
"\"><sup>2</sup></a>. \n"
"Во многом так же, как в Java вы не можете вызвать переменный <code>class</"
"code>, поэтому \n"
"все просто пишут <code>klass</code>, когда они делают некоторые явно "
"неверные вещи с \n"
"помощью Reflection.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:139
msgid ""
"<p>Lisp can also be <em>fast</em>. Like crazy fast. Iâll write\n"
"about that below.</p>"
msgstr ""
"<p>Lisp также может быть <em>быстрым</em>. Безумно быстрым. Об этом я напишу "
"ниже.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:143
msgid ""
"<h5 class=\"western\"><a name=\"one-structure-for-everything\"></a>One\n"
"structure for everything</h5>"
msgstr ""
"<h5 class=\"western\"><a name=\"one-structure-for-everything\"></a>Одна "
"структура для всего</h5>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:150
msgid ""
"<p>As a lot of people know, <strong>LISP</strong> stands for <strong>LIS</"
"strong>t\n"
"<strong>P</strong>rocessing. The languate itself <strong>is a darn\n"
"list</strong>, and indeed, in the beginning, <em>everything</em> was\n"
"a List. However, thatâs no longer true: thereâs arrays, structs,\n"
"classes (and a pretty well-developed class hierarchy), a sensible\n"
"condition system, etc.</p>"
msgstr ""
"<p>Как известно многим, <strong>LISP</strong> расшифровывается как \n"
"<strong>LIS</strong>t <strong>P</strong>rocessing. Сам язык - это "
"<strong>чертов список</strong>, \n"
"и действительно, вначале все было списком. Однако это уже не так: есть "
"массивы, структуры, \n"
"классы (и довольно хорошо развитая иерархия классов), разумная система "
"условий и т. Д.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:155
msgid ""
"<p>Regarding the condition system in CL, itâs not <em>just</em>\n"
"sensible, itâs unmatched. Feel free to convince yourself here:</p>"
msgstr ""
"<p>Что касается системы условий в CL, она не <em>просто</em> разумна, но и "
"не имеет себе равных. \n"
"Не стесняйтесь убедить себя здесь:</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:161
msgid ""
"<p>â<b>Condition Handling in the Lisp Language Familyâ by Kent M.\n"
"Pitman</b><br/>\n"
"<a href=\"http://www.nhplace.com/kent/Papers/Condition-Handling-2001.html"
"\">http://www.nhplace.com/kent/Papers/Condition-Handling-2001.html</a></p>"
msgstr ""
"<p>â<b>Condition Handling in the Lisp Language Familyâ by Kent M.\n"
"Pitman</b><br/>\n"
"<a href=\"http://www.nhplace.com/kent/Papers/Condition-Handling-2001.html"
"\">http://www.nhplace.com/kent/Papers/Condition-Handling-2001.html</a></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:165
msgid ""
"<h5 class=\"western\"><a name=\"almost-everything-is-a-macro\"></a>Almost\n"
"everything is a macro</h5>"
msgstr ""
"<h5 class=\"western\"><a name=\"almost-everything-is-a-macro\"></a>Почти все "
"является макросом</h5>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:168
msgid ""
"<p>You know what was a fun experience? Seeing just how many things in\n"
"Lisp are a macro.</p>"
msgstr ""
"<p>Вы знаете, что было забавным опытом? Видеть, сколько вещей в Лиспе "
"являются макросами.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:176
msgid ""
"<p>Youâd think <code class=\"western\"><a href=\"http://clhs.lisp.se/Body/"
"m_defun.htm\">defun</a></code>\n"
"(to define a function) would be some sort of built-in language\n"
"feature that adds some AST to some internal function mapping\n"
"mechanism, right? Well, yes it <em>does do that</em>, but itâs not\n"
"built-in!</p>"
msgstr ""
"<p>Вы могли бы подумать, что a <href=\"http://clhs.lisp.se/Body/m_defun.htm"
"\"><code>defun</code></a>\n"
"(для определения функции) будет своего рода встроенной функцией языка, "
"которая добавляет \n"
"некоторый AST к некоторому внутреннему механизму сопоставления функций, "
"верно? Что ж, да, \n"
"она это делает, но она не встроена!</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:198
msgid ""
"<div id=\"gist88316462\" dir=\"ltr\">\n"
"\t<pre class=\"western\"><font size=\"1\" style=\"font-size: 8pt\">CL-"
"USER&gt; (macroexpand `(defun foo () 'foo))</font>\n"
"<font size=\"1\" style=\"font-size: 8pt\">(PROGN</font>\n"
"  <font size=\"1\" style=\"font-size: 8pt\">(EVAL-WHEN (:COMPILE-TOPLEVEL)</"
"font>\n"
"    <font size=\"1\" style=\"font-size: 8pt\">(EXCL::CHECK-LOCK-DEFINITIONS-"
"COMPILE-TIME 'FOO 'FUNCTION 'DEFUN (FBOUNDP 'FOO))</font>\n"
"    <font size=\"1\" style=\"font-size: 8pt\">(PUSH 'FOO EXCL::.FUNCTIONS-"
"DEFINED.</font>\n"
"          <font size=\"1\" style=\"font-size: 8pt\">(PROGN (EVAL-WHEN (:"
"COMPILE-TOPLEVEL)</font>\n"
"                   <font size=\"1\" style=\"font-size: 8pt\">(EXCL::CHECK-DE-"
"ARGDECL-CHANGE 'FOO 'NIL))</font>\n"
"                 <font size=\"1\" style=\"font-size: 8pt\">(DECLAIM (EXCL::"
"DYNAMIC-EXTENT-ARGUMENTS NIL FOO)))</font>\n"
"          <font size=\"1\" style=\"font-size: 8pt\">(SETF (FDEFINITION "
"'FOO)</font>\n"
"                <font size=\"1\" style=\"font-size: 8pt\">(LET ((EXCL::F "
"(NAMED-ANNOTATED-FUNCTION FOO (LAMBDA NIL (BLOCK FOO 'FOO)))))</font>\n"
"                  <font size=\"1\" style=\"font-size: 8pt\">(EXCL::SET-"
"FUNC_NAME EXCL::F 'FOO NIL) EXCL::F))</font>\n"
"          <font size=\"1\" style=\"font-size: 8pt\">(EXCL::PUT-PROPERTY 'FOO "
"NIL 'EXCL::%FUN-DOCUMENTATION)</font>\n"
"          <font size=\"1\" style=\"font-size: 8pt\">(RECORD-SOURCE-FILE "
"'FOO) 'FOO)))</font></pre>\n"
"</div>\n"
"<div id=\"Section1\" dir=\"ltr\">\n"
"\t<p style=\"margin-bottom: 0cm\"><a href=\"https://gist.github.com/"
"carlosdagos/ff9bca552369d56cbc9e2fb81b294fad/"
"raw/51ea831a63903dcaec7e263be9df0548e089c2af/defun-is-a-macro.lisp\">view\n"
"\traw</a> <a href=\"https://gist.github.com/carlosdagos/"
"ff9bca552369d56cbc9e2fb81b294fad#file-defun-is-a-macro-lisp\">defun-is-a-"
"macro.lisp\n"
"\t</a>hosted with â¤ by <a href=\"https://github.com/\">GitHub</a> \n"
"\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:202
msgid ""
"</div>\n"
"<div id=\"Section3\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:205
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:205"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:207
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:207"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:210
msgid "</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:214
msgid ""
"<p>I really donât know what that macroexpansion is <em>really</em>\n"
"doing, but I know the end result of it, which is that it adds a\n"
"function.</p>"
msgstr ""
"<p>На самом деле, я не знаю, что <em>реально</em> делает это "
"макрорасширение, но я знаю его конечный результат - добавление функции.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:220
msgid ""
"<p>How about <code class=\"western\"><a href=\"http://clhs.lisp.se/Body/"
"m_case_.htm\">case</a></code>?\n"
"Surely, <code class=\"western\">case</code> is a built-in mechanism,\n"
"right? Not so fast:</p>"
msgstr ""
"<p>Как насчет <code class=\"western\"><a href=\"http://clhs.lisp.se/Body/"
"m_case_.htm\">case</a></code>?\n"
"Конечно же, <code class=\"western\">case</code> - это встроенный механизм, "
"не так ли? \n"
"Не так быстро: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:233
msgid ""
"<div id=\"gist88316669\" dir=\"ltr\">\n"
"\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">CL-"
"USER&gt; (macroexpand `(case x ((:foo) 'foo) ((:bar) 'bar)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">(LET ()</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">(COND ((OR (EQL ':FOO X)) "
"'FOO)</font>\n"
"        <font size=\"2\" style=\"font-size: 10pt\">((OR (EQL ':BAR X)) "
"'BAR)))</font></pre>\n"
"</div>\n"
"<div id=\"Section7\" dir=\"ltr\">\n"
"\t<p style=\"margin-bottom: 0cm\"><a href=\"https://gist.github.com/"
"carlosdagos/b92fd39bcc311fde799d7f530a22b56f/"
"raw/5cbec977719cfaab276a4242106e46940effb727/case-is-a-macro.lisp\">view\n"
"\traw</a> <a href=\"https://gist.github.com/carlosdagos/"
"b92fd39bcc311fde799d7f530a22b56f#file-case-is-a-macro-lisp\">case-is-a-macro."
"lisp\n"
"\t</a>hosted with â¤ by <a href=\"https://github.com/\">GitHub</a> \n"
"\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:239
msgid ""
"</div>\n"
"<div id=\"Section9\" dir=\"ltr\">\n"
"\t<pre class=\"western\"></pre>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:243
msgid ""
"<p>So <code class=\"western\">case</code> is built on top of <code class="
"\"western\"><a href=\"http://clhs.lisp.se/Body/m_cond.htm\">cond</a></"
"code>!\n"
"So then, <code class=\"western\">cond</code> <strong>must</strong> be a\n"
"built-inâ¦ right? You can see where this is going:</p>"
msgstr ""
"<p>Итак, <code class=\"western\">case</code> построен на основе <code class="
"\"western\"><a href=\"http://clhs.lisp.se/Body/m_cond.htm\">cond</a></code>! "
"Значит, <code class=\"western\">cond</code> \n"
"<strong>должен</strong> быть встроенным… не так ли? Вы можете увидеть, к "
"чему это идет: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:258
msgid ""
"<div id=\"gist88316746\" dir=\"ltr\">\n"
"\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">CL-"
"USER&gt; (macroexpand  `(cond ((eq x :foo) 'foo)</font>\n"
"                              <font size=\"2\" style=\"font-size: 10pt"
"\">((eq x :bar) 'bar)</font>\n"
"                              <font size=\"2\" style=\"font-size: 10pt"
"\">(t           'baz)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">(IF (EQ X :FOO)</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(PROGN 'FOO)</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(COND ((EQ X :BAR) 'BAR) (T "
"'BAZ)))</font></pre>\n"
"</div>\n"
"<div id=\"Section13\" dir=\"ltr\">\n"
"\t<p style=\"margin-bottom: 0cm\"><a href=\"https://gist.github.com/"
"carlosdagos/39da016e13a365b29db444601acb7f4f/"
"raw/5b01e8f0ddee3452ed0960a209301b66fc4738a7/cond-is-a-recursive-macro.lisp"
"\">view\n"
"\traw</a> <a href=\"https://gist.github.com/"
"carlosdagos/39da016e13a365b29db444601acb7f4f#file-cond-is-a-recursive-macro-"
"lisp\">cond-is-a-recursive-macro.lisp\n"
"\t</a>hosted with â¤ by <a href=\"https://github.com/\">GitHub</a> \n"
"\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:264
msgid ""
"</div>\n"
"<div id=\"Section15\" dir=\"ltr\">\n"
"\t<pre class=\"western\"></pre>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:268
msgid ""
"<p>So <code class=\"western\">cond</code> is not only a macro, but a\n"
"recursive macro, built on top of <code class=\"western\">if</code> and\n"
"itself until some base case.</p>"
msgstr ""
"<p>Таким образом, <code class=\"western\">cond</code> - это не только "
"макрос, но и \n"
"рекурсивный макрос, построенный на основе <code class=\"western\">if</code> "
"и самого себя \n"
"до некоторого базового случая.\n"
"</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:274
msgid ""
"<p>Now <a href=\"http://clhs.lisp.se/Body/s_if.htm\"><code class=\"western"
"\">if</code>\n"
"<strong>is</strong> a special operator</a>, but to me it was\n"
"eye-opening just how many forms are just macros on top of macros.</p>"
msgstr ""
"<p>Здесь <a href=\"http://clhs.lisp.se/Body/s_if.htm\"><code class=\"western"
"\">if</code> - \n"
"это специальный оператор</a>, но для меня это открыло глаза, сколько форм - "
"это просто \n"
"макросы поверх макросов.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:281
msgid ""
"<h5 class=\"western\"><a name=\"you-can-talk-with-the-compiler-lot-i.e.-the-"
"programmable-programming-language\"></a>\n"
"You can talk with the compiler lot (i.e.&nbsp;âthe programmable\n"
"programming languageâ)</h5>\n"
"<h6 class=\"western\"><a name=\"execute-code-in-different-stages-of-the-"
"compiler\"></a>\n"
"Execute code in different stages of the compiler</h6>"
msgstr ""
"<h5 class=\"western\"><a name=\"you-can-talk-with-the-compiler-lot-i.e.-the-"
"programmable-programming-language\"></a>\n"
"Вы можете поговорить с компилятором (т.е. «программируемым языком "
"программирования»)</h5>\n"
"<h6 class=\"western\"><a name=\"execute-code-in-different-stages-of-the-"
"compiler\"></a>\n"
"Выполнять код на разных этапах компилятора </h6>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:283
msgid "<p>There are so many great things you can do in CL.</p>"
msgstr "<p>В CL можно сделать так много замечательных вещей.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:290
msgid ""
"<p>Do you want to declare a function that will <em>only</em> be\n"
"available at compile time? Or what about performing some action, like\n"
"instructing the compiler to optimize the file being compiled for\n"
"maximum speed?</p>"
msgstr ""
"<p>Вы хотите объявить функцию, которая будет доступна <em>только</em> во "
"время компиляции? \n"
"Или как насчет выполнения какого-либо действия, например, указания "
"компилятору оптимизировать\n"
"компилируемый файл для максимальной скорости?</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:298
msgid ""
"<p>Fine: Just use <code class=\"western\">eval-when</code>! The\n"
"<a href=\"http://clhs.lisp.se/Body/s_eval_w.htm\"><code class=\"western"
"\">eval-when</code>\n"
"<em>special operator</em></a> will allow you to load and execute\n"
"pieces of code during the different stages of the compiler, and this\n"
"can be immensely powerful.</p>"
msgstr ""
"<p>Хорошо: просто используйте <code class=\"western\">eval-when</code>! \n"
"<a href=\"http://clhs.lisp.se/Body/s_eval_w.htm\"><em>Специальный оператор</"
"em>  \n"
"<code class=\"western\">eval-when</code></a> позволит вам загружать и "
"выполнять фрагменты кода \n"
"на разных этапах компилятора, и это может быть чрезвычайно мощным.\n"
"</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:302
msgid ""
"<p>Can this get tricky? Of course it can, just ask <a href=\"https://twitter."
"com/fare\">Fare</a>:</p>"
msgstr ""
"<p>Это может быть сложно? Конечно, может, просто спросите  <a href=\"https://"
"twitter.com/fare\">Fare</a>:</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:307
msgid ""
"<p>â<b>EVAL-WHEN considered harmful to your mental healthâ by\n"
"FranÃ§ois-RenÃ© Rideau</b> <a href=\"https://fare.livejournal.com/146698.html"
"\">https://fare.livejournal.com/146698.html</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:311
msgid ""
"<h6 class=\"western\"><a name=\"only-compile-expressions-when-certain-"
"features-are-available\"></a>\n"
"Only compile expressions when certain âfeaturesâ are available</h6>"
msgstr ""
"<h6 class=\"western\"><a name=\"only-compile-expressions-when-certain-"
"features-are-available\"></a>\n"
"Компилировать выражения только тогда, когда доступны определенные «features/"
"функциональности»</h6>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:317
msgid ""
"<p>Despite the hardship, <code class=\"western\">eval-when</code> is\n"
"<strong>extensively</strong> used to push keywords into a variable\n"
"called <code class=\"western\"><a href=\"http://www.lispworks.com/"
"documentation/lw50/CLHS/Body/v_featur.htm\">*features*</a></code>,\n"
"which will allow you to, at a later stage of the compiling process,\n"
"decide what you want to compile and what not to.</p>"
msgstr ""
"<p>Несмотря на трудности, <code class=\"western\">eval-when</code> "
"<strong>широко</strong>\n"
"используется для вставки ключевых слов в переменную с именем <code class="
"\"western\"><a href=\"http://www.lispworks.com/documentation/lw50/CLHS/Body/"
"v_featur.htm\">*features*</a>, что позволит вам \n"
"на более позднем этапе процесса компиляции решить, что вы хотите "
"компилировать, а что нет.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:323
msgid ""
"<p>For example, you can load your lisp and try to start up <code class="
"\"western\">swank</code>\n"
"but only if the library is loaded. You could make use of this to\n"
"start an alternative server if not. In that situation, you could do:</p>"
msgstr ""
"<p>Например, вы можете загрузить свой лисп и попытаться запустить \n"
"<code class=\"western\">swank</code>, но только если библиотека загружена. "
"Если нет, \n"
"вы можете использовать это для запуска альтернативного сервера. В этой "
"ситуации вы могли \n"
"бы сделать: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:332
msgid ""
"<div id=\"gist88318167\" dir=\"ltr\">\n"
"\t<div id=\"file-use-of-a-feature-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">(defun "
"do-whatever-with-swank-or-die ()</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">#+swank</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">(progn</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(warn &quot;Swank is loaded, "
"so we can use it!&quot;)</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(swank:do-whatever))</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:337
msgid ""
"  <font size=\"2\" style=\"font-size: 10pt\">#-swank</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">(error &quot;Can't do anything "
"without Swank. Sorry. Dying.&quot;))</font></pre>\n"
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:340
msgid ""
"<p>Is this the best thing ever? Certainly not. Can it be dangerous?\n"
"Certainly, yes. Is it awesome nonetheless? Yes (IMO).</p>"
msgstr ""
"<p>Это лучшая вещь на свете? Конечно нет. Это может быть опасно? Конечно да. "
"Тем не менее, \n"
"это круто? Да  (IMHO).</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:350
msgid ""
"<h6 class=\"western\"><a name=\"create-your-own-reader-macros\"></a>Create\n"
"your own reader macros</h6>\n"
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Are you writing some long\n"
"\tmultiline strings in your code, and are annoyed by delimiters like\n"
"\tdouble quotes that you have to keep escaping? \n"
"\t</p>"
msgstr ""
"<h6 class=\"western\"><a name=\"create-your-own-reader-macros\"></"
"a>Создайте \n"
"свой собственный макрос для чтения</h6>\n"
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Вы пишете длинные многострочные строки в "
"своем коде \n"
"\tи вас раздражают разделители, такие как двойные кавычки, которых вы "
"хотите\n"
"\tизбегать? \n"
"\t</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:356
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Would you prefer to write\n"
"\ttimestamps in ANSI format? \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Вы бы предпочли писать \n"
"\tметки времени в формате ANSI? \n"
"\t</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:359
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:359"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:363
msgid ""
"<p>Would you prefer to type JSON structures in shorthand\n"
"\tformat, but just get them in a CL structure? \n"
"\t</p>"
msgstr ""
"<p> Вы бы предпочли набирать структуры JSON в сокращенном формате, \n"
"\tно просто получать их в структуре CL?  \n"
"\t</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:366
msgid "</ul>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:368
msgid "<p><strong>Say no more:</strong></p>"
msgstr "<p><strong>Больше ни слова:</strong></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:374
msgid ""
"<p>Consider the following snippet, where we declare some utility\n"
"functions, and create a <strong><a href=\"https://www.cs.cmu.edu/Groups/AI/"
"html/cltl/clm/node192.html\">readtable</a></strong>\n"
"with specific dispatch characters.</p>"
msgstr ""
"<p>Рассмотрим следующий фрагмент, в котором мы объявляем некоторые служебные "
"функции \n"
"и создаем <strong><a href=\"https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/"
"node192.html\">readtable</a></strong>(таблицу для чтения) с определенными "
"символами диспетчеризации(распределения функциональности). \n"
"</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:377
msgid "<div id=\"gist88318946\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:380
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:380"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:382
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:382"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:387
msgid ""
"\t<div id=\"file-my-readtable-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\">;; You would have to have some json parser "
"loaded, but we can\n"
";; just fake it for now"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:393
msgid ""
"(defun json-parse (string)\n"
"  &quot;Return some mock thing right now&quot;\n"
"  (declare (ignore string))\n"
"  `(cons :obj '((&quot;Hello&quot; . &quot;World!&quot;))))"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:404
msgid ""
"(defun parse-ansi-time (string)\n"
"  &quot;Parse the time string into a timestamp&quot;\n"
"  (let ((year  (parse-integer string :start 0 :end 4))\n"
"        (month (parse-integer string :start 6 :end 7))\n"
"        (day   (parse-integer string :start 9 :end 10)))\n"
"    (- (+ (* year   31556926) ;; no. of seconds in a year\n"
"          (* month  2629743)  ;; no. of seconds in a month\n"
"          (* day    86400))   ;; no. of seconds in a day\n"
"       (* 1900 31556926))))   ;; lisp timestamps start at 1900"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:415
msgid ""
"(defun read-delimited-string (stream)\n"
"  &quot;Reads a string delimited by any char after the\n"
"   macro reader&quot;\n"
"  (loop\n"
"     with terminator = (read-char stream)\n"
"     for ch = (read-char stream)\n"
"     until (eql ch terminator)\n"
"     collect ch into chars\n"
"     finally\n"
"       (return (coerce chars 'string))))"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:419
msgid ""
"(defun |#long-ass-string-reader| (stream sub-char numarg)\n"
"  (declare (ignore sub-char numarg))\n"
"  (read-delimited-string stream))"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:425
msgid ""
"(defun |#timestamp-ansi-reader| (stream sub-char numarg)\n"
"  (declare (ignore sub-char numarg))\n"
"  (let ((ts (read-delimited-string stream)))\n"
"    (parse-ansi-time ts)))"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:431
msgid ""
"(defun |#json-struct-reader| (stream sub-char numarg)\n"
"  (declare (ignore sub-char numarg))\n"
"  (let ((json-string (read-delimited-string stream)))\n"
"    (json-parse json-string)))"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:448
msgid ""
"(let ((my-readtable (copy-readtable nil)))\n"
"  (set-dispatch-macro-character #\\# #\\s\n"
"                                #'|#long-ass-string-reader|\n"
"                                my-readtable)\n"
"  (set-dispatch-macro-character #\\# #\\t\n"
"                                #'|#timestamp-ansi-reader|\n"
"                                my-readtable)\n"
"  (set-dispatch-macro-character #\\# #\\j\n"
"                                #'|#json-struct-reader|\n"
"                                my-readtable)\n"
"  (setf (excl:named-readtable :my-readtable)\n"
"        my-readtable))\n"
" </pre>\n"
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:452
msgid ""
"<p>We start out by setting the <a href=\"http://clhs.lisp.se/Body/v_rdtabl."
"htm\"><code class=\"western\">*readtable*</code>\n"
"variable</a> to our newly created readtable in our REPL and just type\n"
"away:</p>"
msgstr ""
"<p>Мы начинаем с установки переменной <a href=\"http://clhs.lisp.se/Body/"
"v_rdtabl.htm\"><code class=\"western\">*readtable*</code> </a>для нашей "
"вновь созданной таблицы для чтения в REPL и \n"
"просто набираем: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:455
msgid "<div id=\"gist88319080\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:458
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:458"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:460
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:460"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:480
msgid ""
"\t<div id=\"file-using-my-readtable-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">CL-"
"USER&gt; ;; Set the readtable to what we created above</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (setf *readtable* "
"(excl:named-readtable :my-readtable))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">#&lt;readtable named MY-READTABLE "
"@ #x10001a913a2&gt;</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; Try out the string "
"thingy</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; #s/Long ass multiline "
"string with &quot;quotes inside&quot; and this could be multiline too omg!/</"
"font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Long ass multiline string "
"with \\&quot;quotes inside\\&quot; and this could be multiline too omg!&quot;"
"</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; Nice! Now try out "
"typing timestamps in ANSI format</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; #t/2018-03-16/</"
"font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">3732124897</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; Convenient! Now "
"try to do some JSON</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; #j/{&quot;Hello&quot;:"
"&quot;World!&quot;}/</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">(:OBJ (&quot;Hello&quot; . &quot;"
"World!&quot;))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; Okay, we cheated "
"here, but if we had a real JSON parser then it</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; still be amazing</"
"font></pre>\n"
"<p>\n"
"\t\t<br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:482
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:482"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:486
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:486"
msgid ""
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:491
msgid ""
"<p>This, to me, is an incredible feature to have. And, when you\n"
"combine it with the power of macros and Metaobject Programming,\n"
"really highlights why CL is truly a programmable programming\n"
"language.</p>"
msgstr ""
"<p>Для меня это невероятная возможность. И, когда вы объединяете это с \n"
"мощью макросов и программирования метаобъектов, действительно "
"подчеркивает, \n"
"почему CL действительно является программируемым языком программирования.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:501
msgid ""
"<p><a name=\"fnref3\"></a>Still not convinced? In his <code class=\"western"
"\">xooglers</code>\n"
"recount, <a href=\"http://www.flownet.com/ron/\">Ron Garret</a> talks\n"
"about how we would adapt one particular product to support multiple\n"
"languages. His example is basically replacing the default string\n"
"reader with one that will replace all strings with their responding\n"
"translation if one exists. The example below is for AllegroCL, but\n"
"itâs totally adapted from his CCL example<a href=\"2018-03-28-one-year-"
"common-lisp-developer-part-1-the-good.html#fn3\"><sup>3</sup></a>:</p>"
msgstr ""
"<p><a name=\"fnref3\"></a>Все еще не уверены?  В своем отчете <code class="
"\"western\">xooglers</code>,\n"
" <a href=\"http://www.flownet.com/ron/\">Рон Гаррет</a>  рассказывает о том, "
"как мы могли бы\n"
"адаптировать один конкретный продукт для поддержки нескольких языков. Его "
"пример в основном\n"
"заменяет читатель строк по умолчанию тем, который заменяет все строки их "
"ответным переводом, \n"
"если таковой существует. Пример ниже предназначен для AllegroCL, но он "
"полностью адаптирован \n"
"из его примера CCL<a href=\"2018-03-28-one-year-common-lisp-developer-part-1-"
"the-good.html#fn3\"><sup>3</sup></a>:</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:504
msgid "<div id=\"gist88492481\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:507
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:507"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:509
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:509"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:516
msgid ""
"\t<div id=\"file-string-reader-for-translations-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt"
"\">(defvar *translations* '((&quot;Hello&quot; :spanish &quot;Hola&quot; :"
"german</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt\">&quot;"
"Guten tag&quot;)</font>\n"
"                         <font size=\"2\" style=\"font-size: 10pt\">(&quot;"
"Goodbye&quot; :spanish &quot;Adios&quot; :german</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt\">&quot;"
"Auf wiedersehen&quot;)))</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:518
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">(defvar *current-language* :"
"english)</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:526
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">(defun my-string-reader (stream "
"char)</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">(let* ((s (excl::read-string "
"stream char))</font>\n"
"         <font size=\"2\" style=\"font-size: 10pt\">(translations (rest "
"(assoc s *translations* :test</font>\n"
"                                    <font size=\"2\" style=\"font-size: 10pt"
"\">'string-equal))))</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(if translations</font>\n"
"        <font size=\"2\" style=\"font-size: 10pt\">`(or (getf ',translations "
"*current-language*) ,s)</font>\n"
"        <font size=\"2\" style=\"font-size: 10pt\">s)))</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:532
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">(defun test (&amp;key (language :"
"english))</font>\n"
"  <font size=\"2\" style=\"font-size: 10pt\">(let ((*current-language* "
"language))</font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(print &quot;Hello&quot;)</"
"font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(print &quot;Goodbye&quot;)</"
"font>\n"
"    <font size=\"2\" style=\"font-size: 10pt\">(values)))</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:534
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">;; This ouputs the following in "
"your REPL</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:538
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (test :language :"
"english)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Hello&quot; </font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Goodbye&quot;</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:542
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (test :language :"
"spanish)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Hola&quot; </font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Adios&quot;</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:549
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (test :language :"
"german)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Guten tag&quot; </font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">&quot;Auf wiedersehen&quot; </"
"font></pre>\n"
"<p>\n"
"\t\t<a name=\"gist884924811\"></a><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:551
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:551"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:557
msgid ""
"\t</div>\n"
"</div>\n"
"<div id=\"Section39\" dir=\"ltr\">\n"
"\t<div id=\"Section40\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:560
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:560"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:562
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:562"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:566
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:566"
msgid ""
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:569
msgid ""
"<p><a name=\"fnref4\"></a>I suggest reading his <code class=\"western"
"\">xooglers</code>\n"
"stuff<a href=\"2018-03-28-one-year-common-lisp-developer-part-1-the-good."
"html#fn4\"><sup>4</sup></a>:</p>"
msgstr ""
"<p><a name=\"fnref4\"></a>Я предлагаю почитать его материалы про \n"
"<code class=\"western\">xooglers</code> <a href=\"2018-03-28-one-year-common-"
"lisp-developer-part-1-the-good.html#fn4\"><sup>4</sup></a>:</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:575
msgid ""
"<p>â<b>Xooglers Rises From the Ashesâ by Ron\n"
"Garret</b><br/>\n"
"<a href=\"http://blog.rongarret.info/2009/12/xooglers-rises-from-ashes.html"
"\">http://blog.rongarret.info/2009/12/xooglers-rises-from-ashes.html</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:580
msgid ""
"<h6 class=\"western\"><a name=\"tell-the-compiler-that-certain-functions-or-"
"files-are-fine-to-optimize\"></a>\n"
"Tell the compiler that certain functions or files are fine to\n"
"optimize</h6>"
msgstr ""
"<h6 class=\"western\"><a name=\"tell-the-compiler-that-certain-functions-or-"
"files-are-fine-to-optimize\"></a>\n"
"Сообщите компилятору, что определенные функции или файлы можно "
"оптимизировать.</h6>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:582
msgid "<p>And it will optimize the sh*t out of them.</p>"
msgstr "<p>И это оптимизирует их.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:593
msgid ""
"<p><a name=\"fnref5\"></a>As Lisp is a dynamic language, it does what\n"
"you would expect a dynamic language to do, like checking that you\n"
"compare a string against a string, or that you add two numbers, and\n"
"many other things that it does without any type information. If it\n"
"finds a runtime error, it will spit out an easy-to-read <strong>stack\n"
"trace</strong> where you can debug what went wrong. This is what most\n"
"languages do<a href=\"2018-03-28-one-year-common-lisp-developer-part-1-the-"
"good.html#fn5\"><sup>5</sup></a>,\n"
"so itâs no surprise.</p>"
msgstr ""
"<p><a name=\"fnref5\"></a>Поскольку Lisp является динамическим языком, он "
"делает то, \n"
"что вы ожидаете от динамического языка, например, проверяет, сравниваете ли "
"вы строку \n"
"со строкой, или что вы складываете два числа, и многие другие вещи, которые "
"он делает \n"
"без какой-либо информации о типе. Если он обнаруживает ошибку времени "
"выполнения, \n"
"он выдаст легко читаемую трассировку стека(<strong>stack trace</strong>), "
"где вы можете \n"
"отладить, то что пошло не так. Это то, что делают большинство языков<a href="
"\"2018-03-28-one-year-common-lisp-developer-part-1-the-good."
"html#fn5\"><sup>5</sup></a>, поэтому неудивительно.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:601
msgid ""
"<p>But, what if you have a function that you <em>really</em> need to\n"
"be fast, because itâs running in a tight loop, and you <em>Really\n"
"Know What You Are Doing (tm)</em>, so you donât want the compiler\n"
"getting in the way. You just wanna go <strong>fast</strong>. Well,\n"
"check this one out:</p>"
msgstr ""
"<p>Но что, если у вас есть функция, которая <em>действительно</em> должна "
"быть быстрой, \n"
"потому что она работает в замкнутом цикле, и вы действительно знаете, что "
"делаете (тм), \n"
"поэтому вы не хотите, чтобы компилятор мешал. Вам просто нужно быстрое "
"исполнение кода. \n"
"Что ж, посмотрите на это: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:604
msgid "<div id=\"gist88457841\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:607
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:607"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:609
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:609"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:647
msgid ""
"\t<div id=\"file-lisp-declare-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">CL-"
"USER&gt; ;; We will declare two functions that do a depth-first search</"
"font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; on a tree.</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;;</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (defun search-tree "
"(tree search-item &amp;key (test 'eq))</font>\n"
"           <font size=\"2\" style=\"font-size: 10pt\">(labels ((%search-tree "
"(branch)</font>\n"
"                      <font size=\"2\" style=\"font-size: 10pt\">(unless "
"(null branch)</font>\n"
"                        <font size=\"2\" style=\"font-size: 10pt\">(when "
"(funcall test branch search-item)</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt\">(return-"
"from search-tree branch))</font>\n"
"                        <font size=\"2\" style=\"font-size: 10pt\">(unless "
"(atom branch)</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt"
"\">(%search-tree (car branch))</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt"
"\">(%search-tree (cdr branch))))))</font>\n"
"             <font size=\"2\" style=\"font-size: 10pt\">(%search-tree "
"tree)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">SEARCH-TREE</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (compile 'search-"
"tree)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">SEARCH-TREE</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; We've got a new "
"compiled function called 'search-tree</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; Now let's try a "
"different alternative</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (defun search-tree* "
"(tree search-item &amp;key (test 'eq))</font>\n"
"           <font size=\"2\" style=\"font-size: 10pt\">(labels ((%search-tree "
"(branch)</font>\n"
"                      <font size=\"2\" style=\"font-size: 10pt\">(declare "
"(optimize (speed 3) (space 0) (debug 0)))</font>\n"
"                      <font size=\"2\" style=\"font-size: 10pt\">(unless "
"(null branch)</font>\n"
"                        <font size=\"2\" style=\"font-size: 10pt\">(when "
"(funcall test branch search-item)</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt\">(return-"
"from search-tree* branch))</font>\n"
"                        <font size=\"2\" style=\"font-size: 10pt\">(unless "
"(atom branch)</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt"
"\">(%search-tree (car branch))</font>\n"
"                          <font size=\"2\" style=\"font-size: 10pt"
"\">(%search-tree (cdr branch))))))</font>\n"
"             <font size=\"2\" style=\"font-size: 10pt\">(%search-tree "
"tree)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">SEARCH-TREE*</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (compile 'search-"
"tree*)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">SEARCH-TREE*</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; We have this new "
"function which is exactly the same</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; in behaviour, but "
"it has that `optimize` in the middle there</font></pre>\n"
"<p>\n"
"\t\t<a name=\"gist884578411\"></a><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:649
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:649"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:655
msgid ""
"\t</div>\n"
"</div>\n"
"<div id=\"Section45\" dir=\"ltr\">\n"
"\t<div id=\"Section46\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:658
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:658"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:660
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:660"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:664
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:664"
msgid ""
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:669
msgid ""
"<p>So in our REPL we typed up and compiled two functions: <code class="
"\"western\">search-tree</code>\n"
"and <code class=\"western\">search-tree*</code>, and the only\n"
"difference between them is that one has an <code class=\"western\"><a href="
"\"http://www.lispworks.com/documentation/lw50/CLHS/Body/d_optimi.htm"
"\">optimize</a></code>\n"
"in the middle there.</p>"
msgstr ""
"<p>Итак, в нашем REPL мы набрали и скомпилировали две функции: <code class="
"\"western\">search-tree</code> и <code class=\"western\">search-tree*</"
"code>, и единственная разница между ними в том, \n"
"что одна из них имеет внутри <code class=\"western\"><a href=\"http://www."
"lispworks.com/documentation/lw50/CLHS/Body/d_optimi.htm\">optimize</a></"
"code>(команду оптимизации).</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:676
msgid ""
"<p>Reading the <code class=\"western\">optimize</code> declaration, we\n"
"can see that the second function <code class=\"western\">search-tree*</"
"code>\n"
"will compile for <em>speed</em> and no debug. The rest is the same: a\n"
"depth-first search on a tree (a nested list).</p>"
msgstr ""
"<p>Читая объявление <code class=\"western\">optimize</code>, мы видим, что "
"вторая\n"
"функция <code class=\"western\">search-tree*</code> будет компилироваться "
"для \n"
"<em>speed</em>(скорости) и без отладки. В остальном все то же самое: поиск "
"в \n"
"глубину по дереву (представленному как вложенный список).</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:680
msgid "<p>So we can see the results below:</p>"
msgstr "<p>Итак, мы можем увидеть результаты ниже:</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:683
msgid "<div id=\"gist88458193\" dir=\"ltr\">"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:686
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:686"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:688
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:688"
msgid "\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:707
msgid ""
"\t<div id=\"file-search-tree-time-results-lisp\" dir=\"ltr\">\n"
"\t\t<pre class=\"western\"><font size=\"2\" style=\"font-size: 10pt\">CL-"
"USER&gt; ;; Consider an existing function `mock-tree` which returns</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;; some random "
"(nested) list</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; ;;</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (time (loop</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">with tree = "
"(mock-tree)</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">for i from 0 "
"upto 1000000</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">for rand = "
"(random 17)</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">do (search-"
"tree tree rand)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (non-gc) 1.861000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (gc)     0.000000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (total)  1.861000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (thread) 1.860000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; real time  1.860217 sec "
"(100.0%)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; space allocation:</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">;  118 cons cells, 14,528 other "
"bytes, 0 static bytes</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; Page Faults: major: 0 (gc: 0), "
"minor: 0 (gc: 0)</font>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:724
msgid ""
"<font size=\"2\" style=\"font-size: 10pt\">CL-USER&gt; (time (loop</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">with tree = "
"(mock-tree)</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">for i from 0 "
"upto 1000000</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">for rand = "
"(random 17)</font>\n"
"                    <font size=\"2\" style=\"font-size: 10pt\">do (search-"
"tree* tree rand)))</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (non-gc) 1.006000 sec "
"user, 0.002000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (gc)     0.000000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (total)  1.006000 sec "
"user, 0.002000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; cpu time (thread) 1.007000 sec "
"user, 0.000000 sec system</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; real time  1.006890 sec "
"(100.1%)</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; space allocation:</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">;  70 cons cells, 8,576 other "
"bytes, 0 static bytes</font>\n"
"<font size=\"2\" style=\"font-size: 10pt\">; Page Faults: major: 0 (gc: 0), "
"minor: 0 (gc: 0)</font></pre>\n"
"<p>\n"
"\t\t<br/>\n"
"<br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:726
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:726"
msgid "\t\t</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:730
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:730"
msgid ""
"\t</div>\n"
"</div>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:735
msgid ""
"<p>In total, <code class=\"western\">search-tree*</code> is nearly\n"
"<strong>twice</strong> as fast, with hardly any code changes. I\n"
"havenât seen any other programming language where this is possible,\n"
"and itâs extremely helpful.</p>"
msgstr ""
"<p>В целом, <code class=\"western\">search-tree*</code> почти в два раза "
"быстрее \n"
"без каких-либо изменений кода. Я не встречал ни одного другого языка "
"программирования, \n"
"где это возможно, и это очень полезно.\n"
"</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:744
msgid ""
"<p><a name=\"fnref6\"></a>See, what we did here with the <code class="
"\"western\">optimize</code>\n"
"declaration is tell the compiler <strong>not to keep a stack trace</"
"strong><a href=\"2018-03-28-one-year-common-lisp-developer-part-1-the-good."
"html#fn6\"><sup>6</sup></a>,\n"
"which is something it does by default to help when debugging. This\n"
"makes the execution much, much faster, because now the function is\n"
"tail-recursive, whereas before it was keeping a stack, which is\n"
"something that can hinder performance greatly.</p>"
msgstr ""
"<p><a name=\"fnref6\"></a>Посмотрите, что мы сделали здесь с объявлением \n"
"<code class=\"western\">optimize</code>, так это сказали компилятору \n"
"<strong>не хранить трассировку стека</strong><a href=\"2018-03-28-one-year-"
"common-lisp-developer-part-1-the-good.html#fn6\"><sup>6</sup></a>, что он "
"делает по умолчанию, \n"
"чтобы помочь при отладке. Это значительно ускоряет выполнение, потому что \n"
"теперь функция хвостово-рекурсивная, тогда как раньше она сохраняла стек, \n"
"что может значительно снизить производительность.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:749
msgid ""
"<p>Want to do the same, but for an entire file? Just type this at the\n"
"top of your Lisp file:</p>"
msgstr ""
"<p>Хотите сделать то же самое, но для всего файла? Просто введите это в \n"
"верхней части вашего файла Lisp: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:757
msgid ""
"<pre class=\"western\"><code class=\"western\">(eval-when (:compile-"
"toplevel)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(declaim (optimize "
"(speed 3)</code>\n"
"<code class=\"western\">                      </code><code class=\"western"
"\">(space 0)</code>\n"
"<code class=\"western\">                      </code><code class=\"western"
"\">(debug 0))))</code></pre>\n"
"<p>\n"
"But, <strong>beware</strong>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(eval-when (:compile-"
"toplevel)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(declaim (optimize "
"(speed 3)</code>\n"
"<code class=\"western\">                      </code><code class=\"western"
"\">(space 0)</code>\n"
"<code class=\"western\">                      </code><code class=\"western"
"\">(debug 0))))</code></pre>\n"
"<p>\n"
"Но <strong>будьте осторожны</strong>.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:761
msgid ""
"<h5 class=\"western\"><a name=\"parentheses-are-a-solved-problem\"></"
"a>Parentheses\n"
"are a solved problem</h5>"
msgstr ""
"<h5 class=\"western\"><a name=\"parentheses-are-a-solved-problem\"></"
"a>Скобки - решенная проблема</h5>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:764
msgid ""
"<p>If youâre writing CL and youâre not using <code class=\"western"
"\">parinfer</code>,\n"
"then seriously: <strong>what in the hell are you doing?</strong></p>"
msgstr ""
"<p>Если вы пишете CL и не пользуетесь <code class=\"western\">parinfer</"
"code>, то серьезно: \n"
"<strong>что, черт возьми, вы делаете?</strong></strong></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:769
msgid ""
"<p>Parentheses are a solved problem. Thereâs no need to manually\n"
"align them, and no need to manually check that theyâre balanced.</p>"
msgstr ""
"<p>Скобки - решенная проблема. Нет необходимости выравнивать их вручную и \n"
"проверять балансировку вручную.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:776
msgid ""
"<p>Do yourself a favor and install <strong><a href=\"https://shaunlebron."
"github.io/parinfer/\">Parinfer</a></strong>.\n"
"You donât even have to use Emacs, and it supports all Lisps. So\n"
"thereâs no excuse. Install it. <a href=\"https://cdagostino.io/images/"
"didyoudoit.jpg\">Do\n"
"it.</a></p>"
msgstr ""
"<p>Сделайте себе одолжение и установите Parinfer. Вам даже не нужно "
"использовать Emacs, \n"
"он поддерживает все Лиспы. Так что оправдания нет. Установите его.   \n"
"<a href=\"https://cdagostino.io/images/didyoudoit.jpg\">Сделай это.</a></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:780
msgid ""
"<h6 class=\"western\"><a name=\"interactive-development-is-wonderful\"></a>\n"
"Interactive development is wonderful</h6>"
msgstr ""
"<h5 class=\"western\"><a name=\"interactive-development-is-wonderful\"></a>\n"
"Интерактивная разработка прекрасна</h5>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:788
msgid ""
"<p>As Iâm typing in Emacs with a fully loaded Lisp and gigabytes of\n"
"data loaded in RAM, about 90% of the time I can simply hover over a\n"
"function and type <code class=\"western\">C-c C-c</code>, and after a\n"
"minor flash and a message in the minibuffer saying that the\n"
"âcompilation [is] completeâ, I can run my tests again and\n"
"suddenly theyâre passing! I fixed the problem in my editor, which\n"
"convenienty hosted a REPL where I could issue the test command.</p>"
msgstr ""
"<p>Когда я печатаю в Emacs с полностью загруженным Лиспом и гигабайтами "
"данных, \n"
"загруженными в ОЗУ, примерно в 90% случаев я могу просто навести указатель "
"мыши \n"
"на функцию и набрать <code class=\"western\">C-c C-c</code>, а после "
"небольшой вспышки \n"
"и сообщения в минибуфере что «компиляция завершена», я могу снова запустить "
"свои тесты, \n"
"и вдруг они пройдут! Я исправил проблему в своем редакторе, который удобно "
"размещал REPL, \n"
"где я мог выполнить тестовую команду.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:795
msgid ""
"<p>Interactive development is not a side-effect of CL, but a feature\n"
"and important to its condition system (which includes the notion\n"
"ârestartsâ), and any lisper worth their salt will write code that\n"
"adapts to live reloading.</p>"
msgstr ""
"<p>Интерактивная разработка - это не побочный эффект CL, а функция и важная "
"функция \n"
"для ее системы условий (которая включает в себя понятие «перезапуск»), и "
"любой \n"
"достойный лиспер пишет код, который адаптируется к перезагрузке в реальном "
"времени.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:802
msgid ""
"<p>Having accesss to a REPL is so important to the CL community and\n"
"its background, that one of the most quoted stories related to that\n"
"is mentioned in the book I linked to above, but hereâs a Google\n"
"Talk regarding that:</p>"
msgstr ""
"<p>Доступ к REPL настолько важен для сообщества CL и его предыстории, \n"
"что одна из наиболее цитируемых историй, связанных с этим, упоминается в "
"книге, \n"
"на которую я ссылался выше, но вот Google Talk по этому поводу: </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:806
msgid ""
"<p><a href=\"https://www.youtube.com/watch?v=_gZK0tW8EhQ\">https://www."
"youtube.com/watch?v=_gZK0tW8EhQ</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:811
msgid ""
"<p> \n"
"</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:817
msgid ""
"<p>Mr Garret in this talk is very biased and spills lots of his own\n"
"opinions, but what you can keep from the video is that they debugged\n"
"a satellite from very far away using Lisp (at min 42:00). Nice stuff.</p>"
msgstr ""
"<p>Мистер Гаррет в этом выступлении очень предвзят и высказывает множество \n"
"собственных мнений, но что вы можете усвоить из видео, так это то, что они \n"
"отлаживали спутник с очень большого расстояния, используя Lisp (в мин. "
"42:00). \n"
"Хорошая штука.</p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:820
msgid "<h6 class=\"western\"><a name=\"theres-more\"></a>Thereâs more!</h6>"
msgstr "<h5 class=\"western\"><a name=\"theres-more\"></a>Здесь еще!</h5>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:825
msgid ""
"<p>Thereâs so much more to say, but I better stop here for âthe\n"
"goodâ. I could continue, but I would also recommend that you read\n"
"more on things like the type system and the fantastic <code class=\"western"
"\">disassemble</code>\n"
"function from here:</p>"
msgstr ""
"<p>Можно еще так много сказать, но я лучше остановлюсь на этом «ради "
"хорошего». \n"
"Я мог бы продолжить, но я также рекомендовал бы вам прочитать здесь больше о "
"таких вещах, \n"
"как система типов и фантастическая функция <code class=\"western"
"\">disassemble</code>(дизассемблирования): </p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:831
msgid ""
"<p>â<b>Performance and Types in Lispâ by Bob\n"
"Krzaczek</b><br/>\n"
"<a href=\"http://blog.30dor.com/2014/03/21/performance-and-types-in-lisp/"
"\">http://blog.30dor.com/2014/03/21/performance-and-types-in-lisp/</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:834
msgid "<h2 class=\"western\"><a name=\"amendments\"></a>Amendments</h2>"
msgstr "<h2 class=\"western\"><a name=\"amendments\"></a>Поправки </h2>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:836
msgid ""
"<p>Amendments to this page can be found <a href=\"https://github.com/"
"carlosdagos/blog/commits/master/posts/2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.md\">here</a>.</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:840
msgid ""
"<h2 class=\"western\"><a name=\"footnotes\"></a>Footnotes</h2>\n"
"<hr/>"
msgstr ""
"<h2 class=\"western\"><a name=\"footnotes\"></a>Сноски</h2>\n"
"<hr/>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:843
msgid ""
"<ol>\n"
"\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:845
msgid ""
"<p><a name=\"fn1\"></a>But I was.<a href=\"2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html#fnref1\">â©ï¸</a></p>"
msgstr ""
"<p><a name=\"fn1\"></a>But I was.<a href=\"2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html#fnref1\">â©ï¸</a></p>"

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:848
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:848"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:852
msgid ""
"<p><a name=\"fn2\"></a>Yes, yes. You can just append <code class=\"western"
"\">'</code>\n"
"\tto everything and then itâs a valid identifier. Still, itâs not\n"
"\tâthe sameâ.<a href=\"2018-03-28-one-year-common-lisp-developer-part-1-the-"
"good.html#fnref2\">â©ï¸</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:855
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:855"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:862
msgid ""
"<p><a name=\"fn3\"></a>In truth, this piece of code is only to\n"
"\tshow an example. But, Iâve also thought that you could instead\n"
"\tjust set the macro character to be a single quote instead. Then you\n"
"\thave single quotes that act as strings that the programmer controls,\n"
"\tand double quotes act as everyday strings. Now that could make for\n"
"\tsome interesting experiments.<a href=\"2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html#fnref3\">â©ï¸</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:865
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:865"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:870
msgid ""
"<p><a name=\"fn4\"></a>Iâve enjoyed reading (and listening to)\n"
"\tRon Garret. For some reason, a lot of what he says makes a lot of\n"
"\tsense to me. Maybe itâs an age thing, Iâm getting old after\n"
"\tall.<a href=\"2018-03-28-one-year-common-lisp-developer-part-1-the-good."
"html#fnref4\">â©ï¸</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:873
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:873"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:878
msgid ""
"<p><a name=\"fn5\"></a>Well, with the exception that in the Lisp\n"
"\tcondition system, the runtime will actually set a <em>break</em> in\n"
"\tthe execution, and in a lot of situations allow you to amend the\n"
"\tproblem and continue executing.<a href=\"2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html#fnref5\">â©ï¸</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:881
msgctxt ""
"in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:881"
msgid "\t<li/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:885
msgid ""
"<p><a name=\"fn6\"></a>Actually depending on the Lisp\n"
"\timplementation we could have told the compiler to do a bit more than\n"
"\tthat. Always read the docs!<a href=\"2018-03-28-one-year-common-lisp-"
"developer-part-1-the-good.html#fnref6\">â©ï¸</a></p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:889
msgid ""
"</ol>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:891
msgid "</p>"
msgstr ""

#: in_ed/2018-03-28-one-year-common-lisp-developer-part-1-the-good-m.html:894
msgid ""
"</body>\n"
"</html>"
msgstr ""
