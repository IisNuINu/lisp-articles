#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lispweb.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-05 09:17+0300\n"
"PO-Revision-Date: 2021-09-06 11:30+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lispweb.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-09-05T08:45:12.106549889\"/>\n"
"\t<meta name=\"changed\" content=\"2021-09-05T08:47:05.039469734\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Lisp for the Web goes book \n"
"</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-09-05T08:45:12.106549889\"/>\n"
"\t<meta name=\"changed\" content=\"2021-09-05T08:47:05.039469734\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Lisp для Web становится книгой\n"
"</h1>"

#: in_ed/lispweb.html:33
msgid ""
"<p><img src=\"lispweb_html_54c1d3d0a19dee23.jpg\" name=\"Image1\" alt=\"Lisp "
"for the web - the book\" align=\"left\" hspace=\"5\" width=\"234\" height="
"\"324\" border=\"0\"/>\n"
"The\n"
"following article and code has been updated as the book <a href=\"https://"
"leanpub.com/lispweb\">Lisp\n"
"for the Web</a>. You can get it for any price you want at <a href=\"https://"
"leanpub.com/lispweb\">Leanpub</a>.\n"
"</p>"
msgstr ""
"<p><img src=\"lispweb_html_54c1d3d0a19dee23.jpg\" name=\"Image1\" alt=\"Lisp "
"for the web - the book\" align=\"left\" hspace=\"5\" width=\"234\" height="
"\"324\" border=\"0\"/>\n"
"Следующая статья и код были обновлены как книга <a href=\"https://leanpub."
"com/lispweb\">Lisp\n"
"для Web</a>. Вы можете получить его по любой цене на  <a href=\"https://"
"leanpub.com/lispweb\">Leanpub</a>.\n"
"</p>"

#: in_ed/lispweb.html:39
msgid ""
"<h1 class=\"western\">Lisp for the Web \n"
"</h1>\n"
"<h3 class=\"western\">by Adam Tornhill, April 2008 \n"
"</h3>"
msgstr ""
"<h1 class=\"western\">Lisp для Web \n"
"</h1>\n"
"<h3 class=\"western\">by Adam Tornhill, April 2008 \n"
"</h3>"

#: in_ed/lispweb.html:50
msgid ""
"<p>With his essay <a href=\"http://www.paulgraham.com/avg.html\" target="
"\"_top\">Beating\n"
"the Averages </a>, Paul Graham told the story of how his web start-up\n"
"Viaweb outperformed its competitors by using Lisp. Lisp? Did I parse\n"
"that correctly? That ancient language with all those scary\n"
"parentheses? Yes, indeed! And with the goal of identifying its\n"
"strengths and what they can do for us, I'll put Lisp to work\n"
"developing a web application. In the process we'll find out how a 50\n"
"years old language can be so well-suited for modern web development\n"
"and yes, it's related to all those parentheses. \n"
"</p>"
msgstr ""
"<pВ своем эссе <a href=\"http://www.paulgraham.com/avg.html\" target=\"_top"
"\">Превосходя Посредственность </a> Пол Грэм рассказал историю о том, как "
"его веб-стартап Viaweb \n"
"превзошел своих конкурентов, используя Lisp. Лисп? Я правильно это "
"разобрал? \n"
"Этот древний язык со всеми этими пугающими скобками? Да, в самом деле! \n"
"И чтобы определить его сильные стороны и то, что они могут для нас "
"сделать, \n"
"я заставлю Lisp работать над разработкой веб-приложения. В процессе мы "
"узнаем, \n"
"как язык 50-летней давности может быть настолько хорошо приспособлен для \n"
"современной веб-разработки, и да, это связано со всеми этими скобками.  \n"
"</p>"

#: in_ed/lispweb.html:54
msgid ""
"<h2 class=\"western\">What to expect \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Что ожидать \n"
"</h2>"

#: in_ed/lispweb.html:58
msgid ""
"<p>Starting from scratch, we'll develop a three-tier web application.\n"
"I'll show how to: \n"
"</p>"
msgstr ""
"<p>С нуля разработаем трехуровневое веб-приложение. Я покажу, как: \n"
"</p>"

#: in_ed/lispweb.html:65
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">utilize powerful open source\n"
"\tlibraries for expressing dynamic HTML and JavaScript in Lisp, \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">использовать мощные библиотеки с открытым \n"
"\tисходным кодом для выражения динамического HTML и JavaScript в Lisp, \n"
"\t</p>"

#: in_ed/lispweb.html:71
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">develop a small, embedded domain\n"
"\tspecific language tailored for my application, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">разработать небольшой встроенный предметно-"
"ориентированный \n"
"\tязык(domain specific language - DSL), адаптированный для моего "
"приложения, \n"
"\t</p>"

#: in_ed/lispweb.html:78
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">extend the typical development\n"
"\tcycle by modifying code in a running system and execute code during\n"
"\tcompilation, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">расширить типичный цикл разработки, изменяя "
"код в \n"
"\tработающей системе и выполняя код во время компиляции,\n"
"\t</p>"

#: in_ed/lispweb.html:81
msgctxt "in_ed/lispweb.html:81"
msgid "\t<li/>"
msgstr ""

#: in_ed/lispweb.html:85
msgid ""
"<p>and finally migrate from data structures in memory to\n"
"\tpersistent objects using a third party database. \n"
"\t</p>"
msgstr ""
"<p>и, наконец, перейти от структур данных в памяти к постоянным объектам \n"
"\tс помощью сторонней базы данных. \n"
"\t</p>"

#: in_ed/lispweb.html:88
msgctxt "in_ed/lispweb.html:88"
msgid "</ul>"
msgstr ""

#: in_ed/lispweb.html:93
msgid ""
"<p>I'll do this in a live system transparent to the users of the\n"
"application. Because Lisp is so high-level, I'll be able to achieve\n"
"everything in just around 70 lines of code. \n"
"</p>"
msgstr ""
"<p>Я сделаю это в живой системе, прозрачной для пользователей приложения. \n"
"Поскольку Lisp очень высокоуровневый, я смогу достичь всего примерно за \n"
"70 строк кода.  \n"
"</p>"

#: in_ed/lispweb.html:103
msgid ""
"<p>This article will not teach you Common Lisp (for that purpose I\n"
"recommend <a href=\"https://www.adamtornhill.com/reviews/pcl.htm\" target="
"\"_top\">Practical\n"
"Common Lisp </a>). Instead, I'll give a short overview of the\n"
"language and try to explain the concepts as I introduce them, just\n"
"enough to follow the code. The idea is to convey a feeling of how it\n"
"is to develop in Lisp rather than focusing on the details. \n"
"</p>"
msgstr ""
"<p>Эта статья не научит вас Common Lisp (для этой цели я рекомендую \n"
"<a href=\"https://www.adamtornhill.com/reviews/pcl.htm\" target=\"_top"
"\">Практический \n"
"Common Lisp </a>). Вместо этого я дам краткий обзор языка и попытаюсь \n"
"объяснить концепции по мере их введения, достаточно, чтобы следовать коду. \n"
"Идея состоит в том, чтобы передать ощущение того, как нужно развиваться в "
"Lisp, а\n"
" не сосредотачиваться на деталях.\n"
"</p>"

#: in_ed/lispweb.html:107
msgid ""
"<h2 class=\"western\">The Lisp story \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">История Лиспа  \n"
"</h2>"

#: in_ed/lispweb.html:118
msgid ""
"<p>Lisp is actually a family of languages discovered by John McCarthy\n"
"50 years ago. The characteristic of Lisp is that Lisp code is made\n"
"out of Lisp data structures with the practical implication that it is\n"
"not only natural, but also highly effective to write programs that\n"
"write programs. This feature has allowed Lisp to adapt over the\n"
"years. For example, as object-oriented programming became popular,\n"
"powerful object systems could be implemented in Lisp as libraries\n"
"without any change to the core language. Later, the same proved to be\n"
"true for aspect-oriented programming. \n"
"</p>"
msgstr ""
"<p>Лисп - это фактически семейство языков, открытых Джоном Маккарти 50 лет "
"назад. \n"
"Характерной чертой Лиспа является то, что код Лиспа состоит из структур "
"данных \n"
"Лиспа с практическим подтекстом, о том что не только естественно, но и очень "
"эффективно \n"
"писать программы, которые пишут программы. Эта функция позволила Lisp "
"адаптироваться \n"
"на протяжении многих лет. Например, когда стало популярным объектно-"
"ориентированное\n"
"программирование, на Лиспе можно было реализовать мощные объектные системы \n"
"в виде библиотек без каких-либо изменений в базовом языке. Позже то же "
"самое \n"
"подтвердилось и для аспектно-ориентированного программирования.\n"
"</p>"

#: in_ed/lispweb.html:128
msgid ""
"<p>This idea is not only applicable to whole paradigms of\n"
"programming. Its true strength lays in solving everyday problems.\n"
"With Lisp, it's straightforward to build-up a domain specific\n"
"language allowing us to program as close to the problem domain as our\n"
"imagination allows. I'll illustrate the concept soon, but before we\n"
"kick-off, let's look closer at the syntax of Lisp. \n"
"</p>"
msgstr ""
"<p>Эта идея применима не только ко всем парадигмам программирования. \n"
"Его истинная сила - в решении повседневных проблем. С Lisp легко создать \n"
"предметно-ориентированный язык(DSL), позволяющий нам программировать \n"
"настолько близко к предметной области, насколько позволяет наше "
"воображение. \n"
"Я скоро проиллюстрирую эту концепцию, но прежде чем мы начнем, давайте \n"
"подробнее рассмотрим синтаксис Lisp. \n"
"</p>"

#: in_ed/lispweb.html:132
msgid ""
"<h2 class=\"western\">Crash course in Lisp \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Ускоренный курс по Lisp\n"
"</h2>"

#: in_ed/lispweb.html:138
msgid ""
"<p>What Graham used for Viaweb was Common Lisp, an ANSI standardized\n"
"language, which we'll use in this article too (the other main\n"
"contender is Scheme, which is considered cleaner and more elegant,\n"
"but with a much smaller library). \n"
"</p>"
msgstr ""
"<p>То, что Грэм использовал для Viaweb, был Common Lisp, "
"стандартизированным \n"
"языком ANSI, который мы будем использовать и в этой статье (другой главный \n"
"претендент - Scheme, который считается более чистым и элегантным, \n"
"но с гораздо меньшей библиотекой).\n"
"</p>"

#: in_ed/lispweb.html:146
msgid ""
"<p>Common Lisp is a high-level interactive language that may be\n"
"either interpreted or compiled. You interact with Lisp through its\n"
"<i>top-level </i>. The top-level is basically a prompt. On my system\n"
"it looks like this: \n"
"</p>"
msgstr ""
"<p>Common Lisp - это интерактивный язык высокого уровня, который можно \n"
"интерпретировать или компилировать. Вы взаимодействуете с Лиспом через \n"
"его <i>верхний уровень</i>. Верхний уровень - это, по сути, подсказка. \n"
"В моей системе это выглядит так:  \n"
"</p>"

#: in_ed/lispweb.html:154
msgid ""
"<pre class=\"western\">        CL-USER&gt;\n"
"      </pre>\n"
"<p>\n"
"Through the top-level, we can enter expressions and see the results\n"
"(the values returned by the top-level are <b>highlighted </b>): \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;\n"
"      </pre>\n"
"<p>\n"
"Через верхний уровень мы можем вводить выражения и видеть результаты \n"
"(значения, возвращаемые верхним уровнем, <b>выделяются</b>): \n"
"</p>"

#: in_ed/lispweb.html:166
msgid ""
"<pre class=\"western\">        CL-USER&gt;(+ 1 2 3)\n"
"        <b>6</b>\n"
"      </pre>\n"
"<p>\n"
"As we see in the example, Lisp uses a prefix notation. A\n"
"parenthesized expression is referred to as a <i>form </i>. When fed a\n"
"form such as (+ 1 2 3) , Lisp generally treats the first element (+)\n"
"as a function and the rest as arguments. The arguments are evaluated\n"
"from left to right and may themselves be function calls: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(+ 1 2 3)\n"
"        <b>6</b>\n"
"      </pre>\n"
"<p>\n"
"Как мы видим в примере, Lisp использует префиксную нотацию. Выражение в "
"скобках \n"
"называется <i>формой</i>. При загрузке такой формы, как (+ 1 2 3), Lisp "
"обычно \n"
"обрабатывает первый элемент (+) как функцию, а остальные как аргументы. \n"
"Аргументы вычисляются слева направо и сами могут быть вызовами функций:  \n"
"</p>"

#: in_ed/lispweb.html:174
msgid ""
"<pre class=\"western\">        CL-USER&gt;(+ 1 2 (/ 6 2))\n"
"        <b>6</b>\n"
"      </pre>\n"
"<p>\n"
"We can <b>de</b>fine our own <b>fun</b>ctions with defun: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(+ 1 2 (/ 6 2))\n"
"        <b>6</b>\n"
"      </pre>\n"
"<p>\n"
"Мы можем <b>определить</b> наши собственные <b>функции</b> с помощью "
"defun:  \n"
"</p>"

#: in_ed/lispweb.html:188
msgid ""
"<pre class=\"western\">        CL-USER&gt;(defun say-hello (to)\n"
"                    (format t &quot;Hello, ~a&quot; to))\n"
"      </pre>\n"
"<p>\n"
"Here we're defining a function say-hello , taking one argument: to .\n"
"The format function is used to print a greeting and resembles a\n"
"printf on steroids. Its first argument is the output stream and here\n"
"we're using t as a shorthand for standard output. The second argument\n"
"is a string, which in our case contains an embedded directive ~a\n"
"instructing format to consume one argument and output it in\n"
"human-readable form. We can call our function like this: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(defun say-hello (to)\n"
"                    (format t &quot;Hello, ~a&quot; to))\n"
"      </pre>\n"
"<p>\n"
"Здесь мы определяем функцию say-hello, принимая один аргумент: to. \n"
"Функция format используется для печати приветствия и напоминает \n"
"printf на стероидах. Её первый аргумент - это выходной поток, и здесь \n"
"мы используем t как сокращение для стандартного вывода. Второй аргумент - \n"
"это строка, которая в нашем случае содержит встроенную директиву ~ \n"
"формат инструкции для использования одного аргумента и вывода его в \n"
"удобочитаемой форме. Мы можем вызвать нашу функцию так:  \n"
"</p>"

#: in_ed/lispweb.html:200
msgid ""
"<pre class=\"western\">        CL-USER&gt;(say-hello &quot;ACCU&quot;)\n"
"        <b>Hello, ACCU</b>\n"
"        <b>NIL</b>\n"
"      </pre>\n"
"<p>\n"
"The first line is the side-effect, printing &quot;Hello, ACCU&quot;\n"
"and NIL is the return value from our function. By default, Common\n"
"Lisp returns the value of the last expression. From here we can\n"
"redefine say-hello to return its greeting instead: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(say-hello &quot;ACCU&quot;)\n"
"        <b>Hello, ACCU</b>\n"
"        <b>NIL</b>\n"
"      </pre>\n"
"<p>\n"
"Первая строка - это побочный эффект, печати &quot;Hello, ACCU&quot, а \n"
"NIL - это возвращаемое значение из нашей функции. По умолчанию Common Lisp \n"
"возвращает значение последнего выражения. Отсюда мы можем переопределить \n"
"say-hello, чтобы вместо этого возвращалось его приветствие: \n"
"</p>"

#: in_ed/lispweb.html:209
msgid ""
"<pre class=\"western\">        CL-USER&gt;(defun say-hello (to)\n"
"                     (format nil &quot;Hello, ~a&quot; to))\n"
"      </pre>\n"
"<p>\n"
"With nil as its destination, format simply returns its resulting\n"
"string: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(defun say-hello (to)\n"
"                     (format nil &quot;Hello, ~a&quot; to))\n"
"      </pre>\n"
"<p>\n"
"Если в качестве места назначения используется nil, format просто \n"
"возвращает результирующую строку:  \n"
"</p>"

#: in_ed/lispweb.html:220
msgid ""
"<pre class=\"western\">        CL-USER&gt;(say-hello &quot;ACCU&quot;)\n"
"        <b>&quot;Hello, ACCU&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"Now we've gotten rid of the side-effect. Programming without\n"
"side-effects is in the vein of functional programming, one of the\n"
"paradigms supported by Lisp. Lisp is also dynamically typed. Thus, we\n"
"can feed our function a number instead: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(say-hello &quot;ACCU&quot;)\n"
"        <b>&quot;Hello, ACCU&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"Теперь мы избавились от побочного эффекта. Программирование без побочных \n"
"эффектов находится в русле функционального программирования, одной из "
"парадигм, \n"
"поддерживаемых Lisp. Lisp также имеет динамическую типизацию. Таким "
"образом, \n"
"мы можем вместо этого скормить нашей функции число:  \n"
"</p>"

#: in_ed/lispweb.html:233
msgid ""
"<pre class=\"western\">        CL-USER&gt;(say-hello 42)\n"
"        <b>&quot;Hello, 42&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"In Lisp, functions are first-class citizens. That means, we can\n"
"create them just like any other object and we can pass them as\n"
"arguments to other functions. Such functions taking functions as\n"
"arguments are called <i>higher-order functions </i>. One example is\n"
"mapcar . mapcar takes a function as its first argument and applies it\n"
"subsequently to the elements of one or more given lists: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(say-hello 42)\n"
"        <b>&quot;Hello, 42&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"В Лиспе функции - это  граждане первого класса. Это означает, что мы можем \n"
"создавать их, как любой другой объект, и передавать их в качестве "
"аргументов \n"
"другим функциям. Такие функции, принимающие функции в качестве аргументов, \n"
"называются <i>функциями высшего порядка</i>. Один из примеров - mapcar. \n"
"mapcar принимает функцию в качестве первого аргумента и впоследствии \n"
"применяет ее к элементам одного или нескольких заданных списков:  \n"
"</p>"

#: in_ed/lispweb.html:244
msgid ""
"<pre class=\"western\">        CL-USER&gt;(mapcar #'say-hello (list &quot;"
"ACCU&quot; 42 &quot;Adam&quot;))\n"
"        <b>(&quot;Hello, ACCU&quot; &quot;Hello, 42&quot; &quot;Hello, "
"Adam&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"The funny #' is just a shortcut for getting at the function object.\n"
"As you see above, mapcar collects the result of each function call\n"
"into a list, which is its return value. This return value may of\n"
"course serve as argument to yet another function: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(mapcar #'say-hello (list &quot;"
"ACCU&quot; 42 &quot;Adam&quot;))\n"
"        <b>(&quot;Hello, ACCU&quot; &quot;Hello, 42&quot; &quot;Hello, "
"Adam&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"Забавный #'- это просто ярлык для доступа к объекту функции. Как вы видите "
"выше, \n"
"mapcar собирает результат каждого вызова функции в список, который является "
"ее \n"
"возвращаемым значением. Это возвращаемое значение, конечно, может служить "
"аргументом \n"
"еще одной функции: \n"
"</p>"

#: in_ed/lispweb.html:258
msgid ""
"<pre class=\"western\">        CL-USER&gt;(sort (mapcar #'say-hello (list "
"&quot;ACCU&quot; 42 &quot;Adam&quot;)) #'string-lessp)\n"
"        <b>(&quot;Hello, 42&quot; &quot;Hello, ACCU&quot; &quot;Hello, "
"Adam&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"Lisp itself isn't hard, although it may take some time to wrap ones\n"
"mindset around the functional style of programming. As you see, Lisp\n"
"expressions are best read inside-out. But the real secret to\n"
"understanding Lisp syntax is to realize that the language doesn't\n"
"have one; what we've been entering above is basically parse-trees,\n"
"generated by compilers in other languages. And, as we'll see soon,\n"
"exactly this feature makes it suitable for metaprogramming. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        CL-USER&gt;(sort (mapcar #'say-hello (list "
"&quot;ACCU&quot; 42 &quot;Adam&quot;)) #'string-lessp)\n"
"        <b>(&quot;Hello, 42&quot; &quot;Hello, ACCU&quot; &quot;Hello, "
"Adam&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"Сам по себе Lisp несложен, хотя может потребоваться некоторое время, \n"
"чтобы понять функциональный стиль программирования. Как видите, выражения \n"
"Lisp лучше всего читать изнутри-наружу. Но настоящий секрет понимания "
"синтаксиса \n"
"Лиспа состоит в том, чтобы понять, что <b>его</b> нет в языке; то, что мы "
"ввели выше, \n"
"- это в основном деревья синтаксического анализа, генерируемые "
"компиляторами \n"
"на других языках. И, как мы скоро увидим, именно эта функция делает его "
"пригодным \n"
"для метапрограммирования. \n"
"</p>"

#: in_ed/lispweb.html:262
msgid ""
"<h2 class=\"western\">The Brothers are History \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Братья - это история \n"
"</h2>"

#: in_ed/lispweb.html:270
msgid ""
"<p>Remember the hot gaming discussions 20 years ago? &quot;Giana\n"
"Sisters&quot; really was way better than &quot;Super Mario Bros&quot;,\n"
"wasn't it? We'll delegate the question to the wise crowd by\n"
"developing a web application. Our web application will allow users to\n"
"add and vote for their favourite retro games. A screenshot of the end\n"
"result is provided in Figure 1 below. \n"
"</p>"
msgstr ""
"<p>Помните горячие игровые дискуссии 20 лет назад? &quot;Giana\n"
"Sisters&quot;(Сестры Джиана) действительно были намного лучше, \n"
"чем &quot;Super Mario Bros&quot;, не так ли? Мы передадим вопрос \n"
"мудрым людям, разработав веб-приложение. Наше веб-приложение позволит \n"
"пользователям добавлять и голосовать за свои любимые ретро-игры. \n"
"Снимок экрана с конечным результатом представлен на рисунке 1 ниже. \n"
"</p>"

#: in_ed/lispweb.html:274
msgid ""
"<p><img src=\"lispweb_html_310c1b6fb5144efb.png\" name=\"Image2\" alt="
"\"Retro Games front page\" align=\"bottom\" width=\"800\" height=\"625\" "
"border=\"0\"/>"
msgstr ""

#: in_ed/lispweb.html:276
msgctxt "in_ed/lispweb.html:276"
msgid "</p>"
msgstr ""

#: in_ed/lispweb.html:285
msgid ""
"<p>From now on, I start to persist my Lisp code in textfiles instead\n"
"of just entering expressions into the top-level. Further, I define a\n"
"<i>package </i>for my code. Packages are similar to namespaces in C++\n"
"or Java's packages and helps to prevent name collisions (the main\n"
"distinction is that packages in Common Lisp are first-class objects).\n"
"</p>"
msgstr ""
"<p>С этого момента я начинаю сохранять свой код на Лиспе в текстовых "
"файлах \n"
"вместо того, чтобы просто вводить выражения на верхнем уровне. Далее я "
"определяю \n"
"пакет для своего кода. Пакеты похожи на пространства имен в пакетах C ++ или "
"Java \n"
"и помогают предотвратить конфликты имен (главное отличие состоит в том, что "
"пакеты \n"
"в Common Lisp являются объектами первого класса). \n"
"</p>"

#: in_ed/lispweb.html:294
msgid ""
"<pre class=\"western\">        (defpackage :retro-games\n"
"             (:use :cl :cl-who :hunchentoot :parenscript))\n"
"      </pre>\n"
"<p>\n"
"The new package is named :retro-games and I also specify other\n"
"packages that we'll use initially: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defpackage :retro-games\n"
"             (:use :cl :cl-who :hunchentoot :parenscript))\n"
"      </pre>\n"
"<p>\n"
"Новый пакет называется :retro-games, и я также указываю другие пакеты, \n"
"которые мы будем использовать изначально:\n"
"</p>"

#: in_ed/lispweb.html:301
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">CL is Common Lisp's standard\n"
"\tpackage containing the whole language. \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> CL - стандартный пакет Common Lisp, \n"
"\tсодержащий весь язык.\n"
"\t</p>"

#: in_ed/lispweb.html:307
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"http://weitz.de/cl-who/\" target="
"\"_top\">CL-WHO\n"
"\t</a>is a library for converting Lisp expressions into XHTML. \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"http://weitz.de/cl-who/\" target="
"\"_top\">CL-WHO\n"
"\t</a>это библиотека для преобразования выражений Lisp в XHTML. \n"
"\t</p>"

#: in_ed/lispweb.html:314
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"http://weitz.de/hunchentoot/\" "
"target=\"_top\">Hunchentoot\n"
"\t</a>is a web-server, written in Common Lisp itself, and provides a\n"
"\ttoolkit for building dynamic web sites. \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"http://weitz.de/hunchentoot/\" "
"target=\"_top\">Hunchentoot\n"
"\t</a> это веб-сервер, написанный на самом Common Lisp и предоставляющий \n"
"\tинструментарий для создания динамических веб-сайтов.\n"
" \t</p>"

#: in_ed/lispweb.html:317
msgctxt "in_ed/lispweb.html:317"
msgid "\t<li/>"
msgstr ""

#: in_ed/lispweb.html:322
msgid ""
"<p><a href=\"http://common-lisp.net/project/parenscript/\" target=\"_top"
"\">ParenScript\n"
"\t</a>allows us to compile Lisp expressions into JavaScript. We'll use\n"
"\tthis for client-side validation. \n"
"\t</p>"
msgstr ""
"<p><a href=\"http://common-lisp.net/project/parenscript/\" target=\"_top"
"\">ParenScript\n"
"\t</a>позволяет нам компилировать выражения Lisp в JavaScript. Мы будем \n"
"\tиспользовать его для проверки на стороне клиента. \n"
"\t</p>"

#: in_ed/lispweb.html:325
msgctxt "in_ed/lispweb.html:325"
msgid "</ul>"
msgstr ""

#: in_ed/lispweb.html:329
msgid ""
"<p>With my package definition in place, I'll put the rest of the code\n"
"inside it by switching to the :retro-games package: \n"
"</p>"
msgstr ""
"<p>Имея определение моего пакета, я помещу в него остальной код, \n"
"переключившись на пакет :retro-games :  \n"
"</p>"

#: in_ed/lispweb.html:337
msgid ""
"<pre class=\"western\">        (in-package :retro-games)\n"
"      </pre>\n"
"<p>\n"
"Most top levels indicate the current package in their prompt. On my\n"
"system the prompt now looks like this: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (in-package :retro-games)\n"
"      </pre>\n"
"<p>\n"
"Большинство верхних уровней указывают текущий пакет в своем приглашении. \n"
"В моей системе приглашение теперь выглядит так:  \n"
"</p>"

#: in_ed/lispweb.html:343
msgid ""
"<pre class=\"western\">        RETRO-GAMES&gt;\n"
"      </pre><h2 class=\"western\">\n"
"Representing Games \n"
"</h2>"
msgstr ""
"<pre class=\"western\">        RETRO-GAMES&gt;\n"
"      </pre><h2 class=\"western\">\n"
"Представление игр \n"
"</h2>"

#: in_ed/lispweb.html:348
msgid ""
"<p>With the package in place, we can return to the problem. It seems\n"
"to require some representation of a game and I'll choose to abstract\n"
"it as a class: \n"
"</p>"
msgstr ""
"<p>Когда пакет на месте, мы можем вернуться к проблеме. Кажется, она "
"требует \n"
"некоторого представления игры, и я предпочитаю абстрагировать её как "
"класс: \n"
"</p>"

#: in_ed/lispweb.html:362
msgid ""
"<pre class=\"western\">        (defclass game ()\n"
"            ((name  :initarg  :name)\n"
"             (votes :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"The expression above defines the class game without any\n"
"user-specified superclasses, hence the empty list () as second\n"
"argument. A game has two <i>slots </i>(slots are similar to\n"
"attributes or members in other languages): a name and the number of\n"
"accumulated votes . To create a game object I invoke make-instance\n"
"and passes it the name of the class to instantiate: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defclass game ()\n"
"            ((name  :initarg  :name)\n"
"             (votes :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"Выражение выше определяет класс game без каких-либо определяемых \n"
"пользователем суперклассов, поэтому пустой список () является \n"
"вторым аргументом. В игре есть два <i>slots</i>(слота) (слоты аналогичны \n"
"атрибутам или членам на других языках): name(имя) и количество набранных "
"голосов. \n"
"Чтобы создать игровой объект, я вызываю make-instance и передаю ему имя "
"класса \n"
"для создания экземпляра: \n"
"</p>"

#: in_ed/lispweb.html:377
msgid ""
"<pre class=\"western\">        RETRO-GAMES&gt;(setf many-lost-hours (make-"
"instance 'game :name &quot;Tetris&quot;))\n"
"        <b>#&lt;GAME @ #x7213da32&gt;</b>\n"
"      </pre>\n"
"<p>\n"
"Because I specified an <b>init</b>ial <b>arg</b>ument in my\n"
"definition of the name slot, I can pass this argument directly and\n"
"initialize that slot to &quot;Tetris&quot;. The votes slot doesn't\n"
"have an initial argument. Instead I specify the code I want to run\n"
"during instantiation to compute its initial value through :initform .\n"
"In this case the code is trivial, as I only want to initialize the\n"
"number of votes to zero. Further, I use setf to assign the object\n"
"created by make-instance to the variable many-lost-hours. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        RETRO-GAMES&gt;(setf many-lost-hours (make-"
"instance 'game :name &quot;Tetris&quot;))\n"
"        <b>#&lt;GAME @ #x7213da32&gt;</b>\n"
"      </pre>\n"
"<p>\n"
"Поскольку я указал <b>начальный аргумент</b> в моем определении слота \n"
"name(имени), я могу передать этот аргумент напрямую и инициализировать \n"
"этот слот как &quot;Tetris&quot;. Слот votes(голоса) не имеет начального "
"аргумента. \n"
"Вместо этого я указываю код, который хочу запустить во время создания "
"экземпляра,\n"
"чтобы вычислить его начальное значение с помощью :initform. В этом случае "
"код тривиален, \n"
"так как я хочу только инициализировать количество голосов нулем. Кроме того, "
"я использую\n"
"setf для присвоения объекта, созданного make-instance, переменной many-lost-"
"hours. \n"
"</p>"

#: in_ed/lispweb.html:385
msgid ""
"<p>Now that we got an instance of game we would like to do something\n"
"with it. We could of course write code ourselves to access the slots.\n"
"However, there's a more lispy way; defclass provides the possibility\n"
"to automatically generate accessor functions for our slots: \n"
"</p>"
msgstr ""
"<p>Теперь, когда у нас есть экземпляр игры, мы хотели бы что-то с ним "
"сделать. \n"
"Конечно, мы могли бы сами написать код для доступа к слотам. Однако есть "
"более \n"
"лисповый способ; defclass предоставляет возможность автоматически "
"генерировать \n"
"функции доступа для наших слотов(accessor):  \n"
"</p>"

#: in_ed/lispweb.html:400
msgid ""
"<pre class=\"western\">        (defclass game ()\n"
"          ((name  <b>:reader   name</b> \n"
"                  :initarg  :name)\n"
"           (votes <b>:accessor votes</b> \n"
"                  :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"The option :reader in the name slot will automatically create a read\n"
"function and the option :accessor used for the votes slot will create\n"
"both read and write functions. Lisp is pleasantly uniform in its\n"
"syntax and these generated functions are invoked just like any other\n"
"function: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defclass game ()\n"
"          ((name  <b>:reader   name</b> \n"
"                  :initarg  :name)\n"
"           (votes <b>:accessor votes</b> \n"
"                  :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"Опция :reader в слоте имени автоматически создаст функцию чтения, а \n"
"опция :accessor, используемая для слота votes(голосов), создаст функции \n"
"как чтения, так и записи. Lisp приятно единообразен по синтаксису, и эти \n"
"сгенерированные функции вызываются так же, как и любые другие функции: \n"
"</p>"

#: in_ed/lispweb.html:416
msgid ""
"<pre class=\"western\">        RETRO-GAMES&gt;(name many-lost-hours)\n"
"        <b>&quot;Tetris&quot;</b>\n"
"        RETRO-GAMES&gt;(votes many-lost-hours)\n"
"        <b>0</b>\n"
"        RETRO-GAMES&gt;(incf (votes many-lost-hours))\n"
"        <b>1</b>\n"
"        RETRO-GAMES&gt;(votes many-lost-hours)\n"
"        <b>1</b>\n"
"      </pre>\n"
"<p>\n"
"The only new function here is incf , which when given one argument\n"
"increases its value by one. We can encapsulate this mechanism in a\n"
"method used to vote for the given game: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        RETRO-GAMES&gt;(name many-lost-hours)\n"
"        <b>&quot;Tetris&quot;</b>\n"
"        RETRO-GAMES&gt;(votes many-lost-hours)\n"
"        <b>0</b>\n"
"        RETRO-GAMES&gt;(incf (votes many-lost-hours))\n"
"        <b>1</b>\n"
"        RETRO-GAMES&gt;(votes many-lost-hours)\n"
"        <b>1</b>\n"
"      </pre>\n"
"<p>\n"
"Единственная новая функция здесь - incf, которая при задании одного "
"аргумента \n"
"увеличивает свое значение на единицу. Мы можем инкапсулировать этот "
"механизм \n"
"в метод, используемый для голосования за данную игру: \n"
"</p>"

#: in_ed/lispweb.html:425
msgid ""
"<pre class=\"western\">        (defmethod vote-for (user-selected-game)\n"
"           (incf (votes user-selected-game)))\n"
"      </pre>\n"
"<p>\n"
"The top-level allows us to immediately try it out and vote for\n"
"Tetris: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defmethod vote-for (user-selected-game)\n"
"           (incf (votes user-selected-game)))\n"
"      </pre>\n"
"<p>\n"
"Верхний уровень позволяет сразу опробовать и проголосовать за Tetris:  \n"
"</p>"

#: in_ed/lispweb.html:437
msgid ""
"<pre class=\"western\">        \n"
"       RETRO-GAMES&gt;(votes many-lost-hours)\n"
"       <b>1</b>\n"
"       RETRO-GAMES&gt;(vote-for many-lost-hours)\n"
"       <b>2</b>\n"
"       RETRO-GAMES&gt;(votes many-lost-hours)\n"
"       <b>2</b>\n"
"      </pre><h2 class=\"western\">\n"
"A prototypic back end \n"
"</h2>"
msgstr ""
"<pre class=\"western\">        \n"
"       RETRO-GAMES&gt;(votes many-lost-hours)\n"
"       <b>1</b>\n"
"       RETRO-GAMES&gt;(vote-for many-lost-hours)\n"
"       <b>2</b>\n"
"       RETRO-GAMES&gt;(votes many-lost-hours)\n"
"       <b>2</b>\n"
"      </pre><h2 class=\"western\">\n"
"Прототип серверной части(back end) \n"
"</h2>"

#: in_ed/lispweb.html:445
msgid ""
"<p>Before we can jump into the joys of generating web pages, we need\n"
"a back end for our application. Because Lisp makes it so easy to\n"
"modify existing applications, it's common to start out really simple\n"
"and let the design evolve as we learn more about the problem we're\n"
"trying to solve. Thus, I'll start by using a list in memory as a\n"
"simple, non-persistent storage. \n"
"</p>"
msgstr ""
"<p>Прежде чем мы сможем окунуться в радость создания веб-страниц, \n"
"нам понадобится серверная часть для нашего приложения. Поскольку Lisp \n"
"позволяет легко изменять существующие приложения, обычно начинают очень \n"
"просто и позволяют развивать разработку по мере того, как мы узнаем \n"
"больше о проблеме, которую пытаемся решить. Таким образом, я начну с \n"
"использования списка в памяти как простого непостоянного(non-persistent) \n"
"хранилища.  \n"
"</p>"

#: in_ed/lispweb.html:459
msgid ""
"<pre class=\"western\">        (defvar *games* '())\n"
"      </pre>\n"
"<p>\n"
"The expression above defines and initializes the global variable\n"
"(actually the Lisp term is <i>special variable</i>) *games* to an\n"
"empty list. The asterisks aren't part of the syntax; it's just a\n"
"naming convention for globals. Lists may not be the most efficient\n"
"data structure for all problems, but Common Lisp has great support\n"
"for lists and they are easy to work with. Later we'll change to a\n"
"real database and, with that in mind, I encapsulate the access to\n"
"*games* in some small functions: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defvar *games* '())\n"
"      </pre>\n"
"<p>\n"
"Выражение выше определяет и инициализирует глобальную переменную \n"
"(фактически термин Lisp - это <i>специальная переменная</i>) *games* \n"
"пустым списком. Звездочки не являются частью синтаксиса; это просто \n"
"соглашение об именах для глобальных объектов. Списки могут быть не \n"
"самой эффективной структурой данных для всех проблем, но Common Lisp \n"
"отлично поддерживает списки, и с ними легко работать. Позже мы перейдем \n"
"к настоящей базе данных, и, имея это в виду, я инкапсулирую доступ к \n"
"*games* в несколько небольших функций: \n"
"</p>"

#: in_ed/lispweb.html:473
msgid ""
"<pre class=\"western\">        (defun game-from-name (name)\n"
"          (find name *games* :test #'string-equal \n"
"                             :key  #'name))\n"
"      </pre>\n"
"<p>\n"
"Our first function game-from-name is implemented in terms of find .\n"
"find takes an item and a sequence. Because we're comparing strings I\n"
"tell find to use the function string-equal for comparison (remember,\n"
"#' is a short cut to refer to a function). I also specify the key to\n"
"compare. In this case, we're interested in comparing the value\n"
"returned by the name function on each game object. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defun game-from-name (name)\n"
"          (find name *games* :test #'string-equal \n"
"                             :key  #'name))\n"
"      </pre>\n"
"<p>\n"
"Наша первая функция game-from-name реализована в терминах find. \n"
"find принимает элемент и последовательность. Поскольку мы сравниваем "
"строки, \n"
"я говорю find использовать для сравнения функцию string-equal (помните, \n"
"#'- это сокращение для ссылки на функцию). Также указываю ключ для "
"сравнения. \n"
"В данном случае нас интересует сравнение значения, возвращаемого функцией \n"
"name для каждого  объекта game.\n"
"</p>"

#: in_ed/lispweb.html:481
msgid ""
"<p>If there's no match find returns NIL , which evaluates to false in\n"
"a boolean context. That means we can reuse game-from-name when we\n"
"want to know if a game is stored in the *games* list. However, we\n"
"want to be clear with our intent: \n"
"</p>"
msgstr ""
"<p>Если совпадений нет, find возвращает NIL, что в логическом контексте \n"
"принимает значение false. Это означает, что мы можем повторно использовать \n"
"game-from-name, когда хотим знать, хранится ли игра в списке *games*. \n"
"Однако мы хотим прояснить наши намерения: \n"
"</p>"

#: in_ed/lispweb.html:495
msgid ""
"<pre class=\"western\">        (defun game-stored? (game-name)\n"
"         (game-from-name game-name))\n"
"      </pre>\n"
"<p>\n"
"As illustrated in Figure 1, we want to present the games sorted on\n"
"popularity. Using Common Lisp's sort function this is pretty\n"
"straightforward; we only have to take care, because for efficiency\n"
"reasons sort is destructive. That is, sort is allowed to modify its\n"
"argument. We can preserve our *games* list by passing a copy to sort\n"
". I tell sort to return a list sorted in descending order based on\n"
"the value returned by the votes function invoked on each game: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defun game-stored? (game-name)\n"
"         (game-from-name game-name))\n"
"      </pre>\n"
"<p>\n"
"Как показано на рисунке 1, мы хотим представить игры, отсортированные по "
"популярности. \n"
"Это довольно просто сделать с помощью функции сортировки Common Lisp; нам "
"нужно только\n"
"позаботиться, потому что по соображениям эффективности сортировка "
"деструктивна. \n"
"То есть sort может изменять свой аргумент. Мы можем сохранить наш список "
"*games*, \n"
"передав копию для сортировки. Я говорю sort возвращать список, "
"отсортированный \n"
"в порядке убывания на основе значения, возвращаемого функцией votes, "
"вызываемой \n"
"для каждой game(игры):  \n"
"</p>"

#: in_ed/lispweb.html:504
msgid ""
"<pre class=\"western\">        (defun games ()\n"
"         (sort (copy-list *games*) #'&gt; :key #'votes))\n"
"      </pre>\n"
"<p>\n"
"So far the queries. Let's define one more utility for actually adding\n"
"games to our storage: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defun games ()\n"
"         (sort (copy-list *games*) #'&gt; :key #'votes))\n"
"      </pre>\n"
"<p>\n"
"Пока что запросы. Определим еще одну утилиту для фактического добавления \n"
"игр в наше хранилище:  \n"
"</p>"

#: in_ed/lispweb.html:515
msgid ""
"<pre class=\"western\">        (defun add-game (name)\n"
"         (unless (game-stored? name)\n"
"           (push (make-instance 'game :name name) *games*)))\n"
"      </pre>\n"
"<p>\n"
"push is a modifying operation and it prepends the game instantiated\n"
"by make-instance to the *games* list. Let's try it all out at the top\n"
"level. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (defun add-game (name)\n"
"         (unless (game-stored? name)\n"
"           (push (make-instance 'game :name name) *games*)))\n"
"      </pre>\n"
"<p>\n"
"push - это модифицирующая операция, которая добавляет game(игру), \n"
"созданную make-instance, в список *games*. Давайте попробуем все \n"
"это на высшем уровне. \n"
"</p>"

#: in_ed/lispweb.html:538
msgid ""
"<pre class=\"western\">        \n"
"      RETRO-GAMES&gt;(games)\n"
"      <b>NIL</b>\n"
"      RETRO-GAMES&gt;(add-game &quot;Tetris&quot;)\n"
"      <b>(#&lt;GAME @ #x71b943c2&gt;)</b>\n"
"      RETRO-GAMES&gt;(game-from-name &quot;Tetris&quot;)\n"
"      <b>#&lt;GAME @ #x71b943c2&gt;</b>\n"
"      RETRO-GAMES&gt;(add-game &quot;Tetris&quot;)\n"
"      <b>NIL</b>\n"
"      RETRO-GAMES&gt;(games)\n"
"      <b>(#&lt;GAME @ #x71b943c2&gt;)</b>\n"
"      RETRO-GAMES&gt;(mapcar #'name (games))\n"
"      <b>(&quot;Tetris&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"The values returned to the top level may not look too informative.\n"
"It's basically the printed representation of a game object. Common\n"
"Lisp allows us to customize how an object shall be printed, but we\n"
"will not go into the details. Instead, with this prototypic back end\n"
"in place, we're prepared to enter the web. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"      RETRO-GAMES&gt;(games)\n"
"      <b>NIL</b>\n"
"      RETRO-GAMES&gt;(add-game &quot;Tetris&quot;)\n"
"      <b>(#&lt;GAME @ #x71b943c2&gt;)</b>\n"
"      RETRO-GAMES&gt;(game-from-name &quot;Tetris&quot;)\n"
"      <b>#&lt;GAME @ #x71b943c2&gt;</b>\n"
"      RETRO-GAMES&gt;(add-game &quot;Tetris&quot;)\n"
"      <b>NIL</b>\n"
"      RETRO-GAMES&gt;(games)\n"
"      <b>(#&lt;GAME @ #x71b943c2&gt;)</b>\n"
"      RETRO-GAMES&gt;(mapcar #'name (games))\n"
"      <b>(&quot;Tetris&quot;)</b>\n"
"      </pre>\n"
"<p>\n"
"Значения, возвращаемые на верхний уровень, могут выглядеть не \n"
"слишком информативными. По сути, это печатное представление объекта game. \n"
"Common Lisp позволяет нам настраивать способ печати объекта, но мы не "
"будем \n"
"вдаваться в подробности. Вместо этого, с этим прототипом серверной части, \n"
"мы готовы войти в Интернет.  \n"
"</p>"

#: in_ed/lispweb.html:542
msgid ""
"<h2 class=\"western\">Generating HTML dynamically \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Генерация HTML динамически \n"
"</h2>"

#: in_ed/lispweb.html:549
msgid ""
"<p>The first step in designing an embedded domain specific language\n"
"is to find a Lisp representation of the target language. For HTML\n"
"this is really simple as both HTML and Lisp are represented in tree\n"
"structures, although Lisp is less verbose. Here's an example using\n"
"the CL-WHO library: \n"
"</p>"
msgstr ""
"<p>Первым шагом в разработке встроенного предметно-ориентированного языка \n"
"является поиск лисп-представления целевого языка. Для HTML это "
"действительно \n"
"просто, поскольку и HTML, и Lisp представлены в виде древовидной "
"структуры, \n"
"хотя Lisp менее подробен. Вот пример использования библиотеки CL-WHO:  \n"
"</p>"

#: in_ed/lispweb.html:563
msgid ""
"<pre class=\"western\">        \n"
"       (with-html-output (*standard-output* nil :indent t)\n"
"           (:html\n"
"              (:head\n"
"                 (:title &quot;Test page&quot;))\n"
"              (:body\n"
"                 (:p &quot;CL-WHO is really easy to use&quot;))))\n"
"      </pre>\n"
"<p>\n"
"This code will expand into the following HTML, which is outputted to\n"
"*standard-output* : \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (with-html-output (*standard-output* nil :indent t)\n"
"           (:html\n"
"              (:head\n"
"                 (:title &quot;Test page&quot;))\n"
"              (:body\n"
"                 (:p &quot;CL-WHO is really easy to use&quot;))))\n"
"      </pre>\n"
"<p>\n"
"Этот код будет расширен до следующего HTML, который выводится в\n"
"*standard-output* : \n"
"</p>"

#: in_ed/lispweb.html:579
msgid ""
"<pre class=\"western\">        \n"
"       &lt;html&gt;\n"
"          &lt;head&gt;\n"
"             &lt;title&gt;Test page &lt;/title&gt;\n"
"          &lt;/head&gt;\n"
"          &lt;body&gt;\n"
"             &lt;p&gt; CL-WHO is really easy to use &lt;/p&gt;\n"
"          &lt;/body&gt;\n"
"       &lt;/html&gt;\n"
"      </pre>\n"
"<p>\n"
"CL-WHO also allows us to embed Lisp expressions, setting the scene\n"
"for dynamic web pages. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       &lt;html&gt;\n"
"          &lt;head&gt;\n"
"             &lt;title&gt;Test page &lt;/title&gt;\n"
"          &lt;/head&gt;\n"
"          &lt;body&gt;\n"
"             &lt;p&gt; CL-WHO is really easy to use &lt;/p&gt;\n"
"          &lt;/body&gt;\n"
"       &lt;/html&gt;\n"
"      </pre>\n"
"<p>\n"
"CL-WHO aтакже позволяет нам встраивать выражения Лиспа, настраивая \n"
"сцену для динамических веб-страниц.  \n"
"</p>"

#: in_ed/lispweb.html:583
msgid ""
"<h2 class=\"western\">Macros: Fighting the evils of code duplication \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Макросы: борьба со злом дублирования кода\n"
"</h2>"

#: in_ed/lispweb.html:592
msgid ""
"<p>Although CL-WHO does provide a tighter representation than raw\n"
"HTML we're still facing the potential risk of code duplication; the\n"
"html, head, and body tags form a pattern that will recur on all\n"
"pages. And it'll only get worse as we start to write strict and\n"
"validating XHTML 1.0, where we have to include more tags and\n"
"attributes and, of course, start every page with that funny DOCTYPE\n"
"line. \n"
"</p>"
msgstr ""
"<p>Хотя CL-WHO обеспечивает более точное представление, чем сырой HTML, \n"
"мы все еще сталкиваемся с потенциальным риском дублирования кода; \n"
"теги html, head и body образуют шаблон, который будет повторяться \n"
"на всех страницах. И станет только хуже, когда мы начнем писать строгий и \n"
"проверяющий XHTML 1.0, где нам придется включать больше тегов и атрибутов "
"и, \n"
"конечно же, начинать каждую страницу с этой забавной строки DOCTYPE.  \n"
"</p>"

#: in_ed/lispweb.html:608
msgid ""
"<p>Further, if you look at Figure 1 you'll notice that the retro\n"
"games page has a header with a picture of that lovely Commodore\n"
"(photo by Bill Bertram - thanks!) and a strap line. I want to be able\n"
"to define that header once and have all my pages using it\n"
"automatically. The problem screams for a suitable abstraction and\n"
"this is where Lisp differs from other languages. In Lisp, we can\n"
"actually take on the role of a language designer and extend the\n"
"language with our own syntax. The feature that allows this is macros.\n"
"Syntactically, macros look like functions, but are entirely different\n"
"beasts. Sure, just like functions macros take arguments. The\n"
"difference is that the arguments to macros are source code, because\n"
"macros are used by the compiler to generate code. \n"
"</p>"
msgstr ""
"<p>Кроме того, если вы посмотрите на рисунок 1, вы заметите, что на \n"
"странице ретро-игр есть заголовок с изображением этого прекрасного \n"
"Commodore (фото Билла Бертрама - спасибо!) И ремешок. Я хочу иметь \n"
"возможность определить этот заголовок один раз, и все мои страницы \n"
"будут использовать его автоматически. Проблема требует подходящей "
"абстракции, \n"
"и в этом Лисп отличается от других языков. В Лиспе мы фактически можем \n"
"взять на себя роль разработчика языка и расширить язык нашим собственным "
"синтаксисом. \n"
"Функциональность которая позволяет это сделать, - это макросы. "
"Синтаксически \n"
"макросы выглядят как функции, но представляют собой совершенно разные "
"зверюги. \n"
"Конечно, точно так же, как макросы функций принимают аргументы. Разница в "
"том, \n"
"что аргументы макросов - это исходный код, потому что макросы используются \n"
"компилятором для генерации кода.  \n"
"</p>"

#: in_ed/lispweb.html:617
msgid ""
"<p>Macros can be a conceptual challenge as they erase the line\n"
"between compile time and runtime. What macros do are expanding\n"
"themselves into code that are actually compiled. In their expansion\n"
"macros have access to the whole language, including other macros, and\n"
"may call functions, create objects, etc. \n"
"</p>"
msgstr ""
"<p>Макросы могут быть концептуальной проблемой, поскольку они стирают \n"
"грань между временем компиляции и временем выполнения. Макросы расширяются \n"
"в код, который фактически компилируется. При своем расширении макросы "
"имеют \n"
"доступ ко всему языку, включая другие макросы, и могут вызывать функции, \n"
"создавать объекты и т. Д.\n"
"</p>"

#: in_ed/lispweb.html:627
msgid ""
"<p>So, let's put this amazing macro mechanism to work by defining a\n"
"new syntactic construct, the standard-page . A standard-page will\n"
"abstract away all XHTML boiler plate code and automatically generate\n"
"the heading on each page. The macro will take two arguments. The\n"
"first is the title of the page and the second the code defining the\n"
"body of the actual web-page. Here's a simple usage example: \n"
"</p>"
msgstr ""
"<p>Итак, давайте задействуем этот удивительный механизм макросов, \n"
"определив новую синтаксическую конструкцию, standard-page(стандартную "
"страницу). \n"
"standard-page абстрагирует весь шаблонный код XHTML и автоматически \n"
"генерирует заголовок на каждой странице. Макрос примет два аргумента. \n"
"Первый - это заголовок страницы, а второй - код, определяющий тело "
"фактической \n"
"веб-страницы. Вот простой пример использования: \n"
"</p>"

#: in_ed/lispweb.html:639
msgid ""
"<pre class=\"western\">        \n"
"       (standard-page (:title &quot;Retro Games&quot;)\n"
"                      (:h1 &quot;Top Retro Games&quot;)\n"
"                      (:p &quot;We'll write the code later...&quot;))\n"
"      </pre>\n"
"<p>\n"
"Much of the macro will be straightforward CL-WHO constructs. Using\n"
"the backquote syntax(the ` character), we can specify a template for\n"
"the code we want to generate: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (standard-page (:title &quot;Retro Games&quot;)\n"
"                      (:h1 &quot;Top Retro Games&quot;)\n"
"                      (:p &quot;We'll write the code later...&quot;))\n"
"      </pre>\n"
"<p>\n"
"Большая часть макроса будет простыми конструкциями CL-WHO. Используя \n"
"синтаксис обратной кавычки (символьный знак `), мы можем указать шаблон \n"
"для кода, который мы хотим сгенерировать: \n"
"</p>"

#: in_ed/lispweb.html:673
msgid ""
"<pre class=\"western\">        \n"
"       (defmacro standard-page ((&amp;key title) &amp;body body)\n"
"         `(with-html-output-to-string (*standard-output* nil :prologue t :"
"indent t)\n"
"           (:html :xmlns &quot;http://www.w3.org/1999/xhtml&quot;\n"
"                  :xml\\:lang &quot;en&quot; \n"
"                  :lang &quot;en&quot;\n"
"                  (:head \n"
"                   (:meta :http-equiv &quot;Content-Type&quot; \n"
"                          :content    &quot;text/html;charset=utf-8&quot;)\n"
"                   (:title <b>,title</b>)\n"
"                   (:link :type &quot;text/css&quot; \n"
"                          :rel &quot;stylesheet&quot;\n"
"                          :href &quot;/retro.css&quot;))\n"
"                  (:body \n"
"                   (:div :id &quot;header&quot; ; Retro games header\n"
"                         (:img :src &quot;/logo.jpg&quot; \n"
"                               :alt &quot;Commodore 64&quot; \n"
"                               :class &quot;logo&quot;)\n"
"                         (:span :class &quot;strapline&quot; \n"
"                                &quot;Vote on your favourite Retro "
"Game&quot;))\n"
"                   ,@<b>body</b>))))\n"
"      </pre>\n"
"<p>\n"
"Within the backquoted expression we can use , (comma) to evaluate an\n"
"argument and ,@ (comma-at) to evaluate and splice a list argument.\n"
"Remember, the arguments to a macro are code. In this example the\n"
"first argument title is bound to &quot;Retro Games&quot; and the\n"
"second argument body contains the :h1 and :p expressions wrapped-up\n"
"in a list. In the macro definition, the code bound to these arguments\n"
"is simply inserted on the proper places in our backquoted template\n"
"code. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (defmacro standard-page ((&amp;key title) &amp;body body)\n"
"         `(with-html-output-to-string (*standard-output* nil :prologue t :"
"indent t)\n"
"           (:html :xmlns &quot;http://www.w3.org/1999/xhtml&quot;\n"
"                  :xml\\:lang &quot;en&quot; \n"
"                  :lang &quot;en&quot;\n"
"                  (:head \n"
"                   (:meta :http-equiv &quot;Content-Type&quot; \n"
"                          :content    &quot;text/html;charset=utf-8&quot;)\n"
"                   (:title <b>,title</b>)\n"
"                   (:link :type &quot;text/css&quot; \n"
"                          :rel &quot;stylesheet&quot;\n"
"                          :href &quot;/retro.css&quot;))\n"
"                  (:body \n"
"                   (:div :id &quot;header&quot; ; Retro games header\n"
"                         (:img :src &quot;/logo.jpg&quot; \n"
"                               :alt &quot;Commodore 64&quot; \n"
"                               :class &quot;logo&quot;)\n"
"                         (:span :class &quot;strapline&quot; \n"
"                                &quot;Vote on your favourite Retro "
"Game&quot;))\n"
"                   ,@<b>body</b>))))\n"
"      </pre>\n"
"<p>\n"
"Внутри выражения, заключенного в обратные кавычки, мы можем \n"
"использовать , (запятую) для вычисления аргумента и ,@ (запятая-at), \n"
"чтобы вычислить и объединить аргумент список. Помните, что \n"
"аргументы макроса - это код. В этом примере первый аргумент title\n"
"привязан к &quot;Retro Games&quot;, а второй аргумент body\n"
"содержит выражения :h1 и :p, заключенные в списке. В определении \n"
"макроса код, связанный с этими аргументами, просто вставляется \n"
"в нужные места в нашем коде шаблона, заключенном в обратные кавычки. \n"
"</p>"

#: in_ed/lispweb.html:681
msgid ""
"<p>The power we get from macros become evident as we look at the\n"
"generated code. The three lines in the usage example above expands\n"
"into this (note that Lisp symbols are case-insensitive and thus\n"
"usually presented in uppercase): \n"
"</p>"
msgstr ""
"<p>Мощь, которую мы получаем от макросов, становится очевидной, \n"
"когда мы смотрим на сгенерированный код. Три строки в приведенном \n"
"выше примере использования расширяются в это (обратите внимание, \n"
"что символы Lisp нечувствительны к регистру и поэтому обычно \n"
"представлены в верхнем регистре):  \n"
"</p>"

#: in_ed/lispweb.html:710
msgid ""
"<pre class=\"western\">        \n"
"       (WITH-HTML-OUTPUT-TO-STRING (*STANDARD-OUTPUT* NIL :PROLOGUE T :"
"INDENT T)  \n"
"        (:HTML :XMLNS &quot;http://www.w3.org/1999/xhtml&quot;\n"
"               :|XML:LANG| &quot;en&quot; \n"
"               :LANG &quot;en&quot;\n"
"               (:HEAD\n"
"                (:META :HTTP-EQUIV &quot;Content-Type&quot; \n"
"                       :CONTENT &quot;text/html;charset=utf-8&quot;)\n"
"                <b>(:TITLE &quot;Retro Games&quot;)</b>\n"
"                (:LINK :TYPE &quot;text/css&quot; \n"
"                       :REL &quot;stylesheet&quot; \n"
"                       :HREF &quot;/retro.css&quot;))\n"
"               (:BODY\n"
"                (:DIV :ID &quot;header&quot;\n"
"                      (:IMG :SRC &quot;/logo.jpg&quot; \n"
"                            :ALT &quot;Commodore 64&quot; \n"
"                            :CLASS &quot;logo&quot;)\n"
"                      (:SPAN :CLASS &quot;strapline&quot; \n"
"                             &quot;Vote on your favourite Retro "
"Game&quot;))\n"
"                <b>(:H1 &quot;Top Retro Games&quot;)</b>\n"
"                <b>(:P &quot;We'll write the code later...&quot;)</b>)))\n"
"      </pre>\n"
"<p>\n"
"This is a big win; all this is code that we don't have to write. Now\n"
"that we have a concise way to express web-pages with a uniform look,\n"
"it's time to introduce Hunchentoot. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (WITH-HTML-OUTPUT-TO-STRING (*STANDARD-OUTPUT* NIL :PROLOGUE T :"
"INDENT T)  \n"
"        (:HTML :XMLNS &quot;http://www.w3.org/1999/xhtml&quot;\n"
"               :|XML:LANG| &quot;en&quot; \n"
"               :LANG &quot;en&quot;\n"
"               (:HEAD\n"
"                (:META :HTTP-EQUIV &quot;Content-Type&quot; \n"
"                       :CONTENT &quot;text/html;charset=utf-8&quot;)\n"
"                <b>(:TITLE &quot;Retro Games&quot;)</b>\n"
"                (:LINK :TYPE &quot;text/css&quot; \n"
"                       :REL &quot;stylesheet&quot; \n"
"                       :HREF &quot;/retro.css&quot;))\n"
"               (:BODY\n"
"                (:DIV :ID &quot;header&quot;\n"
"                      (:IMG :SRC &quot;/logo.jpg&quot; \n"
"                            :ALT &quot;Commodore 64&quot; \n"
"                            :CLASS &quot;logo&quot;)\n"
"                      (:SPAN :CLASS &quot;strapline&quot; \n"
"                             &quot;Vote on your favourite Retro "
"Game&quot;))\n"
"                <b>(:H1 &quot;Top Retro Games&quot;)</b>\n"
"                <b>(:P &quot;We'll write the code later...&quot;)</b>)))\n"
"      </pre>\n"
"<p>\n"
"Это большая победа; все это код, который нам не нужно писать. \n"
"Теперь, когда у нас есть краткий способ выразить веб-страницы \n"
"с помощью единообразного вида, пришло время представить Hunchentoot. \n"
"</p>"

#: in_ed/lispweb.html:714
msgid ""
"<h2 class=\"western\">More than an opera \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Больше, чем опера \n"
"</h2>"

#: in_ed/lispweb.html:719
msgid ""
"<p>Named after a Zappa sci-fi opera, Edi Weitz's Hunchentoot is a\n"
"full featured web-server written in Common Lisp. To launch\n"
"Hunchentoot, we just invoke its start-server function: \n"
"</p>"
msgstr ""
"<p>Hunchentoot Эди Вейца, названный в честь научно-фантастической \n"
"оперы Заппы, представляет собой полнофункциональный веб-сервер,\n"
"написанный на Common Lisp. Чтобы запустить Hunchentoot, мы просто \n"
"вызываем его функцию start-server: \n"
"</p>"

#: in_ed/lispweb.html:734
msgid ""
"<pre class=\"western\">        RETRO-GAMES&gt;(start-server :port 8080)\n"
"      </pre>\n"
"<p>\n"
"start-server supports several arguments, but we're only interested in\n"
"specifying a port other than the default port 80. And that's it - the\n"
"server's up and running. We can test it by pointing a web browser to\n"
"http://localhost:8080/, which should display Hunchentoot's default\n"
"page. To actually publish something, we have to provide Hunchentoot\n"
"with a <i>handler</i>. In Hunchentoot all requests are dynamically\n"
"dispatched to an associated handler and the framework contains\n"
"several functions for defining dispatchers. The code below creates a\n"
"dispatcher and adds it to Hunchentoot's dispatch table: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        RETRO-GAMES&gt;(start-server :port 8080)\n"
"      </pre>\n"
"<p>\n"
"start-server поддерживает несколько аргументов, но нас интересует \n"
"только указать порт, отличный от порта по умолчанию 80. \n"
"И все - сервер запущен и работает. Мы можем проверить это, указав \n"
"в веб-браузере адрес http://localhost:8080/, который должен отображать \n"
"страницу Hunchentoot по умолчанию. Чтобы что-то опубликовать, \n"
"мы должны предоставить Hunchentoot <i>handler</i>(обработчик). \n"
"В Hunchentoot все запросы динамически отправляются соответствующему \n"
"обработчику, а фреймворк содержит несколько функций для определения \n"
"диспетчеров(распределителей сообщений). Приведенный ниже код создает \n"
"диспетчер и добавляет его в таблицу диспетчеризации Hunchentoot:  \n"
"</p>"

#: in_ed/lispweb.html:743
msgid ""
"<pre class=\"western\">        (push (create-prefix-dispatcher &quot;/retro-"
"games.htm&quot; 'retro-games) *dispatch-table*)\n"
"      </pre>\n"
"<p>\n"
"The dispatcher will invoke the function, retro-games , whenever an\n"
"URI request starts with /retro-games.htm . Now we just have to define\n"
"the retro-games function that generates the HTML: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (push (create-prefix-dispatcher &quot;/retro-"
"games.htm&quot; 'retro-games) *dispatch-table*)\n"
"      </pre>\n"
"<p>\n"
"Диспетчер будет вызывать функцию retro-games всякий раз, когда \n"
"запрос URI начинается с /retro-games.htm. Теперь нам просто \n"
"нужно определить функцию retro-games, которая генерирует HTML:  \n"
"</p>"

#: in_ed/lispweb.html:760
msgid ""
"<pre class=\"western\">        \n"
"       (defun retro-games ()\n"
"         (standard-page (:title &quot;Retro Games&quot;)\n"
"                        (:h1 &quot;Top Retro Games&quot;)\n"
"                        (:p &quot;We'll write the code later...&quot;)))\n"
"      </pre>\n"
"<p>\n"
"That's it - the retro games page is online. But I wouldn't be quick\n"
"to celebrate; while we took care to abstract away repetitive patterns\n"
"in standard-page , we've just run into another more subtle form of\n"
"duplication. The problem is that every time we want to create a new\n"
"page we have to explicitly create a dispatcher for our handle.\n"
"Wouldn't it be nice if Lisp could do that automatically for us?\n"
"Basically I want to define a function like this: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (defun retro-games ()\n"
"         (standard-page (:title &quot;Retro Games&quot;)\n"
"                        (:h1 &quot;Top Retro Games&quot;)\n"
"                        (:p &quot;We'll write the code later...&quot;)))\n"
"      </pre>\n"
"<p>\n"
"Вот и вся - онлайн-страница ретро-игр. Но я бы не спешил праздновать; \n"
"Хотя мы постарались абстрагироваться от повторяющихся шаблонов на \n"
"стандартной странице, мы только что столкнулись с другой, более \n"
"тонкой формой дублирования. Проблема в том, что каждый раз, \n"
"когда мы хотим создать новую страницу, мы должны явно создавать \n"
"диспетчер для нашего обработчика. Было бы неплохо, если бы \n"
"Lisp мог делать это за нас автоматически? В основном я \n"
"хочу определить такую функцию: \n"
"</p>"

#: in_ed/lispweb.html:774
msgid ""
"<pre class=\"western\">        \n"
"       (define-url-fn (retro-games)\n"
"         (standard-page (:title &quot;Retro Games&quot;)\n"
"                        (:h1 &quot;Top Retro Games&quot;)\n"
"                        (:p &quot;We'll write the code later...&quot;)))\n"
"      </pre>\n"
"<p>\n"
"and have Lisp to create a handler, associate it with a dispatcher and\n"
"put it in the dispatch table as I compile the code. Guess what, using\n"
"macros the syntax is ours. All we have to do is reformulate our\n"
"wishes in a defmacro : \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (define-url-fn (retro-games)\n"
"         (standard-page (:title &quot;Retro Games&quot;)\n"
"                        (:h1 &quot;Top Retro Games&quot;)\n"
"                        (:p &quot;We'll write the code later...&quot;)))\n"
"      </pre>\n"
"<p>\n"
"и попросил Lisp создать обработчик, связать его с диспетчером и поместить \n"
"в таблицу диспетчеризации по мере компиляции кода. Угадайте, какой "
"синтаксис\n"
"использует наш макрос. Все, что нам нужно сделать, это переформулировать \n"
"наши пожелания в defmacro:  \n"
"</p>"

#: in_ed/lispweb.html:787
msgid ""
"<pre class=\"western\">        \n"
"       (defmacro define-url-fn ((name) &amp;body body)\n"
"         `(progn\n"
"            (defun ,<b>name</b> ()\n"
"              ,@<b>body</b>)\n"
"            (push (create-prefix-dispatcher ,(format nil &quot;/~(~a~)."
"htm&quot; <b>name</b>) ',<b>name</b>) *dispatch-table*)))\n"
"      </pre>\n"
"<p>\n"
"Now our &quot;wish code&quot; above actually compiles and generates\n"
"the following Lisp code (macro arguments <b>highlighted</b>): \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (defmacro define-url-fn ((name) &amp;body body)\n"
"         `(progn\n"
"            (defun ,<b>name</b> ()\n"
"              ,@<b>body</b>)\n"
"            (push (create-prefix-dispatcher ,(format nil &quot;/~(~a~)."
"htm&quot; <b>name</b>) ',<b>name</b>) *dispatch-table*)))\n"
"      </pre>\n"
"<p>\n"
"Теперь наш &quot;wish code&quot;(код пожелания) указанного выше фактически "
"компилируется \n"
"и генерирует следующий код Лиспа (аргументы макроса <b>выделены</b>): \n"
"</p>"

#: in_ed/lispweb.html:800
msgid ""
"<pre class=\"western\">        \n"
"       (PROGN \n"
"        (DEFUN <b>RETRO-GAMES ()</b>\n"
"          <b>(STANDARD-PAGE (:TITLE &quot;Retro Games&quot;)</b>\n"
"                         <b>(:H1 &quot;Top Retro Games&quot;)</b>\n"
"                         <b>(:P &quot;We'll write the code later..."
"&quot;)))</b>\n"
"        (PUSH (CREATE-PREFIX-DISPATCHER &quot;/<b>retro-games</b>.htm&quot; "
"'<b>RETRO-GAMES</b>) *DISPATCH-TABLE*))\n"
"      </pre>\n"
"<p>\n"
"There's a few interesting things about this macro: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (PROGN \n"
"        (DEFUN <b>RETRO-GAMES ()</b>\n"
"          <b>(STANDARD-PAGE (:TITLE &quot;Retro Games&quot;)</b>\n"
"                         <b>(:H1 &quot;Top Retro Games&quot;)</b>\n"
"                         <b>(:P &quot;We'll write the code later..."
"&quot;)))</b>\n"
"        (PUSH (CREATE-PREFIX-DISPATCHER &quot;/<b>retro-games</b>.htm&quot; "
"'<b>RETRO-GAMES</b>) *DISPATCH-TABLE*))\n"
"      </pre>\n"
"<p>\n"
"В этом макросе есть несколько интересных моментов: \n"
"</p>"

#: in_ed/lispweb.html:809
msgid ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">It illustrates that macros can\n"
"\ttake other macros as arguments. The Lisp compiler will continue to\n"
"\texpand the macros and standard-page will be expanded too, writing\n"
"\teven more code for us. \n"
"\t</p>"
msgstr ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> Он показывает, что макросы могут "
"принимать \n"
"\tдругие макросы в качестве аргументов. Компилятор Lisp продолжит \n"
"\tрасширять макросы, и standard-page тоже будет расширена, написав \n"
"\tдля нас еще больше кода. \n"
"\t</p>"

#: in_ed/lispweb.html:818
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Macros may execute code as they\n"
"\texpand. The prefix string &quot;/retro-games.htm&quot; is assembled\n"
"\twith format during macro expansion time. By using comma, I evaluate\n"
"\tthe form and there's no trace of it in the generated code - just the\n"
"\tresulting string. \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">Макросы могут выполнять код по мере их "
"расширения. \n"
"\tСтрока префикса &quot;/retro-games.htm&quot; собирается с "
"format(форматом)\n"
"\tво время раскрытия макроса. Используя запятую, я вычисляю форму, и в \n"
"\tсгенерированном коде ее нет и следа - только результирующая строка. \n"
"\t</p>"

#: in_ed/lispweb.html:821
msgctxt "in_ed/lispweb.html:821"
msgid "\t<li/>"
msgstr ""

#: in_ed/lispweb.html:827
msgid ""
"<p>A macro must expand into a single form, but we actually\n"
"\tneed two forms; a function definition and the code for creating a\n"
"\tdispatcher. progn solves this problem by wrapping the forms in a\n"
"\tsingle form and then evaluating them in order. \n"
"\t</p>"
msgstr ""
"<p>Макрос должен разворачиваться в единую форму, но на самом деле \n"
"\tнам нужны две формы; определение функции и код для создания \n"
"\tдиспетчера. progn решает эту проблему, объединяя формы в \n"
"\tединую форму и затем вычисляя их по порядку. \n"
"\t</p>"

#: in_ed/lispweb.html:832
msgid ""
"</ol>\n"
"<h2 class=\"western\">Putting it together \n"
"</h2>"
msgstr ""
"</ol>\n"
"<h2 class=\"western\">Собираем все вместе \n"
"</h2>"

#: in_ed/lispweb.html:838
msgid ""
"<p>Phew, that was a lot of Lisp in a short time. But using the\n"
"abstractions we've created, we're able to throw together the\n"
"application in no time. Let's code out the main page as it looks in\n"
"Figure 1 above: \n"
"</p>"
msgstr ""
"<p>Уф, это было много Лиспа за короткое время. Но используя созданные \n"
"нами абстракции, мы можем быстро собрать приложение. Давайте закодируем \n"
"главную страницу, как показано на рисунке 1 выше: \n"
"</p>"

#: in_ed/lispweb.html:863
msgid ""
"<pre class=\"western\">        \n"
"       (define-url-fn (retro-games)\n"
"         (standard-page (:title &quot;Top Retro Games&quot;)\n"
"                        (:h1 &quot;Vote on your all time favourite retro "
"games!&quot;)\n"
"                        (:p &quot;Missing a game? Make it available for "
"votes &quot; (:a :href &quot;new-game.htm&quot; &quot;here&quot;))\n"
"                        (:h2 &quot;Current stand&quot;)\n"
"                        (:div :id &quot;chart&quot; ; <b>For CSS styling of "
"links</b>\n"
"                              (:ol\n"
"                               (dolist (game (games))\n"
"                                 (htm  \n"
"                                  (:li \n"
"                                   (:a :href (format nil &quot;vote.htm?"
"name=~a&quot; (name game)) &quot;Vote!&quot;)\n"
"                                   (fmt &quot;~A with ~d votes&quot; (name "
"game) (votes game)))))))))\n"
"      </pre>\n"
"<p>\n"
"Here we utilize our freshly developed embedded domain specific\n"
"language for defining URL functions ( define-url-fn ) and creating\n"
"standard-pages . The following lines are straightforward XHTML\n"
"generation, including a link to <i>new-game.htm</i>; a page we\n"
"haven't specified yet. We will use some CSS to style the Vote! links\n"
"to look and feel like buttons, which is why I wrap the list in a div\n"
"-tag. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (define-url-fn (retro-games)\n"
"         (standard-page (:title &quot;Top Retro Games&quot;)\n"
"                        (:h1 &quot;Vote on your all time favourite retro "
"games!&quot;)\n"
"                        (:p &quot;Missing a game? Make it available for "
"votes &quot; (:a :href &quot;new-game.htm&quot; &quot;here&quot;))\n"
"                        (:h2 &quot;Current stand&quot;)\n"
"                        (:div :id &quot;chart&quot; ; <b>For CSS styling of "
"links</b>\n"
"                              (:ol\n"
"                               (dolist (game (games))\n"
"                                 (htm  \n"
"                                  (:li \n"
"                                   (:a :href (format nil &quot;vote.htm?"
"name=~a&quot; (name game)) &quot;Vote!&quot;)\n"
"                                   (fmt &quot;~A with ~d votes&quot; (name "
"game) (votes game)))))))))\n"
"      </pre>\n"
"<p>\n"
"Здесь мы используем наш недавно разработанный встроенный предметно-"
"ориентированный \n"
"язык для определения функций URL (define-url-fn) и создания стандартных "
"страниц\n"
"(standard-pages). Следующие строки представляют собой простую генерацию "
"XHTML, \n"
"включая ссылку на  <i>new-game.htm</i>; страницу, которую мы еще не "
"указали. \n"
"Мы будем использовать некоторый CSS, чтобы стилизовать голосование! ссылки \n"
"выглядят и работают как кнопки, поэтому я заключил список в тег div.\n"
"</p>"

#: in_ed/lispweb.html:874
msgid ""
"<p>The first embedded Lisp code is dolist . We use it to create each\n"
"game item in the ordered HTML list. dolist works by iterating over a\n"
"list, in this case the return value from the games -function,\n"
"subsequently binding each element to the game variable. Using format\n"
"and the access methods on the game object, I assemble the\n"
"presentation and a destination for Vote!. Here's some sample HTML\n"
"output from one session: \n"
"</p>"
msgstr ""
"<p>Первый встроенный код Lisp - это dolist. Мы используем его для создания \n"
"каждого элемента game в упорядоченном HTML-списке. dolist работает, \n"
"перебирая список, в данном случае возвращаемое значение из -функции games, \n"
"впоследствии привязывая каждый элемент к игровой переменной. Используя \n"
"формат и методы доступа к объекту game, я собираю презентацию и место\n"
" назначения для голосования !. Вот пример вывода HTML из одного сеанса:  \n"
"</p>"

#: in_ed/lispweb.html:896
msgid ""
"<pre class=\"western\">        \n"
"      &lt;div id='chart'&gt;\n"
"         &lt;ol&gt;\n"
"            &lt;li&gt;\n"
"               &lt;a href='vote.htm?name=Super Mario Bros'&gt;Vote!&lt;/"
"a&gt; Super Mario Bros with 12 votes\n"
"            &lt;/li&gt;\n"
"            &lt;li&gt;\n"
"               &lt;a href='vote.htm?name=Last Ninja'&gt;Vote!&lt;/a&gt; Last "
"Ninja with 11 votes\n"
"            &lt;/li&gt;\n"
"         &lt;/ol&gt;\n"
"      &lt;/div&gt;\n"
"      </pre>\n"
"<p>\n"
"As the user presses Vote! we'll get a request for vote.htm with the\n"
"name of the game attached as a query parameter. Hunchentoot provides\n"
"a parameter function that, just as you might expect, returns the\n"
"value of the parameter named by the following string. We pass this\n"
"value to our back end abstraction game-from-name and binds the result\n"
"to a local variable with let : \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"      &lt;div id='chart'&gt;\n"
"         &lt;ol&gt;\n"
"            &lt;li&gt;\n"
"               &lt;a href='vote.htm?name=Super Mario Bros'&gt;Vote!&lt;/"
"a&gt; Super Mario Bros with 12 votes\n"
"            &lt;/li&gt;\n"
"            &lt;li&gt;\n"
"               &lt;a href='vote.htm?name=Last Ninja'&gt;Vote!&lt;/a&gt; Last "
"Ninja with 11 votes\n"
"            &lt;/li&gt;\n"
"         &lt;/ol&gt;\n"
"      &lt;/div&gt;\n"
"      </pre>\n"
"<p>\n"
"Когда пользователь нажимает \"Голосовать!\" мы получим запрос на vote.htm \n"
"с именем игры, прикрепленным в качестве параметра запроса. Hunchentoot \n"
"предоставляет функцию параметра, которая, как и следовало ожидать, \n"
"возвращает значение параметра, указанного в следующей строке. \n"
"Мы передаем это значение в нашу внутреннюю абстракцию game-from-name \n"
"и привязываем результат к локальной переменной с помощью let:   \n"
"</p>"

#: in_ed/lispweb.html:909
msgid ""
"<pre class=\"western\">        \n"
"       (define-url-fn (vote)\n"
"         (let ((game (game-from-name (parameter &quot;name&quot;))))\n"
"           (if game\n"
"               (vote-for game))\n"
"           (redirect &quot;/retro-games.htm&quot;)))\n"
"      </pre>\n"
"<p>\n"
"After a vote-for the requested game, Hunchentoot's redirect function\n"
"takes the client to the updated chart. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (define-url-fn (vote)\n"
"         (let ((game (game-from-name (parameter &quot;name&quot;))))\n"
"           (if game\n"
"               (vote-for game))\n"
"           (redirect &quot;/retro-games.htm&quot;)))\n"
"      </pre>\n"
"<p>\n"
"После голосования за запрошенную игру функция перенаправления Hunchentoot \n"
"переводит клиента на обновленный график. \n"
"</p>"

#: in_ed/lispweb.html:913
msgid ""
"<p><img src=\"lispweb_html_d2e1dee1bf76943d.png\" name=\"Image3\" alt="
"\"Retro Games add game page\" align=\"bottom\" width=\"800\" height=\"627\" "
"border=\"0\"/>"
msgstr ""

#: in_ed/lispweb.html:915
msgctxt "in_ed/lispweb.html:915"
msgid "</p>"
msgstr ""

#: in_ed/lispweb.html:923
msgid ""
"<p>Now when we're able to vote we need some games to vote-for . In\n"
"the code for the retro-games page above, I included a link to\n"
"<i>new-game.htm</i>. That page is displayed in Figure 2. Basically it\n"
"contains a HTML form with a text input for the game name: \n"
"</p>"
msgstr ""
"<p>Теперь, когда мы можем голосовать, нам нужно проголосовать за несколько "
"игр. \n"
"В коде для страницы ретро-игр выше я включил ссылку на <i>new-game.htm</"
"i>. \n"
"Эта страница показана на рисунке 2. В основном она содержит HTML-форму с \n"
"вводом текста для названия игры: \n"
"</p>"

#: in_ed/lispweb.html:941
msgid ""
"<pre class=\"western\">        \n"
"       (define-url-fn (new-game)\n"
"         (standard-page (:title &quot;Add a new game&quot;)\n"
"                        (:h1 &quot;Add a new game to the chart&quot;)\n"
"                        (:form :action &quot;/game-added.htm&quot; :method "
"&quot;post&quot; \n"
"                               (:p &quot;What is the name of the game?&quot; "
"(:br)\n"
"                                   (:input :type &quot;text&quot;  \n"
"                                           :name &quot;name&quot; \n"
"                                           :class &quot;txt&quot;))\n"
"                               (:p (:input :type &quot;submit&quot; \n"
"                                           :value &quot;Add&quot; \n"
"                                           :class &quot;btn&quot;)))))\n"
"      </pre>\n"
"<p>\n"
"As the user submits the form, its data is sent to <i>game-added.htm</i>:\n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (define-url-fn (new-game)\n"
"         (standard-page (:title &quot;Add a new game&quot;)\n"
"                        (:h1 &quot;Add a new game to the chart&quot;)\n"
"                        (:form :action &quot;/game-added.htm&quot; :method "
"&quot;post&quot; \n"
"                               (:p &quot;What is the name of the game?&quot; "
"(:br)\n"
"                                   (:input :type &quot;text&quot;  \n"
"                                           :name &quot;name&quot; \n"
"                                           :class &quot;txt&quot;))\n"
"                               (:p (:input :type &quot;submit&quot; \n"
"                                           :value &quot;Add&quot; \n"
"                                           :class &quot;btn&quot;)))))\n"
"      </pre>\n"
"<p>\n"
"Когда пользователь отправляет форму, его данные отправляются на  <i>game-"
"added.htm</i>:\n"
"</p>"

#: in_ed/lispweb.html:959
msgid ""
"<pre class=\"western\">        \n"
"       (define-url-fn (game-added)\n"
"         (let ((name (parameter &quot;name&quot;)))\n"
"           (unless (or (null name) (zerop (length name)))\n"
"             (add-game name))\n"
"           (redirect &quot;/retro-games.htm&quot;)))\n"
"      </pre>\n"
"<p>\n"
"The first line in our URL function should look familiar; just as in\n"
"our vote function, we fetch the value of the name parameter and binds\n"
"it to a local variable ( name ). Here we have to guard against an\n"
"empty name. After all, there's nothing forcing the user to write\n"
"anything into the field before submitting the form (we'll see in a\n"
"minute how to add client-side validation). If we get a valid name, we\n"
"add it to our database through the add-game function. \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"       (define-url-fn (game-added)\n"
"         (let ((name (parameter &quot;name&quot;)))\n"
"           (unless (or (null name) (zerop (length name)))\n"
"             (add-game name))\n"
"           (redirect &quot;/retro-games.htm&quot;)))\n"
"      </pre>\n"
"<p>\n"
"Первая строка в нашей функции URL должна выглядеть знакомо; так же, \n"
"как в нашей функции голосования, мы получаем значение параметра name \n"
"и привязываем его к локальной переменной (name). Здесь мы должны "
"остерегаться \n"
"пустого name(имени). В конце концов, ничто не заставляет пользователя "
"писать \n"
"что-либо в поле перед отправкой формы (через минуту мы увидим, как "
"добавить \n"
"проверку на стороне клиента). Если мы получаем допустимое имя, мы "
"добавляем \n"
"его в нашу базу данных с помощью функции add-game.  \n"
"</p>"

#: in_ed/lispweb.html:963
msgid ""
"<h2 class=\"western\">Expressing JavaScript in Lisp \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Выражение JavaScript в Лиспе \n"
"</h2>"

#: in_ed/lispweb.html:969
msgid ""
"<p>Say we want to ensure that the user at least typed something\n"
"before submitting the form. Can we do that in Lisp? Yes, actually. We\n"
"can write Lisp code that compiles into JavaScript and we use the\n"
"ParenScript library for the task. \n"
"</p>"
msgstr ""
"<p>Допустим, мы хотим убедиться, что пользователь хотя бы что-то \n"
"набрал перед отправкой формы. Можем ли мы сделать это в Лиспе? Да, вообще-"
"то. \n"
"Мы можем написать код Lisp, который компилируется в JavaScript, и мы \n"
"используем библиотеку ParenScript для этой задачи.\n"
"</p>"

#: in_ed/lispweb.html:977
msgid ""
"<p>Unobtrusive JavaScript is an important design principle and\n"
"ParenScript supports that too. But in Lisp this becomes less of an\n"
"issue; I'm not actually writing JavaScript, everything is Lisp. Thus\n"
"I embed my event handler in the form: \n"
"</p>"
msgstr ""
"<p>Ненавязчивый JavaScript - важный принцип разработки, и ParenScript \n"
"поддерживает его. Но в Лиспе это становится меньшей проблемой; \n"
"На самом деле я не пишу JavaScript, все на Лиспе. Таким образом, я "
"встраиваю \n"
"свой обработчик событий в форму:  \n"
"</p>"

#: in_ed/lispweb.html:991
msgid ""
"<pre class=\"western\">        \n"
"      (:form :action &quot;/game-added.htm&quot; :method &quot;post&quot; \n"
"             :onsubmit \n"
"             (ps-inline\n"
"              (when (= name.value &quot;&quot;)\n"
"                (alert &quot;Please enter a name.&quot;)\n"
"                (return false)))\n"
"      </pre>\n"
"<p>\n"
"This code will compile into the following mixture of HTML and\n"
"JavaScript: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"      (:form :action &quot;/game-added.htm&quot; :method &quot;post&quot; \n"
"             :onsubmit \n"
"             (ps-inline\n"
"              (when (= name.value &quot;&quot;)\n"
"                (alert &quot;Please enter a name.&quot;)\n"
"                (return false)))\n"
"      </pre>\n"
"<p>\n"
"Этот код будет компилироваться в следующую смесь HTML и JavaScript:  \n"
"</p>"

#: in_ed/lispweb.html:1002
msgid ""
"<pre class=\"western\">        \n"
"      &lt;form action='/game-added.htm' method='post' \n"
"         onsubmit='javascript:if (name.value == &quot;&quot;) {\n"
"            alert(&quot;Please enter a name.&quot;);\n"
"            return false;\n"
"         }'&gt;\n"
"      </pre><h2 class=\"western\">\n"
"Persistent Objects \n"
"</h2>"
msgstr ""
"<pre class=\"western\">        \n"
"      &lt;form action='/game-added.htm' method='post' \n"
"         onsubmit='javascript:if (name.value == &quot;&quot;) {\n"
"            alert(&quot;Please enter a name.&quot;);\n"
"            return false;\n"
"         }'&gt;\n"
"      </pre><h2 class=\"western\">\n"
"Постоянные(сохраняемые) объекты \n"
"</h2>"

#: in_ed/lispweb.html:1013
msgid ""
"<p>Initially we kind of ducked the problem with persistence. To get\n"
"things up and running as quickly as possible, we used a simple list\n"
"in memory as &quot;database&quot;. That's fine for prototyping but we\n"
"still want to persist all added games in case we shutdown the server.\n"
"Further, there are some potential threading issues with the current\n"
"design. Hunchentoot is multithreaded and requests may come in\n"
"different threads. We can solve all that by migrating to a\n"
"thread-safe database. And with Lisp, design decisions like that are\n"
"only a macro away; please meet Elephant! \n"
"</p>"
msgstr ""
"<p>Первоначально мы как бы упорно избегали проблемы. Чтобы все заработало \n"
"как можно быстрее, мы использовали простой список в памяти как &quot;"
"database&quot;(базу данных).\n"
"Это нормально для прототипирования, но мы по-прежнему хотим сохранить \n"
"все добавленные игры на случай, если мы выключим сервер. Кроме того, \n"
"в текущей разработке есть некоторые потенциальные проблемы с "
"многопоточностью. \n"
"Hunchentoot является многопоточным, и запросы могут поступать в разных "
"потоках. \n"
"Мы можем решить все это, перейдя на поточно-ориентированную базу данных. \n"
"А с Lisp подобные проектировочные решения - это всего лишь макрос; "
"познакомьтесь, \n"
"пожалуйста, с Elephant! \n"
"</p>"

#: in_ed/lispweb.html:1022
msgid ""
"<p><a href=\"http://common-lisp.net/project/elephant/\" target=\"_top"
"\">Elephant\n"
"</a>is a wickedly smart persistent object protocol and database. To\n"
"actually store things on disk, Elephant supports several back ends\n"
"such as PostGres and SqlLite. In this example I'll use Berkeley DB,\n"
"simply because it has the best performance with Elephant. \n"
"</p>"
msgstr ""
"<p><a href=\"http://common-lisp.net/project/elephant/\" target=\"_top"
"\">Elephant\n"
"</a> - это чрезвычайно умный протокол и база данных для постоянных "
"объектов. \n"
"Для фактического хранения вещей на диске Elephant поддерживает несколько "
"бэкэндов, \n"
"таких как PostGres и SqlLite. В этом примере я буду использовать Berkeley "
"DB,\n"
"просто потому, что у него лучшая производительность с Elephant. \n"
"</p>"

#: in_ed/lispweb.html:1028
msgid ""
"<p>The first step is to open a store controller, which serves as a\n"
"bridge between Lisp and the back end: \n"
"</p>"
msgstr ""
"<p>Первый шаг - открыть контроллер хранилища, который служит мостом между "
"Lisp \n"
"и серверной частью:  \n"
"</p>"

#: in_ed/lispweb.html:1037
msgid ""
"<pre class=\"western\">        (open-store '(:BDB &quot;/home/adam/temp/"
"gamedb/&quot;))\n"
"      </pre>\n"
"<p>\n"
"Here I just specify that we're using Berkely DB ( :BDB ) and give a\n"
"directory for the database files. Now, let's make some persistent\n"
"objects. Have a look at our current game class again: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        (open-store '(:BDB &quot;/home/adam/temp/"
"gamedb/&quot;))\n"
"      </pre>\n"
"<p>\n"
"Здесь я просто указываю, что мы используем Berkeley DB (:BDB), и указываю "
"каталог \n"
"для файлов базы данных. Теперь давайте создадим несколько постоянных "
"объектов. \n"
"Взгляните еще раз на наш текущий  класс game:  \n"
"</p>"

#: in_ed/lispweb.html:1054
msgid ""
"<pre class=\"western\">        \n"
"         (defclass game ()\n"
"           ((name :reader   name \n"
"                  :initarg :name)\n"
"            (votes :accessor votes \n"
"                   :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"Elephant provides a convenient defpclass macro that creates\n"
"persistent classes. The defpclass usage looks very similar to Common\n"
"Lisp's defclass , but it adds some new features; we'll use :index to\n"
"specify that we want our slots to be retrievable by slot values. I\n"
"also add an <b>init</b>ial <b>arg</b>ument to votes , which I use\n"
"later when transforming our old games into this persistent class: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"         (defclass game ()\n"
"           ((name :reader   name \n"
"                  :initarg :name)\n"
"            (votes :accessor votes \n"
"                   :initform 0)))\n"
"      </pre>\n"
"<p>\n"
"Elephant предоставляет удобный макрос defpclass, который создает \n"
"постоянные классы. Использование defpclass очень похоже на defclass \n"
"Common Lisp, но добавляет некоторые новые возможности; мы будем "
"использовать\n"
":index, чтобы указать, что мы хотим, чтобы наши слоты можно было извлекать\n"
" по их значениям. Я также добавляю <b>init</b>ial <b>arg</b>ument(начальный "
"аргумент)\n"
" к голосам, который я использую позже при преобразовании наших старых игр "
"в \n"
"этот постоянный класс: \n"
"</p>"

#: in_ed/lispweb.html:1070
msgid ""
"<pre class=\"western\">        \n"
"         (defpclass persistent-game ()\n"
"           ((name :reader name \n"
"                  :initarg :name \n"
"                  :index t)\n"
"            (votes :accessor votes \n"
"                   :initarg :votes \n"
"                   :initform 0 \n"
"                   :index t)))\n"
"      </pre>\n"
"<p>\n"
"The Elephant abstraction is really clean; persistent objects are\n"
"created just like any other object: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"         (defpclass persistent-game ()\n"
"           ((name :reader name \n"
"                  :initarg :name \n"
"                  :index t)\n"
"            (votes :accessor votes \n"
"                   :initarg :votes \n"
"                   :initform 0 \n"
"                   :index t)))\n"
"      </pre>\n"
"<p>\n"
"Абстракция Elephant действительно чистая; постоянные объекты создаются так "
"же, \n"
"как и любой другой объект:  \n"
"</p>"

#: in_ed/lispweb.html:1080
msgid ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(make-instance 'persistent-game :name &quot;Winter "
"Games&quot;)\n"
"         <b>#&lt;PERSISTENT-GAME oid:100&gt;</b>\n"
"      </pre>\n"
"<p>\n"
"Elephant comes with a set of functions for easy retrieval. If we want\n"
"all instances of our persistent-game class, it's a simple as this: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(make-instance 'persistent-game :name &quot;Winter "
"Games&quot;)\n"
"         <b>#&lt;PERSISTENT-GAME oid:100&gt;</b>\n"
"      </pre>\n"
"<p>\n"
"Elephant поставляется с набором функций для легкого восстановления/"
"возвращения(retrieval). \n"
"Если нам нужны все экземпляры нашего класса persistent-game, это просто: \n"
"</p>"

#: in_ed/lispweb.html:1091
msgid ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(get-instances-by-class 'persistent-game)\n"
"         <b>(#&lt;PERSISTENT-GAME oid:100&gt;)</b>\n"
"      </pre>\n"
"<p>\n"
"We can of course keep a reference to the returned list or, because we\n"
"know we just instantiated a persistent-game , call a method on it\n"
"directly: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(get-instances-by-class 'persistent-game)\n"
"         <b>(#&lt;PERSISTENT-GAME oid:100&gt;)</b>\n"
"      </pre>\n"
"<p>\n"
"Мы, конечно, можем сохранить ссылку на возвращенный список или, \n"
"поскольку мы знаем, что только что создали экземпляр persistent-game, \n"
"напрямую вызвать для него метод:  \n"
"</p>"

#: in_ed/lispweb.html:1104
msgid ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(name (first (get-instances-by-class 'persistent-"
"game)))\n"
"         <b>&quot;Winter Games&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"We took care earlier to encapsulate the access to the back end and\n"
"that pays off now. We just have to change those functions to use the\n"
"Elephant API instead of working with our *games* list. The query\n"
"functions are quit simple; because we indexed our name slot, we can\n"
"use get-instance-by-value to get the matching persistent object: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"         RETRO-GAMES&gt;(name (first (get-instances-by-class 'persistent-"
"game)))\n"
"         <b>&quot;Winter Games&quot;</b>\n"
"      </pre>\n"
"<p>\n"
"Раньше мы позаботились о том, чтобы инкапсулировать доступ к серверной "
"части, \n"
"и теперь это окупается. Нам просто нужно изменить эти функции, чтобы \n"
"использовать Elephant API вместо работы со списком *games*. Функции "
"запроса \n"
"очень просты; поскольку мы проиндексировали наш слот name(имени), мы можем \n"
"использовать метод get-instance-by-value для получения соответствующего \n"
"постоянного объекта:  \n"
"</p>"

#: in_ed/lispweb.html:1122
msgid ""
"<pre class=\"western\">        \n"
"          (defun game-from-name (name)\n"
"            (get-instance-by-value 'persistent-game 'name name))\n"
"      </pre>\n"
"<p>\n"
"Just like our initial implementation using find ,\n"
"get-instance-by-value returns NIL in case no object with the given\n"
"name is stored. That means that we can keep game-stored? exactly as\n"
"it is without any changes. But what about adding a new game? Well, we\n"
"no longer need to maintain any references to the created objects. The\n"
"database does that for us. But, we have to change add-game to make an\n"
"instance of persistent-game instead of our old game class. And even\n"
"though Elephant is thread-safe we have to ensure that the\n"
"transactions are atomic. Elephant provides a nice with-transaction\n"
"macro to solve this problem: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"          (defun game-from-name (name)\n"
"            (get-instance-by-value 'persistent-game 'name name))\n"
"      </pre>\n"
"<p>\n"
"Как и в нашей первоначальной реализации с использованием find, \n"
"метод get-instance-by-value возвращает NIL, если объект с данным "
"name(именем)\n"
" не сохранен. Это значит, что мы можем game-stored(сохранить игры)? \n"
"в точности как есть, без изменений. Но как насчет добавления новой "
"game(игры)? \n"
"Что ж, нам больше не нужно поддерживать какие-либо ссылки на созданные "
"объекты. \n"
"База данных делает это за нас. Но мы должны изменить add-game, чтобы \n"
"создать экземпляр persistent-game вместо нашего старого класса game. \n"
"И хотя Elephant является потокобезопасным, мы должны гарантировать \n"
"атомарность транзакций. Elephant предоставляет хороший макрос \n"
"with-transaction для решения этой проблемы:  \n"
"</p>"

#: in_ed/lispweb.html:1135
msgid ""
"<pre class=\"western\">        \n"
"           (defun add-game (name)\n"
"             (with-transaction ()\n"
"                        (unless (game-stored? name)\n"
"                            (make-instance 'persistent-game :name name))))\n"
"      </pre>\n"
"<p>\n"
"Just one final change before we can compile and deploy our new back\n"
"end: the games function responsible for returning a list of all games\n"
"sorted on popularity: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"           (defun add-game (name)\n"
"             (with-transaction ()\n"
"                        (unless (game-stored? name)\n"
"                            (make-instance 'persistent-game :name name))))\n"
"      </pre>\n"
"<p>\n"
"Всего одно последнее изменение, прежде чем мы сможем скомпилировать и \n"
"развернуть нашу новую серверную часть: функция games, отвечающая за \n"
"возврат списка всех игр, отсортированных по популярности: \n"
"</p>"

#: in_ed/lispweb.html:1148
msgid ""
"<pre class=\"western\">        \n"
"            (defun games ()\n"
"              (nreverse (get-instances-by-range 'persistent-game 'votes nil "
"nil)))\n"
"      </pre>\n"
"<p>\n"
"votes is an indexed slot, so we can use get-instances-by-range to\n"
"retrieve a sorted list. The last two arguments are both nil , which\n"
"will retrieve all stored games. The returned list will be sorted from\n"
"lowest score to highest, so I apply nreverse to reverse the list (the\n"
"n in nreverse indicates that it is a destructive function). \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"            (defun games ()\n"
"              (nreverse (get-instances-by-range 'persistent-game 'votes nil "
"nil)))\n"
"      </pre>\n"
"<p>\n"
"votes(голоса) - это проиндексированный слот, поэтому мы можем использовать \n"
"get-instance-by-range для получения отсортированного списка. Два последних \n"
"аргумента равны нулю, что приведет к извлечению всех сохраненных игр. \n"
"Возвращенный список будет отсортирован от наименьшего к наибольшему, \n"
"поэтому я применяю nreverse, чтобы перевернуть список (n в nreverse "
"указывает, \n"
"что это деструктивная функция).\n"
"</p>"

#: in_ed/lispweb.html:1152
msgid ""
"<h2 class=\"western\">Remembering the Games \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Вспоминая игры\n"
"</h2>"

#: in_ed/lispweb.html:1160
msgid ""
"<p>Obviously we want to keep all previously added games. After all,\n"
"users shouldn't suffer because we decide to change the\n"
"implementation. So, how do we transform existing games into\n"
"persistent objects? The simplest way is to map over the *games* list\n"
"and instantiate a persistent-game with the same slot values as the\n"
"old games: \n"
"</p>"
msgstr ""
"<p>Очевидно, мы хотим сохранить все ранее добавленные игры. \n"
"В конце концов, пользователи не должны страдать из-за того, \n"
"что мы решили изменить реализацию. Итак, как нам преобразовать \n"
"существующие игры в постоянные объекты? Самый простой способ - \n"
"отобразить(map) список *games* и создать persistent-game с теми \n"
"же значениями слотов, что и в старых объектах game(играх):  \n"
"</p>"

#: in_ed/lispweb.html:1178
msgid ""
"<pre class=\"western\">        \n"
"            RETRO-GAMES&gt;(mapcar <b>#'(lambda (old-game)</b>\n"
"                                     <b>(make-instance 'persistent-game </"
"b>\n"
"                                                    <b>:name (name old-"
"game)</b>\n"
"                                                    <b>:votes (votes old-"
"game)))</b> \n"
"                                *games*)\n"
"      </pre>\n"
"<p>\n"
"We could have defined a function for this task using defun but,\n"
"because it is a one-off operation, I go with an anonymous function\n"
"aka <i>lambda function</i> (see the <b>highlighted</b> code above).\n"
"And that's it - all games have been moved into a persistent database.\n"
"We can now set *games* to NIL (effectively making all old games\n"
"available for garbage collection) and even make the *games* symbol\n"
"history by removing it from the package: \n"
"</p>"
msgstr ""
"<pre class=\"western\">        \n"
"            RETRO-GAMES&gt;(mapcar <b>#'(lambda (old-game)</b>\n"
"                                     <b>(make-instance 'persistent-game </"
"b>\n"
"                                                    <b>:name (name old-"
"game)</b>\n"
"                                                    <b>:votes (votes old-"
"game)))</b> \n"
"                                *games*)\n"
"      </pre>\n"
"<p>\n"
"Мы могли бы определить функцию для этой задачи с помощью defun\n"
"но, поскольку это одноразовая операция, я использую анонимную функцию, \n"
"известную как <i>lambda function</i>(лямбда-функция) (см. <b>Выделенный</"
"b> \n"
"код выше). И всё - все игры перенесены в постоянную базу данных. \n"
"Теперь мы можем установить для *games* значение NIL (фактически делая \n"
"все старые объекты game доступными для сборки мусора) и даже сделать \n"
"историей символ *games*, удалив ее из пакета:  \n"
"</p>"

#: in_ed/lispweb.html:1188
msgid ""
"<pre class=\"western\">        \n"
"            RETRO-GAMES&gt; (setf *games* nil)\n"
"            <b>NIL</b>\n"
"            RETRO-GAMES&gt; (unintern '*games*)\n"
"            <b>T</b>\n"
"      </pre><h2 class=\"western\">\n"
"Outro \n"
"</h2>"
msgstr ""
"<pre class=\"western\">        \n"
"            RETRO-GAMES&gt; (setf *games* nil)\n"
"            <b>NIL</b>\n"
"            RETRO-GAMES&gt; (unintern '*games*)\n"
"            <b>T</b>\n"
"      </pre><h2 class=\"western\">\n"
"Концовка \n"
"</h2>"

#: in_ed/lispweb.html:1194
msgid ""
"<p>This article has really just scratched the surface of what Lisp\n"
"can do. Yet I hope that if you made it this far, you have seen that\n"
"behind all those parenthesis there's a lot of power. With its macro\n"
"system, Lisp can basically be what you want it to. \n"
"</p>"
msgstr ""
"<p>Эта статья на самом деле лишь поверхностно коснулась того, \n"
"на что способен Лисп. Тем не менее, я надеюсь, что если вы зашли так "
"далеко, \n"
"то увидели, что за всеми этими скобками скрывается большая сила. \n"
"Благодаря своей макросистеме Lisp может быть тем, чем вы хотите. \n"
"</p>"

#: in_ed/lispweb.html:1201
msgid ""
"<p>Due to the dynamic and interactive nature of Lisp it's a perfect\n"
"fit for prototyping. And because Lisp programs are so easy to evolve,\n"
"that prototype may end up as a full-blown product one day. \n"
"</p>"
msgstr ""
"<p>Благодаря динамичному и интерактивному характеру Lisp он идеально \n"
"подходит для создания прототипов. А поскольку программы на Лиспе очень \n"
"легко развивать, этот прототип может однажды превратиться в полноценный \n"
"продукт.  \n"
"</p>"

#: in_ed/lispweb.html:1205
msgid ""
"<h2 class=\"western\">References \n"
"</h2>"
msgstr ""
"<h2 class=\"western\">Ссылки\n"
"</h2>"

#: in_ed/lispweb.html:1210
msgid ""
"<p>The full source code for the Retro Games application is available\n"
"<a href=\"https://www.adamtornhill.com/code/retro-games.lisp\" target=\"_top"
"\">here\n"
"</a>. \n"
"</p>"
msgstr ""
"<p>Полный исходный код приложения Retro Games доступен\n"
"<a href=\"https://www.adamtornhill.com/code/retro-games.lisp\" target=\"_top"
"\">здесь\n"
"</a>. \n"
"</p>"

#: in_ed/lispweb.html:1216
msgid ""
"<p>Matthew Snyder wrote a sequel. His article is available here: <a href="
"\"http://msnyder.info/posts/2011/07/lisp-for-the-web-part-ii/\">Lisp\n"
"for the Web. Part II </a>\n"
"</p>"
msgstr ""
"<p>Matthew Snyder написал сиквел. Он доступен здесь: <a href=\"http://"
"msnyder.info/posts/2011/07/lisp-for-the-web-part-ii/\">Lisp\n"
"for the Web. Part II </a>\n"
"</p>"

#: in_ed/lispweb.html:1219
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lispweb.html:1221
msgctxt "in_ed/lispweb.html:1221"
msgid "</p>"
msgstr ""

#: in_ed/lispweb.html:1224
msgid ""
"</body>\n"
"</html>"
msgstr ""
