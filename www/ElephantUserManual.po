#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/ElephantUserManual.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-07 22:02+0300\n"
"PO-Revision-Date: 2021-10-25 14:15+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/ElephantUserManual.html:9
msgid ""
"<html lang=\"en\"><head>\n"
"<title>Elephant User Manual</title>\n"
"<meta http-equiv=\"Content-Type\" content=\"text/html; "
"charset=windows-1252\">\n"
"<meta name=\"description\" content=\"Elephant User Manual\">\n"
"<meta name=\"generator\" content=\"makeinfo 4.8\">\n"
"<link title=\"Top\" rel=\"top\" href=\"#Top\">\n"
"<link href=\"http://www.gnu.org/software/texinfo/\" rel=\"generator-home\" "
"title=\"Texinfo Homepage\">\n"
"<!--"
msgstr ""
"<html lang=\"en\"><head>\n"
"<title>Elephant Руководство пользователя </title>\n"
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\">\n"
"<meta name=\"description\" content=\"Elephant User Manual\">\n"
"<meta name=\"generator\" content=\"makeinfo 4.8\">\n"
"<link title=\"Top\" rel=\"top\" href=\"#Top\">\n"
"<link href=\"http://www.gnu.org/software/texinfo/\" rel=\"generator-home\" "
"title=\"Texinfo Homepage\">\n"
"<!--"

#: in_ed/ElephantUserManual.html:25
msgid ""
"     Elephant System\n"
"     Original Version, Copyright (C) 2004 Ben Lee and Andrew Blumberg.\n"
"     Version 0.5, Copyright (C) 2006 Robert L. Read.\n"
"     Versions 0.6-1.0, Copyright (C) 2006-2009 Ian Eslick and Robert L.\n"
"     Read.\n"
"     Portions copyright respective contributors (see `CREDITS').\n"
"     Elephant Manual\n"
"     Original Version, Copyright (C) 2004 Ben Lee.\n"
"     Versions 0.5-0.6, Copyright (C) 2006 Robert L. Read.\n"
"     Version 1.0, Copyright (C) 2006-2007 Ian Eslick, Glenn Tarcea and\n"
"     Robert L. Read\n"
"     Permission is granted to copy, distribute and/or modify this\n"
"     document under the terms of the GNU Free Documentation License.\n"
"     See the Copyright and License chapter for details about copyright,\n"
"     license and warranty for this manual and the Elephant system."
msgstr ""

#: in_ed/ElephantUserManual.html:43
msgid ""
"   -->\n"
"<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">\n"
"<style type=\"text/css\"><!--\n"
"  pre.display { font-family:inherit }\n"
"  pre.format  { font-family:inherit }\n"
"  pre.smalldisplay { font-family:inherit; font-size:smaller }\n"
"  pre.smallformat  { font-family:inherit; font-size:smaller }\n"
"  pre.smallexample { font-size:smaller }\n"
"  pre.smalllisp    { font-size:smaller }\n"
"  span.sc    { font-variant:small-caps }\n"
"  span.roman { font-family:serif; font-weight:normal; } \n"
"  span.sansserif { font-family:sans-serif; font-weight:normal; } \n"
"--></style>\n"
"</head>\n"
"<body>\n"
"<h1 class=\"settitle\">Elephant User Manual</h1>\n"
"<div class=\"node\">"
msgstr ""
"   -->\n"
"<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">\n"
"<style type=\"text/css\"><!--\n"
"  pre.display { font-family:inherit }\n"
"  pre.format  { font-family:inherit }\n"
"  pre.smalldisplay { font-family:inherit; font-size:smaller }\n"
"  pre.smallformat  { font-family:inherit; font-size:smaller }\n"
"  pre.smallexample { font-size:smaller }\n"
"  pre.smalllisp    { font-size:smaller }\n"
"  span.sc    { font-variant:small-caps }\n"
"  span.roman { font-family:serif; font-weight:normal; } \n"
"  span.sansserif { font-family:sans-serif; font-weight:normal; } \n"
"--></style>\n"
"</head>\n"
"<body>\n"
"<h1 class=\"settitle\">Elephant Руководство пользователя </h1>\n"
"<div class=\"node\">"

#: in_ed/ElephantUserManual.html:45
msgctxt "in_ed/ElephantUserManual.html:45"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:50
msgid ""
"<hr>\n"
"<a name=\"Top\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Table-of-Contents\">Table "
"of Contents</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#dir\">(dir)</a>"
msgstr ""
"<hr>\n"
"<a name=\"Top\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Table-of-Contents"
"\">Содержание</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#dir\">(dir)</a>"

#: in_ed/ElephantUserManual.html:52
msgctxt "in_ed/ElephantUserManual.html:52"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:55
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"unnumbered\">Copyright</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:62
msgid ""
"<blockquote>\n"
"Elephant System <br>\n"
"Original Version, Copyright © 2004 Ben Lee and Andrew Blumberg. <br>\n"
"Version 0.5, Copyright © 2006 Robert L. Read. <br>\n"
"Versions 0.6-1.0, Copyright © 2006-2009 Ian Eslick and Robert L. Read. <br>\n"
"Portions copyright respective contributors (see <samp><span class=\"file"
"\">CREDITS</span></samp>). <br>"
msgstr ""

#: in_ed/ElephantUserManual.html:68
msgid ""
"<p>Elephant Manual <br>\n"
"Original Version, Copyright © 2004 Ben Lee. <br>\n"
"Versions 0.5-0.6, Copyright © 2006 Robert L. Read. <br>\n"
"Version 1.0, Copyright © 2006-2007 Ian Eslick, Glenn Tarcea and Robert L. "
"Read <br>"
msgstr ""
"<p>Elephant Руководство <br>\n"
"Original Version, Copyright © 2004 Ben Lee. <br>\n"
"Versions 0.5-0.6, Copyright © 2006 Robert L. Read. <br>\n"
"Version 1.0, Copyright © 2006-2007 Ian Eslick, Glenn Tarcea and Robert L. "
"Read <br>"

#: in_ed/ElephantUserManual.html:70
msgctxt "in_ed/ElephantUserManual.html:70"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:76
msgid ""
"<p>Permission is granted to copy, distribute and/or modify this document\n"
"under the terms of the GNU Free Documentation License.  See the\n"
"Copyright and License chapter for details about copyright, license and\n"
"warranty for this manual and the Elephant system."
msgstr ""

#: in_ed/ElephantUserManual.html:78
msgctxt "in_ed/ElephantUserManual.html:78"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:80
msgctxt "in_ed/ElephantUserManual.html:80"
msgid "</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:84
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Table-of-Contents\">Table of Contents</a>\n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Table-of-Contents\">Содержание</a>\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:86
msgid "<h2 class=\"chapheading\">Chapters</h2>"
msgstr "<h2 class=\"chapheading\">Главы</h2>"

#: in_ed/ElephantUserManual.html:98
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Introduction\">Introduction</a>:    "
"Introduction to the Elephant Persistent Object System. \n"
"</li><li><a accesskey=\"2\" href=\"#Tutorial\">Tutorial</a>:        A basic "
"``getting started'' tutorial. \n"
"</li><li><a accesskey=\"3\" href=\"#Installation\">Installation</a>:    "
"Installation and test-suite procedures. \n"
"</li><li><a accesskey=\"4\" href=\"#User-Guide\">User Guide</a>:      In "
"depth discussion of all Elephant facilities and features. \n"
"</li><li><a accesskey=\"5\" href=\"#User-API-Reference\">User API Reference</"
"a>:  Function and class documentation of the user API. \n"
"</li><li><a accesskey=\"6\" href=\"#Design-Patterns\">Design Patterns</"
"a>:     Design scenarios for Elephant applications. \n"
"</li><li><a accesskey=\"7\" href=\"#Elephant-Architecture\">Elephant "
"Architecture</a>:      An overview of elephant's internal architecture. \n"
"</li><li><a accesskey=\"8\" href=\"#Data-Store-API-Reference\">Data Store "
"API Reference</a>:   Function level documentation for data store "
"implementors. \n"
"</li><li><a accesskey=\"9\" href=\"#Copyright-and-License\">Copyright and "
"License</a>:      Your rights and freedoms. \n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Introduction\">Введение</a>:    Введение в "
"систему постоянных объектов Elephant. \n"
"</li><li><a accesskey=\"2\" href=\"#Tutorial\">Учебник</a>:        Базовое "
"руководство по ``началу работы''. \n"
"</li><li><a accesskey=\"3\" href=\"#Installation\">Инсталяция</a>:    "
"Процедуры установки и тестирования(test-suite). \n"
"</li><li><a accesskey=\"4\" href=\"#User-Guide\">Руководство пользователя</"
"a>:      подробное обсуждение всех возможностей и функций Elephant. \n"
"</li><li><a accesskey=\"5\" href=\"#User-API-Reference\">Справочник по "
"пользовательскому API</a>:  документация по функциям и классам "
"пользовательского API. \n"
"</li><li><a accesskey=\"6\" href=\"#Design-Patterns\">Шаблоны "
"проектирования</a>:     сценарии проектирования для приложений Elephant. \n"
"</li><li><a accesskey=\"7\" href=\"#Elephant-Architecture\"> Архитектура  "
"Elephant</a>:      обзор внутренней архитектуры elephant. \n"
"</li><li><a accesskey=\"8\" href=\"#Data-Store-API-Reference\">Справочник по "
"API хранилища данных</a>:   документация на уровне функций для разработчиков "
"хранилищ данных. \n"
"</li><li><a accesskey=\"9\" href=\"#Copyright-and-License\">Copyright and "
"License</a>:      ваши права и свободы. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:100
msgid "<h2 class=\"chapheading\">Appendices</h2>"
msgstr "<h2 class=\"chapheading\">Приложения</h2>"

#: in_ed/ElephantUserManual.html:108
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Concept-Index\">Concept Index</a>\n"
"</li><li><a accesskey=\"2\" href=\"#Object-Index\">Object Index</a>\n"
"</li><li><a accesskey=\"3\" href=\"#Function-_002f-Macro-Index\">Function / "
"Macro Index</a>\n"
"</li><li><a accesskey=\"4\" href=\"#Variable-Index\">Variable Index</a>\n"
"</li><li><a accesskey=\"5\" href=\"#Colophon\">Colophon</a>\n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Concept-Index\">Указатель концепций</a>\n"
"</li><li><a accesskey=\"2\" href=\"#Object-Index\">Указатель объектов</a>\n"
"</li><li><a accesskey=\"3\" href=\"#Function-_002f-Macro-Index\">Указатель "
"Функций/Макросов</a>\n"
"</li><li><a accesskey=\"4\" href=\"#Variable-Index\">Указатель Переменных</"
"a>\n"
"</li><li><a accesskey=\"5\" href=\"#Colophon\">концовка</a>\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:110
msgctxt "in_ed/ElephantUserManual.html:110"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:112
msgctxt "in_ed/ElephantUserManual.html:112"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:118
msgid ""
"<hr>\n"
"<a name=\"Table-of-Contents\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Introduction"
"\">Introduction</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Top\">Top</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""
"<hr>\n"
"<a name=\"Table-of-Contents\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Introduction"
"\">Introduction</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Top\">Top</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"

#: in_ed/ElephantUserManual.html:120
msgctxt "in_ed/ElephantUserManual.html:120"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:122
msgid "<h2 class=\"unnumbered\"></h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:320
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"   <div class=\"contents\">\n"
"<h2>Table of Contents</h2>\n"
"<ul>\n"
"<li><a name=\"toc_Top\" href=\"#Top\">Copyright</a>\n"
"</li><li><a name=\"toc_Table-of-Contents\" href=\"#Table-of-Contents\"></a>\n"
"</li><li><a name=\"toc_Introduction\" href=\"#Introduction\">1 Introduction</"
"a>\n"
"<ul>\n"
"<li><a href=\"#Introduction\">1.1 History</a>\n"
"</li><li><a href=\"#Introduction\">1.2 Elephant Goals</a>\n"
"</li><li><a href=\"#Introduction\">1.3 More Information</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Tutorial\" href=\"#Tutorial\">2 Tutorial</a>\n"
"<ul>\n"
"<li><a href=\"#Overview\">2.1 Overview</a>\n"
"</li><li><a href=\"#Getting-Started\">2.2 Getting Started</a>\n"
"</li><li><a href=\"#The-Store-Root\">2.3 The Store Root</a>\n"
"</li><li><a href=\"#Serialization\">2.4 Serialization</a>\n"
"</li><li><a href=\"#Persistent-Classes\">2.5 Persistent Classes</a>\n"
"</li><li><a href=\"#Rules-about-Persistent-Classes\">2.6 Rules about "
"Persistent Classes</a>\n"
"</li><li><a href=\"#Persistent-collections\">2.7 Persistent collections</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-collections\">2.7.1 Using PSets</a>\n"
"</li><li><a href=\"#Persistent-collections\">2.7.2 Using BTrees</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Indexing-Persistent-Classes\">2.8 Indexing Persistent "
"Classes</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9 Using Transactions</a>\n"
"<ul>\n"
"<li><a href=\"#Using-Transactions\">2.9.1 Why do we need Transactions?</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.2 Using <code>with-transaction</"
"code></a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.3 Nesting Transactions</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.4 Idempotent Side Effects</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.5 Transactions and Performance</"
"a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.6 Transactions and "
"Applications</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Advanced-Topics\">2.10 Advanced Topics</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Installation\" href=\"#Installation\">3 Installation</"
"a>\n"
"<ul>\n"
"<li><a href=\"#Requirements\">3.1 Requirements</a>\n"
"<ul>\n"
"<li><a href=\"#Requirements\">3.1.1 Supported Lisp, Platform and Data store "
"combinations</a>\n"
"</li><li><a href=\"#Requirements\">3.1.2 Library dependencies</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Configuring-Elephant\">3.2 Configuring Elephant</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3 Loading Elephant</a>\n"
"<ul>\n"
"<li><a href=\"#Loading-Elephant\">3.3.1 Loading Elephant via ASDF</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.2 Two-Phase Load Process</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.3 Packages</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.4 Opening a Store</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Berkeley-DB\">3.4 Berkeley DB</a>\n"
"</li><li><a href=\"#Berkeley-DB-Example\">3.5 Setting up Berkeley DB</a>\n"
"</li><li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6 Upgrading Berkeley "
"DB Databases</a>\n"
"<ul>\n"
"<li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6.1 Upgrading to 0.9</a>\n"
"</li><li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6.2 Upgrade from "
"Elephant 0.5</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#CL_002dSQL\">3.7 CL-SQL</a>\n"
"</li><li><a href=\"#CL_002dSQL-Example\">3.8 CL-SQL Example</a>\n"
"</li><li><a href=\"#Elephant-on-Windows\">3.9 Elephant on Windows</a>\n"
"</li><li><a href=\"#Test-Suites\">3.10 Test Suites</a>\n"
"</li><li><a href=\"#Documentation\">3.11 Documentation</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_User-Guide\" href=\"#User-Guide\">4 User Guide</a>\n"
"<ul>\n"
"<li><a href=\"#The-Store-Controller\">4.1 The Store Controller</a>\n"
"</li><li><a href=\"#Serialization-details\">4.2 Serialization details</a>\n"
"<ul>\n"
"<li><a href=\"#Serialization-details\">4.2.1 Restrictions of Store-by-Value</"
"a>\n"
"</li><li><a href=\"#Serialization-details\">4.2.2 Atomic Types</a>\n"
"</li><li><a href=\"#Serialization-details\">4.2.3 Aggregate Types</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3 Persistent Classes "
"and Objects</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-Classes-and-Objects\">4.3.1 Persistent Class "
"Definition</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.2 Instance "
"Creation</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.3 Persistent "
"Instance Lifecycle</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.4 Using Transient "
"Slots</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.5 Using Persistent "
"Slots</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.6 Class "
"Redefinition</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.7 Support for "
"<code>change-class</code></a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Class-Indices\">4.4 Class Indices</a>\n"
"<ul>\n"
"<li><a href=\"#Class-Indices\">4.4.1 Synchronizing Classes and Data Stores</"
"a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Sets\">4.5 Persistent Sets</a>\n"
"</li><li><a href=\"#Persistent-BTrees\">4.6 Persistent BTrees</a>\n"
"</li><li><a href=\"#BTree-Cursors\">4.7 BTree Cursors</a>\n"
"</li><li><a href=\"#BTree-Indexing\">4.8 BTree Indexing</a>\n"
"</li><li><a href=\"#Index-Cursors\">4.9 Index Cursors</a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10 Multi-threaded "
"Applications</a>\n"
"<ul>\n"
"<li><a href=\"#Multi_002dthreaded-Applications\">4.10.1 Shared Resources</"
"a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10.2 Data Store "
"Thread Safety and Transactions</a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10.3 Minimize "
"Dependency on Thread-Local Specials</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Transaction-Details\">4.11 Transaction Details</a>\n"
"<ul>\n"
"<li><a href=\"#Transaction-Details\">4.11.1 <code>with-transaction</code> "
"internals</a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.2 <code>execute-transaction</"
"code> internals</a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.3 Building your own "
"transactional framework</a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.4 Analyzing Dynamic "
"Transaction Behavior</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Multi_002drepository-Operation\">4.12 Multi-repository "
"Operation</a>\n"
"</li><li><a href=\"#Multiple-Processes-and-Distributed-Applications\">4.13 "
"Multiple Processes and Distributed Applications</a>\n"
"</li><li><a href=\"#Repository-Migration-and-Upgrade\">4.14 Repository "
"Migration and Upgrade</a>\n"
"</li><li><a href=\"#Performance-Tuning\">4.15 Performance Tuning</a>\n"
"</li><li><a href=\"#Garbage-Collection\">4.16 Garbage Collection</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17 Berkeley DB Data Store</"
"a>\n"
"<ul>\n"
"<li><a href=\"#Berkeley-DB-Data-Store\">4.17.1 Architecture Overview</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.2 Opening a Store</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.3 Starting a Transaction</"
"a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.4 Special Commands</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.5 Performance Tuning</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#CLSQL-Data-Store\">4.18 CLSQL Data Store</a>\n"
"<ul>\n"
"<li><a href=\"#CLSQL-Data-Store\">4.18.1 Basic CLSQL Implementation</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Postmodern-Data-Store\">4.19 Postmodern Data Store</a>\n"
"</li><li><a href=\"#Native-Lisp-Data-Store\">4.20 Native Lisp Data Store</"
"a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_User-API-Reference\" href=\"#User-API-Reference\">5 "
"User API Reference</a>\n"
"<ul>\n"
"<li><a href=\"#Store-Controller-API\">5.1 Store Controllers</a>\n"
"</li><li><a href=\"#Persistent-Object-API\">5.2 Persistent Objects</a>\n"
"</li><li><a href=\"#Persistent-Object-Indexing-API\">5.3 Persistent Object "
"Indexing</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-Object-Indexing-API\">5.3.1 Indexed Object "
"Accessors</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Set-API\">5.4 Persistent Sets</a>\n"
"</li><li><a href=\"#BTree-API\">5.5 BTrees</a>\n"
"</li><li><a href=\"#BTree-Cursor-API\">5.6 Btree Cursors</a>\n"
"</li><li><a href=\"#Index-Cursor-API\">5.7 Index Cursors</a>\n"
"</li><li><a href=\"#Transaction-API\">5.8 Transactions</a>\n"
"</li><li><a href=\"#Migration-and-Upgrading-API\">5.9 Migration and "
"Upgrading</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Design-Patterns\" href=\"#Design-Patterns\">6 Design "
"Patterns</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-System-Objects\">6.1 Persistent System Objects</"
"a>\n"
"</li><li><a href=\"#File-System-Replacement\">6.2 File System Replacement</"
"a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3 "
"Checkpointing Conventional Program State</a>\n"
"<ul>\n"
"<li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.1 Assumptions</"
"a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.2 "
"Snapshot Set</a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.3 "
"Snapshot Set Implementation</a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.4 "
"Isolating multiple snapshot sets</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Elephant-as-Database\">6.4 Elephant as Database</a>\n"
"</li><li><a href=\"#Multithreaded-Web-Applications\">6.5 Multithreaded Web "
"Applications</a>\n"
"</li><li><a href=\"#Real_002dWorld-Application-Examples\">6.6 Real-World "
"Application Examples</a>\n"
"<ul>\n"
"<li><a href=\"#Real_002dWorld-Application-Examples\">6.6.1 Konsenti</a>\n"
"</li><li><a href=\"#Real_002dWorld-Application-Examples\">6.6.2 "
"Conceptminer</a>\n"
"</li></ul>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Elephant-Architecture\" href=\"#Elephant-Architecture"
"\">7 Elephant Architecture</a>\n"
"<ul>\n"
"<li><a href=\"#Elephant-Architecture\">7.1 Initializing a store controller</"
"a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.2 Persistent Object Creation</"
"a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.3 Persistent Slot Protocol</"
"a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.4 Persistent Collection "
"Protocols</a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.5 Implementing Transactions</"
"a>\n"
"<ul>\n"
"<li><a href=\"#Elephant-Architecture\">7.5.1 Implementing Execute "
"Transaction</a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.5.2 Interleaving Multiple "
"Store Transactions</a>\n"
"</li></ul>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Data-Store-API-Reference\" href=\"#Data-Store-API-"
"Reference\">8 Data Store API Reference</a>\n"
"<ul>\n"
"<li><a href=\"#DSR-Registration\">8.1 Registration</a>\n"
"</li><li><a href=\"#DSR-Store-Controllers\">8.2 Store Controllers</a>\n"
"</li><li><a href=\"#DSR-Persistent-Objects-and-Slot-Access\">8.3 Slot "
"Access</a>\n"
"</li><li><a href=\"#DSR-Collections\">8.4 Collections</a>\n"
"</li><li><a href=\"#DSR-Cursors\">8.5 Cursors</a>\n"
"</li><li><a href=\"#DSR-Transactions\">8.6 Transactions</a>\n"
"</li><li><a href=\"#DSR-Multithreading-Considerations\">8.7 Multithreading "
"Considerations</a>\n"
"</li><li><a href=\"#DSR-Handling-Serialization\">8.8 Handling Serialization</"
"a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Copyright-and-License\" href=\"#Copyright-and-License"
"\">9 Copyright and License</a>\n"
"<ul>\n"
"<li><a href=\"#Copyright-and-License\">9.1 Elephant Licensing</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.2 Elephant Manual Copyright "
"and Licensing</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.3 3rd Party Libraries</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.4 Data Store Licensing "
"Considerations</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Concept-Index\" href=\"#Concept-Index\">Appendix A "
"Concept Index</a>\n"
"</li><li><a name=\"toc_Object-Index\" href=\"#Object-Index\">Appendix B "
"Object Index</a>\n"
"</li><li><a name=\"toc_Function-_002f-Macro-Index\" href=\"#Function-_002f-"
"Macro-Index\">Appendix C Function / Macro Index</a>\n"
"</li><li><a name=\"toc_Variable-Index\" href=\"#Variable-Index\">Appendix D "
"Variable Index</a>\n"
"</li><li><a name=\"toc_Colophon\" href=\"#Colophon\">Colophon</a>\n"
"</li></ul>\n"
"</div>"
msgstr ""
"<!-- node-name,  next,  previous,  up -->\n"
"   <div class=\"contents\">\n"
"<h2>Оглавление</h2>\n"
"<ul>\n"
"<li><a name=\"toc_Top\" href=\"#Top\">Авторские права</a>\n"
"</li><li><a name=\"toc_Table-of-Contents\" href=\"#Table-of-Contents\"></a>\n"
"</li><li><a name=\"toc_Introduction\" href=\"#Introduction\">1 Введение</a>\n"
"<ul>\n"
"<li><a href=\"#Introduction\">1.1 История</a>\n"
"</li><li><a href=\"#Introduction\">1.2 Цели Elephant</a>\n"
"</li><li><a href=\"#Introduction\">1.3 Дополнительная информация</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Tutorial\" href=\"#Tutorial\">2 Учебник</a>\n"
"<ul>\n"
"<li><a href=\"#Overview\">2.1 Обзор</a>\n"
"</li><li><a href=\"#Getting-Started\">2.2 Начало работы</a>\n"
"</li><li><a href=\"#The-Store-Root\">2.3 Корень Хранилища</a>\n"
"</li><li><a href=\"#Serialization\">2.4 Сериализация</a>\n"
"</li><li><a href=\"#Persistent-Classes\">2.5 Постоянные классы</a>\n"
"</li><li><a href=\"#Rules-about-Persistent-Classes\">2.6 Правила о "
"постоянных классах</a>\n"
"</li><li><a href=\"#Persistent-collections\">2.7 Постоянные коллекции</"
"a><ul>\n"
"<li><a href=\"#Persistent-collections\">2.7.1 Использованиеg PSets</a>\n"
"</li><li><a href=\"#Persistent-collections\">2.7.2 Использование BTrees</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Indexing-Persistent-Classes\">2.8 Индексирование "
"постоянных классов</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9 Использование транзакций</a>\n"
"<ul>\n"
"<li><a href=\"#Using-Transactions\">2.9.1 Зачем нам нужны транзакции?</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.2 Использование <code>with-"
"transaction</code></a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.3 Вложенные транзакции</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.4 Идемпотентные побочные "
"эффекты</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.5 Транзакции и "
"производительность</a>\n"
"</li><li><a href=\"#Using-Transactions\">2.9.6 Транзакции и "
"приложения(применения)</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Advanced-Topics\">2.10 Расширенные темы</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Installation\" href=\"#Installation\">3 Установка</"
"a>\n"
"<ul>\n"
"<li><a href=\"#Requirements\">3.1 Требования</a>\n"
"<ul>\n"
"<li><a href=\"#Requirements\">3.1.1 Поддерживаемые комбинации Lisp, платформ "
"и хранилищ данных</a>\n"
"</li><li><a href=\"#Requirements\">3.1.2 Зависимости от библиотек</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Configuring-Elephant\">3.2 Настройка Elephant</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3 Загрузка Elephant</a>\n"
"<ul>\n"
"<li><a href=\"#Loading-Elephant\">3.3.1 Загрузка Elephant через  ASDF</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.2 Процесс двухфазной нагрузки</"
"a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.3 Пакеты</a>\n"
"</li><li><a href=\"#Loading-Elephant\">3.3.4 Открытие Хранилища</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Berkeley-DB\">3.4 Berkeley DB</a>\n"
"</li><li><a href=\"#Berkeley-DB-Example\">3.5 Настройка Berkeley DB</a>\n"
"</li><li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6 Обновление баз "
"данных Berkeley DB </a>\n"
"<ul>\n"
"<li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6.1 Обновление до 0.9</"
"a>\n"
"</li><li><a href=\"#Upgrading-Berkeley-DB-Databases\">3.6.2 Обновление из "
"Elephant 0.5</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#CL_002dSQL\">3.7 CL-SQL</a>\n"
"</li><li><a href=\"#CL_002dSQL-Example\">3.8 CL-SQL Пример</a>\n"
"</li><li><a href=\"#Elephant-on-Windows\">3.9 Elephant в Windows</a>\n"
"</li><li><a href=\"#Test-Suites\">3.10 Наборы тестов</a>\n"
"</li><li><a href=\"#Documentation\">3.11 Документация</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_User-Guide\" href=\"#User-Guide\">4 Руководство "
"пользователя</a>\n"
"<ul>\n"
"<li><a href=\"#The-Store-Controller\">4.1 Контроллер Хранилища</a>\n"
"</li><li><a href=\"#Serialization-details\">4.2 Детали сериализации</a>\n"
"<ul>\n"
"<li><a href=\"#Serialization-details\">4.2.1 Ограничения Store-by-"
"Value(хранения по значению)</a>\n"
"</li><li><a href=\"#Serialization-details\">4.2.2 Атомарные типы</a>\n"
"</li><li><a href=\"#Serialization-details\">4.2.3 Агрегатные типы</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3 Постоянные классы и "
"объекты</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-Classes-and-Objects\">4.3.1 Определение "
"постоянного класса</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.2 Создание "
"экземпляра</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.3 Жизненный цикл "
"постоянного экземпляра</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.4 Использование "
"временных слотов</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.5 Использование "
"постоянных слотов</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.6 Переопределение "
"класса</a>\n"
"</li><li><a href=\"#Persistent-Classes-and-Objects\">4.3.7 Поддержка для "
"<code>change-class</code></a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Class-Indices\">4.4 Индексы классов</a>\n"
"<ul>\n"
"<li><a href=\"#Class-Indices\">4.4.1 Синхронизация классов и хранилищ "
"данных</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Sets\">4.5  Постоянные  Sets(наборы)</a>\n"
"</li><li><a href=\"#Persistent-BTrees\">4.6 Постоянные BTrees(бинарные "
"деревья)</a>\n"
"</li><li><a href=\"#BTree-Cursors\">4.7 Курсоры BTree</a>\n"
"</li><li><a href=\"#BTree-Indexing\">4.8 Индексирование BTree</a>\n"
"</li><li><a href=\"#Index-Cursors\">4.9 Индексные курсоры</a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10 Многопоточные "
"приложения</a>\n"
"<ul>\n"
"<li><a href=\"#Multi_002dthreaded-Applications\">4.10.1 Общие ресурсы</a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10.2 Безопасность "
"потоков и транзакции хранилища данных</a>\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">4.10.3 Минимизация "
"зависимости от специальных локальных потоков</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Transaction-Details\">4.11 Детали транзакции</a>\n"
"<ul>\n"
"<li><a href=\"#Transaction-Details\">4.11.1 внутри  <code>with-transaction</"
"code> </a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.2 внутри  <code>execute-"
"transaction</code> </a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.3 Создание собственной "
"транзакционной платформы</a>\n"
"</li><li><a href=\"#Transaction-Details\">4.11.4 Анализ поведения "
"динамических транзакций</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Multi_002drepository-Operation\">4.12 Работа с "
"несколькими репозиториями</a>\n"
"</li><li><a href=\"#Multiple-Processes-and-Distributed-Applications\">4.13 "
"Множественные процессы и распределенные приложения</a>\n"
"</li><li><a href=\"#Repository-Migration-and-Upgrade\">4.14  Миграция и "
"обновление репозитория</a>\n"
"</li><li><a href=\"#Performance-Tuning\">4.15 Настройка производительности</"
"a>\n"
"</li><li><a href=\"#Garbage-Collection\">4.16 Сборка мусора</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17  Хранилище данных Berkeley "
"DB</a>\n"
"<ul>\n"
"<li><a href=\"#Berkeley-DB-Data-Store\">4.17.1 Обзор архитектуры</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.2 Открытие хранилища</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.3 Запуск транзакции</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.4 Специальные команды</a>\n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">4.17.5 Настройка "
"производительности</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#CLSQL-Data-Store\">4.18 Хранилище данных CLSQL</a>\n"
"<ul>\n"
"<li><a href=\"#CLSQL-Data-Store\">4.18.1 Базовая реализация CLSQL</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Postmodern-Data-Store\">4.19 Постмодернистское хранилище "
"данных</a>\n"
"</li><li><a href=\"#Native-Lisp-Data-Store\">4.20 Собственное хранилище "
"данных Lisp</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_User-API-Reference\" href=\"#User-API-Reference\">5 "
"Справочник по пользовательскому API</a>\n"
"<ul>\n"
"<li><a href=\"#Store-Controller-API\">5.1 Контроллеры Хранилища</a>\n"
"</li><li><a href=\"#Persistent-Object-API\">5.2 Постоянные объекты</a>\n"
"</li><li><a href=\"#Persistent-Object-Indexing-API\">5.3 Индексирование "
"постоянных объектов</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-Object-Indexing-API\">5.3.1 Средства "
"доступа(Accessors) к индексированным объектам </a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Persistent-Set-API\">5.4 Постоянные Sets(наборы)</a>\n"
"</li><li><a href=\"#BTree-API\">5.5 BTrees</a>\n"
"</li><li><a href=\"#BTree-Cursor-API\">5.6 Курсоры Btree</a>\n"
"</li><li><a href=\"#Index-Cursor-API\">5.7 Индексные курсоры</a>\n"
"</li><li><a href=\"#Transaction-API\">5.8  Транзакции</a>\n"
"</li><li><a href=\"#Migration-and-Upgrading-API\">5.9 Миграция и обновление</"
"a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Design-Patterns\" href=\"#Design-Patterns\">6 Шаблоны "
"проектирования</a>\n"
"<ul>\n"
"<li><a href=\"#Persistent-System-Objects\">6.1 Постоянные системные объекты</"
"a>\n"
"</li><li><a href=\"#File-System-Replacement\">6.2 Замена файловой системы</"
"a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3 Проверка "
"обычного состояния программы</a>\n"
"<ul>\n"
"<li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.1 Допущения</"
"a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.2 Набор "
"снимков</a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.3 "
"Реализация набора снимков</a>\n"
"</li><li><a href=\"#Checkpointing-Conventional-Program-State\">6.3.4 "
"Изоляция нескольких наборов моментальных снимков</a>\n"
"</li></ul>\n"
"</li><li><a href=\"#Elephant-as-Database\">6.4 Elephant как база данных</a>\n"
"</li><li><a href=\"#Multithreaded-Web-Applications\">6.5 Многопоточные веб-"
"приложения</a>\n"
"</li><li><a href=\"#Real_002dWorld-Application-Examples\">6.6 Примеры "
"реальных приложений</a>\n"
"<ul>\n"
"<li><a href=\"#Real_002dWorld-Application-Examples\">6.6.1 Konsenti</a>\n"
"</li><li><a href=\"#Real_002dWorld-Application-Examples\">6.6.2 "
"Conceptminer</a>\n"
"</li></ul>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Elephant-Architecture\" href=\"#Elephant-Architecture"
"\">7 архитектура Elephant</a>\n"
"<ul>\n"
"<li><a href=\"#Elephant-Architecture\">7.1 Инициализация контроллера "
"хранилища</a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.2 Создание постоянного "
"объекта</a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.3 Протокол постоянного слота</"
"a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.4 Протоколы постоянных "
"коллекций</a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.5 Реализация транзакций</a>\n"
"<ul>\n"
"<li><a href=\"#Elephant-Architecture\">7.5.1 Реализация транзакции Execute</"
"a>\n"
"</li><li><a href=\"#Elephant-Architecture\">7.5.2 Чередование транзакций с "
"несколькими хранилищами</a>\n"
"</li></ul>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Data-Store-API-Reference\" href=\"#Data-Store-API-"
"Reference\">8 Справочник по API хранилища данных</a>\n"
"<ul>\n"
"<li><a href=\"#DSR-Registration\">8.1 Регистрация</a>\n"
"</li><li><a href=\"#DSR-Store-Controllers\">8.2 Контроллеры хранилища</a>\n"
"</li><li><a href=\"#DSR-Persistent-Objects-and-Slot-Access\">8.3 Доступ к "
"слоту</a>\n"
"</li><li><a href=\"#DSR-Collections\">8.4 Коллекции</a>\n"
"</li><li><a href=\"#DSR-Cursors\">8.5 Курсоры</a>\n"
"</li><li><a href=\"#DSR-Transactions\">8.6 Транзакции</a>\n"
"</li><li><a href=\"#DSR-Multithreading-Considerations\">8.7 Особенности "
"многопоточности</a>\n"
"</li><li><a href=\"#DSR-Handling-Serialization\">8.8 Обработка сериализации</"
"a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Copyright-and-License\" href=\"#Copyright-and-License"
"\">9 Авторское право и лицензия</a>\n"
"<ul>\n"
"<li><a href=\"#Copyright-and-License\">9.1 Лицензирование  Elephant</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.2 Авторские права и лицензии "
"на руководство по эксплуатации Elephant</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.3 Сторонние библиотеки</a>\n"
"</li><li><a href=\"#Copyright-and-License\">9.4 Вопросы лицензирования "
"хранилища данных</a>\n"
"</li></ul>\n"
"</li><li><a name=\"toc_Concept-Index\" href=\"#Concept-Index\">Приложение A "
"Указатель концепций</a>\n"
"</li><li><a name=\"toc_Object-Index\" href=\"#Object-Index\">Приложение B "
"Указатель объектов</a>\n"
"</li><li><a name=\"toc_Function-_002f-Macro-Index\" href=\"#Function-_002f-"
"Macro-Index\">Приложение C Указатель функций / макросов</a>\n"
"</li><li><a name=\"toc_Variable-Index\" href=\"#Variable-Index\">Приложение "
"D Переменный указатель</a>\n"
"</li><li><a name=\"toc_Colophon\" href=\"#Colophon\">Концовка</a>\n"
"</li></ul>\n"
"</div>"

#: in_ed/ElephantUserManual.html:323
msgctxt "in_ed/ElephantUserManual.html:323"
msgid ""
"<!-- *-texinfo-*- -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:325
msgctxt "in_ed/ElephantUserManual.html:325"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:331
msgid ""
"<hr>\n"
"<a name=\"Introduction\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Tutorial\">Tutorial</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Table-of-Contents"
"\">Table of Contents</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:333
msgctxt "in_ed/ElephantUserManual.html:333"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:336
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">1 Introduction</h2>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">1  Введение</h2>"

#: in_ed/ElephantUserManual.html:339
msgid "<p><a name=\"index-History-1\"></a><a name=\"index-Goals-2\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:341
msgctxt "in_ed/ElephantUserManual.html:341"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:351
msgid ""
"<p>Elephant is a persistent object protocol and database for Common\n"
"Lisp. The persistent protocol component of elephant overrides class\n"
"creation and standard slot accesses using the Meta-Object Protocol\n"
"(MOP) to render slot values persistent. Database functionality\n"
"includes the ability to persistently index and retrieve ordered sets\n"
"of class instances and ordinary lisp values.  Elephant has an\n"
"extensive test suite and the core functionality is becoming quite\n"
"mature."
msgstr ""
"<p>Elephant - это протокол постоянных объектов и база данных для Common "
"Lisp. \n"
"Компонент постоянного протокола Elephant переопределяет создание класса и \n"
"доступ к стандартным слотам с использованием протокола метаобъектов (MOP), \n"
"чтобы сделать значения слотов постоянными. Функциональность базы данных "
"включает \n"
"возможность постоянно индексировать и извлекать упорядоченные наборы "
"экземпляров \n"
"классов и обычных значений lisp. У Elephant есть обширный набор тестов, и "
"его \n"
"основная функциональность становится достаточно зрелой."

#: in_ed/ElephantUserManual.html:353
msgctxt "in_ed/ElephantUserManual.html:353"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:358
msgid ""
"<p>The Elephant code base is available under the LLGPL license. Data\n"
"stores each come with their own, separate license and you will have to\n"
"evaluate the implications of using them yourself."
msgstr ""
"<p>Кодовая база Elephant доступна по лицензии LLGPL. Каждое хранилище "
"данных \n"
"поставляется с собственной отдельной лицензией, и вам придется "
"самостоятельно \n"
"оценить последствия их использования. "

#: in_ed/ElephantUserManual.html:360
msgctxt "in_ed/ElephantUserManual.html:360"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:362
msgid "<h3 class=\"section\">1.1 History</h3>"
msgstr "<h3 class=\"section\">1.1 История</h3>"

#: in_ed/ElephantUserManual.html:369
msgid ""
"<p>Elephant was originally envisioned as a lightweight interface layer on\n"
"top of the Berkeley DB library, a widely-distributed embedded database\n"
"that many unix systems have installed by default.  Berkeley DB is ACID\n"
"compliant, transactional, process and thread safe, and fast relative\n"
"to relational databases."
msgstr ""
"<p>Первоначально Elephant задумывался как облегченный интерфейсный слой "
"поверх \n"
"библиотеки Berkeley DB, широко распространенной встраиваемой базы данных, \n"
"которую многие системы unix устанавливают по умолчанию. Berkeley DB "
"является \n"
"ACID-совместимой, транзакционной, технологической и поточно-ориентированной "
"и \n"
"быстрой по сравнению с реляционными базами данных."

#: in_ed/ElephantUserManual.html:371
msgctxt "in_ed/ElephantUserManual.html:371"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:379
msgid ""
"<p>Elephant has been extended to provide support for multiple backends,\n"
"specifically a relational database backend based on CL-SQL which has\n"
"been tested with Postgres and SQLite 3, and probably support\n"
"other relational systems easily.  It supports, with some care,\n"
"multi-repository operation and enables convenient migration of data\n"
"between repositories."
msgstr ""
"<p>Elephant был расширен для обеспечения поддержки нескольких бэкэндов, \n"
"в частности бэкэнда реляционной базы данных на основе CL-SQL, который \n"
"был протестирован с Postgres и SQLite 3, и, вероятно, легко поддерживает \n"
"другие реляционные системы. Он поддерживает, с некоторой осторожностью, \n"
"работу с несколькими репозиториями и обеспечивает удобный перенос данных \n"
"между репозиториями.\n"

#: in_ed/ElephantUserManual.html:381
msgctxt "in_ed/ElephantUserManual.html:381"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:387
msgid ""
"<p>The support for relational backends and migration to the LLGPL was to\n"
"allow for broader use of Elephant in both not-for-profit and commercial\n"
"settings.  Several additional backends are planned for future releases\n"
"including a native Lisp implementation released under the LLGPL."
msgstr ""
"<p>Поддержка реляционных бэкэндов и переход на LLGPL должны были позволить \n"
"более широкое использование Elephant как в некоммерческих, так и в "
"коммерческих целях. \n"
"В будущих выпусках запланировано несколько дополнительных бэкендов, \n"
"в том числе нативная реализация Lisp, выпущенная под LLGPL."

#: in_ed/ElephantUserManual.html:389
msgctxt "in_ed/ElephantUserManual.html:389"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:395
msgid ""
"<p>Elephant's current development focus is to enhance the feature set\n"
"including a native lisp backend, a simple query language, and flexible\n"
"persistence models that selectively break one or more of the ACID\n"
"constraints to improve performance."
msgstr ""
"<p>В настоящее время Elephant уделяет особое внимание расширению \n"
"набора функций, включая собственный бэкэнд Lisp, простой язык \n"
"запросов и гибкие модели сохраняемости, которые выборочно нарушают \n"
"одно или несколько ограничений ACID для повышения производительности. "

#: in_ed/ElephantUserManual.html:397
msgctxt "in_ed/ElephantUserManual.html:397"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:399
msgid "<h3 class=\"section\">1.2 Elephant Goals</h3>"
msgstr "<h3 class=\"section\">1.2  Цели Elephant</h3>"

#: in_ed/ElephantUserManual.html:407
msgid ""
"     <ul>\n"
"<li><strong>Transparency:</strong> most Lisp values are easy to persist "
"without\n"
"significant effort or special syntax.  You can interact with the DB\n"
"entirely from Lisp.  There is no requirement to use domain-specific\n"
"languages, such as SQL, to access persistent resources.  Elephant\n"
"loads via ASDF and requires no external server (except for some SQL\n"
"backends like Postgres)."
msgstr ""
"     <ul>\n"
"<li><strong> Прозрачность:</strong> большинство значений Lisp легко "
"сохранить \n"
"без значительных усилий или специального синтаксиса. Вы можете полностью \n"
"взаимодействовать с БД из Лиспа. Нет необходимости использовать \n"
"предметно-ориентированные языки, такие как SQL, для доступа к постоянным "
"ресурсам. \n"
"Elephant загружается через ASDF и не требует внешнего сервера (за "
"исключением \n"
"некоторых бэкэндов SQL, таких как Postgres)."

#: in_ed/ElephantUserManual.html:413
msgid ""
"     </li><li><strong>Simplicity:</strong> a small library with few "
"surprises for the\n"
"programmer. Lisp and Berkeley DB together are an excellent substrate;\n"
"Elephant tries to leverage their features as much as possible. \n"
"Support for additional backends are load-time options and more or less\n"
"transparent to the user."
msgstr ""
"     </li><li><strong>Простота:</strong>  небольшая библиотека с "
"несколькими \n"
"сюрпризами для программиста. Lisp и Berkeley DB вместе - отличный "
"субстрат; \n"
"Elephant старается максимально использовать свои возможности. Поддержка "
"дополнительных \n"
"серверных модулей - это параметры времени загрузки, которые более или "
"менее \n"
"прозрачны для пользователя."

#: in_ed/ElephantUserManual.html:418
msgid ""
"     </li><li><strong>Safety:</strong> ACID, transactions. Concurrent with "
"good multi-user (BDB) and\n"
"multi-threaded semantics (BDB/SQL), isolation, locking and deadlock\n"
"detection.  (Deadlock detection does require an external process to be\n"
"launched for Berkeley DB)"
msgstr ""
"     </li><li><strong>Безопасность:</strong> ACID, транзакции. "
"Одновременно \n"
"с хорошей многопользовательской (BDB) и многопоточной семантикой (BDB/"
"SQL), \n"
"изоляцией, блокировкой и обнаружением взаимоблокировок. (Для обнаружения \n"
"тупиковых ситуаций требуется запуск внешнего процесса для Berkeley DB) "

#: in_ed/ElephantUserManual.html:424
msgid ""
"     </li><li><strong>Performance:</strong> leverage Berkeley DB performance "
"and/or Relational database\n"
"reliability.  In addition to fast concurrent / transactional modes,\n"
"elephant will (eventually) offer an accelerated single-user as well as\n"
"pure in-memory mode that should be comparable to prevalence style\n"
"solutions, but employ a common programmer interface."
msgstr ""
"     </li><li><strong>Производительность:</strong>  используйте "
"производительность\n"
"Berkeley DB и/или надежность реляционной базы данных. В дополнение к "
"быстрым \n"
"параллельным/транзакционным режимам, elephant (в конечном итоге) предложит \n"
"ускоренный однопользовательский, а также режим чисто в памяти, который "
"должен \n"
"быть сопоставим с решениями в стиле распространенности, но будет "
"использовать \n"
"общий интерфейс программиста."

#: in_ed/ElephantUserManual.html:430
msgid ""
"     </li><li><strong>Historical continuity:</strong> Elephant does not try "
"to innovate\n"
"significantly over prior Lisp persistent object stores such as\n"
"AllegroStore (also based on Berkeley DB), the new AllegroCache,\n"
"the Symbolics system Statice and PLOB.  Anyone familiar with\n"
"those systems will recognize the Elephant interface."
msgstr ""
"     </li><li><strong>Историческая преемственность:</strong>  Elephant не "
"пытается \n"
"значительно усовершенствовать предыдущие хранилища постоянных объектов "
"Lisp, \n"
"такие как AllegroStore (также основанный на Berkeley DB), новый "
"AllegroCache, \n"
"систему символов Statice и PLOB. Любой, кто знаком с этими системами, \n"
"узнает интерфейс Elephant."

#: in_ed/ElephantUserManual.html:435
msgid ""
"     </li><li><strong>License Flexibility:</strong> Elephant is released "
"under the LLGPL. \n"
"Because it supports multiple implementation of the backend, one\n"
"can choose a backend with licensing and other features appropriate\n"
"to your needs."
msgstr ""
"     </li><li><strong>Гибкость лицензии:</strong>  Elephant выпускается под "
"лицензией LLGPL.\n"
"Поскольку он поддерживает множественную реализацию серверной части, можно "
"выбрать \n"
"серверную часть с лицензированием и другими функциями, соответствующими "
"вашим \n"
"потребностям. "

#: in_ed/ElephantUserManual.html:437
msgctxt "in_ed/ElephantUserManual.html:437"
msgid "</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:439
msgid "<h3 class=\"section\">1.3 More Information</h3>"
msgstr "<h3 class=\"section\">1.3 Дополнительная информация</h3>"

#: in_ed/ElephantUserManual.html:444
msgid ""
"<p>Join the Elephant mailing lists to ask your questions and receive\n"
"updates.  You can also review archives for past discussions and\n"
"questions.  Pointers can be found on the Elephant website at"
msgstr ""
"<p>Присоединяйтесь к спискам рассылки Elephant, чтобы задавать вопросы и \n"
"получать новости. Вы также можете просмотреть архивы прошлых обсуждений и \n"
"вопросов. Указатели можно найти на сайте Elephant по адресу\n"

#: in_ed/ElephantUserManual.html:446
msgctxt "in_ed/ElephantUserManual.html:446"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:449
msgid ""
"<p><a href=\"http://www.common-lisp.net/project/elephant\">http://www.common-"
"lisp.net/project/elephant</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:451
msgctxt "in_ed/ElephantUserManual.html:451"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:455
msgid ""
"<p>Installation instructions can be found in the <a href=\"#Installation"
"\">Installation</a>\n"
"section.  Bugs can be reported via the Elephant Trac system at"
msgstr ""
"<p>Инструкции по установке можно найти в разделе \n"
"<a href=\"#Installation\">Установка</a>. Об ошибках можно сообщать через "
"систему \n"
"Elephant Trac по адресу\n"

#: in_ed/ElephantUserManual.html:457
msgctxt "in_ed/ElephantUserManual.html:457"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:460
msgid ""
"<p><a href=\"http://trac.common-lisp.net/elephant/\">http://trac.common-lisp."
"net/elephant/</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:462
msgctxt "in_ed/ElephantUserManual.html:462"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:467
msgid ""
"<p>This also serves as a good starting point for finding out what new\n"
"features or capabilities you can contribute to Elephant. The Trac\n"
"system also contains a wiki with design discussions and a FAQ."
msgstr ""
"<p>Это также служит хорошей отправной точкой для выяснения, какие новые \n"
"функции или возможности вы можете внести в Elephant. Система Trac также \n"
"содержит вики-страницу с обсуждениями дизайна и часто задаваемыми вопросами. "

#: in_ed/ElephantUserManual.html:470
msgctxt "in_ed/ElephantUserManual.html:470"
msgid ""
"<!-- *-texinfo-*- -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:472
msgctxt "in_ed/ElephantUserManual.html:472"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:474
msgctxt "in_ed/ElephantUserManual.html:474"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:480
msgid ""
"<hr>\n"
"<a name=\"Tutorial\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Installation"
"\">Installation</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Introduction"
"\">Introduction</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:482
msgctxt "in_ed/ElephantUserManual.html:482"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:485
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">2 Tutorial</h2>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">2 Учебник</h2>"

#: in_ed/ElephantUserManual.html:488
msgid "<p><a name=\"index-Tutorial-3\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:490
msgctxt "in_ed/ElephantUserManual.html:490"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:503
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Overview\">Overview</a>:  Overview of "
"elephant's features. \n"
"</li><li><a accesskey=\"2\" href=\"#Getting-Started\">Getting Started</a>:  "
"Opening and accessing a store. \n"
"</li><li><a accesskey=\"3\" href=\"#The-Store-Root\">The Store Root</a>:  "
"Accessing persistent data. \n"
"</li><li><a accesskey=\"4\" href=\"#Serialization\">Serialization</a>:  "
"Storage semantics for lisp values. \n"
"</li><li><a accesskey=\"5\" href=\"#Persistent-Classes\">Persistent Classes</"
"a>:  Persistent semantics for objects. \n"
"</li><li><a accesskey=\"6\" href=\"#Rules-about-Persistent-Classes\">Rules "
"about Persistent Classes</a>:  What you need to know. \n"
"</li><li><a accesskey=\"7\" href=\"#Persistent-collections\">Persistent "
"collections</a>:  Keep track of collections of values. \n"
"</li><li><a accesskey=\"8\" href=\"#Indexing-Persistent-Classes\">Indexing "
"Persistent Classes</a>:  Simple way to keep track of persistent instances. \n"
"</li><li><a accesskey=\"9\" href=\"#Using-Transactions\">Using Transactions</"
"a>:  Providing ACID database properties. \n"
"</li><li><a href=\"#Advanced-Topics\">Advanced Topics</a>:  Additional "
"Elephant features covered in the User Guide. \n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Overview\">Обзор</a>:  Обзор возможностей "
"elephant. \n"
"</li><li><a accesskey=\"2\" href=\"#Getting-Started\"> Начало работы</a>:  "
"открытие хранилища и доступ к нему. \n"
"</li><li><a accesskey=\"3\" href=\"#The-Store-Root\">Корень хранилища</a>:  "
"доступ к постоянным данным. \n"
"</li><li><a accesskey=\"4\" href=\"#Serialization\">Сериализация</a>:  "
"семантика хранения для значений lisp. \n"
"</li><li><a accesskey=\"5\" href=\"#Persistent-Classes\">Постоянные классы</"
"a>:  семантика постояннства  для объектов \n"
"</li><li><a accesskey=\"6\" href=\"#Rules-about-Persistent-Classes\">Правила "
"о постоянных классах</a>:  что вам нужно знать. \n"
"</li><li><a accesskey=\"7\" href=\"#Persistent-collections\">Постоянные "
"коллекции</a>:  отслеживайте коллекции значений. \n"
"</li><li><a accesskey=\"8\" href=\"#Indexing-Persistent-Classes"
"\">Индексирование постоянных классов</a>:  простой способ отслеживать "
"постоянные экземпляры. \n"
"</li><li><a accesskey=\"9\" href=\"#Using-Transactions\">Использование "
"транзакций</a>:  предоставление свойств базы данных ACID. \n"
"</li><li><a href=\"#Advanced-Topics\">Дополнительные темы</a>:  "
"дополнительная функциональность\n"
" Elephant, описанная в Руководстве пользователя.  \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:505
msgctxt "in_ed/ElephantUserManual.html:505"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:507
msgctxt "in_ed/ElephantUserManual.html:507"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:512
msgid ""
"<hr>\n"
"<a name=\"Overview\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Getting-Started\">Getting "
"Started</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:514
msgctxt "in_ed/ElephantUserManual.html:514"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:517
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.1 Overview</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.1  Обзор</h3>"

#: in_ed/ElephantUserManual.html:528
msgid ""
"<p>Elephant is a Persistence Metaprotocol and Database for Common Lisp. \n"
"It provides the ability for users to define and interact with\n"
"persistent objects and to transparently store ordinary lisp values. \n"
"Persistent objects are CLOS instances that overload the ordinary slot\n"
"access semantics so that every write to a slot is passed through and\n"
"written to disk.  Non-persistent lisp objects and values can be\n"
"written to slots and will be automatically persisted.  In addition,\n"
"Elephant provides a persistent index which maintains an ordered\n"
"collection of lisp values or persistent object references."
msgstr ""
"<p>Elephant - это  метапротокол постоянства(Persistence Metaprotocol) и \n"
"база данных для Common Lisp. Он предоставляет пользователям возможность "
"определять \n"
"постоянные объекты и взаимодействовать с ними, а также прозрачно хранить "
"обычные \n"
"значения lisp. Постоянные объекты - это экземпляры CLOS, которые перегружают "
"обычную \n"
"семантику доступа к слоту, так что каждая запись в слот проходит и "
"записывается на диск.\n"
"Непостоянные объекты и значения lisp могут быть записаны в слоты и будут "
"автоматически \n"
"сохраняться. Кроме того, Elephant предоставляет постоянный индекс, который "
"поддерживает\n"
"упорядоченную коллекцию значений lisp или ссылок на постоянные  объекты."

#: in_ed/ElephantUserManual.html:530
msgctxt "in_ed/ElephantUserManual.html:530"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:536
msgid ""
"<p>The use of persistent objects makes coding concise, convenient, and\n"
"powerful, and makes persistence almost invisible to the programmer. \n"
"However, Elephant also allows the same basic data dictionary of\n"
"key/value retrieval that BerkeleyDB provides."
msgstr ""
"<p>Использование постоянных объектов делает кодирование кратким, удобным и "
"мощным, \n"
"а также делает постоянство почти невидимым для программиста. Однако "
"Elephant \n"
"также позволяет использовать тот же базовый словарь данных для поиска ключ/"
"значение, \n"
"который предоставляет BerkeleyDB. "

#: in_ed/ElephantUserManual.html:538
msgctxt "in_ed/ElephantUserManual.html:538"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:551
msgid ""
"<p>When someone says \"database,\" most people think of SQL Relational Data\n"
"Base Management Systems (e.g. Oracle, Postgresql, MySql).  Those\n"
"systems store data in statically typed tables with unique shared\n"
"values to connect rows in separate tables.  Objects can be mapped into\n"
"these tables in an object-relational mapping that assigns objects to\n"
"rows and slot values to columns in a row's table.  If a slot\n"
"references another type of object, a unique ID can be used to\n"
"reference that object's table.  CL-SQL, for example, provides\n"
"facilities for this kind of object-relational mapping and there are\n"
"many systems for other languages that do the same (i.e. Hibernate for\n"
"Java)."
msgstr ""
"<p>Когда кто-то говорит \"база данных\", большинство людей думают о "
"системах \n"
"управления реляционными базами данных SQL (например, Oracle, Postgresql, "
"MySql). \n"
"Эти системы хранят данные в статически типизированных таблицах с "
"уникальными \n"
"общими значениями для соединения строк в отдельных таблицах. Объекты могут "
"быть \n"
"сопоставлены с этими таблицами в объектно-реляционном сопоставлении, "
"которое \n"
"назначает объекты строкам, а значения слотов - столбцам в таблице строк. \n"
"Если слот ссылается на другой тип объекта, уникальный идентификатор может \n"
"использоваться для ссылки на таблицу этого объекта. CL-SQL, например, "
"предоставляет \n"
"средства для такого рода объектно-реляционного сопоставления, и существует \n"
"множество систем для других языков, которые делают то же самое (например, \n"
"Hibernate для Java)."

#: in_ed/ElephantUserManual.html:553
msgctxt "in_ed/ElephantUserManual.html:553"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:562
msgid ""
"<p>While Elephant can use either RDBMSs or Berkeley DB as a data store,\n"
"the model it supports is that of objects stored in persistent indices. \n"
"Unlike systems such as Hibernate for Java, the user does not need to\n"
"construct or worry about a mapping from the object space into the\n"
"database.  Elephant relies on LISP rather than SQL for its data\n"
"manipulation language.  Elephant is designed to be a simple and\n"
"convenient tool for the programmer."
msgstr ""
"<p>Хотя Elephant может использовать либо СУБД, либо Berkeley DB в качестве \n"
"хранилища данных, он поддерживает модель объектов, хранящихся в постоянных "
"индексах. \n"
"В отличие от таких систем, как Hibernate для Java, пользователю не нужно "
"создавать \n"
"или беспокоиться о отображении пространства объектов в базу данных. "
"Elephant \n"
"полагается на LISP, а не на SQL в своем языке обработки данных. Elephant \n"
"разработан как простой и удобный инструмент для программиста. "

#: in_ed/ElephantUserManual.html:564
msgctxt "in_ed/ElephantUserManual.html:564"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:567
msgid "<p>Elephant consists of a small universe of basic concepts:"
msgstr "<p>Elephant состоит из небольшой вселенной основных понятий::"

#: in_ed/ElephantUserManual.html:569
msgctxt "in_ed/ElephantUserManual.html:569"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:591
msgid ""
"<ul>\n"
"<li><strong>Store controller:</strong> the interface between lisp and a data "
"store. \n"
"Most operations require or accept a store controller, or a default\n"
"store controller stored in <code>*store-controller*</code> to function. \n"
"</li><li><strong>Persistent Sets:</strong> A simple persistent collection is "
"provided\n"
"which allows the creation of persistent sets. \n"
"</li><li><strong>BTrees:</strong> Elephant provides a persistent key-value\n"
"abstraction based on the BTree data structure.  Values can be written\n"
"to or read from a BTree and are stored in a sorted order. \n"
"</li><li><strong>Stored values:</strong> most lisp values, including "
"standard objects, arrays, etc\n"
"can be used as either key or value in a persistent BTree. \n"
"</li><li><strong>Persistent objects:</strong> An object where most slot "
"values are stored in\n"
"the data store and are written to or retrieved from disk on slot\n"
"accesses.  Storing a persistent object stores only a reference,\n"
"allowing for object identity. \n"
"</li><li><strong>Object indexing:</strong> The ability to lookup and sort "
"objects by their slot\n"
"values rather than by explicit inclusion in a collection. \n"
"</li><li><strong>Transactions:</strong> a dynamic context for executing "
"operations on objects\n"
"or collections such that the side effects exhibit the ACID (atomicity, "
"consistency,\n"
"isolation and durability) properties of database. \n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><strong>Контроллер хранилища:</strong> интерфейс между lisp и хранилищем "
"данных. \n"
"Большинство операций требуют или принимают для работы контроллер хранилища "
"или \n"
"контроллер хранилища по умолчанию, хранящийся в <code>*store-controller*</"
"code>.\n"
"</li><li><strong>Постоянные наборы:</strong>  предоставляется простая "
"постоянная коллекция,\n"
"которая позволяет создавать постоянные наборы.\n"
"</li><li><strong>BTrees:</strong> Elephant обеспечивает постоянную "
"абстракцию «ключ-значение» \n"
"на основе структуры данных BTree. Значения могут быть записаны в BTree или "
"считаны из него \n"
"и хранятся в отсортированном порядке.\n"
"</li><li><strong>Сохраненные значения:</strong> большинство значений lisp, "
"включая стандартные\n"
"объекты, массивы и т. Д., Могут использоваться как ключ или значение в "
"постоянном BTree.\n"
"</li><li><strong>Постоянные объекты:</strong> объект, в котором большинство "
"значений слотов\n"
"хранятся в хранилище данных и записываются или извлекаются с диска при "
"доступе к слотам. \n"
"При хранении постоянного объекта сохраняется только ссылка, позволяющая "
"идентифицировать объект.\n"
"</li><li><strong>Индексирование объектов:</strong> возможность поиска и "
"сортировки объектов \n"
"по значениям их слотов, а не путем явного включения в коллекцию.\n"
"</li><li><strong>Транзакции:</strong> динамический контекст для выполнения "
"операций с \n"
"объектами или коллекциями, в которых побочные эффекты проявляют свойства "
"ACID \n"
"(атомарность(atomicity), согласованность(consistency), изоляция(isolation) "
"и \n"
"долговечность(durability)) базы данных.  \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:595
msgid ""
"<p>There are a set of more advanced concepts you will learn about later,\n"
"but these basic concepts will serve to acquaint you with Elephant."
msgstr ""
"<p>Существует ряд более сложных концепций, о которых вы узнаете позже, \n"
"но эти базовые концепции помогут вам познакомиться с Elephant.\n"

#: in_ed/ElephantUserManual.html:597
msgctxt "in_ed/ElephantUserManual.html:597"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:602
msgid ""
"<p>If you do not already have Elephant installed and building correctly,\n"
"read the <a href=\"#Installation\">Installation</a> section of this manual "
"and then move on to\n"
"<a href=\"#Getting-Started\">Getting Started</a>."
msgstr ""
"<p>Если у вас еще не установлен и не собран Elephant правильно, прочтите "
"раздел \n"
"<a href=\"#Installation\">Установка</a>  этого руководства, а затем "
"перейдите к разделу\n"
"<a href=\"#Getting-Started\">Начало работы</a>."

#: in_ed/ElephantUserManual.html:604
msgctxt "in_ed/ElephantUserManual.html:604"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:606
msgctxt "in_ed/ElephantUserManual.html:606"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:608
msgctxt "in_ed/ElephantUserManual.html:608"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:614
msgid ""
"<hr>\n"
"<a name=\"Getting-Started\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#The-Store-Root\">The "
"Store Root</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Overview"
"\">Overview</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""
"<hr>\n"
"<a name=\"Getting-Started\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#The-Store-Root\">The "
"Store Root</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Overview"
"\">Overview</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"

#: in_ed/ElephantUserManual.html:616
msgctxt "in_ed/ElephantUserManual.html:616"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:619
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.2 Getting Started</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.2 Начало Работы</h3>"

#: in_ed/ElephantUserManual.html:624
msgid ""
"<p>The first step in using elephant is to open a store controller.  A\n"
"store controller is an object that coordinates lisp program access\n"
"to the chosen data store."
msgstr ""
"<p>Первый шаг в использовании elephant - открыть контроллер хранилища. \n"
"Контроллер хранилища - это объект, который координирует доступ программы "
"Lisp к \n"
"выбранному хранилищу данных."

#: in_ed/ElephantUserManual.html:626
msgctxt "in_ed/ElephantUserManual.html:626"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:632
msgid ""
"<p>To obtain a store controller, you call <code>open-store</code> with a "
"store\n"
"specification.  A store specification is a list containing a backend\n"
"specifier (<code>:BDB</code> or <code>:CLSQL</code>) and a backend-specific\n"
"reference."
msgstr ""
"<p>Чтобы получить контроллер хранилища, вы вызываете <code>open-store</code> "
"со \n"
"спецификацией хранилища. Спецификация хранилища - это список, содержащий "
"спецификатор \n"
"серверной части (<code>:BDB</code> or <code>:CLSQL</code>) и ссылку, "
"специфичную \n"
"для серверной части.\n"

#: in_ed/ElephantUserManual.html:634
msgctxt "in_ed/ElephantUserManual.html:634"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:639
msgid ""
"<p>For :BDB, the second element is a string or pathname that references a\n"
"local directory for the database files.  This directory must be\n"
"created prior to calling open-store."
msgstr ""
"<p>Для: BDB второй элемент - это строка или путь, который ссылается на "
"локальный каталог \n"
"для файлов базы данных. Этот каталог должен быть создан до вызова open-"
"store. "

#: in_ed/ElephantUserManual.html:641
msgctxt "in_ed/ElephantUserManual.html:641"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:644
msgid ""
"<pre class=\"lisp\">     (open-store '(:BDB ``/users/me/db/my-db/''))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:648
msgid ""
"<p>For :CLSQL the second argument is another list consisting of a\n"
"specific SQL database and the name of a database file or connection\n"
"record to the SQL server.  Examples are:"
msgstr ""
"<p>Для: CLSQL второй аргумент - это еще один список, состоящий из \n"
"конкретной базы данных SQL и имени файла базы данных или записи "
"подключения \n"
"к серверу SQL. Примеры: "

#: in_ed/ElephantUserManual.html:650
msgctxt "in_ed/ElephantUserManual.html:650"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:655
msgid ""
"<pre class=\"lisp\">     (open-store '(:CLSQL (:SQLITE \"/users/me/db/sqlite."
"db\")))\n"
"     (open-store '(:CLSQL (:POSTGRESQL \"localhost.localdomain\"\n"
"                                       \"mydb\" \"myuser\" \"\"))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:658
msgid ""
"<p>We use Berkeley DB as our example backend.  To open a BDB\n"
"store-controller we can do the following:"
msgstr ""
"<p>Мы используем Berkeley DB в качестве нашего примера серверной части. \n"
"Чтобы открыть контроллер хранилища BDB, мы можем сделать следующее: "

#: in_ed/ElephantUserManual.html:660
msgctxt "in_ed/ElephantUserManual.html:660"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:667
msgid ""
"<pre class=\"lisp\">     (asdf:operate 'asdf:load-op :elephant)\n"
"     (use-package :elephant)\n"
"     (setf *test-db-spec*\n"
"           '(:BDB \"/home/me/db/testdb/\"))\n"
"     (open-store *test-db-spec*)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:672
msgid ""
"<p>We do not need to store the reference to the store just now as it is\n"
"automatically assigned to the variable, <code>*store-controller*</code>. \n"
"For a deeper discussion of store controller management see the\n"
"<a href=\"#User-Guide\">User Guide</a>."
msgstr ""
"<p>Нам не нужно сохранять ссылку на хранилище прямо сейчас, так как она \n"
"автоматически присваивается переменной <code>*store-controller*</code>. \n"
"Более подробное обсуждение управления контроллером хранилища см. В \n"
"<a href=\"#User-Guide\">Руководстве пользователя</a>."

#: in_ed/ElephantUserManual.html:674
msgctxt "in_ed/ElephantUserManual.html:674"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:678
msgid ""
"<p>When you're done with your session, release the store-controller's\n"
"resources by calling <code>close-store</code>."
msgstr ""
"<p>Когда вы закончите сеанс/сессия, освободите ресурсы контроллера "
"хранилища, \n"
"вызвав <code>close-store</code>."

#: in_ed/ElephantUserManual.html:680
msgctxt "in_ed/ElephantUserManual.html:680"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:686
msgid ""
"<p>Also there is a convenience macro <code>with-open-store</code> that will\n"
"open and close the store, but opening the store is an expensive\n"
"operation so it is generally better to leave the store open until your\n"
"application no longer needs it."
msgstr ""
"<p>Также есть удобный макрос <code>with-open-store</code>, который будет "
"открывать \n"
"и закрывать хранилище, но открытие хранилища - дорогостоящая операция, "
"поэтому обычно \n"
"лучше оставить хранилище открытым, пока оно не перестанет быть нужен вашему "
"приложению. "

#: in_ed/ElephantUserManual.html:688
msgctxt "in_ed/ElephantUserManual.html:688"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:690
msgctxt "in_ed/ElephantUserManual.html:690"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:692
msgctxt "in_ed/ElephantUserManual.html:692"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:698
msgid ""
"<hr>\n"
"<a name=\"The-Store-Root\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Serialization"
"\">Serialization</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Getting-Started"
"\">Getting Started</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:700
msgctxt "in_ed/ElephantUserManual.html:700"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:703
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.3 The Store Root</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.3  Корень Хранилища</h3>"

#: in_ed/ElephantUserManual.html:711
msgid ""
"<p>What values live between lisp sessions is called <em>liveness</em>. \n"
"Liveness in a store is determined by whether the value can be reached\n"
"from the root of the store.  The root is a special BTree in which\n"
"other BTrees and lisp values can be stored.  This BTree has a special\n"
"interface through the store controller.  (There is a second root BTree\n"
"called the class root which will be discussed later.)"
msgstr ""
"<p>То, что ценности живут между сеансами lisp, называется <em>liveness</"
"em>(живучестью).\n"
"Живучесть в хранилище определяется тем, можно ли получить значение из "
"корневого \n"
"каталога хранилища. Корень-это специальное BTree(дерево), в котором могут "
"храниться \n"
"другие BTrees и значения lisp. Это BTree имеет специальный интерфейс через \n"
"контроллер хранилища. (Существует второе корневое дерево BTree, называемое \n"
"корнем класса, которое будет обсуждаться позже.)"

#: in_ed/ElephantUserManual.html:713
msgctxt "in_ed/ElephantUserManual.html:713"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:716
msgid "<p>You can put something into the root object by"
msgstr "<p>Вы можете поместить что - то в корневой объект,"

#: in_ed/ElephantUserManual.html:718
msgctxt "in_ed/ElephantUserManual.html:718"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:722
msgid ""
"<pre class=\"lisp\">     (add-to-root \"my key\" \"my value\")\n"
"     =&gt; \"my value\"\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:724
msgid "<p>and get things out via"
msgstr "<p>и получить вещи через "

#: in_ed/ElephantUserManual.html:726
msgctxt "in_ed/ElephantUserManual.html:726"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:731
msgid ""
"<pre class=\"lisp\">     (get-from-root \"my key\")\n"
"     =&gt; \"my value\"\n"
"     =&gt; T\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:734
msgid ""
"<p>The second value indicates whether the key was found.  This is\n"
"important if your key-value pair can have nil as a value."
msgstr ""
"<p>Второе значение указывает, был ли найден ключ. Это важно, если ваша "
"пара \n"
"\"ключ-значение\" может иметь значение nil."

#: in_ed/ElephantUserManual.html:736
msgctxt "in_ed/ElephantUserManual.html:736"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:739
msgid "<p>You can perform other basic operations as well."
msgstr "<p>Вы также можете выполнять другие основные операции. "

#: in_ed/ElephantUserManual.html:741
msgctxt "in_ed/ElephantUserManual.html:741"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:750
msgid ""
"<pre class=\"lisp\">     (root-existsp \"my key\")\n"
"     =&gt; T\n"
"     (remove-from-root \"my key\")\n"
"     =&gt; T\n"
"     (get-from-root \"my key\")\n"
"     =&gt; NIL\n"
"     =&gt; NIL\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:754
msgid ""
"<p>To access all the objects in the root, the simplest way is to\n"
"simply call <code>map-root</code> with a function to apply to each\n"
"key-value pair."
msgstr ""
"<p>Чтобы получить доступ ко всем объектам в корне, самый простой способ - \n"
"просто вызвать <code>map-root</code> с функцией, применяемой к каждой \n"
"паре ключ-значение. "

#: in_ed/ElephantUserManual.html:756
msgctxt "in_ed/ElephantUserManual.html:756"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:761
msgid ""
"<pre class=\"lisp\">     (map-root\n"
"       (lambda (k v)\n"
"          (format t \"key: ~A value:~A~%\" k v)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:763
msgid "<p>You can also access the root object directly."
msgstr "<p>Вы также можете напрямую получить доступ к корневому объекту. "

#: in_ed/ElephantUserManual.html:765
msgctxt "in_ed/ElephantUserManual.html:765"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:769
msgid ""
"<pre class=\"lisp\">     (controller-root *store-controller*)\n"
"     =&gt; #&lt;DB-BDB::BDB-BTREE  #x10e86042&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:771
msgid ""
"<p>It is an instance of a class \"btree\"; see <a href=\"#Persistent-BTrees"
"\">Persistent BTrees</a>."
msgstr ""
"<p>Это экземпляр класса \"btree\"; см. <a href=\"#Persistent-BTrees"
"\">Постоянные BTrees</a>."

#: in_ed/ElephantUserManual.html:773
msgctxt "in_ed/ElephantUserManual.html:773"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:775
msgctxt "in_ed/ElephantUserManual.html:775"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:777
msgctxt "in_ed/ElephantUserManual.html:777"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:783
msgid ""
"<hr>\n"
"<a name=\"Serialization\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Classes"
"\">Persistent Classes</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#The-Store-Root"
"\">The Store Root</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:785
msgctxt "in_ed/ElephantUserManual.html:785"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:788
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.4 Serialization</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.4 Сериализация</h3>"

#: in_ed/ElephantUserManual.html:798
msgid ""
"<p>What can you put into the store besides strings?  Almost all lisp\n"
"values and objects can be stored: numbers, symbols, strings, nil,\n"
"characters, pathnames, conses, hash-tables, arrays, CLOS objects and\n"
"structs.  Nested and circular things are allowed.  Nested and circular\n"
"things are allowed.  You can store basically anything except compiled\n"
"functions, closures, class objects, packages and streams.  Functions\n"
"can be stored as uncompiled lambda expressions.  (Compiled functions\n"
"and other kinds of objects may eventually get supported too.)"
msgstr ""
"<p>Что можно положить в хранилище, кроме строк? Могут быть сохранены почти \n"
"все значения и объекты lisp: числа, символы, строки, nil, символьные "
"знаки, \n"
"пути, conses(конструкции из пар-в частности списки), хэш-таблицы, массивы, \n"
"объекты и структуры CLOS.  Допускаются вложенные и замкнутые в кольцо "
"списко \n"
"подобные структуры. Вы можете хранить практически все, что угодно, кроме \n"
"скомпилированных функций, замыканий, объектов классов, пакетов и потоков. \n"
"Функции могут храниться как некомпилированные лямбда-выражения. \n"
"(Скомпилированные функции и другие типы объектов также могут получить "
"поддержку.)"

#: in_ed/ElephantUserManual.html:800
msgctxt "in_ed/ElephantUserManual.html:800"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:808
msgid ""
"<p>Elephant needs to use a representation of data that is independant of\n"
"a specific lisp or data store.  Therefore all lisp values that are\n"
"stored must be <em>serialized</em> into a canonical format.  Because\n"
"Berkeley DB supports variable length binary buffers, Elephant uses a\n"
"binary serialization system.  This process has some important\n"
"consequences that it is very important to understand:"
msgstr ""
"<p>Elephant необходимо использовать представление данных, которое \n"
"не зависит от конкретного Lisp или хранилища данных. Поэтому все "
"сохраняемые \n"
"значения lisp должны быть <em>serialized</em>(сериализованы) в канонический "
"формат. \n"
"Поскольку Berkeley DB поддерживает двоичные буферы переменной длины, "
"Elephant \n"
"использует систему двоичной сериализации. Этот процесс имеет некоторые "
"важные последствия, \n"
"которые очень важно понимать: "

#: in_ed/ElephantUserManual.html:810
msgctxt "in_ed/ElephantUserManual.html:810"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:816
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li><strong>Lisp identity can't be preserved</strong>.  Since this is a "
"store which\n"
"persists across invocations of Lisp, this probably doesn't even make\n"
"sense.  However if you get an object from the index, store it to a\n"
"lisp variable, then get it again - they will not be eq:"
msgstr ""
"<ol type=\"1\" start=\"1\">\n"
"<li><strong>Идентичность Lisp не может быть сохранена</strong>. Поскольку "
"это хранилище, \n"
"которое сохраняется при вызовах Lisp, вероятно, это даже не имеет смысла. "
"Однако, \n"
"если вы получите объект из индекса, сохраните его в переменной lisp, а "
"затем \n"
"получите снова - они не будут eq: "

#: in_ed/ElephantUserManual.html:832
msgid ""
"     <pre class=\"lisp\">          (setq foo (cons nil nil))\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my key\" foo)\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my other key\" foo)\n"
"          =&gt; (NIL)\n"
"          (eq (get-from-root \"my key\")\n"
"                (get-from-root \"my other key\"))\n"
"          =&gt; NIL\n"
"     </pre>\n"
"     </li><li><strong>Nested aggregates are stored in one buffer</strong>. \n"
"If you store an set of objects in a hash table you try to store a hash\n"
"table, all of those objects will get stored in one large binary buffer\n"
"with the hash keys.  This is true for all other aggregates that can\n"
"store type T (cons, array, standard object, etc)."
msgstr ""
"     <pre class=\"lisp\">          (setq foo (cons nil nil))\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my key\" foo)\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my other key\" foo)\n"
"          =&gt; (NIL)\n"
"          (eq (get-from-root \"my key\")\n"
"                (get-from-root \"my other key\"))\n"
"          =&gt; NIL\n"
"     </pre>\n"
"     </li><li><strong>Вложенные агрегаты хранятся в одном буфере</strong>. \n"
"Если вы храните набор объектов в хеш-таблице, вы пытаетесь сохранить хеш-"
"таблицу, \n"
"все эти объекты будут храниться в одном большом двоичном буфере с хеш-"
"ключами. \n"
"Это верно для всех других агрегатов, которые могут хранить тип T \n"
"(cons, массив, стандартный объект и т. Д.)."

#: in_ed/ElephantUserManual.html:834
msgctxt "in_ed/ElephantUserManual.html:834"
msgid "     </li><li><strong>Mutated substructure does not persist</strong>."
msgstr ""
"     </li><li><strong>Мутировавшая субструктура не сохраняется. </strong>."

#: in_ed/ElephantUserManual.html:840
msgctxt "in_ed/ElephantUserManual.html:840"
msgid ""
"     <pre class=\"lisp\">          (setf (car foo) T)\n"
"          =&gt; T\n"
"          (get-from-root \"my key\")\n"
"          =&gt; (NIL)\n"
"     </pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:845
msgid ""
"<p>This will affect all aggregate types: objects, conses, hash-tables, et\n"
"cetera.  (You can of course manually re-store the cons.)  In this sense\n"
"elephant does not automatically provide persistent collections.  If you\n"
"want to persist every access, you have to use BTrees (see <a href="
"\"#Persistent-BTrees\">Persistent BTrees</a>)."
msgstr ""
"<p>Это повлияет на все типы агрегатов: объекты, conses, хеш-таблицы и так "
"далее. \n"
"(Вы, конечно, можете вручную повторно сохранить cons.) В этом смысле "
"elephant\n"
"не предоставляет постоянные коллекции автоматически. Если вы хотите "
"сохранить \n"
"каждый доступ, вы должны использовать BTrees (см.  <a href=\"#Persistent-"
"BTrees\">Постоянные BTrees</a>)."

#: in_ed/ElephantUserManual.html:847
msgctxt "in_ed/ElephantUserManual.html:847"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:856
msgctxt "in_ed/ElephantUserManual.html:856"
msgid ""
"</li><li><strong>Serialization and deserialization can be costly</strong>. "
"While\n"
"serialization is pretty fast, but it is still expensive to store large\n"
"objects wholesale.  Also, since object identity is impossible to\n"
"maintain, deserialization must re-cons or re-allocate the entire\n"
"object every time increasing the number of GCs the system does.  This\n"
"eager allocation is contrary to how most people want to use a\n"
"database: one of the reasons to use a database is if your objects\n"
"can't fit into main memory all at once."
msgstr ""
"</li><li><strong>Сериализация и десериализация могут быть дорогостоящими</"
"strong>. \n"
"Хотя сериализация происходит довольно быстро, но сохранять большие объекты \n"
"оптом все равно дорого. Кроме того, поскольку идентичность объекта "
"невозможно \n"
"поддерживать, десериализация должна повторно согласовывать или "
"перераспределять \n"
"весь объект каждый раз, когда увеличивается количество сборщиков мусора, "
"которые \n"
"выполняет система. Это стремительное распределение противоречит тому, как "
"большинство \n"
"людей хотят использовать базу данных: одна из причин использования базы "
"данных - \n"
"это то, что ваши объекты не могут поместиться в основную память сразу."

#: in_ed/ElephantUserManual.html:860
msgid ""
"     </li><li><strong>Merge-conflicts in heavily multi-process/threaded "
"situations</strong>. \n"
"This is the common read-modify-write problem in all databases.  We will "
"talk\n"
"more about this in the <a href=\"#Using-Transactions\">Using Transactions</"
"a> section."
msgstr ""
"     </li><li><strong>Конфликты слияния в сильно много-процессных/много-"
"поточных ситуациях</strong>. \n"
"Это общая проблема чтения-изменения-записи во всех базах данных. Подробнее "
"об этом мы \n"
"поговорим в разделе <a href=\"#Using-Transactions\">Использование "
"транзакций</a>."

#: in_ed/ElephantUserManual.html:862
msgctxt "in_ed/ElephantUserManual.html:862"
msgid "        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:866
msgid ""
"<p>This may seem terribly restrictive, but don't despair, we'll solve\n"
"most of these problems in the next section....."
msgstr ""
"<p>Это может показаться ужасно ограничивающим, но не отчаивайтесь, мы "
"решим \n"
"большинство этих проблем в следующем разделе ..."

#: in_ed/ElephantUserManual.html:868
msgctxt "in_ed/ElephantUserManual.html:868"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:870
msgctxt "in_ed/ElephantUserManual.html:870"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:872
msgctxt "in_ed/ElephantUserManual.html:872"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:878
msgid ""
"<hr>\n"
"<a name=\"Persistent-Classes\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Rules-about-Persistent-"
"Classes\">Rules about Persistent Classes</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Serialization"
"\">Serialization</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:880
msgctxt "in_ed/ElephantUserManual.html:880"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:883
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.5 Persistent Classes</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.5 Постоянные классы</h3>"

#: in_ed/ElephantUserManual.html:887
msgid ""
"<p>The Common Lisp Object System and the Metaobject Protocol, gives us\n"
"the tools to solve these problems for objects:"
msgstr ""
"<p>Объектная система Common Lisp и протокол метаобъектов предоставляют нам \n"
"инструменты для решения этих проблем для объектов: "

#: in_ed/ElephantUserManual.html:889
msgctxt "in_ed/ElephantUserManual.html:889"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:894
msgid ""
"<pre class=\"lisp\">     (defclass my-persistent-class ()\n"
"       ((slot1 :accessor slot1)\n"
"        (slot2 :accessor slot2))\n"
"       (:metaclass persistent-metaclass))"
msgstr ""

#: in_ed/ElephantUserManual.html:897
msgid ""
"     (setq foo (make-instance 'my-persistent-class))\n"
"     =&gt; #&lt;MY-PERSISTENT-CLASS {492F4F85}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:906
msgid ""
"     (add-to-root \"foo\" foo)\n"
"     =&gt; NIL\n"
"     (add-to-root \"bar\" foo)\n"
"     =&gt; NIL\n"
"     (eq (get-from-root \"foo\")\n"
"         (get-from-root \"bar\"))\n"
"     =&gt; T\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:913
msgid ""
"<p>What's going on here?  Persistent classes, that is, classes which use\n"
"the <code>persistent-metaclass</code> metaclass, are given unique IDs\n"
"(accessable through <code>ele::oid</code>).  They are serialized simply by\n"
"their OID and class.  Slot values are stored separately (and invisible\n"
"to the user) keyed by OID and slot.  Loading (deserializing) a\n"
"persistent class"
msgstr ""
"<p>Что тут происходит? Постоянным классам, то есть классам, которые "
"используют метакласс\n"
"<code>persistent-metaclass</code>, даются уникальные идентификаторы "
"(доступные через \n"
"<code>ele::oid</code>). Они сериализованы просто по их OID и классу. "
"Значения слотов \n"
"хранятся отдельно (и невидимы для пользователя) с ключами OID и слотом. "
"Загрузка \n"
"(десериализация) постоянного класса "

#: in_ed/ElephantUserManual.html:915
msgctxt "in_ed/ElephantUserManual.html:915"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:919
msgid ""
"<pre class=\"lisp\">     (get-from-root \"foo\")\n"
"     =&gt; #&lt;MY-PERSISTENT-CLASS {492F4F85}&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:926
msgid ""
"<p>instantiates the object or finds it in a memory cache if it already\n"
"exists.  (The cache is a weak hash-table, so gets flushed on GCs if no\n"
"other references to the persistent object are kept in memory).  The\n"
"slot values are NOT loaded until you ask for them.  In fact, the\n"
"persisted slots don't have space allocated for them in the instances,\n"
"because we're reading from the database."
msgstr ""
"<p>создает экземпляр объекта или находит его в кэше памяти, если он \n"
"уже существует. (Кеш - это слабая хеш-таблица, поэтому она сбрасывается \n"
"на сборщики мусора(GC), если в памяти не хранятся другие ссылки на "
"постоянный \n"
"объект). Значения слотов НЕ загружаются, пока вы их не запросите. "
"Фактически, \n"
"для постоянных слотов нет места, выделенного для них в экземплярах, потому \n"
"что мы читаем из базы данных. "

#: in_ed/ElephantUserManual.html:928
msgctxt "in_ed/ElephantUserManual.html:928"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:938
msgid ""
"<pre class=\"lisp\">     (setf (slot1 foo) \"one\")\n"
"     =&gt; \"one\"\n"
"     (setf (slot2 foo) \"two\")\n"
"     =&gt; \"two\"\n"
"     (slot1 foo)\n"
"     =&gt; \"one\"\n"
"     (slot2 foo)\n"
"     =&gt; \"two\"\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:940
msgid "<p>Changes made to them propogate automatically:"
msgstr "<p>Внесенные в них изменения распространяются автоматически: "

#: in_ed/ElephantUserManual.html:942
msgctxt "in_ed/ElephantUserManual.html:942"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:948
msgid ""
"<pre class=\"lisp\">     (setf (slot1 foo) \"three\")\n"
"     =&gt; \"three\"\n"
"     (slot1 (get-from-root \"bar\"))\n"
"     =&gt; \"three\"\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:951
msgid ""
"<p>You can also create persistent classes using the convenience macro\n"
"<code>defpclass</code>."
msgstr ""
"<p>Вы также можете создавать постоянные классы, используя удобный макрос\n"
"<code>defpclass</code>."

#: in_ed/ElephantUserManual.html:953
msgctxt "in_ed/ElephantUserManual.html:953"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:958
msgid ""
"<pre class=\"lisp\">     (defpclass my-persistent-class ()\n"
"       ((slot1 :accessor slot1)\n"
"        (slot2 :accessor slot2)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:966
msgid ""
"<p>Although it is hard to see here, serialization / deserialization of\n"
"persistent classes is fast, much faster than ordinary CLOS objects. \n"
"Finally, they do not suffer from merge-conflicts when accessed within\n"
"a transaction (see below).  In short: persistent classes solve the\n"
"problems associated with storing ordinary CLOS objects.  We'll see\n"
"later that BTrees solve the problems associated with storing\n"
"hash-tables."
msgstr ""
"<p>Хотя здесь трудно увидеть, сериализация/десериализация постоянных "
"классов \n"
"выполняется быстро, намного быстрее, чем обычные объекты CLOS. Наконец, \n"
"они не страдают от конфликтов слияния при доступе в транзакции (см. Ниже).\n"
"Вкратце: постоянные классы решают проблемы, связанные с хранением обычных "
"объектов \n"
"CLOS. Позже мы увидим, что BTrees решают проблемы, связанные с хранением хеш-"
"таблиц. "

#: in_ed/ElephantUserManual.html:968
msgctxt "in_ed/ElephantUserManual.html:968"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:970
msgctxt "in_ed/ElephantUserManual.html:970"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:972
msgctxt "in_ed/ElephantUserManual.html:972"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:978
msgid ""
"<hr>\n"
"<a name=\"Rules-about-Persistent-Classes\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-collections"
"\">Persistent collections</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-Classes"
"\">Persistent Classes</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:980
msgctxt "in_ed/ElephantUserManual.html:980"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:983
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.6 Rules about Persistent Classes</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.6 Правила о постоянных классах</h3>"

#: in_ed/ElephantUserManual.html:990
msgid ""
"<p>Using the <code>persistent-metaclass</code> metaclass declares all slots "
"to\n"
"be persistent by default.  To make a non-persistent slot use the\n"
"<code>:transient t</code> flag.  Class slots <code>:allocation :class</code> "
"are\n"
"never persisted, for either persistent or ordinary classes.  (Someday,\n"
"if we choose to store class objects, this policy may change)."
msgstr ""
"<p>Использование метакласса <code>persistent-metaclass</code> объявляет все "
"слоты \n"
"постоянными по умолчанию. Чтобы сделать непостоянный(non-persistent) слот, "
"используйте \n"
"флаг <code>:transient t</code>. Слоты классов <code>:allocation :class</"
"code> никогда \n"
"не сохраняются ни для постоянных, ни для обычных классов. (Когда-нибудь, "
"если мы решим \n"
"хранить объекты класса, эта политика может измениться)."

#: in_ed/ElephantUserManual.html:992
msgctxt "in_ed/ElephantUserManual.html:992"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:999
msgid ""
"<p>Persistent classes may inherit from other classes.  Slots inherited\n"
"from persistent classes remain persistent.  Transient slots and slots\n"
"inherited from ordinary classes remain transient.  Ordinary classes\n"
"cannot inherit from persistent classes  otherwise persistent slots\n"
"could not be stored!"
msgstr ""
"<p>Постоянные классы могут наследовать от других классов. Слоты, "
"унаследованные \n"
"от постоянных классов, остаются постоянными. Временные слоты и слоты, "
"унаследованные \n"
"от обычных классов, остаются временными. Обычные классы не могут наследовать "
"от \n"
"постоянных классов - в противном случае постоянные слоты не могли быть "
"сохранены! "

#: in_ed/ElephantUserManual.html:1001
msgctxt "in_ed/ElephantUserManual.html:1001"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1004
msgid ""
"<pre class=\"lisp\">     (defclass stdclass1 ()\n"
"       ((slot1 :initarg :slot1 :accessor slot1)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1007
msgid ""
"     (defclass stdclass2 (stdclass1)\n"
"       ((slot2 :initarg :slot2 :accessor slot2)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1011
msgid ""
"     (defpclass pclass1 (stdclass2)\n"
"       ((slot1 :initarg :slot1 :accessor slot1)\n"
"        (slot3 :initarg :slot3 :accessor slot3)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1014
msgid ""
"     (make-instance 'pclass1 :slot1 1 :slot2 2 :slot3 3)\n"
"     =&gt; #&lt;PCLASS1 {x10deb88a}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1017
msgid ""
"     (add-to-root 'pinst *)\n"
"     =&gt; #&lt;PCLASS1 {x10deb88a}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1020
msgctxt "in_ed/ElephantUserManual.html:1020"
msgid ""
"     (slot1 pinst)\n"
"     =&gt; 1"
msgstr ""

#: in_ed/ElephantUserManual.html:1023
msgid ""
"     (slot2 pinst)\n"
"     =&gt; 2"
msgstr ""

#: in_ed/ElephantUserManual.html:1027
msgctxt "in_ed/ElephantUserManual.html:1027"
msgid ""
"     (slot3 pinst)\n"
"     =&gt; 3\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1033
msgid ""
"<p>Now we can simulate a new lisp session by flushing the instance cache,\n"
"reloading our object then see what slots remain.  Here persistent\n"
"slot1 should shadow the standard slot1 and thus be persistent.  Slot3\n"
"is persistent by default and slot2, since it is inherited from a\n"
"standard class should be transient."
msgstr ""
"<p>Теперь мы можем смоделировать новый сеанс lisp, очистив кеш экземпляра, \n"
"перезагрузив наш объект и посмотрев, какие слоты остались. Здесь "
"постоянный \n"
"slot1 должен затенять стандартный slot1 и, таким образом, быть постоянным. \n"
"Slot3 является постоянным по умолчанию, а slot2, поскольку он унаследован \n"
"от стандартного класса, должен быть временным(transient). "

#: in_ed/ElephantUserManual.html:1035
msgctxt "in_ed/ElephantUserManual.html:1035"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1038
msgid ""
"<pre class=\"lisp\">     (elephant::flush-instance-cache *store-"
"controller*)\n"
"     =&gt; #&lt;EQL hash-table with weak values, 0 entries {x11198a02}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1041
msgid ""
"     (setf pinst (get-from-root 'pinst))\n"
"     =&gt; #&lt;PCLASS1 {x1119b652}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1044
msgctxt "in_ed/ElephantUserManual.html:1044"
msgid ""
"     (slot1 pinst)\n"
"     =&gt; 1"
msgstr ""

#: in_ed/ElephantUserManual.html:1047
msgid ""
"     (slot-boundp pinst slot2 pinst)\n"
"     =&gt; nil"
msgstr ""

#: in_ed/ElephantUserManual.html:1051
msgctxt "in_ed/ElephantUserManual.html:1051"
msgid ""
"     (slot3 pinst)\n"
"     =&gt; 3\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1059
msgid ""
"<p>Using persistent objects has implications for the performance of your\n"
"system.  Note that the database is read every time you access a slot. \n"
"This is a feature, not a bug, especially in concurrent situations: you\n"
"want the most recent commits by other threads, right?  This can be\n"
"used as a weak form of IPC.  But also note that in particular, if your\n"
"slot value is not an immediate value or persistent object, reading\n"
"will cons or freshly allocate storage for the value."
msgstr ""
"<p>Использование постоянных объектов влияет на производительность вашей "
"системы. \n"
"Обратите внимание, что база данных читается каждый раз, когда вы обращаетесь "
"к слоту. \n"
"Это функциональность, а не ошибка, особенно в параллельно выполняющихся "
"ситуациях: \n"
"вам нужны самые последние коммиты других потоков, верно? Это можно "
"использовать как \n"
"слабую форму IPC. Но также обратите внимание, что, в частности, если "
"значение вашего \n"
"слота не является непосредственным значением или постоянным объектом, чтение "
"приведет \n"
"к отказу или новому выделению хранилища для значения."

#: in_ed/ElephantUserManual.html:1061
msgctxt "in_ed/ElephantUserManual.html:1061"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1067
msgid ""
"<p>Gets are not an expensive operation; you can perform thousands to tens\n"
"of thousands of primitive reads per second.  However, if you're\n"
"concerned, cache large values in memory and avoid writing them back to\n"
"disk as long as you can."
msgstr ""
"<p>Gets(Получение) - не дорогая операция; вы можете выполнять от тысяч до \n"
"десятков тысяч операций чтения примитивов в секунду. Однако, если вас это "
"беспокоит, \n"
"кэшируйте большие значения в памяти и старайтесь не записывать их обратно на "
"диск, \n"
"насколько это возможно. "

#: in_ed/ElephantUserManual.html:1069
msgctxt "in_ed/ElephantUserManual.html:1069"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1071
msgctxt "in_ed/ElephantUserManual.html:1071"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:1073
msgctxt "in_ed/ElephantUserManual.html:1073"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1079
msgid ""
"<hr>\n"
"<a name=\"Persistent-collections\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Indexing-Persistent-"
"Classes\">Indexing Persistent Classes</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Rules-about-"
"Persistent-Classes\">Rules about Persistent Classes</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:1081
msgctxt "in_ed/ElephantUserManual.html:1081"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:1084
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.7 Persistent collections</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.7 Постоянные коллекции</h3>"

#: in_ed/ElephantUserManual.html:1094
msgid ""
"<p>The remaining problem outlined in the section on <a href=\"#Serialization"
"\">Serialization</a>\n"
"is that operations which mutate collection types do not have\n"
"persistent side effects.  We have solved this problem for objects, but\n"
"not for collections such as as arrays, hashes or lists.  Elephant\n"
"provides two solutions to this problem: the <code>pset</code> and\n"
"<code>btree</code> classes.  Each provides persistent addition, deletion "
"and\n"
"mutation of elements, but the pset is a simple data structure that may\n"
"be more efficient in memory and time than the more general btree."
msgstr ""
"<p>Оставшаяся проблема, описанная в разделе <a href=\"#Serialization"
"\">Сериализация</a>, \n"
"заключается в том, что операции, изменяющие типы коллекций, не имеют "
"постоянных(сохраняемых) \n"
"побочных эффектов. Мы решили эту проблему для объектов, но не для "
"коллекций, \n"
"таких как массивы, хэши или списки. Elephant предлагает два решения этой "
"проблемы: \n"
"классы <code>pset</code> и <code>btree</code>. Каждый обеспечивает "
"постоянное добавление, \n"
"удаление и изменение элементов, но pset - это простая структура данных, "
"которая может \n"
"быть более эффективной в памяти и времени, чем более общее btree. "

#: in_ed/ElephantUserManual.html:1096
msgctxt "in_ed/ElephantUserManual.html:1096"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1098
msgid "<h4 class=\"subsection\">2.7.1 Using PSets</h4>"
msgstr "<h4 class=\"subsection\">2.7.1 Использование PSets</h4>"

#: in_ed/ElephantUserManual.html:1107
msgid ""
"<p>The persistent set maintains a persistent, unordered collection of\n"
"objects.  They inherit all the important properties of persistent\n"
"objects: identity and fast serialization.  They also resolve the\n"
"mutated substructure and nested aggregates problem for collections. \n"
"Every mutating write to a <code>pset</code> is an independent and "
"persistent\n"
"operation and you can serialize or deserialize a <code>pset</code> without\n"
"serializing any of it's key-value pairs."
msgstr ""
"<p>Постоянный набор(set) поддерживает постоянную неупорядоченную коллекцию \n"
"объектов. Они наследуют все важные свойства постоянных объектов: "
"идентичность \n"
"и быструю сериализацию. Они также решают проблему измененной подструктуры "
"и \n"
"вложенных агрегатов для коллекций. Каждая изменяющаяся запись в <code>pset</"
"code>\n"
" - это независимая и постоянная(сохраняющая) операция, и вы можете "
"сериализовать \n"
"или десериализовать <code>pset</code> без сериализации какой-либо из его \n"
"пар ключ-значение."

#: in_ed/ElephantUserManual.html:1109
msgctxt "in_ed/ElephantUserManual.html:1109"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1115
msgid ""
"<p>The <code>pset</code> is also a very convenient data structure for "
"enabling\n"
"a persistent slot contain a collection that can be updated without\n"
"deserializing and/or reserializing a list, array or hash table on\n"
"every access."
msgstr ""
"<p><code>pset</code> также представляет собой очень удобную структуру "
"данных, \n"
"позволяющую постоянному слоту содержать коллекцию, которая может "
"обновляться \n"
"без десериализации и/или повторной сериализации списка, массива или хеш-"
"таблицы \n"
"при каждом доступе."

#: in_ed/ElephantUserManual.html:1117
msgctxt "in_ed/ElephantUserManual.html:1117"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1121
msgid ""
"<p>Let's explore this data structure through a (very) simple social\n"
"networking example."
msgstr ""
"<p>Давайте исследуем эту структуру данных на (очень) простом примере \n"
"социальной сети. "

#: in_ed/ElephantUserManual.html:1123
msgctxt "in_ed/ElephantUserManual.html:1123"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1128
msgid ""
"<pre class=\"lisp\">     (defpclass person ()\n"
"       ((name :accessor person-name :initarg :name))\n"
"       ((friends :accessor person-friends :initarg :friends)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1133
msgid ""
"<p>Our goal here is to store a list of friends that each person has, this\n"
"simple graph structure enables analyses such as who are the friends of\n"
"my friends, or do I know someone who knows X or what person has the\n"
"minimum degree of separation from everyone else?"
msgstr ""
"<p>Наша цель здесь - сохранить список друзей, которые есть у каждого "
"человека, \n"
"эта простая структура граф позволяет анализировать, например, кто являются \n"
"друзьями моих друзей, или я знаю кого-то, кто знает X, или какой человек "
"имеет \n"
"минимальную степень отделения от всех еще?"

#: in_ed/ElephantUserManual.html:1135
msgctxt "in_ed/ElephantUserManual.html:1135"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1138
msgid "<p>Without psets, we would have to do something like this:"
msgstr "<p>Без pset нам пришлось бы сделать что-то вроде этого: "

#: in_ed/ElephantUserManual.html:1140
msgctxt "in_ed/ElephantUserManual.html:1140"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1145
msgid ""
"<pre class=\"lisp\">     (defmethod add-friend ((me person) (them person))\n"
"       (let ((friends (person-friends me)))\n"
"         (pushnew them friends)\n"
"         (setf (person-friends me) friends)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1149
msgid ""
"     (defmethod remove-friend ((me person) (them person))\n"
"       (let ((remaining-friends (delete them (person-friends me))))\n"
"         (setf (person-friends me) remaining-friends)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1153
msgid ""
"     (defmethod map-friends (fn (me person))\n"
"       (mapc fn (person-friends me)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1158
msgid ""
"<p>Ouch!  This results in a large amount of consing.  We have to\n"
"deserialize and generate a freshly consed list every time we call\n"
"<code>person-friends</code> and then reserialize and discard it on every\n"
"call to <code>(setf person-friends)</code>."
msgstr ""
"<p>Ой! Это приводит к большому расходу на конструирование списка(consing). \n"
"Мы должны десериализовать и генерировать только что созданный список каждый "
"раз, \n"
"когда мы вызываем <code>person-friends</code>, а затем повторно "
"сериализовать и \n"
"отбрасывать его при каждом вызове <code>(setf person-friends)</code>."

#: in_ed/ElephantUserManual.html:1160
msgctxt "in_ed/ElephantUserManual.html:1160"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1164
msgid ""
"<p>Instead, we can simply use a <code>pset</code> as the value of friends "
"and\n"
"implement the add and remove friend operations as follows:"
msgstr ""
"<p>Вместо этого мы можем просто использовать <code>pset</code> в качестве "
"значения \n"
"friends(друзей) и реализовать операции добавления и удаления друзей "
"следующим образом: "

#: in_ed/ElephantUserManual.html:1166
msgctxt "in_ed/ElephantUserManual.html:1166"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1171
msgid ""
"<pre class=\"lisp\">     (defpclass person ()\n"
"       ((name :accessor person-name :initarg :name))\n"
"       ((friends :accessor person-friends :initarg :friends\n"
"                 :initform (make-pset))))"
msgstr ""

#: in_ed/ElephantUserManual.html:1174
msgid ""
"     (defmethod add-friend ((me person) (them person))\n"
"       (insert-item them (person-friends me)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1177
msgid ""
"     (defmethod remove-friend ((me person) (them person))\n"
"       (remove-item them (person-friends me)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1181
msgid ""
"     (defmethod map-friends (fn (me person))\n"
"       (map-pset fn (person-friends me)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1184
msgid ""
"<p>If you want a list to be returned when the user calls person-friends\n"
"themselves, you can simply rejigger things like this:"
msgstr ""
"<p>Если вы хотите, чтобы список возвращался, когда пользователь сам "
"вызывает \n"
"person-friends, вы можете просто перенастроить такие вещи, как это: "

#: in_ed/ElephantUserManual.html:1186
msgctxt "in_ed/ElephantUserManual.html:1186"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1191
msgid ""
"<pre class=\"lisp\">     (defpclass person ()\n"
"       ((name :accessor person-name :initarg :name))\n"
"       ((friends :accessor person-friends-set :initarg :friends\n"
"                 :initform (make-pset))))"
msgstr ""

#: in_ed/ElephantUserManual.html:1195
msgid ""
"     (defmethod person-friends ((me person))\n"
"       (pset-list (person-friends-set me)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1201
msgid ""
"<p>If you just change the person-friends calls in our prior functions,\n"
"the new set of functions removes <code>(setf person-friends)</code>, which\n"
"doesn't make sense for a collection slot, allows users to get a list\n"
"of the friends for easy list manipulations and avoids all the consing\n"
"that plagued our earlier version."
msgstr ""
"<p>IЕсли вы просто измените вызовы person-friends в наших предыдущих "
"функциях, \n"
"новый набор функций удалит <code>(setf person-friends)</code>, что не имеет "
"смысла \n"
"для слота collection, позволяет пользователям получить список друзей для \n"
"удобного манипулирования списком и избегает всех недостатков нового "
"конструирования\n"
"списка(consing), которые преследовали нашу более раннюю версию."

#: in_ed/ElephantUserManual.html:1203
msgctxt "in_ed/ElephantUserManual.html:1203"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1208
msgid ""
"<p>You can use a <code>pset</code> in any way you like just like a "
"persistent\n"
"object.  The only difference is the api used to manipulate it. \n"
"Instead of slot accessors, we use insert, remove, map and find."
msgstr ""
"<p>Вы можете использовать <code>pset</code> как хотите, как постоянный "
"объект. \n"
"Единственное отличие - это api, используемый для управления им. Вместо \n"
"акцессоров(accessors) слотов(функций доступа к слоту) мы используем \n"
"insert, remove, map и find."

#: in_ed/ElephantUserManual.html:1210
msgctxt "in_ed/ElephantUserManual.html:1210"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1217
msgid ""
"<p>There is one drawback to persistent sets and that is that they are not\n"
"garbage collected.  Over time, orphaned sets will eat up alot of disk\n"
"space.  Therefore you need to explicitly free the space or resort to\n"
"more frequent uses of the migrate procedure to compact your database. \n"
"The pset supports the <code>drop-pset</code>"
msgstr ""
"<p>У постоянных наборов есть один недостаток - они не собираются сборщиком "
"мусора. \n"
"Со временем потерянные наборы будут занимать много места на диске. Поэтому "
"вам \n"
"необходимо явно освободить место или прибегнуть к более частому "
"использованию \n"
"процедуры миграции для сжатия базы данных. Pset поддерживает <code>drop-"
"pset</code>"

#: in_ed/ElephantUserManual.html:1219
msgctxt "in_ed/ElephantUserManual.html:1219"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1223
msgid ""
"<p>However, given that persistent objects have the same explicit storage\n"
"property, using psets to create collection slots is a nice match."
msgstr ""
"<p>Однако, учитывая, что постоянные объекты имеют одно и то же явное "
"свойство \n"
"хранения, использование pset для создания слотов коллекции является "
"хорошим \n"
"совпадением."

#: in_ed/ElephantUserManual.html:1225
msgctxt "in_ed/ElephantUserManual.html:1225"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1227
msgid "<h4 class=\"subsection\">2.7.2 Using BTrees</h4>"
msgstr "<h4 class=\"subsection\">2.7.2 Использование BTrees</h4>"

#: in_ed/ElephantUserManual.html:1234
msgid ""
"<p>BTrees are collections of key-value pairs ordered by key with a log(N)\n"
"random access time and a rich iteration mechanism.  Like persistent\n"
"sets, they solve all the collection problems of the prior sections. \n"
"Every key-value pair is stored independently in Elephant just like\n"
"persistent object slots."
msgstr ""
"<p>BTrees - это коллекции пар ключ-значение, упорядоченных по ключу, \n"
"с log(N) временем произвольного доступа и богатым механизмом итераций. \n"
"Как и постоянные наборы, они решают все проблемы коллекций, описанные \n"
"в предыдущих разделах. Каждая пара ключ-значение хранится в Elephant \n"
"независимо, как и слоты для постоянных объектов."

#: in_ed/ElephantUserManual.html:1236
msgctxt "in_ed/ElephantUserManual.html:1236"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1241
msgid ""
"<p>The primary interface to <code>btree</code> objects is through\n"
"<code>get-value</code>.  You use <code>setf</code> <code>get-value</code> to "
"store\n"
"key-value pairs.  This interface is very similar to <code>gethash</code>."
msgstr ""
"<p>Первичный интерфейс к объектам <code>btree</code> - это <code>get-value</"
"code>. \n"
"Вы используете <code>setf</code> <code>get-value</code> для хранения пар \n"
"ключ-значение. Этот интерфейс очень похож на <code>gethash</code>."

#: in_ed/ElephantUserManual.html:1243
msgctxt "in_ed/ElephantUserManual.html:1243"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1250
msgid ""
"<p>The following example creates a btree called\n"
"<code>*friends-birthdays*</code> and adds it to the root so we can retrieve\n"
"it during a later sessions.  We then will add two key-value pairs\n"
"consisting of the name of a friend and a universal time encoding their\n"
"birthday."
msgstr ""
"<p>В следующем примере создается btree с именем <code>*friends-birthdays*</"
"code> \n"
"и добавляется в корень, чтобы мы могли получить его во время последующих "
"сеансов. \n"
"Затем мы добавим две пары ключ-значение, состоящие из имени друга и "
"всемирного времени, \n"
"кодирующего его день рождения. "

#: in_ed/ElephantUserManual.html:1252
msgctxt "in_ed/ElephantUserManual.html:1252"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1255
msgid ""
"<pre class=\"lisp\">     (defvar *friends-birthdays* (make-btree))\n"
"     =&gt; *FRIENDS-BIRTHDAYS*"
msgstr ""

#: in_ed/ElephantUserManual.html:1258
msgid ""
"     (add-to-root 'friends-birthdays *friends-birthdays*)\n"
"     =&gt; #&lt;BTREE {4951CF6D}&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1262
msgid ""
"     (setf (get-value \"Ben\" *friends-birthdays*)\n"
"           (encode-universal-time 0 0 0 14 4 1973))\n"
"     =&gt; 2312600400"
msgstr ""

#: in_ed/ElephantUserManual.html:1266
msgid ""
"     (setf (get-value \"Andrew\" *friends-birthdays*)\n"
"           (encode-universal-time 0 0 0 22 12 1976))\n"
"     =&gt; 2429071200"
msgstr ""

#: in_ed/ElephantUserManual.html:1270
msgid ""
"     (get-value \"Andrew\" *friends-birthdays*)\n"
"     =&gt; 2429071200\n"
"     =&gt; T"
msgstr ""

#: in_ed/ElephantUserManual.html:1282
msgid ""
"     (decode-universal-time *)\n"
"     =&gt; 0\n"
"        0\n"
"        0\n"
"        22\n"
"        12\n"
"        1976\n"
"        2\n"
"        NIL\n"
"        6\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1288
msgid ""
"<p>In addition to the hash-table like interface, <code>btree</code> stores\n"
"pairs sorted by the lisp value of the key, lowest to highest.  This is\n"
"works well for numbers, strings, symbols and persistent objects, but\n"
"due to serialization semantics may be strange for other values like\n"
"arrays, lists, standard-objects, etc."
msgstr ""
"<p>В дополнение к интерфейсу, подобному хэш-таблице, <code>btree</code> "
"хранит пары,\n"
"отсортированные по лисповскому значению ключа, от наименьшего к "
"наибольшему. \n"
"Это хорошо работает для чисел, строк, символов и постоянных объектов, но из-"
"за \n"
"семантики сериализации может быть странным для других значений, таких как \n"
"массивы, списки, стандартные объекты и т. Д."

#: in_ed/ElephantUserManual.html:1290
msgctxt "in_ed/ElephantUserManual.html:1290"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1295
msgid ""
"<p>Because elements are sorted by value, we can iterate over all the\n"
"elements of the BTree in order.  Notice that we entered the data in\n"
"reverse alphabetic order, but will read it out in alphabetical order."
msgstr ""
"<p>Поскольку элементы отсортированы по значению, мы можем перебирать \n"
"все элементы BTree по порядку. Обратите внимание, что мы ввели данные \n"
"в обратном алфавитном порядке, но будем читать их в алфавитном порядке. "

#: in_ed/ElephantUserManual.html:1297
msgctxt "in_ed/ElephantUserManual.html:1297"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1307
msgid ""
"<pre class=\"lisp\">     (map-btree (lambda (k v)\n"
"                  (format t \"name: ~A utime: ~A~%\" k\n"
"                    (subseq (multiple-value-list\n"
"                              (decode-universal-time v)) 3 6)))\n"
"                *friends-birthdays*)\n"
"     \"Andrew\"\n"
"     \"Ben\"\n"
"     =&gt; NIL\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1313
msgid ""
"<p>But what if we want to read out our friends from oldest to youngest? \n"
"One way is to employ another btree that maps birthdays to names, but\n"
"this requires multiple <code>get-value</code> calls for each update,\n"
"increasing the burden on the programmer.  Elephant provides several\n"
"better ways to do this."
msgstr ""
"<p>Но что, если мы хотим зачитывать своих друзей от старшего к младшему? "
"Один из способов - использовать другое btree, которое сопоставляет дни "
"рождения с именами, но для этого требуется несколько вызовов get-value для "
"каждого обновления, что увеличивает нагрузку на программиста. Elephant "
"предлагает несколько более эффективных способов сделать это."

#: in_ed/ElephantUserManual.html:1315
msgctxt "in_ed/ElephantUserManual.html:1315"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1319
msgid ""
"<p>The next section <a href=\"#Indexing-Persistent-Classes\">Indexing "
"Persistent Classes</a> shows you how to\n"
"order and retrieve persistent classes by one or more slot values."
msgstr ""
"<p>В следующем разделе <a href=\"#Indexing-Persistent-Classes"
"\">Индексирование постоянных классов</a>\n"
"показано, как упорядочивать и извлекать постоянные классы по одному или "
"нескольким \n"
"значениям слотов. "

#: in_ed/ElephantUserManual.html:1321
msgctxt "in_ed/ElephantUserManual.html:1321"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1323
msgctxt "in_ed/ElephantUserManual.html:1323"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:1325
msgctxt "in_ed/ElephantUserManual.html:1325"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1331
msgid ""
"<hr>\n"
"<a name=\"Indexing-Persistent-Classes\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Using-Transactions"
"\">Using Transactions</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-"
"collections\">Persistent collections</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:1333
msgctxt "in_ed/ElephantUserManual.html:1333"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:1336
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.8 Indexing Persistent Classes</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.8  Индексирование постоянных классов</h3>"

#: in_ed/ElephantUserManual.html:1342
msgid ""
"<p>Class indexing simplifies the storing and retrieval of persistent\n"
"objects.  An indexed class stores every instance of the class that is\n"
"created, ensuring that every object is automatically persisted between\n"
"sessions."
msgstr ""
"<p>Индексирование классов упрощает хранение и поиск постоянных объектов. \n"
"Индексированный класс хранит каждый экземпляр созданного класса, "
"обеспечивая \n"
"автоматическое сохранение каждого объекта между сеансами. "

#: in_ed/ElephantUserManual.html:1344
msgctxt "in_ed/ElephantUserManual.html:1344"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1350
msgid ""
"<pre class=\"lisp\">     (defpclass friend ()\n"
"       ((name :accessor name :initarg :name)\n"
"        (birthday :initarg :birthday))\n"
"       (:index t))\n"
"     =&gt; #&lt;PERSISTENT-METACLASS FRIEND&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:1353
msgid ""
"     (defmethod print-object ((f friend) stream)\n"
"       (format stream \"#&lt;~A&gt;\" (name f)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1357
msgid ""
"     (defun encode-date (dmy)\n"
"       (apply #'encode-universal-time\n"
"         (append '(0 0 0) dmy)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1362
msgid ""
"     (defmethod (setf birthday) (dmy (f friend))\n"
"       (setf (slot-value f 'birthday)\n"
"             (encode-date dmy))\n"
"       dmy)"
msgstr ""

#: in_ed/ElephantUserManual.html:1365
msgid ""
"     (defun decode-date (utime)\n"
"       (subseq (multiple-value-list (decode-universal-time utime)) 3 6))"
msgstr ""

#: in_ed/ElephantUserManual.html:1369
msgid ""
"     (defmethod birthday ((f friend))\n"
"       (decode-date (slot-value f 'birthday)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1374
msgid ""
"<p>Notice the class argument :index t.  This tells Elephant to store\n"
"a reference to this class.  Under the covers, there are a set of\n"
"btrees that keep track of classes, but we won't need to worry about\n"
"that as all the functionality has been nicely packaged for you."
msgstr ""
"<p>Обратите внимание на аргумент класса “:index t”. Это говорит Elephant \n"
"хранить ссылку на этот класс. Под покровами есть набор b-деревьев, которые \n"
"отслеживают классы, но нам не нужно об этом беспокоиться, поскольку все \n"
"функции были хорошо упакованы для вас."

#: in_ed/ElephantUserManual.html:1376
msgctxt "in_ed/ElephantUserManual.html:1376"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1382
msgid ""
"<p>We also created our own birthday accessor for convenience so it\n"
"accepts and returns birthdays in a list consisting of month, day and\n"
"year such as <code>(27 3 1972)</code>.  The index key will be the encoded\n"
"universal time, however."
msgstr ""
"<p>Мы также создали собственный accessor(функцию доступа к данным) дня "
"рождения \n"
"для удобства, поэтому он принимает и возвращает дни рождения в виде "
"списка, \n"
"состоящего из месяца, дня и года, например <code>(27 3 1972)</code>. "
"Однако \n"
"индексным ключом будет закодированное всемирное время."

#: in_ed/ElephantUserManual.html:1384
msgctxt "in_ed/ElephantUserManual.html:1384"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1387
msgid "<p>Now we can easily manipulate all the instances of a class."
msgstr "<p>Теперь мы можем легко манипулировать всеми экземплярами класса. "

#: in_ed/ElephantUserManual.html:1389
msgctxt "in_ed/ElephantUserManual.html:1389"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1393
msgid ""
"<pre class=\"lisp\">     (defun print-friend (friend)\n"
"       (format t \" name: ~A birthdate: ~A~%\"\n"
"               (name friend) (birthday friend)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1400
msgid ""
"     (make-instance 'friend :name \"Carlos\"\n"
"                            :birthday (encode-date '(1 1 1972)))\n"
"     (make-instance 'friend :name \"Adriana\"\n"
"                            :birthday (encode-date '(24 4 1980)))\n"
"     (make-instance 'friend :name \"Zaid\"\n"
"                            :birthday (encode-date '(14 8 1976)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1403
msgid ""
"     (get-instances-by-class 'friend)\n"
"     =&gt; (#&lt;Carlos&gt; #&lt;Adriana&gt; #&lt;Zaid&gt;)"
msgstr ""

#: in_ed/ElephantUserManual.html:1410
msgid ""
"     (mapcar #'print-friend *)\n"
"      name: Carlos birthdate: (1 1 1972)\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"     =&gt; (#&lt;Carlos&gt; #&lt;Adriana&gt; #&lt;Zaid&gt;)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1416
msgid ""
"<p>But what if we have thousands of friends?  Aside from never getting\n"
"work done, our get-instances-by-class will be doing a great deal of\n"
"consing, eating up lots of memory and wasting our time.  Fortunately\n"
"there is a more efficient way of dealing with all the instances of a\n"
"class."
msgstr ""
"<p>Но что, если у нас тысячи друзей? Помимо того, что мы никогда не \n"
"выполняем работу, наше получение экземпляров по классам(get-instances-by-"
"class) \n"
"будет делать много лишних усилий, съедая много памяти и тратя наше время. \n"
"К счастью, есть более эффективный способ работы со всеми экземплярами "
"класса. "

#: in_ed/ElephantUserManual.html:1418
msgctxt "in_ed/ElephantUserManual.html:1418"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1425
msgid ""
"<pre class=\"lisp\">     (map-class #'print-friend 'friend)\n"
"      name: Carlos birthdate: (1 1 1972)\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"     =&gt; NIL\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1432
msgid ""
"<p><code>map-class</code> has the advantage that it does not keep references "
"to\n"
"objects after they are processed.  The garbage collector can come\n"
"along, clear references from the weak instance cache so that your\n"
"working set is finite.  The list version above conses all objects into\n"
"memory before you can do anything with them.  The deserialization\n"
"costs are very low in both cases."
msgstr ""
"<p><code>map-class</code> имеет то преимущество, что он не сохраняет "
"ссылки \n"
"на объекты после их обработки. Может появиться сборщик мусора, который "
"очистит \n"
"ссылки из кэша слабых экземпляров, так что ваш рабочий набор будет "
"конечным. \n"
"Версия списка выше сохраняет все объекты в памяти, прежде чем вы сможете \n"
"что-либо с ними сделать. Затраты на десериализацию в обоих случаях очень "
"низкие."

#: in_ed/ElephantUserManual.html:1434
msgctxt "in_ed/ElephantUserManual.html:1434"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1440
msgid ""
"<p>Notice that the order in which the records are printed are not sorted\n"
"according to either name or birthdate.  Elephant makes no guarantee\n"
"about the ordering of class elements, so you cannot depend on the\n"
"insertion ordering shown here."
msgstr ""
"<p>Обратите внимание, что порядок, в котором печатаются записи, не "
"сортируется \n"
"ни по имени, ни по дате рождения. Elephant не дает никаких гарантий "
"относительно \n"
"порядка элементов класса, поэтому вы не можете зависеть от порядка "
"вставки, \n"
"показанного здесь.\n"

#: in_ed/ElephantUserManual.html:1442
msgctxt "in_ed/ElephantUserManual.html:1442"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1447
msgid ""
"<p>So what if we want ordered elements?  How do we access our friends\n"
"according to name and birthdate?  This is where slot indices come into\n"
"play."
msgstr ""
"<p>Так что, если нам нужны упорядоченные элементы? Как получить доступ \n"
"к друзьям по имени и дате рождения? Здесь в игру вступают индексные слоты."

#: in_ed/ElephantUserManual.html:1449
msgctxt "in_ed/ElephantUserManual.html:1449"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1454
msgid ""
"<pre class=\"lisp\">     (defpclass friend ()\n"
"       ((name :accessor name :initarg :name :index t)\n"
"        (birthday :initarg :birthday :index t)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1463
msgid ""
"<p>Notice the :index argument to the slots and that we dropped the class\n"
":index argument.  Specifying that a slot is indexed automatically\n"
"registers the class as indexed.  While slot indices increase the cost\n"
"of writes and disk storage, each entry is only slightly larger than\n"
"the size of the slot value.  Numbers, small strings and symbols are\n"
"good candidate types for indexed slots, but any value may be used,\n"
"even different types.  Once a slot is indexed, we can use the index to\n"
"retrieve objects by slot values."
msgstr ""
"<p>Обратите внимание на аргумент :index для слотов и на то, что мы удалили \n"
"аргумент для класса :index. Указание того, что слот индексируется, "
"автоматически \n"
"регистрирует класс как проиндексированный. Хотя индексы слотов увеличивают \n"
"стоимость записи и дискового хранилища, каждая запись лишь немного "
"превышает \n"
"размер значения слота. Числа, маленькие строки и символы являются хорошими \n"
"типами кандидатов для индексированных слотов, но можно использовать любое "
"значение, \n"
"даже разные типы. После того, как слот проиндексирован, мы можем "
"использовать \n"
"индекс для извлечения объектов по значениям слота."

#: in_ed/ElephantUserManual.html:1465
msgctxt "in_ed/ElephantUserManual.html:1465"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1470
msgid ""
"<p><code>get-instances-by-value</code> will retrieve all instances that are\n"
"equal to the value argument, with the equality relation defined by\n"
"the database backend."
msgstr ""
"<p><code>get-instances-by-value</code> будет извлекать все экземпляры, \n"
"которые равны аргументу value, с отношением равенства, определенным \n"
"серверной частью базы данных. "

#: in_ed/ElephantUserManual.html:1472
msgctxt "in_ed/ElephantUserManual.html:1472"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1476
msgid ""
"<pre class=\"lisp\">     (get-instances-by-value 'friend 'name \"Carlos\")\n"
"     =&gt; (#&lt;Carlos&gt;)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1478
msgid ""
"<p>But more interestingly, we can retrieve objects for a range of values."
msgstr ""
"<p>Но что более интересно, мы можем извлекать объекты для диапазона "
"значений. "

#: in_ed/ElephantUserManual.html:1480
msgctxt "in_ed/ElephantUserManual.html:1480"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1483
msgid ""
"<pre class=\"lisp\">     (get-instances-by-range 'friend 'name \"Adam\" "
"\"Devin\")\n"
"     =&gt; (#&lt;Adriana&gt; #&lt;Carlos&gt;)"
msgstr ""

#: in_ed/ElephantUserManual.html:1488
msgid ""
"     (get-instances-by-range 'friend 'birthday\n"
"                             (encode-date '(1 1 1974))\n"
"                             (encode-date '(31 12 1984)))\n"
"     =&gt; (#&lt;Zaid&gt; #&lt;Adriana&gt;)"
msgstr ""

#: in_ed/ElephantUserManual.html:1494
msgid ""
"     (mapc #'print-friend *)\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"     =&gt; (#&lt;Zaid&gt; #&lt;Adriana&gt;)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1500
msgid ""
"<p>To retrieve all instances of a class in the order of the index instead\n"
"of the arbitrary order returned by <code>get-instances-by-class</code> you\n"
"can use nil in the place of the start and end values to indicate the\n"
"first or last element.  (Note: to retrieve instances null values, use\n"
"<code>get-instances-by-value</code> with nil as the argument)."
msgstr ""
"<p>Чтобы получить все экземпляры класса в порядке индекса вместо "
"произвольного порядка,\n"
"возвращаемого get-instance-by-class, вы можете использовать nil вместо "
"начального \n"
"и конечного значений, чтобы указать первый или последний элемент. "
"(Примечание: \n"
"чтобы получить значения экземпляра NULL, используйте команду \n"
"<code>get-instances-by-value</code> с nil в качестве аргумента). "

#: in_ed/ElephantUserManual.html:1502
msgctxt "in_ed/ElephantUserManual.html:1502"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1505
msgid ""
"<pre class=\"lisp\">     (get-instances-by-range 'friend 'name nil \"Sandra"
"\")\n"
"     =&gt; (#&lt;Adriana&gt; #&lt;Carlos&gt;)"
msgstr ""

#: in_ed/ElephantUserManual.html:1509
msgid ""
"     (get-instances-by-range 'friend 'name nil nil)\n"
"     =&gt; (#&lt;Adriana&gt; #&lt;Carlos&gt; #&lt;Zaid&gt;)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1513
msgid ""
"<p>There are also functions for mapping over instances of a slot index. \n"
"To map over duplicate values, use the :value keyword argument.  To map\n"
"by range, use the :start and :end arguments."
msgstr ""
"<p>Существуют также функции для сопоставления экземпляров индекса слота. \n"
"Чтобы сопоставить повторяющиеся значения, используйте аргумент ключевое "
"слово\n"
":value. Для сопоставления по диапазону используйте аргументы :start и :end. "

#: in_ed/ElephantUserManual.html:1515
msgctxt "in_ed/ElephantUserManual.html:1515"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1519
msgid ""
"<pre class=\"lisp\">     (map-class-index #'print-friend 'friend 'name :"
"value \"Carlos\")\n"
"      name: Carlos birthdate: (1 1 1972)\n"
"     =&gt; NIL"
msgstr ""

#: in_ed/ElephantUserManual.html:1525
msgid ""
"     (map-class-index #'print-friend 'friend 'name\n"
"                      :start \"Adam\" :end \"Devin\")\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"      name: Carlos birthdate: (1 1 1972)\n"
"     =&gt; NIL"
msgstr ""

#: in_ed/ElephantUserManual.html:1532
msgid ""
"     (map-class-index #'print-friend 'friend 'birthday\n"
"                      :start (encode-date '(1 1 1974))\n"
"                      :end (encode-date '(31 12 1984)))\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"     =&gt; NIL"
msgstr ""

#: in_ed/ElephantUserManual.html:1539
msgid ""
"     (map-class-index #'print-friend 'friend 'birthday\n"
"                      :start nil\n"
"                      :end (encode-date '(10 10 1978)))\n"
"      name: Carlos birthdate: (1 1 1972)\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"     =&gt; NIL"
msgstr ""

#: in_ed/ElephantUserManual.html:1547
msgid ""
"     (map-class-index #'print-friend 'friend 'birthday\n"
"                      :start (encode-date '(10 10 1975))\n"
"                      :end nil)\n"
"      name: Zaid birthdate: (14 8 1976)\n"
"      name: Adriana birthdate: (24 4 1980)\n"
"     =&gt; NIL\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1554
msgid ""
"<p>The <a href=\"#User-Guide\">User Guide</a> contains a descriptions of the "
"advanced features\n"
"of <a href=\"#Class-Indices\">Class Indices</a> such as derived indicies "
"that allow you to\n"
"order classes according to an arbitrary function, a dynamic API for\n"
"adding and removing slots and how to set a policy for resolving\n"
"conflicts between the code image and a database where the indexing\n"
"specification differs."
msgstr ""
"<p><a href=\"#User-Guide\">Руководство пользователя</a> содержит описания "
"расширенных \n"
"функций <a href=\"#Class-Indices\">индексов классов</a>, таких как \n"
"«производные индексы», которые позволяют упорядочивать классы в соответствии "
"с \n"
"произвольной функцией, динамический API для добавления и удаления слотов и "
"то, \n"
"как установить политику для разрешения конфликтов между образом кода и базой "
"данных, \n"
"где спецификация индексации отличается."

#: in_ed/ElephantUserManual.html:1556
msgctxt "in_ed/ElephantUserManual.html:1556"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1560
msgid ""
"<p>This same facility is also available for your own use.  For more\n"
"information see <a href=\"#BTree-Indexing\">BTree Indexing</a>."
msgstr ""
"<p>Это же средство доступно и для вашего личного пользования. Для получения "
"дополнительной информации см. <a href=\"#BTree-Indexing\">Индексирование "
"BTree</a>."

#: in_ed/ElephantUserManual.html:1562
msgctxt "in_ed/ElephantUserManual.html:1562"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1564
msgctxt "in_ed/ElephantUserManual.html:1564"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:1566
msgctxt "in_ed/ElephantUserManual.html:1566"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1572
msgid ""
"<hr>\n"
"<a name=\"Using-Transactions\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Advanced-Topics"
"\">Advanced Topics</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Indexing-"
"Persistent-Classes\">Indexing Persistent Classes</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""
"<hr>\n"
"<a name=\"Using-Transactions\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Advanced-Topics"
"\">Advanced Topics</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Indexing-"
"Persistent-Classes\">Indexing Persistent Classes</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"

#: in_ed/ElephantUserManual.html:1574
msgctxt "in_ed/ElephantUserManual.html:1574"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:1577
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.9 Using Transactions</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.9 Использование транзакций</h3>"

#: in_ed/ElephantUserManual.html:1585
msgid ""
"<p>One of the most important features of a database is that operations\n"
"enforce the ACID properties: Atomic, Consistent, Isolated, and\n"
"Durable.  In plainspeak, this means that a set of changes is made all\n"
"at once, that the database is never partially updated, that each set\n"
"of changes happens sequentially and that a change, once made, is not\n"
"lost."
msgstr ""
"<p>Одной из наиболее важных особенностей базы данных является то, \n"
"что операции обеспечивают выполнение свойств ACID: Atomic(атомарный), \n"
"Consistent(согласованный), Isolated(изолированный) и\n"
"Durable(надежный). Говоря простым языком, это означает, что набор \n"
"изменений вносится сразу, что база данных никогда не обновляется частично, \n"
"что каждый набор изменений происходит последовательно и что однажды \n"
"внесенное изменение не теряется."

#: in_ed/ElephantUserManual.html:1587
msgctxt "in_ed/ElephantUserManual.html:1587"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1594
msgid ""
"<p>Elephant provides this protection for all primitive operations.  For\n"
"example, when you write a value to an indexed slot, the update to the\n"
"persistent slot record as well as the slot index is protected by a\n"
"transaction that performs all the updates atomically and thus\n"
"enforcing consistency."
msgstr ""
"<p>Elephant обеспечивает эту защиту для всех примитивных операций. \n"
"Например, когда вы записываете значение в индексированный слот, обновление \n"
"записи постоянного слота, а также индекса слота защищается транзакцией, \n"
"которая выполняет все обновления атомарно и, таким образом, обеспечивает \n"
"согласованность. "

#: in_ed/ElephantUserManual.html:1596
msgctxt "in_ed/ElephantUserManual.html:1596"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1598
msgid "<h4 class=\"subsection\">2.9.1 Why do we need Transactions?</h4>"
msgstr "<h4 class=\"subsection\">2.9.1  Зачем нам нужны транзакции?</h4>"

#: in_ed/ElephantUserManual.html:1606
msgid ""
"<p>Most real applications will need to use explicit transactions rather\n"
"than relying on the primitives alone because you will want multiple\n"
"read-modify-update operations act as an atomic unit.  A good example\n"
"for this is a banking system.  If a thread is going to modify a\n"
"balance, we don't want another thread modifying it in the middle of\n"
"the operation or one of the modifications may be lost."
msgstr ""
"<p>Большинству реальных приложений потребуется использовать явные "
"транзакции, \n"
"а не полагаться только на примитивы, потому что вам нужно, чтобы несколько \n"
"операций чтения-изменения-обновления действовали как атомарная единица. \n"
"Хорошим примером этого является банковская система. Если поток собирается \n"
"изменить баланс, мы не хотим, чтобы другой поток изменял его в середине "
"операции, \n"
"иначе одна из модификаций может быть потеряна. "

#: in_ed/ElephantUserManual.html:1608
msgctxt "in_ed/ElephantUserManual.html:1608"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1610
msgid "<pre class=\"lisp\">     (defvar *accounts* (make-btree))"
msgstr ""

#: in_ed/ElephantUserManual.html:1613
msgid ""
"     (defun add-account (account)\n"
"       (setf (get-value account *account*)"
msgstr ""

#: in_ed/ElephantUserManual.html:1616
msgid ""
"     (defun balance (account)\n"
"       (get-value account *accounts*))"
msgstr ""

#: in_ed/ElephantUserManual.html:1619
msgid ""
"     (defun (setf balance) (amount account)\n"
"       (setf (get-value account *accounts*) amount))"
msgstr ""

#: in_ed/ElephantUserManual.html:1626
msgid ""
"     (defun deposit (account amount)\n"
"       \"This shows a read and a write function call to\n"
"        get then set the balance\"\n"
"       (let ((balance (balance account)))\n"
"         (setf (balance account)\n"
"               (+ balance amount))))"
msgstr ""

#: in_ed/ElephantUserManual.html:1630
msgid ""
"     (defun withdraw (account amount)\n"
"       \"A nice concise lisp version for withdraw\"\n"
"       (decf (balance account) amount))"
msgstr ""

#: in_ed/ElephantUserManual.html:1642
msgid ""
"     (add-account 'me)\n"
"     =&gt; 0\n"
"     (deposit 'me 100)\n"
"     =&gt; 100\n"
"     (balance 'me)\n"
"     =&gt; 100\n"
"     (withdraw 'me 25)\n"
"     =&gt; 75\n"
"     (balance 'me)\n"
"     =&gt; 75\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1647
msgid ""
"<p>This simple bank example has a significant vulnerability.  If two\n"
"threads read the same balance and one writes a new balance followed by\n"
"the other, the second balance was written without access to the\n"
"balance provided by the first and so the first transaction is lost."
msgstr ""
"<p>Этот простой пример банка имеет серьезную уязвимость. Если два потока \n"
"читают один и тот же баланс, и один записывает новый баланс, а затем "
"другой, \n"
"второй баланс был записан без доступа к балансу, предоставленному первым, \n"
"и поэтому первая транзакция теряется.\n"

#: in_ed/ElephantUserManual.html:1649
msgctxt "in_ed/ElephantUserManual.html:1649"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1655
msgid ""
"<p>The way to avoid this is to group a set of operations together, such\n"
"as the read and write in <code>deposit</code> and <code>withdraw</code>.  "
"We\n"
"accomplish this by establishing a dynamic context called a\n"
"transaction."
msgstr ""
"<p>Способ избежать этого - сгруппировать набор операций вместе, таких как "
"чтение и \n"
"запись в <code>deposit</code>(пополнение) и <code>withdraw</code>(снятие). "
"Мы \n"
"достигаем этого, устанавливая динамический контекст, называемый транзакцией. "

#: in_ed/ElephantUserManual.html:1657
msgctxt "in_ed/ElephantUserManual.html:1657"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1669
msgid ""
"<p>During a transaction, all changes are cached until the transaction is\n"
"committed.  The changes made by a committed transaction happens all at\n"
"once.  Transactions can also be aborted due to errors that happen\n"
"while they are active or because of contention.  Contention is when\n"
"another thread writes to a variable that the current transaction is\n"
"reading.  As in the bank example above, if one transaction writes the\n"
"balance after the current one has read it, then the current one should\n"
"start over so it has an accurate balance to work with.  A transaction\n"
"aborted due to contention is usually restarted until it has failed too\n"
"many times."
msgstr ""
"<p>Во время транзакции все изменения кэшируются до тех пор, пока "
"транзакция \n"
"не будет зафиксирована(committed). Все изменения, внесенные зафиксированной "
"транзакцией, \n"
"происходят сразу. Транзакции также могут быть прерваны из-за ошибок, "
"возникающих \n"
"во время их активности, или из-за конфликта. Конфликт - это когда другой "
"поток \n"
"записывает в переменную, которую читает текущая транзакция. Как и в "
"приведенном \n"
"выше примере банка, если одна транзакция записывает баланс после того, как "
"текущая \n"
"считала его, то текущая должна начинаться заново, чтобы иметь точный "
"баланс \n"
"для работы. Транзакция, прерванная из-за конфликта, обычно перезапускается "
"до тех пор, \n"
"пока она не будет терпеть неудачу слишком много раз."

#: in_ed/ElephantUserManual.html:1671
msgctxt "in_ed/ElephantUserManual.html:1671"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1677
msgid ""
"<p>The simplest and best way to use transactions in Elephant is to simply\n"
"wrap all the operations in the <code>with-transaction</code> macro.  Any\n"
"statements in the body of the macro are executed within the same\n"
"transaction.  Thus we would modify our example above as follows:"
msgstr ""
"<p>Самый простой и лучший способ использовать транзакции в Elephant - \n"
"просто заключить все операции в макрос <code>with-transaction</code>. \n"
"Любые операторы в теле макроса выполняются в рамках одной транзакции. \n"
"Таким образом, мы бы изменили наш пример, приведенный выше, \n"
"следующим образом: "

#: in_ed/ElephantUserManual.html:1679
msgctxt "in_ed/ElephantUserManual.html:1679"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1685
msgid ""
"<pre class=\"lisp\">     (defun deposit (account amount)\n"
"       (with-transaction ()\n"
"         (let ((balance (balance account)))\n"
"           (setf (balance account)\n"
"                 (+ balance amount)))))"
msgstr ""

#: in_ed/ElephantUserManual.html:1690
msgid ""
"     (defun withdraw (account amount)\n"
"       (with-transaction ()\n"
"         (decf (balance account) amount)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1693
msgid ""
"<p>And presto, we have an ACID compliant, thread-safe, persistent banking\n"
"system!"
msgstr ""
"<p>И вуаля, у нас есть ACID-совместимая, потокобезопасная, \n"
"устойчивая(сохраняемая) банковская система!"

#: in_ed/ElephantUserManual.html:1695
msgctxt "in_ed/ElephantUserManual.html:1695"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1697
msgid "<h4 class=\"subsection\">2.9.2 Using <code>with-transaction</code></h4>"
msgstr ""
"<h4 class=\"subsection\">2.9.2 Использование <code>with-transaction</code></"
"h4>"

#: in_ed/ElephantUserManual.html:1707
msgid ""
"<p>What is <code>with-transaction</code> really doing for us?  It first "
"starts\n"
"a new transaction, attempts to execute the body, and commits the\n"
"transaction if successful.  If anytime during the dynamic extent of\n"
"this process there is a conflict with another thread's transaction, an\n"
"error, or other non-local transfer of control, the transaction is\n"
"aborted.  If it was aborted due to contention or deadlock, it attempts\n"
"to retry the transaction a fixed number of times by re-executing the\n"
"whole body."
msgstr ""
"<p>Что на самом деле делает для нас <code>with-transaction</code>? Сначала "
"он \n"
"запускает новую транзакцию, пытается выполнить тело и в случае успеха "
"фиксирует(commits) \n"
"транзакцию. Если в любой момент во время динамического экстента этого "
"процесса \n"
"возникает конфликт с транзакцией другого потока, ошибка или другая "
"нелокальная \n"
"передача управления, транзакция прерывается. Если он был прерван из-за "
"конфликта \n"
"или тупика(deadlock), он пытается повторить транзакцию фиксированное "
"количество раз, \n"
"повторно выполняя все тело."

#: in_ed/ElephantUserManual.html:1709
msgctxt "in_ed/ElephantUserManual.html:1709"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1713
msgid ""
"<p>And this brings us to two important constraints on transaction bodies:\n"
"no dynamic nesting and idempotent side-effects."
msgstr ""
"<p>И это подводит нас к двум важным ограничениям на тела транзакций: "
"отсутствие \n"
"динамического вложения и идемпотентные побочные эффекты. "

#: in_ed/ElephantUserManual.html:1715
msgctxt "in_ed/ElephantUserManual.html:1715"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1717
msgid "<h4 class=\"subsection\">2.9.3 Nesting Transactions</h4>"
msgstr "<h4 class=\"subsection\">2.9.3 Вложенные транзакции</h4>"

#: in_ed/ElephantUserManual.html:1729
msgid ""
"<p>In general, you want to avoid nested uses of <code>with-transaction</"
"code>\n"
"statements over multiple functions.  Nested transactions are valid for\n"
"some data stores (namely Berkeley DB), but typically only a single\n"
"transaction can be active at a time.  The purpose of a nested\n"
"transaction in data stores that support them is to break a long\n"
"transaction into subsets.  This way if there is contention on a given\n"
"subset of variables, only the inner transaction is restarted while the\n"
"larger transaction can continue.  When the inner transaction commits\n"
"its results, those results become part of the outer transaction but\n"
"are not written to disk until the outer transaction commits."
msgstr ""
"<p>В общем, вы хотите избежать вложенного использования операторов \n"
"<code>with-transaction</code> над несколькими функциями. Вложенные \n"
"транзакции действительны для некоторых хранилищ данных (а именно Berkeley "
"DB), \n"
"но обычно одновременно может быть активна только одна транзакция. \n"
"Цель вложенной транзакции в поддерживающих их хранилищах данных - \n"
"разбить длинную транзакцию на подмножества. Таким образом, если \n"
"существует конкуренция по данному подмножеству переменных, \n"
"перезапускается только внутренняя транзакция, в то время как более \n"
"крупная транзакция может продолжаться. Когда внутренняя транзакция \n"
"фиксирует свои результаты, эти результаты становятся частью внешней \n"
"транзакции, но не записываются на диск до фиксации внешней транзакции."

#: in_ed/ElephantUserManual.html:1731
msgctxt "in_ed/ElephantUserManual.html:1731"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1737
msgid ""
"<p>If you have transaction protected primitive operations (such as\n"
"<code>deposit</code> and <code>withdraw</code>) and you want to perform a "
"group of\n"
"such transactions, for example a transfer between accounts, you can\n"
"use the macro <code>ensure-transaction</code> instead of <code>with-"
"transaction</code>."
msgstr ""
"<p>Если у вас есть примитивные операции, защищенные транзакциями \n"
"(такие как <code>deposit</code>(депозит) и <code>withdraw</code>(снятие)), \n"
"и вы хотите выполнить группу таких транзакций, например, перевод между \n"
"счетами(account), вы можете использовать макрос <code>ensure-transaction</"
"code>\n"
" вместо  <code>with-transaction</code>."

#: in_ed/ElephantUserManual.html:1739
msgctxt "in_ed/ElephantUserManual.html:1739"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1746
msgid ""
"<pre class=\"lisp\">     (defun deposit (account amount)\n"
"       \"Wrap the balance read and the setf with the new balance\"\n"
"       (ensure-transaction ()\n"
"         (let ((balance (balance account)))\n"
"           (setf (balance account)\n"
"                 (+ balance amount)))))"
msgstr ""

#: in_ed/ElephantUserManual.html:1751
msgid ""
"     (defun deposit (account amount)\n"
"       \"A more concise version with decf doing both read and write\"\n"
"       (ensure-transaction ()\n"
"         (decf (balance account) amount)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1755
msgid ""
"     (defun withdraw (account amount)\n"
"       (ensure-transaction ()\n"
"         (decf (balance account) amount)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1763
msgid ""
"     (defun transfer (src dst amount)\n"
"       \"There are four primitive read/write operations\n"
"        grouped together in this transaction\"\n"
"       (with-transaction ()\n"
"         (withdraw src amount)\n"
"         (deposit dst amount)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1768
msgid ""
"<p><code>ensure-transaction</code> is exactly like <code>with-transaction</"
"code>\n"
"except it will reuse an existing transaction, if there is one, or\n"
"create a new one.  There is no harm, in fact, in using this macro all\n"
"the time."
msgstr ""
"<p><code>ensure-transaction</code> точно такой же, как <code>with-"
"transaction</code>, \n"
"за исключением того, что он повторно использует существующую транзакцию, "
"если она \n"
"есть, или создает новую. На самом деле нет ничего плохого в том, чтобы "
"использовать \n"
"этот макрос постоянно.\n"

#: in_ed/ElephantUserManual.html:1770
msgctxt "in_ed/ElephantUserManual.html:1770"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1777
msgid ""
"<p>Notice the use of <code>decf</code> and <code>incf</code> above.  The "
"primary\n"
"reason to use Lisp is that it is good at hiding complexity using\n"
"shorthand constructs just like this.  This also means it is also going\n"
"to be good at hiding data dependencies that should be captured in a\n"
"transaction!"
msgstr ""
"<p>Обратите внимание на использование <code>decf</code> и <code>incf</code> "
"выше. \n"
"Основная причина использования Lisp заключается в том, что он хорошо "
"скрывает \n"
"сложность с помощью подобных сокращенных конструкций. Это также означает, "
"что он \n"
"также будет хорошо скрывать зависимости данных, которые должны быть "
"захвачены \n"
"в транзакции! "

#: in_ed/ElephantUserManual.html:1779
msgctxt "in_ed/ElephantUserManual.html:1779"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1781
msgid "<h4 class=\"subsection\">2.9.4 Idempotent Side Effects</h4>"
msgstr "<h4 class=\"subsection\">2.9.4  Идемпотентные побочные эффекты</h4>"

#: in_ed/ElephantUserManual.html:1789
msgid ""
"<p>Within the body of a with-transaction, any non database operations\n"
"need to be <em>idempotent</em>.  That is the side effects of the body\n"
"must be the same no matter how many times the body is executed.  This\n"
"is done automatically for side effects on the database, but not for\n"
"side effects like pushing a value on a lisp list, or creating a new\n"
"standard object."
msgstr ""
"<p>В теле with-transaction любые операции, не связанные с базой данных, \n"
"должны быть <em>idempotent</em>(идемпотентными). То есть побочные эффекты \n"
"тела должны быть одинаковыми, независимо от того, сколько раз тело "
"выполняется. \n"
"Это делается автоматически для побочных эффектов в базе данных, но не для "
"побочных \n"
"эффектов, таких как добавление значения в список lisp или создание нового \n"
"стандартного объекта. "

#: in_ed/ElephantUserManual.html:1791
msgctxt "in_ed/ElephantUserManual.html:1791"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1793
msgid "<pre class=\"lisp\">     (defparameter *transient-objects* nil)"
msgstr ""

#: in_ed/ElephantUserManual.html:1800
msgid ""
"     (defun load-transients (n)\n"
"        \"This is the wrong way!\"\n"
"        (with-transaction ()\n"
"           (loop for i from 0 upto n do\n"
"              (push (get-from-root i) *transient-objects*))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1807
msgid ""
"<p>In this contrived example we are pulling a set of standard objects\n"
"from the database using an integer key and pushing them onto a list\n"
"for later use.  However, if there is a conflict where some other\n"
"process writes a key-value pair to a matching key, the whole\n"
"transaction will abort and the loop will be run again.  In a heavily\n"
"contended system you might see results like the following."
msgstr ""
"<p>В этом надуманном примере мы извлекаем набор стандартных объектов \n"
"из базы данных с помощью целочисленного ключа и помещаем их в список \n"
"для дальнейшего использования. Однако, если возникает конфликт, когда \n"
"какой-то другой процесс записывает пару «ключ-значение» в соответствующий "
"ключ, \n"
"вся транзакция будет прервана, и цикл будет запущен снова. В сильно \n"
"конкурирующей системе вы можете увидеть следующие результаты. "

#: in_ed/ElephantUserManual.html:1809
msgctxt "in_ed/ElephantUserManual.html:1809"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1814
msgid ""
"<pre class=\"lisp\">     (defun test-list ()\n"
"        (setf *transient-objects* nil)\n"
"        (load-transients)\n"
"        (length *transient-objects*))"
msgstr ""

#: in_ed/ElephantUserManual.html:1817
msgid ""
"     (test-list 3)\n"
"     =&gt; 3"
msgstr ""

#: in_ed/ElephantUserManual.html:1820
msgid ""
"     (test-list 3)\n"
"     =&gt; 5"
msgstr ""

#: in_ed/ElephantUserManual.html:1824
msgid ""
"     (test-list 3)\n"
"     =&gt; 4\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1827
msgid ""
"<p>So the solution is to make sure that the operation on the lisp\n"
"parameters is atomic if the transaction completes."
msgstr ""
"<p>Итак, решение состоит в том, чтобы убедиться, что операция над "
"параметрами \n"
"lisp является атомарной, если транзакция завершается. "

#: in_ed/ElephantUserManual.html:1829
msgctxt "in_ed/ElephantUserManual.html:1829"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1837
msgid ""
"<pre class=\"lisp\">     (defun load-transients (n)\n"
"       \"This is a better way\"\n"
"       (setq *transient-objects*\n"
"             (with-transaction ()\n"
"                 (loop for i from 0 upto n collect\n"
"                       (get-from-root i)))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1840
msgid ""
"<p>(Of course we would need to use <code>nreverse</code> if we cared about "
"the\n"
"order of instances in <code>*transient-objects*</code>)"
msgstr ""
"<p>(Конечно, нам нужно было бы использовать <code>nreverse</code>, если бы "
"мы \n"
"заботились о порядке экземпляров в  <code>*transient-objects*</code>)"

#: in_ed/ElephantUserManual.html:1842
msgctxt "in_ed/ElephantUserManual.html:1842"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1847
msgid ""
"<p>The best rule-of-thumb is to ensure that transaction bodies are purely\n"
"functional as above, except for side effects to persistent objects and\n"
"btrees."
msgstr ""
"<p>Лучшее практическое правило - гарантировать, что тела транзакций "
"полностью\n"
"функциональны, как указано выше, за исключением побочных эффектов для "
"постоянных \n"
"объектов и btree."

#: in_ed/ElephantUserManual.html:1849
msgctxt "in_ed/ElephantUserManual.html:1849"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1855
msgid ""
"<p>If you really do need to execute side-effects into lisp memory, such\n"
"as writes to transient slots, make sure they are idempotent and that\n"
"other processes cannot read the written values until the transaction\n"
"completes."
msgstr ""
"<p>Если вам действительно нужно выполнять побочные эффекты в памяти lisp, \n"
"такие как запись во временные слоты, убедитесь, что они идемпотентны и что \n"
"другие процессы не могут прочитать записанные значения до завершения \n"
"транзакции. "

#: in_ed/ElephantUserManual.html:1857
msgctxt "in_ed/ElephantUserManual.html:1857"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1859
msgid "<h4 class=\"subsection\">2.9.5 Transactions and Performance</h4>"
msgstr "<h4 class=\"subsection\">2.9.5 Транзакции и производительность</h4>"

#: in_ed/ElephantUserManual.html:1866
msgid ""
"<p>By now transactions almost look like more work than they are worth! \n"
"Fortunately, there are also performance benefits to explicit use of\n"
"transactions.  Transactions gather together all the writes that are\n"
"supposed to made to the database and store them in memory until the\n"
"transaction commits, and only then writes them to the disk."
msgstr ""
"<p>К настоящему времени транзакции выглядят как больше работы, чем они \n"
"того стоят! К счастью, явное использование транзакций дает также "
"преимущества \n"
"в производительности. Транзакции собирают вместе все записи, которые "
"должны \n"
"быть сделаны в базу данных, и хранят их в памяти до тех пор, пока "
"транзакция \n"
"не зафиксируется(commits), и только затем записывают их на диск."

#: in_ed/ElephantUserManual.html:1868
msgctxt "in_ed/ElephantUserManual.html:1868"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1876
msgid ""
"<p>The most time-intensive component of a transaction is waiting while\n"
"flushing newly written data to disk.  Using the default\n"
"auto-committing behavior requires a disk flush for every primitive\n"
"write operation.  This is very, very expensive!  Because all the\n"
"values read or written are cached in memory until the transaction\n"
"completes, the number of flushes can be dramatically reduced."
msgstr ""
"<p>Самый трудоемкий компонент транзакции - это ожидание при сбросе вновь \n"
"записанных данных на диск. Использование поведения автоматической "
"фиксации(auto-committing) \n"
"по умолчанию требует очистки диска для каждой примитивной операции записи. \n"
"Это очень и очень дорого! Поскольку все считанные или записанные значения \n"
"кэшируются в памяти до завершения транзакции, количество сбросов(flushes) "
"может быть \n"
"значительно уменьшено."

#: in_ed/ElephantUserManual.html:1878
msgctxt "in_ed/ElephantUserManual.html:1878"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1883
msgid ""
"<p>But don't take my word for it, run the following statements and see\n"
"for yourself the visceral impact transactions can have on system\n"
"performance."
msgstr ""
"<p>Но не верьте мне на слово, выполните следующие инструкции и убедитесь "
"сами, \n"
"какое внутреннее влияние транзакции могут оказать на производительность "
"системы. "

#: in_ed/ElephantUserManual.html:1885
msgctxt "in_ed/ElephantUserManual.html:1885"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1888
msgid ""
"<pre class=\"lisp\">     (defpclass test ()\n"
"       ((slot1 :accessor slot1 :initarg :slot1)))"
msgstr ""

#: in_ed/ElephantUserManual.html:1892
msgid ""
"     (time (loop for i from 0 upto 100 do\n"
"              (make-instance 'test :slot1 i)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1896
msgid ""
"<p>This can take a long time, well over a minute on the CLSQL data store. \n"
"Here each new objects that is created has to independantly write its\n"
"value to disk and accept a disk flush cost."
msgstr ""
"<p>Это может занять много времени, более минуты в хранилище данных CLSQL. \n"
"Здесь каждый новый созданный объект должен независимо записывать свое "
"значение \n"
"на диск и принимать стоимость сброса(flush) на диск. "

#: in_ed/ElephantUserManual.html:1898
msgctxt "in_ed/ElephantUserManual.html:1898"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1903
msgid ""
"<pre class=\"lisp\">     (time (with-transaction ()\n"
"              (loop for i from 0 upto 100 do\n"
"                 (make-instance 'test :slot1 i))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1906
msgid ""
"<p>Wrapping this operation in a transaction dramatically increases the\n"
"time from 10's of seconds to a second or less."
msgstr ""
"<p>Заключение этой операции в транзакцию резко увеличивает время с 10 "
"секунд \n"
"до секунды или меньше.(? что хотел сказать автор? может уменьшает?)"

#: in_ed/ElephantUserManual.html:1908
msgctxt "in_ed/ElephantUserManual.html:1908"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1913
msgid ""
"<pre class=\"lisp\">     (time (with-transaction ()\n"
"              (loop for i from 0 upto 1000 do\n"
"                 (make-instance 'test :slot1 i))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:1917
msgid ""
"<p>When we increase the number of objects within the transaction, the\n"
"time cost does not go up linearly.  This is because the total time to\n"
"write a hundred simple objects is still dominated by the disk writes."
msgstr ""
"<p>Когда мы увеличиваем количество объектов в транзакции, временные "
"затраты \n"
"не растут линейно. Это связано с тем, что общее время записи сотни простых \n"
"объектов по-прежнему зависит от записи на диск."

#: in_ed/ElephantUserManual.html:1919
msgctxt "in_ed/ElephantUserManual.html:1919"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1928
msgid ""
"<p>These are huge differences in performance!  However we cannot have\n"
"infinitely sized transactions due to the finite size of the data\n"
"store's memory cache.  Large operations (such as loading data into a\n"
"database) need to be split into a sequential set of smaller\n"
"transactions.  When dealing with persistent objects a good rule of\n"
"thumb is to keep the number of objects touched in a transaction well\n"
"under 1000."
msgstr ""
"<p>Это огромные различия в производительности! Однако мы не можем иметь \n"
"транзакции бесконечно большого размера из-за конечного размера кеш-памяти \n"
"хранилища данных. Большие операции (например, загрузка данных в базу "
"данных) \n"
"необходимо разбить на последовательный набор более мелких транзакций. \n"
"При работе с постоянными объектами хорошее эмпирическое правило состоит в "
"том, \n"
"чтобы количество объектов, затрагиваемых в транзакции, не превышало 1000. "

#: in_ed/ElephantUserManual.html:1930
msgctxt "in_ed/ElephantUserManual.html:1930"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1932
msgid "<h4 class=\"subsection\">2.9.6 Transactions and Applications</h4>"
msgstr ""
"<h4 class=\"subsection\">2.9.6  Транзакции и приложения(применения)</h4>"

#: in_ed/ElephantUserManual.html:1938
msgid ""
"<p>Designing and tuning a transactional architecture can become quite\n"
"complex.  Moreover, bugs in your system can be very difficult to find\n"
"as they only show up when transactions are interleaved within a\n"
"larger, multi-threaded application."
msgstr ""
"<p>Проектирование и настройка транзакционной архитектуры может оказаться \n"
"довольно сложной. Более того, ошибки в вашей системе может быть очень сложно "
"найти, \n"
"поскольку они проявляются только тогда, когда транзакции чередуются в "
"более \n"
"крупном многопоточном приложении."

#: in_ed/ElephantUserManual.html:1940
msgctxt "in_ed/ElephantUserManual.html:1940"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1947
msgid ""
"<p>In many cases you can simply ignore transactions.  For example, when\n"
"you don't have any other concurrent processes running.  In this case\n"
"all operations are sequential and there is no chance of conflicts. \n"
"You would only want to use transactions to improve performance on\n"
"repeated sets of operations."
msgstr ""
"<p>Во многих случаях вы можете просто игнорировать транзакции. Например, \n"
"если у вас нет других параллельных процессов. В этом случае все операции \n"
"выполняются последовательно и конфликт исключен. Вы можете использовать \n"
"транзакции только для повышения производительности повторяющихся наборов \n"
"операций. "

#: in_ed/ElephantUserManual.html:1949
msgctxt "in_ed/ElephantUserManual.html:1949"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1960
msgid ""
"<p>You can also ignore transactions if your application can guarantee\n"
"that concurrency won't generate any conflicts.  For example, a web app\n"
"that guarantees only one thread will write to objects in a particular\n"
"session can avoid transactions altogether.  However, it is good to be\n"
"careful about making these assumptions.  In the above example, a\n"
"reporting function that iterates over sessions, users or other objects\n"
"may still see partial updates (i.e. a user's id was written prior to\n"
"the query, but not the name).  However, if you don't care about these\n"
"infrequent glitches, this case would still hold."
msgstr ""
"<p>Вы также можете игнорировать транзакции, если ваше приложение может \n"
"гарантировать, что параллелизм не вызовет никаких конфликтов. Например, \n"
"веб-приложение, которое гарантирует, что только один поток будет писать \n"
"в объекты в конкретном сеансе, может полностью избежать транзакций. \n"
"Тем не менее, делать эти предположения полезно с осторожностью. \n"
"В приведенном выше примере функция отчетности, которая выполняет итерацию \n"
"по сеансам, пользователи или другие объекты могут по-прежнему видеть \n"
"частичные обновления (т.е. перед запросом был записан идентификатор "
"пользователя, \n"
"но не имя). Однако, если вас не волнуют эти редкие сбои, этот случай все \n"
"равно останется в силе.\n"

#: in_ed/ElephantUserManual.html:1962
msgctxt "in_ed/ElephantUserManual.html:1962"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1973
msgid ""
"<p>If these cases don't apply to your application, or you aren't sure,\n"
"you will fare best by programming defensively.  Break your system into\n"
"the smallest logical sets of primitive operations\n"
"(i.e. <code>withdraw</code> and <code>deposit</code>) using\n"
"<code>ensure-transaction</code> and then wrap the highest level calls made\n"
"to your system in with-transaction when the operations absolutely have\n"
"to commit together or you need the extra performance.  Try not to have\n"
"more than two levels of transactional accesses with the top using\n"
"with-transaction and the bottom using ensure-transaction."
msgstr ""
"<p>Если эти случаи неприменимы к вашему приложению или вы не уверены, "
"лучше \n"
"всего будет программировать с защитой. Разбейте свою систему на наименьшие \n"
"логические наборы примитивных операций (например, <code>withdraw</"
"code>(снятие)\n"
" и <code>deposit</code>(внесение) депозита) с помощью <code>ensure-"
"transaction</code> \n"
"а затем заключите вызовы самого высокого уровня, сделанные в вашу систему, "
"в \n"
"with-transaction, когда операции абсолютно необходимо зафиксировать вместе "
"или \n"
"вам нужна дополнительная производительность . Старайтесь не иметь более "
"двух \n"
"уровней транзакционного доступа: верхний с помощью with-transaction, а "
"нижний - \n"
"с помощью ensure-transaction. "

#: in_ed/ElephantUserManual.html:1975
msgctxt "in_ed/ElephantUserManual.html:1975"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1979
msgid ""
"<p>See <a href=\"#Transaction-Details\">Transaction Details</a> for more "
"details and <a href=\"#Design-Patterns\">Design Patterns</a>\n"
"for examples of how systems can be designed and tuned using transactions."
msgstr ""
"<p>См. <a href=\"#Transaction-Details\">Подробности транзакции</a> для "
"получения \n"
"более подробной информации и <a href=\"#Design-Patterns\">шаблоны "
"проектирования</a>\n"
" для примеров того, как системы могут быть спроектированы и настроены \n"
"с использованием транзакций. "

#: in_ed/ElephantUserManual.html:1981
msgctxt "in_ed/ElephantUserManual.html:1981"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1983
msgctxt "in_ed/ElephantUserManual.html:1983"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:1985
msgctxt "in_ed/ElephantUserManual.html:1985"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:1990
msgid ""
"<hr>\n"
"<a name=\"Advanced-Topics\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Using-Transactions"
"\">Using Transactions</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Tutorial\">Tutorial</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:1992
msgctxt "in_ed/ElephantUserManual.html:1992"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:1995
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.10 Advanced Topics</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">2.10  Расширенные темы</h3>"

#: in_ed/ElephantUserManual.html:2000
msgid ""
"<p>The tutorial covers the essential topics and concepts for using\n"
"Elephant.  Many people will find that these features are the ones that\n"
"are most often needed and used in ordinary applications."
msgstr ""
"<p>Учебник охватывает основные темы и концепции использования Elephant. \n"
"Многие люди обнаружат, что именно эти функции наиболее часто используются \n"
"и используются в обычных приложениях."

#: in_ed/ElephantUserManual.html:2002
msgctxt "in_ed/ElephantUserManual.html:2002"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2007
msgid ""
"<p>More sophisticated uses of Elephant may require additional features\n"
"that are covered in the user guide.  The following is a list of major\n"
"features in the user guide that were not covered in this tutorial."
msgstr ""
"<p>MДля более сложного использования Elephant могут потребоваться "
"дополнительные функции, \n"
"описанные в руководстве пользователя. Ниже приводится список основных "
"функций \n"
"руководства пользователя, которые не были рассмотрены в этом руководстве. "

#: in_ed/ElephantUserManual.html:2009
msgctxt "in_ed/ElephantUserManual.html:2009"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2060
msgid ""
"<ul>\n"
"<li><strong>Using Multiple Threads and Processes</strong>\n"
"  What constraints must be accommodated to use Elephant data stores in\n"
"multiple threads?  What capabilities are there to share data stores\n"
"among multiple processes or machines? \n"
"</li><li><strong>Class Heirarchies and Queries</strong>\n"
"  There are some subtle issues to take into account when querying\n"
"persistent classes.  For example, how do you query a base class of\n"
"type people to get subclass instances such as employee, manager,\n"
"consultant, etc? \n"
"</li><li><strong>Derived Class Indices</strong>\n"
"  You can create your own indices for classes that are arbitrary\n"
"lisp functions of the persistent object. \n"
"</li><li><strong>Dynamic Class Index Management</strong>\n"
"  It is possible to add and remove indexes from classes at runtime. \n"
"</li><li><strong>Class Definition/Database Conflict Resolution</strong>\n"
"  When you startup lisp, there are potential conflicts between the\n"
"class definition and the indexing records in the database.  There are\n"
"some constraints to account for and some facilities to manage\n"
"how slots, class indices and\n"
"</li><li><strong>Indexed BTrees</strong>\n"
"  Indexed BTrees are just like BTrees, except it is possible to add\n"
"indexes which are BTrees who's values are primary keys in the parent\n"
"<code>indexed-btree</code>.  This allows for multiple ordering and "
"groupings\n"
"of the values of a BTree. \n"
"</li><li><strong>BTree Cursors</strong>\n"
"  If you need to do more than iterate over a collection, or you need\n"
"to delete elements of the collection as you iterate cursors are an\n"
"important data structure.  They implement a variety of operators for\n"
"moving backward and forward over a btree, including ranged operations\n"
"and iterating of duplicate or unique values. \n"
"</li><li><strong>Using the Map Operators</strong>\n"
"  Mapping operators can be very efficient if properly utilized. \n"
"</li><li><strong>Using Multiple Stores</strong>\n"
"Multiple store controllers can be open simultaneously.  However it\n"
"does make the code more complex and you need to be careful about how\n"
"you use them to avoid crashes and other unpleasant side effects. \n"
"</li><li><strong>Custom Transaction Architecture</strong>\n"
"You can implement your own version of <code>with-transaction</code> using "
"the\n"
"underlying controller methods for starting, aborting and committing\n"
"transactions.  You had better know what you are doing, however! \n"
"</li><li><strong>Handling Errors and Conditions</strong>\n"
"  There are a variety of errors that can occur in Elephant that need\n"
"to be dealt with by applications. \n"
"</li><li><strong>Deadlock Detection in Berkeley DB</strong>\n"
"  Berkeley DB requires an external process to detect deadlock\n"
"conditions among transactions.  The :deadlock-detect keyword argument\n"
"to open-store for Berkeley DB specs will launch this process on most\n"
"lisps. \n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><strong>Использование нескольких потоков и процессов</strong>\n"
"   Какие ограничения необходимо учитывать для использования хранилищ данных "
"Elephant \n"
"в нескольких потоках? Какие есть возможности для совместного использования "
"хранилищ \n"
"данных между несколькими процессами или машинами? \n"
"</li><li><strong>Иерархия классов и запросы</strong>\n"
"   При запросе постоянных классов необходимо учитывать некоторые тонкие "
"моменты. \n"
"Например, как вы запрашиваете базовый класс типа people(люди), чтобы "
"получить \n"
"экземпляры подкласса, такие как employee(сотрудник), manager(менеджер), \n"
"consultant(консультант) и т. Д.? \n"
"</li><li><strong>Индексы производных классов</strong>\n"
"   Вы можете создавать свои собственные индексы для классов, которые \n"
"являются произвольными lisp-функциями постоянного объекта. \n"
"</li><li><strong>Динамическое управление индексами классов</strong>\n"
"  Можно добавлять и удалять индексы из классов во время выполнения. \n"
"</li><li><strong> Определение класса/Разрешение конфликтов базы данных</"
"strong>\n"
"  При запуске lisp возникают потенциальные конфликты между определением "
"класса \n"
"и записями индексации в базе данных. Есть некоторые ограничения, которые \n"
"необходимо учитывать, и некоторые возможности для управления тем, как "
"слоты, \n"
"индексы классов и\n"
"</li><li><strong>Индексированные BTree</strong>\n"
"  Индексированные BTrees похожи на BTrees, за исключением того, что можно \n"
"добавлять индексы, которые являются BTrees, значения которых являются "
"первичными \n"
"ключами в родительском <code>indexed-btree</code>. Это позволяет "
"упорядочивать и \n"
"группировать значения BTree. \n"
"</li><li><strong>BTree Курсоры</strong>\n"
"   Если вам нужно сделать больше, чем перебирать коллекцию, или вам нужно \n"
"удалять элементы коллекции, когда вы повторяете курсоры, это важная "
"структура данных. \n"
"Они реализуют множество операторов для перемещения вперед и назад по "
"btree, \n"
"включая операции с диапазоном значений и повторение дублирующих или \n"
"уникальных значений. \n"
"</li><li><strong>Использование операторов сопоставления(Map)</strong>\n"
"   Операторы сопоставления могут быть очень эффективными при правильном "
"использовании. \n"
"</li><li><strong>Использование нескольких хранилищ</strong>\n"
"Одновременно можно открывать несколько контроллеров хранилищ. Однако это "
"делает \n"
"код более сложным, и вам нужно быть осторожным при их использовании, чтобы "
"избежать \n"
"сбоев и других неприятных побочных эффектов.\n"
"</li><li><strong>Настраиваемая архитектура транзакций</strong>\n"
" Вы можете реализовать свою собственную версию <code>with-transaction</"
"code>, \n"
"используя методы базового контроллера для запуска, прерывания и фиксации "
"транзакций. \n"
"Однако вам лучше знать, что вы делаете!\n"
"</li><li><strong>Обработка ошибок и условий</strong>\n"
"   В Elephant может возникать множество ошибок, которые необходимо "
"обрабатывать приложениям. \n"
"</li><li><strong>Обнаружение взаимоблокировок в Berkeley DB</strong>\n"
"   Berkeley DB требует внешнего процесса для обнаружения состояний "
"взаимоблокировок \n"
"между транзакциями. Аргумент ключевое слово :deadlock-detect для open-store "
"спецификаций \n"
"Berkeley DB запускает этот процесс на большинстве лиспов. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:2065
msgid ""
"<p>Further, see <a href=\"#Design-Patterns\">Design Patterns</a> for \n"
"information about Elephant design patterns, solutions to common problems\n"
" and other scenarios with multiple possible solutions."
msgstr ""
"<p>Кроме того, см. <a href=\"#Design-Patterns\">Шаблоны проектирования</a> "
"для получения \n"
"информации о шаблонах проектирования Elephant, решениях общих проблем и "
"других \n"
"сценариях с множеством возможных решений. "

#: in_ed/ElephantUserManual.html:2068
msgctxt "in_ed/ElephantUserManual.html:2068"
msgid ""
"<!-- *-texinfo-*- -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2070
msgctxt "in_ed/ElephantUserManual.html:2070"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2072
msgctxt "in_ed/ElephantUserManual.html:2072"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2078
msgid ""
"<hr>\n"
"<a name=\"Installation\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#User-Guide\">User Guide</"
"a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Tutorial"
"\">Tutorial</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2080
msgctxt "in_ed/ElephantUserManual.html:2080"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2083
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">3 Installation</h2>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">3  Установка</h2>"

#: in_ed/ElephantUserManual.html:2086
msgid "<p><a name=\"index-Installation-4\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2088
msgctxt "in_ed/ElephantUserManual.html:2088"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2102
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Requirements\">Requirements</a>:  Supported "
"lisps and required libraries. \n"
"</li><li><a accesskey=\"2\" href=\"#Configuring-Elephant\">Configuring "
"Elephant</a>:  Setting up Elephant and the configuration file. \n"
"</li><li><a accesskey=\"3\" href=\"#Loading-Elephant\">Loading Elephant</"
"a>:  Loading Elephant and the data store loading protocol. \n"
"</li><li><a accesskey=\"4\" href=\"#Berkeley-DB\">Berkeley DB</a>:  "
"Installing support for the Berkeley DB data store. \n"
"</li><li><a accesskey=\"5\" href=\"#Berkeley-DB-Example\">Berkeley DB "
"Example</a>:  An example of installing and running the Berkeley DB data "
"store. \n"
"</li><li><a accesskey=\"6\" href=\"#Upgrading-Berkeley-DB-Databases"
"\">Upgrading Berkeley DB Databases</a>:  How to upgrade to a new version of "
"Berkeley DB. \n"
"</li><li><a accesskey=\"7\" href=\"#CL_002dSQL\">CL-SQL</a>:  Install and "
"connecting to the CL-SQL data store. \n"
"</li><li><a accesskey=\"8\" href=\"#CL_002dSQL-Example\">CL-SQL Example</"
"a>:  An example of using the CL-SQL data store. \n"
"</li><li><a accesskey=\"9\" href=\"#Elephant-on-Windows\">Elephant on "
"Windows</a>:  More details about running Elephant on Windows\n"
"</li><li><a href=\"#Test-Suites\">Test Suites</a>:  How to run and interpret "
"the output of the regression test suite\n"
"</li><li><a href=\"#Documentation\">Documentation</a>:  Building "
"documentation from texinfo sources. \n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Requirements\">Требования</a>:  "
"Поддерживаемые лиспы и необходимые библиотеки. \n"
"</li><li><a accesskey=\"2\" href=\"#Configuring-Elephant"
"\">Настройка(конфигурирование) Elephant</a>:  Настройка Elephant и файла "
"конфигурации. \n"
"</li><li><a accesskey=\"3\" href=\"#Loading-Elephant\">Загрузка Elephant</"
"a>:  Загрузка Elephant и протокол загрузки хранилища данных. \n"
"</li><li><a accesskey=\"4\" href=\"#Berkeley-DB\">Berkeley DB</a>:  "
"установка поддержки хранилища данных Berkeley DB. \n"
"</li><li><a accesskey=\"5\" href=\"#Berkeley-DB-Example\">Пример Berkeley "
"DB</a>:  пример установки и запуска хранилища данных Berkeley DB. \n"
"</li><li><a accesskey=\"6\" href=\"#Upgrading-Berkeley-DB-Databases"
"\">Обновление баз данных Berkeley DB</a>:  как перейти на новую версию "
"Berkeley DB. \n"
"</li><li><a accesskey=\"7\" href=\"#CL_002dSQL\">CL-SQL</a>:  установки и "
"подключение к хранилищу данных CL-SQL. \n"
"</li><li><a accesskey=\"8\" href=\"#CL_002dSQL-Example\">Пример CL-SQL</a>:  "
"пример использования хранилища данных. \n"
"</li><li><a accesskey=\"9\" href=\"#Elephant-on-Windows\">Elephant в "
"Windows</a>:  Подробности о запуске Elephant в Windows\n"
"</li><li><a href=\"#Test-Suites\">Наборы(сюиты) тестов</a>:  как запустить и "
"интерпретировать выходные данные набора регрессивных тестов\n"
"</li><li><a href=\"#Documentation\">Документация</a>:  Создание документации "
"из исходников texinfo. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:2104
msgctxt "in_ed/ElephantUserManual.html:2104"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2106
msgctxt "in_ed/ElephantUserManual.html:2106"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2111
msgid ""
"<hr>\n"
"<a name=\"Requirements\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Configuring-Elephant"
"\">Configuring Elephant</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2113
msgctxt "in_ed/ElephantUserManual.html:2113"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2116
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.1 Requirements</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.1 Требования</h3>"

#: in_ed/ElephantUserManual.html:2125
msgid ""
"<p>Elephant is a multi-platform, multi-lisp and multi-backend system.  As\n"
"such there is a great deal of complexity in testing.  The system has\n"
"tried to minimize external dependencies as much as possible to ease\n"
"installation, but it still requires some patience and care to bring\n"
"Elephant up on any given platform.  This section attempts to simplify\n"
"this for new users as much as possible.  Patches and suggestions will\n"
"be gladly accepted."
msgstr ""
"<p>Elephant - это мультиплатформенная, мульти-lisp-повская и мульти-"
"бэкэндная система.  \n"
"Таким образом, тестирование представляет собой большую сложность. Система "
"попыталась\n"
"свести к минимуму внешние зависимости, насколько это возможно, чтобы "
"упростить установку,\n"
"но всетаки требуется некоторое терпение и осторожность, чтобы установить "
"Elephant на любую\n"
"заданную платформу.  В этом разделе делается попытка максимально упростить "
"это для новых\n"
"пользователей. Мы с радостью примем исправления и предложения."

#: in_ed/ElephantUserManual.html:2127
msgctxt "in_ed/ElephantUserManual.html:2127"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2129
msgid ""
"<h4 class=\"subsection\">3.1.1 Supported Lisp, Platform and Data store "
"combinations</h4>"
msgstr ""
"<h4 class=\"subsection\">3.1.1  Поддерживаемые комбинации Lisp, платформ и "
"хранилищ данных</h4>"

#: in_ed/ElephantUserManual.html:2135
msgid ""
"<p>Elephant supports SBCL, Allegro, Lispworks, OpenMCL and CMUCL.  Each\n"
"lisp is supported on each of the platforms it runs on: Mac OS X, Linux\n"
"and Windows.  As of release 0.6.1, both 32-bit and 64-bit systems\n"
"should be supported."
msgstr ""
"<p>Elephant поддерживает SBCL, Allegro, Lispworks, OpenMCL и CMUCL.  Каждый\n"
"lisp поддерживается на каждой из платформ, на которых он работает: Mac OS "
"X, \n"
"Linux и Windows.  Начиная с версии 0.6.1, должны поддерживаться как 32-bit, "
"так\n"
"и 64-bit системы."

#: in_ed/ElephantUserManual.html:2137
msgctxt "in_ed/ElephantUserManual.html:2137"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2141
msgid ""
"<p>Due to the small number of developers and the large number of "
"configurations\n"
"providing full test coverage is problematic.  There are:"
msgstr ""
"<p>Из-за небольшого количества разработчиков и большого количества "
"конфигураций обеспечить\n"
"полное тестовое покрытие проблематично.  Есть:"

#: in_ed/ElephantUserManual.html:2143
msgctxt "in_ed/ElephantUserManual.html:2143"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2150
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Five lisp environments\n"
"</li><li>Three Operating System platforms\n"
"</li><li>32-bit or 64-bit OS/compilation configuration\n"
"</li><li>Three data store configurations: Berkeley DB, SQLite3 and "
"Postgresql\n"
"        </li></ol>"
msgstr ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Пять Лисп сред(окружений)\n"
"</li><li>Три платформы операционных систем\n"
"</li><li>32-bit или 64-bit OS/конфигурация компиляции\n"
"</li><li>Три конфигурации хранилища данных: Berkeley DB, SQLite3 и "
"Postgresql\n"
"        </li></ol>"

#: in_ed/ElephantUserManual.html:2154
msgid ""
"<p>which  means that the total number of combinations to be tested could be "
"as\n"
"much as:"
msgstr ""
"<p>это означает, что общее количество проверяемых комбинаций может достигать:"

#: in_ed/ElephantUserManual.html:2156
msgctxt "in_ed/ElephantUserManual.html:2156"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2159
msgid "<p>lisps * os * radix * dstore = 5 * 3 * 2 * 3 = 90 configurations"
msgstr ""

#: in_ed/ElephantUserManual.html:2161
msgctxt "in_ed/ElephantUserManual.html:2161"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2166
msgid ""
"<p>Not all of these combinations are valid, but the implication is that\n"
"not every combination will be tested in any given release.  The\n"
"developers and user base regularly use the following platforms"
msgstr ""
"<p>не все эти комбинации допустимы, но подразумевается, что не каждая "
"комбинация\n"
"будет протестирована в любом конкретном выпуске. Разработчики и "
"пользователи\n"
"регулярно используют следующие платформы"

#: in_ed/ElephantUserManual.html:2168
msgctxt "in_ed/ElephantUserManual.html:2168"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2174
msgid ""
"<ul>\n"
"<li>32/64-bit SBCL on Linux and Mac OS X\n"
"</li><li>32-bit Lispworks on Windows and Mac OS X\n"
"</li><li>32-bit Allegro on Mac OS X\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li>32/64-bit SBCL на Linux и Mac OS X\n"
"</li><li>32-bit Lispworks на Windows и Mac OS X\n"
"</li><li>32-bit Allegro на Mac OS X\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:2180
msgid ""
"<p>The CLSQL backend is used predominantly under SBCL on Linux and Mac OS\n"
"X at the time of writing.  The developers will do their best to\n"
"accomodate users who are keen to test other combinations, but the\n"
"above configurations will be the most stable and reliable."
msgstr ""
"<p>На момент написания бэкэнд CLSQL преимущественно использовался под SBCL "
"на \n"
"Linux и Mac OS X.  Разработчики сделают все возможное, чтобы разместить "
"пользователей,\n"
"которые хотят протестировать другие комбинации, но вышеуказанные "
"конфигурации будут\n"
"наиболее стабильными и надежными."

#: in_ed/ElephantUserManual.html:2182
msgctxt "in_ed/ElephantUserManual.html:2182"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2188
msgid ""
"<p>Elephant is now quite stable in general, so don't be afraid to try an\n"
"unemphasized combination - chances are it is just a little more work\n"
"to bring it up.  In particular, Elephant can probably work with MySQL\n"
"or Oracle with just a little work, but nobody has asked for this yet."
msgstr ""
"<p>Elephant сейчас в целом довольно стабилен, поэтому не бойтесь пробовать\n"
"любую комбинацию - скорее всего, потребуется немного больше работы, чтобы \n"
"поднять её.  В частности, Elephant, вероятно, сможет работать с MySQL\n"
"или Oracle с небольшим трудом,  но этого еще никто не просил."

#: in_ed/ElephantUserManual.html:2190
msgctxt "in_ed/ElephantUserManual.html:2190"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2192
msgid "<h4 class=\"subsection\">3.1.2 Library dependencies</h4>"
msgstr "<h4 class=\"subsection\">3.1.2  Зависимости от библиотек</h4>"

#: in_ed/ElephantUserManual.html:2195
msgid "<p>The Elephant core system requires:"
msgstr "<p>Базовая система Elephant требует:"

#: in_ed/ElephantUserManual.html:2197
msgctxt "in_ed/ElephantUserManual.html:2197"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2207
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>asdf  <a href=\"http://www.cliki.net/asdf\">http://www.cliki.net/asdf</"
"a>\n"
"</li><li>uffi  requires version 1.5.18 or later, <a href=\"http://uffi.b9."
"com/\">http://uffi.b9.com/</a> or <a href=\"http://www.cliki.net/UFFI"
"\">http://www.cliki.net/UFFI</a>\n"
"</li><li>cl-base64  <a href=\"http://www.cliki.net/cl-base64\">http://www."
"cliki.net/cl-base64</a>\n"
"</li><li>gcc  Your system needs GCC (or Cygwin) to build the Elephant \n"
"C-based serializer library.  (Precompiled DLL's are available for \n"
"Windows platforms on the <a href=\"http://www.common-lisp.net/project/"
"elephant/downloads.html\">download page</a>. \n"
"</li><li>rt  The RT regression test sytem is required to run the test suite: "
"<a href=\"http://www.cliki.net/RT\">http://www.cliki.net/RT</a>\n"
"        </li></ol>"
msgstr ""
"<ol type=\"1\" start=\"1\">\n"
"<li>asdf  <a href=\"http://www.cliki.net/asdf\">http://www.cliki.net/asdf</"
"a>\n"
"</li><li>uffi  requires version 1.5.18 или выше, <a href=\"http://uffi.b9."
"com/\">http://uffi.b9.com/</a> or <a href=\"http://www.cliki.net/UFFI"
"\">http://www.cliki.net/UFFI</a>\n"
"</li><li>cl-base64  <a href=\"http://www.cliki.net/cl-base64\">http://www."
"cliki.net/cl-base64</a>\n"
"</li><li>gcc  Вашей системе требуется GCC (или Cygwin) для построения "
"Elephant \n"
"библиоткеи сериализатора основанной на C.  (Precompiled DLL's are available "
"for \n"
"Windows platforms on the <a href=\"http://www.common-lisp.net/project/"
"elephant/downloads.html\">download page</a>. \n"
"</li><li>rt   для запуска набора тестов требуется система регрессионного "
"тесирования RT: <a href=\"http://www.cliki.net/RT\">http://www.cliki.net/RT</"
"a>\n"
"        </li></ol>"

#: in_ed/ElephantUserManual.html:2214
msgid ""
"<p>Follow the instructions at these URLs to download and setup the\n"
"libraries.  (Note: uffi and cl-base64 are\n"
"<a href=\"http://www.cliki.net/ASDF-Install\">asdf-installable</a> for "
"those\n"
"of you with asdf-install on your system).  Elephant, however, is not\n"
"asdf-installable today."
msgstr ""
"<p>Следуйте инструкциям по этим URL-адресам, чтобы загрузить и настроить "
"библиотеки.\n"
"(примечание: uffi и cl-base64 можно установить\n"
"<a href=\"http://www.cliki.net/ASDF-Install\">asdf-installable</a> в формате "
"asdf-install,\n"
"для тех из вас кто установил asdf в вашей системе).  Однако сегодня, "
"Elephant, нельзя\n"
"установить в формате asdf."

#: in_ed/ElephantUserManual.html:2216
msgctxt "in_ed/ElephantUserManual.html:2216"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2221
msgid ""
"<p>In addition to these libraries, each data store has their own\n"
"dependencies as discussed in <a href=\"#Berkeley-DB\">Berkeley DB</a> and\n"
"<a href=\"#CL_002dSQL\">CL-SQL</a>."
msgstr ""
"<p>В дополнение к этим библиотекам каждое хранилище данных имеет свои "
"собственные зависимости,\n"
"как описано в <a href=\"#Berkeley-DB\">Berkeley DB</a> и\n"
"<a href=\"#CL_002dSQL\">CL-SQL</a>."

#: in_ed/ElephantUserManual.html:2223
msgctxt "in_ed/ElephantUserManual.html:2223"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2225
msgctxt "in_ed/ElephantUserManual.html:2225"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2227
msgctxt "in_ed/ElephantUserManual.html:2227"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2233
msgid ""
"<hr>\n"
"<a name=\"Configuring-Elephant\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Loading-Elephant"
"\">Loading Elephant</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Requirements"
"\">Requirements</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2235
msgctxt "in_ed/ElephantUserManual.html:2235"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2238
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.2 Configuring Elephant</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.2  Настройка Elephant</h3>"

#: in_ed/ElephantUserManual.html:2246
msgid ""
"<p>Before you can load the elephant packages into your running lisp, you\n"
"need to setup the configuration file.  Copy the reference file\n"
"config.sexp from the root directory to my-config.sexp in the root\n"
"directory.  my-config.sexp contains a lisp reader-formatted list of\n"
"key-value pairs that tells elephant where to find various libraries\n"
"and how to build them."
msgstr ""
"<p>Прежде чем вы сможете загружать пакеты(packages) elephant в ваш "
"работающий\n"
"lisp, вам необходимо настроить файл конфигурации. Скопируйте справочный "
"файл\n"
"config.sexp из корневого каталога в my-config.sexp в корневой каталог. \n"
" my-config.sexp содержит список пар ключ - значение в формате "
"воспринимаемом\n"
"lisp читателем, которые сообщают elephant, где найти различные библиотеки и\n"
"как их создать."

#: in_ed/ElephantUserManual.html:2248
msgctxt "in_ed/ElephantUserManual.html:2248"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2251
msgid "<p>For example:"
msgstr "<p>Например:"

#: in_ed/ElephantUserManual.html:2253
msgctxt "in_ed/ElephantUserManual.html:2253"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2261
msgid ""
"<pre class=\"lisp\">     #+(and (or sbcl allegro) macosx)\n"
"     ((:berkeley-db-include-dir . \"/opt/local/include/db45/\")\n"
"      (:berkeley-db-lib-dir . \"/opt/local/lib/db45/\")\n"
"      (:berkeley-db-lib . \"/opt/local/lib/db45/libdb-4.5.dylib\")\n"
"      (:berkeley-db-deadlock . \"/opt/local/bin/db45_deadlock\")\n"
"      (:compiler . :gcc))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2265
msgid ""
"<p>The following is a guide to the various parameters.  For simplicity,\n"
"we include all the parameters here, although we will go into more\n"
"detail in each of the data store sections."
msgstr ""
"<p>Ниже приводится руководство по различным параметрам. Для простоты мы "
"включили сюда все\n"
"параметры, хотя мы рассмотрим более подробно каждый в последующих разделах "
"описывающих хранилища\n"
"данных."

#: in_ed/ElephantUserManual.html:2267
msgctxt "in_ed/ElephantUserManual.html:2267"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2279
msgid ""
"<ul>\n"
"<li><strong>:compiler</strong>  This tells Elephant which compiler to \n"
"use to build any C libraries.  The only options currently are :gcc on \n"
"Unix platforms and :cygwin for the Windows platform. \n"
"</li><li><strong>:berkeley-db-include-dir</strong>  The pathname for the "
"Berkeley DB include files (db.h)\n"
"</li><li><strong>:berkeley-db-lib-dir</strong>  The pathname for all the "
"Berkeley DB library files\n"
"</li><li><strong>:berkeley-db-lib</strong>  The full pathname for the "
"specific Berkeley DB library (libdb45.so)\n"
"</li><li><strong>:berkeley-db-deadlock</strong>  The full pathname to the "
"BDB utility function db_deadlock\n"
"</li><li><strong>:pthread-lib</strong>  Not needed for SBCL 9.17+\n"
"</li><li><strong>:clsql-lib</strong>  Currently unused, adds paths to the CL-"
"SQL library search function\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><strong>:compiler</strong> - Сообщает Elephant, какой компилятор "
"использовать для\n"
"создания любых Си библиотек.  В настоящее время единственными вариантами "
"являются :gcc на \n"
"Unix платформах и :cygwin для Windows платформ. \n"
"</li><li><strong>:berkeley-db-include-dir</strong> - Путь(pathname) для "
"включаемых(include) файлов для Berkeley DB (db.h)\n"
"</li><li><strong>:berkeley-db-lib-dir</strong> - Путь ко всем файлам "
"библиотеки Berkeley DB\n"
"</li><li><strong>:berkeley-db-lib</strong> - полный путь к конкретной "
"библиотеке Berkeley DB  (libdb45.so)\n"
"</li><li><strong>:berkeley-db-deadlock</strong> - Полный путь к служебной "
"функции утилите BDB db_deadlock\n"
"</li><li><strong>:pthread-lib</strong> - Не требуется для SBCL 9.17+\n"
"</li><li><strong>:clsql-lib</strong> - В настоящее время не исползуется, "
"добавляет пути к функции поиска библиотеки CL-SQL\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:2283
msgid ""
"<p>The config.sexp file contains a set of example configurations to start\n"
"from, but you will most likely need to modify it for your system."
msgstr ""
"<p>Файл config.sexp содержит набор примеров конфигураций для начала, но вам, "
"скорее всего, потребуется изменить его, для вашей системы."

#: in_ed/ElephantUserManual.html:2285
msgctxt "in_ed/ElephantUserManual.html:2285"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2290
msgid ""
"<p>Elephant has one small C library that it uses for binary\n"
"serialization.  This means that you need to have gcc in your path\n"
"(see <a href=\"#Elephant-on-Windows\">Elephant on Windows</a> for exceptions "
"on the Windows platform)."
msgstr ""
"<p>У Elephant есть одна небольшая библиотека C, которую он использует для "
"двоичной сериализации.\n"
"Это означает, что вам нужно иметь gcc в ваших путях\n"
"(см. <a href=\"#Elephant-on-Windows\">Elephant на Windows</a> для исключений "
"на платформе Window)."

#: in_ed/ElephantUserManual.html:2292
msgctxt "in_ed/ElephantUserManual.html:2292"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2294
msgctxt "in_ed/ElephantUserManual.html:2294"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2296
msgctxt "in_ed/ElephantUserManual.html:2296"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2302
msgid ""
"<hr>\n"
"<a name=\"Loading-Elephant\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Berkeley-DB\">Berkeley "
"DB</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Configuring-"
"Elephant\">Configuring Elephant</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""
"<hr>\n"
"<a name=\"Loading-Elephant\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Berkeley-DB\">Berkeley "
"DB</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Configuring-"
"Elephant\">Configuring Elephant</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"

#: in_ed/ElephantUserManual.html:2304
msgctxt "in_ed/ElephantUserManual.html:2304"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2307
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.3 Loading Elephant</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.3 Загрузка Elephant</h3>"

#: in_ed/ElephantUserManual.html:2309
msgid "<h4 class=\"subsection\">3.3.1 Loading Elephant via ASDF</h4>"
msgstr "<h4 class=\"subsection\">3.3.1 Загрузка Elephant через ASDF</h4>"

#: in_ed/ElephantUserManual.html:2314
msgid ""
"<p>Now that you have loaded all the dependencies and created your\n"
"configuration file you can load the Elephant packages and\n"
"definitions:"
msgstr ""
"<p>Теперь, когда вы загрузили все зависимости и создали файл конфигурации, "
"вы\n"
"можете загрузить пакеты и определения Elephant:"

#: in_ed/ElephantUserManual.html:2316
msgctxt "in_ed/ElephantUserManual.html:2316"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2319
msgid ""
"<pre class=\"lisp\">     (asdf:operate 'asdf:load-op :elephant)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2327
msgid ""
"<p>This will load the cl-base64 and uffi libraries.  It will also\n"
"automatically compile and load the C library.  The build process no\n"
"longer depends on a Makefile and has been verified on most platforms,\n"
"but if you have a problem please report it, and any output you can\n"
"capture, to the developers at <a href=\"mailto:elephant-devel@common-lisp.net"
"\">elephant-devel@common-lisp.net</a>. \n"
"We will update the FAQ at <a href=\"http://trac.common-lisp.net/elephant"
"\">http://trac.common-lisp.net/elephant</a>\n"
"with common problems users run into."
msgstr ""
"<p>Эта команда загрузит библиотеки cl-base64 и uffi.  Она также "
"автоматически\n"
"скомпилирует и загрузит библиотеку Си.  Процесс сборки больше не зависит от "
"Makefile \n"
"и был проверен на большинстве платформ, но если у вас будет проблема, "
"сообщите о ней\n"
"и всём ее выводе, который вы сможете записать, разработчикам, по адресу\n"
"<a href=\"mailto:elephant-devel@common-lisp.net\">elephant-devel@common-lisp."
"net</a>. \n"
"Мы обновим FAQ на <a href=\"http://trac.common-lisp.net/elephant\">http://"
"trac.common-lisp.net/elephant</a>\n"
"указав типичные проблемы, с которыми сталкиваются пользователи."

#: in_ed/ElephantUserManual.html:2329
msgctxt "in_ed/ElephantUserManual.html:2329"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2331
msgid "<h4 class=\"subsection\">3.3.2 Two-Phase Load Process</h4>"
msgstr "<h4 class=\"subsection\">3.3.2 Процесс двухфазной загрузки</h4>"

#: in_ed/ElephantUserManual.html:2338
msgid ""
"<p>Elephant uses a two-phase load process.  The core code is loaded and\n"
"the code for a given data store is loaded on demand when you call\n"
"<code>open-store</code> with a specification referencing that data store. \n"
"The second phase of the load process requires ASDF to be installed on\n"
"your system."
msgstr ""
"<p>Elephant исползует двух-фазный процесс загрузки.  Основной код "
"загружается,\n"
"и код для данного хранилища данных загружается по запросу, когда вы "
"вызываете\n"
"<code>open-store</code> со спецификацией, ссылающейся на это хранилище "
"данных.\n"
"Второй этап процесса загрузки требует, чтобы в вашей системе был установлен "
"ASDF."

#: in_ed/ElephantUserManual.html:2340
msgctxt "in_ed/ElephantUserManual.html:2340"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2346
msgid ""
"<p>(NOTE: There are some good reasons and not so good reasons for this\n"
"process.  One reason you cannot load ele-bdb.asd directly as it\n"
"depends on lisp code defined in elephant.asd.  We decided not to fix\n"
"this in the 0.9 release although later releases may improve on this)."
msgstr ""
"<p>(Примечание: для этого процесса есть несколько веских и не очень веских\n"
"причин.  Одна из причин, вы не можете загрузить ele-bdb.asd напрямую, так\n"
"как он зависит от кода лисп, определенного в elephant.asd.  Мы решили не \n"
"исправлять это в версии 0.9, хотя более поздние версии могут улучшить это)."

#: in_ed/ElephantUserManual.html:2348
msgctxt "in_ed/ElephantUserManual.html:2348"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2350
msgid "<h4 class=\"subsection\">3.3.3 Packages</h4>"
msgstr "<h4 class=\"subsection\">3.3.3 Пакеты</h4>"

#: in_ed/ElephantUserManual.html:2354
msgid ""
"<p>Now that Elephant has been loaded, you can call <code>use-package</code> "
"in\n"
"the cl-user package,"
msgstr ""
"<p>Теперь, когда Elephant загружен, вы можете вызвать <code>use-package</"
"code> в\n"
"пакете cl-user,"

#: in_ed/ElephantUserManual.html:2356
msgctxt "in_ed/ElephantUserManual.html:2356"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2360
msgid ""
"<pre class=\"lisp\">     CL-USER&gt; (use-package :elephant)\n"
"     =&gt; T\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2362
msgid "<p>use a predefined user package,"
msgstr "<p>использовать предопределенный пользовательский пакет,"

#: in_ed/ElephantUserManual.html:2364
msgctxt "in_ed/ElephantUserManual.html:2364"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2367
msgid ""
"<pre class=\"lisp\">     CL-USER&gt; (in-package :elephant-user)\n"
"     =&gt; T"
msgstr ""

#: in_ed/ElephantUserManual.html:2370
msgid ""
"     ELE-USER&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2372
msgid "<p>or import the symbols into your own project package from :elephant."
msgstr ""
"<p>или импортируйте символы в свой собственный пакет проекта из :elephant."

#: in_ed/ElephantUserManual.html:2374
msgctxt "in_ed/ElephantUserManual.html:2374"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2378
msgid ""
"<pre class=\"lisp\">     (defpackage :my-project\n"
"       (:use :common-lisp :elephant))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2381
msgid ""
"<p>The imported symbols are all that is needed to control Elephant\n"
"databases and are documented in detail in <a href=\"#User-API-Reference"
"\">User API Reference</a>"
msgstr ""
"<p>Импортированные символы - это все, что необходимо для управления базами "
"данных \n"
"Elephant и они подробно задокументированы в <a href=\"#User-API-Reference"
"\">Справочник по\n"
"пользовательскому API</a>"

#: in_ed/ElephantUserManual.html:2383
msgctxt "in_ed/ElephantUserManual.html:2383"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2385
msgid "<h4 class=\"subsection\">3.3.4 Opening a Store</h4>"
msgstr "<h4 class=\"subsection\">3.3.4 Открытие Хранилища</h4>"

#: in_ed/ElephantUserManual.html:2389
msgid ""
"<p>As discussed in the tutoral, you need to open a store to begin using\n"
"Elephant:"
msgstr ""
"<p>Как уже говорилось в учебнике, вам нужно открыть хранилище, чтобы начать "
"использовать\n"
"Elephant:"

#: in_ed/ElephantUserManual.html:2391
msgctxt "in_ed/ElephantUserManual.html:2391"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2397
msgid ""
"<pre class=\"lisp\">     (open-store '(:BDB \"/Users/owner/db/my-bdb/\"))\n"
"     ...\n"
"     ASDF loading messages\n"
"     ...\n"
"     =&gt; #&lt;BDB-STORE-CONTROLLER&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:2405
msgid ""
"     (open-store '(:CLSQL (:POSTGRESQL \"localhost.localdomain\"\n"
"                                       \"mydb\" \"myuser\" \"\"))))\n"
"     ...\n"
"     ASDF loading messages\n"
"     ...\n"
"     =&gt; #&lt;SQL-STORE-CONTROLLER&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2410
msgid ""
"<p>The first time you load a specific data store, Elephant will call ASDF\n"
"to load all the specified data store's dependencies, connect to a\n"
"database and return the <code>store-controller</code> subclass instance for\n"
"that data store."
msgstr ""
"<p>При первой загрузке определенного хранилища данных, Elephant вызовет "
"ASDF\n"
"для загрузки всех зависимостей указанного хранилища данных, подключения к "
"базе данных\n"
"и возврата экземпляра подкласса  <code>store-controller</code> для этого "
"хранилища данных."

#: in_ed/ElephantUserManual.html:2412
msgctxt "in_ed/ElephantUserManual.html:2412"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2414
msgctxt "in_ed/ElephantUserManual.html:2414"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2416
msgctxt "in_ed/ElephantUserManual.html:2416"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2422
msgid ""
"<hr>\n"
"<a name=\"Berkeley-DB\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Berkeley-DB-Example"
"\">Berkeley DB Example</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Loading-Elephant"
"\">Loading Elephant</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2424
msgctxt "in_ed/ElephantUserManual.html:2424"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2427
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.4 Berkeley DB</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.4 Berkeley DB</h3>"

#: in_ed/ElephantUserManual.html:2435
msgid ""
"<p>The Berkeley DB Data Store started out as a very simple data\n"
"dictionary in the Berkeley Unix operating system.  There are many\n"
"Xdb systems that use the same API, or a similarly one.  A free for\n"
"non-commercial use version of Berkeley DB is provided by Oracle\n"
"corporation with commercial licenses available.  Please follow the\n"
"download and installation procedures defined here:"
msgstr ""
"<p>Хранилище данных Berkeley DB начиналось как очень простой словарь данных\n"
"в операционной системе Berkeley Unix.  Существует множество систем \"Xdb\",\n"
"использующих один и тот же или аналогичный  API. Бесплатная версия Berkeley "
"DB \n"
"для некоммерческого использования предоставляется корпорацией Oracle с\n"
"доступными коммерческими лицензиями.  Пожалуйста, следуйте процедурам "
"загрузки и\n"
"установки, описанными здесь:"

#: in_ed/ElephantUserManual.html:2437
msgctxt "in_ed/ElephantUserManual.html:2437"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2440
msgid "<p>http://www.oracle.com/technology/products/berkeley-db/db/index.html"
msgstr ""

#: in_ed/ElephantUserManual.html:2442
msgctxt "in_ed/ElephantUserManual.html:2442"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2445
msgid "<p>Elephant only works with version 4.5 of BerkeleyDB."
msgstr "<p>Elephant работает только с версией 4.5  BerkeleyDB."

#: in_ed/ElephantUserManual.html:2447
msgctxt "in_ed/ElephantUserManual.html:2447"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2449
msgctxt "in_ed/ElephantUserManual.html:2449"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2451
msgctxt "in_ed/ElephantUserManual.html:2451"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2457
msgid ""
"<hr>\n"
"<a name=\"Berkeley-DB-Example\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Upgrading-Berkeley-DB-"
"Databases\">Upgrading Berkeley DB Databases</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Berkeley-DB"
"\">Berkeley DB</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2459
msgctxt "in_ed/ElephantUserManual.html:2459"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2462
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.5 Setting up Berkeley DB</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.5  Настройка Berkeley DB</h3>"

#: in_ed/ElephantUserManual.html:2467
msgid ""
"<p>We recommend that you download and build a distribution from Oracle. \n"
"Some problems have been reported with linking to Debian, Cygwin or\n"
"other packages.  This is especially true for Windows users."
msgstr ""
"<p>Мы рекомендуем вам скачать и собрать дистрибутив от Oracle. \n"
"Сообщалось о некоторых проблемах со связыванием с Debian, Cygwin или\n"
"другими пакетами.  Это особенно актуально для пользователей Windows."

#: in_ed/ElephantUserManual.html:2469
msgctxt "in_ed/ElephantUserManual.html:2469"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2475
msgid ""
"<p>Beyond ensuring that the file my-config.sexp points to your BDB\n"
"installation directories and files, nothing else should be required to\n"
"configure the example that uses a local testdb directory as a\n"
"dabase (under tests) in the top-level Elephant directory."
msgstr ""
"<p>Помимо обеспечения того, что файл \"my-config.sexp\" указывает на ваши\n"
"катлоги и файлы установки BDB, ничего другого не требуется для настройки "
"примера,\n"
"который использует каталог \"testdb\" в качестве базы данных (в разделе "
"\"tests\") \n"
"на верхнем уровне директории Elephant."

#: in_ed/ElephantUserManual.html:2477
msgctxt "in_ed/ElephantUserManual.html:2477"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2480
msgid ""
"<p>On one Fedora based system, the my-config.sexp file looked like this:"
msgstr ""
"<p>В одной системе на базе Fedora, файл \"my-config.sexp\" выглядел так:"

#: in_ed/ElephantUserManual.html:2482
msgctxt "in_ed/ElephantUserManual.html:2482"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2491
msgid ""
"<pre class=\"lisp\">     ((:berkeley-db-include-dir . \"/usr/local/"
"BerkeleyDB.4.5/include\")\n"
"      (:berkeley-db-lib-dir . \"/usr/local/BerkeleyDB.4.5/lib\")\n"
"      (:berkeley-db-lib . \"/usr/local/BerkeleyDB.4.5/lib/libdb.so\")\n"
"      (:berkeley-db-deadlock . \"/usr/local/BerkeleyDB.4.5/bin/db_deadlock"
"\")\n"
"      (:pthread-lib . nil)\n"
"      (:clsql-lib . \"/usr/local/share/common-lisp/\")\n"
"      (:compiler . :gcc))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2495
msgid ""
"<p>The <a href=\"#Test-Suites\">Test Suites</a> give a nice example of using "
"BDB by running the test using\n"
"the specification:\n"
"</p>"
msgstr ""
"<p> <a href=\"#Test-Suites\">Наборы Тестов(Test Suites)</a> дают хороший "
"пример использования\n"
"BDB путем запуска теста с использованием спецификации:\n"
"</p>"

#: in_ed/ElephantUserManual.html:2498
msgid ""
"<pre class=\"lisp\">     '(:BDB \"&lt;elephant-root&gt;/tests/testdb/\")\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2503
msgid ""
"<p>Once you start working on an application, you will want to change the\n"
"path to a directory that is appropriate for your application, and use\n"
"that as the specification passed to <code> open-store </code> on "
"application\n"
"startup."
msgstr ""
"<p>Как только вы начнете работать над приложением, вы захотите изменить путь "
"к каталогу,\n"
"который подходит для вашего приложения, и использовать его в качестве "
"спецификации,\n"
"передаваемой в  <code> open-store </code> при запуске приложения."

#: in_ed/ElephantUserManual.html:2505
msgctxt "in_ed/ElephantUserManual.html:2505"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2507
msgctxt "in_ed/ElephantUserManual.html:2507"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2509
msgctxt "in_ed/ElephantUserManual.html:2509"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2515
msgid ""
"<hr>\n"
"<a name=\"Upgrading-Berkeley-DB-Databases\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#CL_002dSQL\">CL-SQL</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Berkeley-DB-"
"Example\">Berkeley DB Example</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2517
msgctxt "in_ed/ElephantUserManual.html:2517"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2520
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.6 Upgrading Berkeley DB Databases</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.6  Обновление баз данных Berkeley DB</h3>"

#: in_ed/ElephantUserManual.html:2529
msgid ""
"<p>When there is a new release of Elephant, it will depend on a new\n"
"version of Berkeley DB.  If so, you must upgrade your BDB databases to\n"
"use the new version Elephant.  This forced upgrade is a consequence of\n"
"Elephant not parsing the BDB header files which tend to change various\n"
"important constants with each release.  These patches are usually\n"
"minor.  Upgrading also happens because Elephant tries to leverage new\n"
"features of Berkeley DB."
msgstr ""
"<p>Когда выйдет новая версия Elephant, она будет зависеть от новой\n"
"версии Berkeley DB.  Если это так, вы доолжны обновить свои базы данных "
"BDB,\n"
"чтобы использовать новую версию Elephant.  Это принудительное обновление\n"
"является следствием того, что Elephant на анализирует файлы заголовков "
"BDB, \n"
"которые имеют тенденцию изменять различные важные константы с каждым "
"выпуском.\n"
"Эти патчи обычно незначительны. Обновление также происходит из-за того, что\n"
"Elephant пытается использовать новые функции Berkeley DB."

#: in_ed/ElephantUserManual.html:2531
msgctxt "in_ed/ElephantUserManual.html:2531"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2536
msgid ""
"<p>The rest of this section talks about how to upgrade your existing\n"
"Berkeley DB databases, opening them in the new Elephant version and\n"
"migrating them to a newly created Elephant database."
msgstr ""
"<p>В оставшейся части этого раздела рассказывается о том. как обновить\n"
"существующие базы данных Berkeley DB, открыть их в новой версии Elephant\n"
"и перенести их во вновь созданную базу данных Elephant."

#: in_ed/ElephantUserManual.html:2538
msgctxt "in_ed/ElephantUserManual.html:2538"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2540
msgid "<h4 class=\"subsection\">3.6.1 Upgrading to 0.9</h4>"
msgstr "<h4 class=\"subsection\">3.6.1 Обновление до 0.9</h4>"

#: in_ed/ElephantUserManual.html:2544
msgid ""
"<p>This section outlines how to upgrade from Elephant version 0.6.0 and\n"
"Berkeley DB 4.3."
msgstr ""

#: in_ed/ElephantUserManual.html:2546
msgctxt "in_ed/ElephantUserManual.html:2546"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2566
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Install BDB 4.5 (keep 4.3 around for now)\n"
"</li><li>Setup my-config.sexp to point to the appropriate BDB 4.5 "
"directories\n"
"</li><li>Upgrade your existing database directory to 4.5\n"
"          <ul>\n"
" <li>Run db43_recover in your 0.6 database\n"
" </li><li>Optional: run db43_archive -d to remove all logs not part of a "
"checkpoint\n"
"    This will make catastrophic recovery impossible, but reduces the amount "
"of data you\n"
"    have to backup. \n"
" </li><li>Backup your db files and remaining logs\n"
" </li><li>Run db45_checkpoint -1 in the database directory\n"
" </li></ul>\n"
"     </li><li>Upgrade 0.6 data to a fresh 0.9 database\n"
"          <ul>\n"
" <li>Open your old database: <code>(setf sc (open-store '(:BDB \"/Users/me/"
"db/ele060/\")))</code>\n"
" </li><li>Run upgrade: <code>(upgrade sc '(:BDB \"/Users/me/db/ele090/\"))</"
"code>\n"
" </li></ul>\n"
"     </li><li>Test your new application and report any bugs that arise to <a "
"href=\"mailto:elephant-devel@common-lisp.net\">elephant-devel@common-lisp."
"net</a>\n"
"        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:2569
msgid ""
"<p><em>(NOTE: close-store may fail when closing the old 0.6 database, this "
"is OK.)</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:2571
msgctxt "in_ed/ElephantUserManual.html:2571"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2577
msgid ""
"<p><em>(NOTE: 64-bit lisps will not successfully upgrade 32-bit 0.6 "
"databases.  Use a 32-bit\n"
"        version of your lisp to update to 0.9 and then open that database in "
"your 64-bit\n"
"        lisp.  There should be no compatibility problems.  Best to test your "
"application on\n"
"        a 32-bit lisp if you can, just to be sure.)</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:2579
msgctxt "in_ed/ElephantUserManual.html:2579"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2581
msgid "<h4 class=\"subsection\">3.6.2 Upgrade from Elephant 0.5</h4>"
msgstr "<h4 class=\"subsection\">3.6.2 Обновление из Elephant 0.5</h4>"

#: in_ed/ElephantUserManual.html:2586
msgid ""
"<p>Follow the upgrade procedures outlined in the Elephant 0.6.0 INSTALL\n"
"file to upgrade your database from 0.5 to 0.6.0.  Then follow the above\n"
"procedures for upgrading to 0.9."
msgstr ""

#: in_ed/ElephantUserManual.html:2588
msgctxt "in_ed/ElephantUserManual.html:2588"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2593
msgid ""
"<p><em>(NOTE: It may not take much work to make 0.9 upgrade directly from "
"0.5\n"
"However there are so few (none?) 0.5 users that it wasn't deemed worth\n"
"the work given that there's an upgrade path available.)</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:2595
msgctxt "in_ed/ElephantUserManual.html:2595"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2597
msgctxt "in_ed/ElephantUserManual.html:2597"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2599
msgctxt "in_ed/ElephantUserManual.html:2599"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2606
msgid ""
"<hr>\n"
"<a name=\"CL-SQL\"></a>\n"
"<a name=\"CL_002dSQL\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#CL_002dSQL-Example\">CL-"
"SQL Example</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Upgrading-"
"Berkeley-DB-Databases\">Upgrading Berkeley DB Databases</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""
"<hr>\n"
"<a name=\"CL-SQL\"></a>\n"
"<a name=\"CL_002dSQL\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#CL_002dSQL-Example"
"\">Пример CL-SQL</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Upgrading-"
"Berkeley-DB-Databases\">Upgrading Berkeley DB Databases</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Инсталяция</a>"

#: in_ed/ElephantUserManual.html:2608
msgctxt "in_ed/ElephantUserManual.html:2608"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2611
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.7 CL-SQL</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:2618
msgid ""
"<p>Although originally designed as an interface to the BerkeleyDB system,\n"
"the original Elephant system has been extended to support the use of\n"
"relational database management systems as the implementation of the\n"
"persistent store.  This relies on Kevin Rosenberg's CL-SQL interface,\n"
"which provides access to a large number of relational systems."
msgstr ""
"<p>Первоначально разработанная как интерфейс к системе BerkeleyDB, исходная "
"система \n"
"Elephant была расширена для поддержки использования систем управления "
"реляционными \n"
"базами данных в качестве реализации постоянного хранилища. Эта "
"функциональность зависит \n"
"от интерфейса  CL-SQL Кевина Розенберга, который обеспечивает доступ к "
"большому количеству\n"
"реляционных систем."

#: in_ed/ElephantUserManual.html:2620
msgctxt "in_ed/ElephantUserManual.html:2620"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2628
msgid ""
"<p>A major motivation of this extension is that one one might prefer the\n"
"licensing of a different system.  For example, at the time of this\n"
"writing, it is our interpretation that one cannot use the BerkeleyDB\n"
"system behind a public website\n"
"http://www.sleepycat.com/download/licensinginfo.shtml#redistribute\n"
"unless one releases the entire web application as open source."
msgstr ""
"<p>Основная мотивация этого расширения заключается в том, что можно "
"предпочесть \n"
"лицензирование другой системы. Например, на момент написания этой статьи мы "
"считали, \n"
"что нельзя использовать систему BerkeleyDB за общедоступным веб-сайтом \n"
"http://www.sleepycat.com/download/licensinginfo.shtml#redistribute, если "
"только не \n"
"будет выпущено все веб-приложение как Открытый исходный код. "

#: in_ed/ElephantUserManual.html:2630
msgctxt "in_ed/ElephantUserManual.html:2630"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2634
msgid ""
"<p>Neither the PostGres DBMS nor SQLite 3, nor Elephant itself, imposes\n"
"any such restriction."
msgstr ""
"<p>Ни СУБД PostGres, ни SQLite 3, ни сам Elephant не налагают подобных "
"ограничений."

#: in_ed/ElephantUserManual.html:2636
msgctxt "in_ed/ElephantUserManual.html:2636"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2642
msgid ""
"<p>Other reasons to use a relational database system might include:\n"
"familiarity with those systems, the fact that some part of your application\n"
"needs to use the truly relational aspects of those systems, preference for\n"
"the tools associated with those systems, etc."
msgstr ""
"<p>Другие причины для использования системы реляционных баз данных могут "
"включать: \n"
"знакомство с этими системами, тот факт, что некоторая часть вашего "
"приложения должна \n"
"использовать действительно реляционные аспекты этих систем, предпочтение "
"инструментов, \n"
"связанных с этими системами, и т. Д."

#: in_ed/ElephantUserManual.html:2644
msgctxt "in_ed/ElephantUserManual.html:2644"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2653
msgid ""
"<p>Elephant provides functions for migrating data seamlessly between data\n"
"stores.  One can quite easily move data from a BerkeleyDB repository\n"
"to a PostGres repository, and vice versa.  This offers at least the\n"
"possibility than one can develop using one data store, for example\n"
"BerkeleyDB, and then later move to Postgres.  One could even operate\n"
"simultaneously out of multiple repositories, if there were a good\n"
"reason to do so."
msgstr ""
"<p>Elephant предоставляет функции для беспрепятственного переноса данных "
"между \n"
"хранилищами данных. Можно довольно легко переместить данные из репозитория \n"
"BerkeleyDB в репозиторий PostGres и наоборот. Это дает, по крайней мере, \n"
"возможность разработки с использованием одного хранилища данных, например "
"BerkeleyDB, \n"
"а затем перейти на Postgres. Можно даже работать одновременно из нескольких "
"репозиториев, \n"
"если для этого есть веская причина. "

#: in_ed/ElephantUserManual.html:2655
msgctxt "in_ed/ElephantUserManual.html:2655"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2660
msgid ""
"<p>The SQL implementation shares the serializer with the BDB data store, "
"but\n"
"base64 encodes the resulting binary stream.  This data is placed into\n"
"a single table in the SQL data store."
msgstr ""
"<p>Реализация SQL использует сериализатор совместно с хранилищем данных BDB, "
"но base64 \n"
"кодирует результирующий двоичный поток. Эти данные помещаются в единую "
"таблицу в \n"
"хранилище данных SQL."

#: in_ed/ElephantUserManual.html:2662
msgctxt "in_ed/ElephantUserManual.html:2662"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2668
msgid ""
"<p>All functionality except for nested transaction support and\n"
"cursor-puts supported by the BerkeleyDB data store is supported by the\n"
"CL-SQL data store.  CL-SQL transaction integrity under concurrent\n"
"operation has not been extensively stress tested."
msgstr ""
"<p>Все функции, кроме поддержки вложенных транзакций и установки курсора,\n"
" поддерживаемые хранилищем данных BerkeleyDB, поддерживаются хранилищем "
"данных CL-SQL. \n"
"Целостность транзакции CL-SQL при параллельной работе не подвергалась "
"всесторонним \n"
"стресс-тестам."

#: in_ed/ElephantUserManual.html:2670
msgctxt "in_ed/ElephantUserManual.html:2670"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2675
msgid ""
"<p>Additionally, it is NOT the case that the Elephant system currently\n"
"provides transaction support across multiple repositories; it provides\n"
"transaction support on a per-repository basis."
msgstr ""
"<p>Кроме того, это НЕ тот случай, когда система Elephant в настоящее время \n"
"обеспечивает поддержку транзакций в нескольких репозиториях; она "
"обеспечивает \n"
"поддержку транзакций для каждого репозитория.\n"

#: in_ed/ElephantUserManual.html:2677
msgctxt "in_ed/ElephantUserManual.html:2677"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2682
msgid ""
"<p>The PostGres backend is currently about 5 times slower than the\n"
"BerkeleyDB backend.  As of the time of this writing, only PostGres and\n"
"SqlLite 3 have been tested as CL-SQL backends."
msgstr ""
"<p>Бэкэнд PostGres в настоящее время примерно в 5 раз медленнее, чем бэкэнд "
"BerkeleyDB. \n"
"На момент написания этой статьи только PostGres и SqlLite 3 были "
"протестированы как \n"
"серверные части CL-SQL. "

#: in_ed/ElephantUserManual.html:2684
msgctxt "in_ed/ElephantUserManual.html:2684"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2686
msgctxt "in_ed/ElephantUserManual.html:2686"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2688
msgctxt "in_ed/ElephantUserManual.html:2688"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2695
msgid ""
"<hr>\n"
"<a name=\"CL-SQL-Example\"></a>\n"
"<a name=\"CL_002dSQL-Example\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Elephant-on-Windows"
"\">Elephant on Windows</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#CL_002dSQL\">CL-"
"SQL</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2697
msgctxt "in_ed/ElephantUserManual.html:2697"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2700
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.8 CL-SQL Example</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.8 Пример CL-SQL</h3>"

#: in_ed/ElephantUserManual.html:2703
msgid "<p>To set up a PostGres based back end, you should:"
msgstr "<p>Чтобы настроить серверную часть на основе PostGres, вам необходимо"

#: in_ed/ElephantUserManual.html:2705
msgctxt "in_ed/ElephantUserManual.html:2705"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2711
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Install postgres and make sure postmaster is running. \n"
"Postgres may be installed on your system; you may be able to use a\n"
"package manager to install it, or you can install it from the\n"
"PostgresSQL site directly (http://www.postgresql.org/)."
msgstr ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Установите postgres и убедитесь, что postmaster запущен. Postgres может "
"быть \n"
"установлен в вашей системе; вы можете использовать менеджер пакетов для его "
"установки \n"
"или установить его напрямую с сайта PostgresSQL (http://www.postgresql.org/)."

#: in_ed/ElephantUserManual.html:2715
msgid ""
"     </li><li>Create a database called test and set its permissions\n"
"to be reached by whatever connection specification you intend to use. \n"
"The tests use:"
msgstr ""
"     </li><li>Создайте базу данных под названием «test» и установите для "
"нее \n"
"разрешения, которые будут доступны для любой спецификации соединения, "
"которую \n"
"вы собираетесь использовать. В тестах используются: "

#: in_ed/ElephantUserManual.html:2719
msgid ""
"     <pre class=\"lisp\">          (defvar *testpg-path*\n"
"          '(:postgreql \"localhost.localdomain\" \"test\" \"postgres\" "
"\"\"))\n"
"     </pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2725
msgid ""
"<p>which means that connections must be allowed to the database test, user "
"postgres,\n"
"no password, connected from the same machine localhost.localdomain. \n"
"(This would be changed to something more secure in a real application.) \n"
"Typically you edit the file : pg_hba.conf to enable various kinds of "
"connections\n"
"in postgres."
msgstr ""
"<p>Это означает, что должны быть разрешены соединения с тестовой базой "
"данных, \n"
"пользователь «postgres», без пароля, подключенный с той же машины «localhost."
"localdomain». \n"
"(В реальном приложении это могло бы быть изменено на что-то более "
"безопасное.) Обычно \n"
"вы редактируете файл: pg_hba.conf, чтобы разрешить различные виды соединений "
"в postgres."

#: in_ed/ElephantUserManual.html:2727
msgctxt "in_ed/ElephantUserManual.html:2727"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2729
msgid ""
"</li><li>Be sure to enable socket connection to postgres when you invoke the "
"postmaster."
msgstr ""
"</li><li>Обязательно включите сокетное соединение с postgres, когда вы "
"вызываете postmaster."

#: in_ed/ElephantUserManual.html:2732
msgid ""
"     </li><li>Test that you can connect to the database with these "
"credentials by running:\n"
"<code> psql -h 127.0.0.1 -U postgres test</code> before you attempt to "
"connect with Elephant."
msgstr ""
"     </li><li>Убедитесь, что вы можете подключиться к базе данных с этими "
"учетными данными,\n"
"запустив: <code> psql -h 127.0.0.1 -U postgres test</code>, прежде чем "
"пытаться подключиться \n"
"к Elephant."

#: in_ed/ElephantUserManual.html:2734
msgctxt "in_ed/ElephantUserManual.html:2734"
msgid "        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:2739
msgid ""
"<p>Furthermore, you must grant practically all creation/read/write "
"privileges\n"
"to the user postgres on this schema, so that it can construct the tables\n"
"it needs."
msgstr ""
"<p>Кроме того, вы должны предоставить пользователю postgres практически все "
"права \n"
"на создание/чтение/запись в этой схеме, чтобы он мог создавать необходимые "
"таблицы."

#: in_ed/ElephantUserManual.html:2741
msgctxt "in_ed/ElephantUserManual.html:2741"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2746
msgid ""
"<p>Upon first opening a CL-SQL based store controller, the tables, indexes,\n"
"sequences, and so on needed by the Elephant system will be created in the\n"
"schema named test automatically."
msgstr ""
"<p>При первом открытии контроллера хранилища на основе CL-SQL таблицы, "
"индексы, \n"
"последовательности и т. Д., Необходимые для системы Elephant, будут созданы "
"в \n"
"схеме с именем «test» автоматически. "

#: in_ed/ElephantUserManual.html:2748
msgctxt "in_ed/ElephantUserManual.html:2748"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2750
msgctxt "in_ed/ElephantUserManual.html:2750"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2752
msgctxt "in_ed/ElephantUserManual.html:2752"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2758
msgid ""
"<hr>\n"
"<a name=\"Elephant-on-Windows\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Test-Suites\">Test "
"Suites</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#CL_002dSQL-Example"
"\">CL-SQL Example</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2760
msgctxt "in_ed/ElephantUserManual.html:2760"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2763
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.9 Elephant on Windows</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.9 Elephant на Windows(кому надо тот переводит)</h3>"

#: in_ed/ElephantUserManual.html:2770
msgid ""
"<p>The build process on Windows currently only works with GCC under\n"
"Cygwin.  The process can be a bit tricky, so if it doesn't work out of\n"
"the box or you don't want to install cygwin, we recommend that you\n"
"download the DLLs from the Elephant website download page\n"
"(<a href=\"http://www.common-lisp.net/project/elephant/downloads."
"html'\">http://www.common-lisp.net/project/elephant/downloads.html'</a>)."
msgstr ""

#: in_ed/ElephantUserManual.html:2772
msgctxt "in_ed/ElephantUserManual.html:2772"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2778
msgid ""
"<p>Unpack the .zip file into the elephant root directory.  Ensure that\n"
"your <code>my-config.sexp</code> file configuration for Windows has\n"
"<code>:prebuilt-binaries</code> set to t so it will know to look in\n"
"the elephant root during the asdf loading process."
msgstr ""

#: in_ed/ElephantUserManual.html:2780
msgctxt "in_ed/ElephantUserManual.html:2780"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2785
msgid ""
"<p>For Berkeley DB users we recommend downloading the Windows binary\n"
"distribution of Berkeley DB 4.5 to minimize any potential linking\n"
"issues."
msgstr ""

#: in_ed/ElephantUserManual.html:2787
msgctxt "in_ed/ElephantUserManual.html:2787"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2789
msgctxt "in_ed/ElephantUserManual.html:2789"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2791
msgctxt "in_ed/ElephantUserManual.html:2791"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2797
msgid ""
"<hr>\n"
"<a name=\"Test-Suites\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Documentation"
"\">Documentation</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Elephant-on-"
"Windows\">Elephant on Windows</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2799
msgctxt "in_ed/ElephantUserManual.html:2799"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2802
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.10 Test Suites</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.10 Наборы(сюиты) тестов</h3>"

#: in_ed/ElephantUserManual.html:2806
msgid ""
"<p>Elephant has matured quite a bit over the past year or two. \n"
"Hopefully, it will work out-of-the-box for you."
msgstr ""
"<p>Elephant немного повзрослел за последние год или два. \n"
"Надеюсь, он будет работать \"из коробки\" для вас\n"

#: in_ed/ElephantUserManual.html:2808
msgctxt "in_ed/ElephantUserManual.html:2808"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2817
msgid ""
"<p>However, if you are using an LISP implementation different than the\n"
"ones on which it is developed and maintained (see <a href=\"#Requirements"
"\">Requirements</a>) or\n"
"you have a problem that you think may be a bug, you may want to run\n"
"the test suites.  If you report a bug, we will ask you to run these\n"
"tests and report the output.  Running them when you first install the\n"
"system may give you a sense of confidence and understanding that makes\n"
"it worth the trouble."
msgstr ""
"<p>Однако, если вы используете реализацию LISP, отличную от той, на которой "
"он \n"
"разработан и поддерживается (см. <a href=\"#Requirements\">Требования</a>), "
"или если у вас \n"
"есть проблема, которая, по вашему мнению, может быть ошибкой, вы можете "
"захотеть запустить \n"
"наборы тестов. Если вы сообщите об ошибке, мы попросим вас запустить эти "
"тесты и сообщить о\n"
"результатах. Их запуск при первой установке системы может дать вам чувство "
"уверенности и \n"
"понимания, что стоит потраченных усилий."

#: in_ed/ElephantUserManual.html:2819
msgctxt "in_ed/ElephantUserManual.html:2819"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2825
msgid ""
"<p>There are three files that execute the tests.  You should choose\n"
"one as a starting point based on what backend(s) you are using. \n"
"If using BerekeleyDB, use\n"
"</p>"
msgstr ""
"<p>Есть три файла, в которых выполняются тесты. Вы должны выбрать один из "
"них \n"
"в качестве отправной точки в зависимости от того, какой бэкэнд(ы) вы "
"используете.\n"
"Если вы используете BerekeleyDB, используйте \n"
"</p>"

#: in_ed/ElephantUserManual.html:2828
msgid ""
"<pre class=\"lisp\">     BerkeleyDB-tests.lisp\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2831
msgid ""
"<p>If using both, use both of the above and also use:\n"
"</p>"
msgstr ""
"<p>Если вы используете оба, используйте оба из вышеперечисленных, а также "
"используйте: \n"
"</p>"

#: in_ed/ElephantUserManual.html:2834
msgid ""
"<pre class=\"lisp\">     MigrationTests.lisp\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2838
msgid ""
"<p>The text of this file is included here to give the\n"
"casual reader an idea of how elepant test can be run in general:\n"
"</p>"
msgstr ""
"<p>Текст этого файла включен сюда, чтобы дать обычному читателю "
"представление о том, \n"
"как в целом можно запустить тесты для elepant: \n"
"</p>"

#: in_ed/ElephantUserManual.html:2845
msgid ""
"<pre class=\"lisp\">     ;; If you are only using one back-end, you may "
"prefer:\n"
"     ;; SQLDB-test.lisp or BerkeleyDB-tests.lisp\n"
"     (asdf:operate 'asdf:load-op :elephant)\n"
"     (asdf:operate 'asdf:load-op :ele-clsql)\n"
"     (asdf:operate 'asdf:load-op :ele-bdb)\n"
"     (asdf:operate 'asdf:load-op :ele-sqlite3)"
msgstr ""

#: in_ed/ElephantUserManual.html:2847
msgid "     (asdf:operate 'asdf:load-op :elephant-tests)"
msgstr ""

#: in_ed/ElephantUserManual.html:2849
msgid "     (in-package \"ELEPHANT-TESTS\")"
msgstr ""

#: in_ed/ElephantUserManual.html:2853
msgid ""
"     ;; Test Postgres backend\n"
"     (setq *default-spec* *testpg-spec*)\n"
"     (do-backend-tests)"
msgstr ""

#: in_ed/ElephantUserManual.html:2857
msgid ""
"     ;; Test BDB backend\n"
"     (setq *default-spec* *testbdb-spec*)\n"
"     (do-backend-tests)"
msgstr ""

#: in_ed/ElephantUserManual.html:2861
msgid ""
"     ;; Test SQLite 3\n"
"     (setq *default-spec* *testsqlite3-spec*)\n"
"     (do-backend-tests)"
msgstr ""

#: in_ed/ElephantUserManual.html:2864
msgid ""
"     ;; Test a Migration of data from BDB to postgres\n"
"     (do-migration-tests *testbdb-spec* *testpg-spec*)"
msgstr ""

#: in_ed/ElephantUserManual.html:2869
msgid ""
"     ;; An example usage.\n"
"     (open-store *testpg-spec*)\n"
"     (add-to-root \"x1\" \"y1\")\n"
"     (get-from-root \"x1\")"
msgstr ""

#: in_ed/ElephantUserManual.html:2873
msgid ""
"     (add-to-root \"x2\" '(a 4 \"spud\"))\n"
"     (get-from-root \"x2\")\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2877
msgid ""
"<p>The appropriate test should execute for you with no errors. \n"
"If you get errors, you may wish to report it the\n"
"<code> elephant-devel at common-lisp.net</code> email list."
msgstr ""
"<p>Соответствующий тест должен пройти за вас без ошибок. Если вы получаете "
"ошибки, \n"
"вы можете сообщить об этом в списке рассылки <code> elephant-devel at common-"
"lisp.net</code>.\n"

#: in_ed/ElephantUserManual.html:2879
msgctxt "in_ed/ElephantUserManual.html:2879"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2884
msgid ""
"<p>Setting up SQLite3 is even easier.  Install SQLite3 (I had to use\n"
"the source rather than the binary install, in order to get the dynamic\n"
"libraries constructed.)"
msgstr ""
"<p>Настроить SQLite3 стало еще проще. Установите SQLite3 (мне пришлось "
"использовать \n"
"исходный код, а не бинарную установку, чтобы создать динамические "
"библиотеки).\n"

#: in_ed/ElephantUserManual.html:2886
msgctxt "in_ed/ElephantUserManual.html:2886"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2889
msgid "<p>An example use of SQLLite3 would be:"
msgstr "<p>Пример использования SQLLite3: "

#: in_ed/ElephantUserManual.html:2891
msgctxt "in_ed/ElephantUserManual.html:2891"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2899
msgid ""
"<pre class=\"lisp\">     (asdf:operate 'asdf:load-op :elephant)\n"
"     (asdf:operate 'asdf:load-op :ele-clsql)\n"
"     (asdf:operate 'asdf:load-op :ele-sqlite3)\n"
"     (in-package \"ELEPHANT-TESTS\")\n"
"     (setq *test-path-primary* '(:sqlite3 \"testdb\"))\n"
"     (do-all-tests-spec *test-path-primary*)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2902
msgid ""
"<p>The file RUNTESTS.lisp, although possibly not exactly what you want,\n"
"contains useful example code."
msgstr ""
"<p>Файл RUNTESTS.lisp, хотя, возможно, и не совсем то, что вам нужно, \n"
"содержит полезный пример кода.\n"

#: in_ed/ElephantUserManual.html:2904
msgctxt "in_ed/ElephantUserManual.html:2904"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2908
msgid ""
"<p>You can of course migrate between the three currently supported "
"repository\n"
"strategies in any combination: BDB, Postgresql, and SQLite3."
msgstr ""
"<p>Конечно, вы можете переходить между тремя поддерживаемыми в настоящее \n"
"время стратегиями репозитория в любой комбинации: BDB, Postgresql и SQLite3."

#: in_ed/ElephantUserManual.html:2910
msgctxt "in_ed/ElephantUserManual.html:2910"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2915
msgid ""
"<p>In all probability, other relational datbases would be very easy to\n"
"support but have not yet been tested.  The basic pattern of\n"
"the path specifiers is (cons clsqal-database-type-symbol (normal-clsql-"
"connection-specifier))."
msgstr ""
"<p>По всей вероятности, другие реляционные базы данных было бы очень легко "
"поддерживать, \n"
"но они еще не протестированы. Базовый шаблон спецификаторов «path/пути» "
"следующий \n"
"(cons clsqal-database-type-symbol (normal-clsql-connection-specifier))."

#: in_ed/ElephantUserManual.html:2917
msgctxt "in_ed/ElephantUserManual.html:2917"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2919
msgctxt "in_ed/ElephantUserManual.html:2919"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2921
msgctxt "in_ed/ElephantUserManual.html:2921"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2926
msgid ""
"<hr>\n"
"<a name=\"Documentation\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Test-Suites"
"\">Test Suites</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Installation\">Installation</"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2928
msgctxt "in_ed/ElephantUserManual.html:2928"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2931
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.11 Documentation</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">3.11 Документация </h3>"

#: in_ed/ElephantUserManual.html:2936
msgid ""
"<p>If you are getting the documentation as a released tar file, you will\n"
"probably find the documenation in .html or .pdf form in the release,\n"
"or can find it at the Elephant website."
msgstr ""
"<p>Если вы получаете документацию в виде выпущенного tar-файла, вы, "
"вероятно, \n"
"найдете документацию в форме .html или .pdf в выпуске или можете найти ее "
"на \n"
"веб-сайте Elephant.\n"

#: in_ed/ElephantUserManual.html:2938
msgctxt "in_ed/ElephantUserManual.html:2938"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2943
msgid ""
"<p>If you want to compile the documentation youself, for example, if you\n"
"can think of a way to improve this manual, then you will do something\n"
"similar to this in a shell or command-line prompt:"
msgstr ""
"<p>Если вы хотите скомпилировать документацию самостоятельно, например, \n"
"если вы можете придумать способ улучшить это руководство, вы сделаете \n"
"что-то подобное в оболочке или в приглашении командной строки: "

#: in_ed/ElephantUserManual.html:2945
msgctxt "in_ed/ElephantUserManual.html:2945"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2950
msgid ""
"<pre class=\"lisp\">     cd doc\n"
"     make\n"
"     make pdf\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:2955
msgid ""
"<p>This process will populate the ./includes directory with\n"
"references automatically extracted from the list code.  Currently this\n"
"docstring extraction process relies on SBCL, but with minor\n"
"modifications the scripts should work with other lisp environemnts."
msgstr ""
"<p>Этот процесс заполнит каталог «./includes» ссылками, автоматически "
"извлеченными \n"
"из кода списка. В настоящее время этот процесс извлечения строки "
"документации основан \n"
"на SBCL, но с небольшими изменениями скрипты должны работать с другими "
"средами Lisp.\n"

#: in_ed/ElephantUserManual.html:2957
msgctxt "in_ed/ElephantUserManual.html:2957"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2963
msgid ""
"<p>The Makefile will then compile the texinfo documentation source into\n"
"an HTML file and a PDF file which will be left in the doc/ directory. \n"
"An info style HTML tree is also created in the doc/elephant directory. \n"
"This tree contains one node per HTML file."
msgstr ""
"<p>Makefile затем скомпилирует исходный текст документации texinfo в файл "
"HTML \n"
"и файл PDF, который останется в каталоге «doc/». HTML-дерево info стиля "
"также \n"
"создается в каталоге «doc/elephant». Это дерево содержит по одному узлу на \n"
"каждый HTML-файл."

#: in_ed/ElephantUserManual.html:2965
msgctxt "in_ed/ElephantUserManual.html:2965"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2970
msgid ""
"<p>Don't edit anything in the doc/elephant directory or the\n"
"doc/includes directories, as everything in these directories is\n"
"generated.  Instead, edit the .texinfo files in the doc directory."
msgstr ""
"<p>Не редактируйте ничего в каталогах «doc/elephant» или «doc/includes», \n"
"так как все в этих каталогах создается. Вместо этого отредактируйте файлы \n"
"«.texinfo» в каталоге doc. "

#: in_ed/ElephantUserManual.html:2973
msgctxt "in_ed/ElephantUserManual.html:2973"
msgid ""
"<!-- *-texinfo-*- -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2975
msgctxt "in_ed/ElephantUserManual.html:2975"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:2977
msgctxt "in_ed/ElephantUserManual.html:2977"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:2983
msgid ""
"<hr>\n"
"<a name=\"User-Guide\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#User-API-Reference\">User "
"API Reference</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Installation"
"\">Installation</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2985
msgctxt "in_ed/ElephantUserManual.html:2985"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:2988
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">4 User Guide</h2>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">4 Руководство пользователя</h2>"

#: in_ed/ElephantUserManual.html:2991
msgid "<p><a name=\"index-User-Guide-5\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:2993
msgctxt "in_ed/ElephantUserManual.html:2993"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3016
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#The-Store-Controller\">The Store Controller</"
"a>:  Behind the curtain. \n"
"</li><li><a accesskey=\"2\" href=\"#Serialization-details\">Serialization "
"details</a>:  The devil hides in the details. \n"
"</li><li><a accesskey=\"3\" href=\"#Persistent-Classes-and-Objects"
"\">Persistent Classes and Objects</a>:  All the dirt on persistent "
"objects. \n"
"</li><li><a accesskey=\"4\" href=\"#Class-Indices\">Class Indices</a>:  In-"
"depth discussion about indexing objects. \n"
"</li><li><a accesskey=\"5\" href=\"#Persistent-Sets\">Persistent Sets</a>:  "
"Using the persistent set collection. \n"
"</li><li><a accesskey=\"6\" href=\"#Persistent-BTrees\">Persistent BTrees</"
"a>:  Using the native btree collection. \n"
"</li><li><a accesskey=\"7\" href=\"#BTree-Cursors\">BTree Cursors</a>:  Low-"
"level access to BTrees. \n"
"</li><li><a accesskey=\"8\" href=\"#BTree-Indexing\">BTree Indexing</a>:  "
"Alternative ways to reference objects in btrees. \n"
"</li><li><a accesskey=\"9\" href=\"#Index-Cursors\">Index Cursors</a>:  Low-"
"level access to BTree indices. \n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">Multi-threaded "
"Applications</a>:  What considerations are required for safe multi-"
"threading\n"
"</li><li><a href=\"#Transaction-Details\">Transaction Details</a>:  Develop "
"a deeper understanding of transactions and avoid the pitfalls. \n"
"</li><li><a href=\"#Multi_002drepository-Operation\">Multi-repository "
"Operation</a>:  Specifying repositories. \n"
"</li><li><a href=\"#Multiple-Processes-and-Distributed-Applications"
"\">Multiple Processes and Distributed Applications</a>:  Can elephant be run "
"on multiple CPUs and multiple machines? \n"
"</li><li><a href=\"#Repository-Migration-and-Upgrade\">Repository Migration "
"and Upgrade</a>:  How to move objects from one repository to another. \n"
"</li><li><a href=\"#Performance-Tuning\">Performance Tuning</a>:  How to get "
"the most from Elephant. \n"
"</li><li><a href=\"#Garbage-Collection\">Garbage Collection</a>:  How to "
"recover storage and OIDs in long-lived repositories. \n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">Berkeley DB Data Store</a>:  "
"Commands and concerns specific to the :BDB data store\n"
"</li><li><a href=\"#CLSQL-Data-Store\">CLSQL Data Store</a>:  Commands and "
"concerns specific to the :CLSQL data store\n"
"</li><li><a href=\"#Postmodern-Data-Store\">Postmodern Data Store</a>\n"
"</li><li><a href=\"#Native-Lisp-Data-Store\">Native Lisp Data Store</a>\n"
"</li></ul>"
msgstr ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#The-Store-Controller\"> Контроллер хранилища</"
"a>:  за занавесом. \n"
"</li><li><a accesskey=\"2\" href=\"#Serialization-details\">Детали "
"сериализации</a>:   дьявол прячется в деталях.. \n"
"</li><li><a accesskey=\"3\" href=\"#Persistent-Classes-and-Objects"
"\">Постоянные классы и объекты: </a>:  вся грязь на постоянных объектах. \n"
"</li><li><a accesskey=\"4\" href=\"#Class-Indices\">Класс Индексы(Indices)</"
"a>:  подробное обсуждение индексирования объектов. \n"
"</li><li><a accesskey=\"5\" href=\"#Persistent-Sets\">Постоянные "
"наборы(Sets)</a>:   использование коллекции постоянных наборов. \n"
"</li><li><a accesskey=\"6\" href=\"#Persistent-BTrees\">Постоянные BTrees</"
"a>:   использование собственной(нативной) коллекции btree. \n"
"</li><li><a accesskey=\"7\" href=\"#BTree-Cursors\">Курсоры(Cursors) BTree</"
"a>:   низкоуровневый доступ к BTrees. \n"
"</li><li><a accesskey=\"8\" href=\"#BTree-Indexing\">Индексирование BTree</"
"a>:   альтернативные способы ссылаться на объекты в btrees. \n"
"</li><li><a accesskey=\"9\" href=\"#Index-Cursors\">Курсоры индекса</a>:   "
"низкоуровневый доступ к индексам BTree.\n"
"</li><li><a href=\"#Multi_002dthreaded-Applications\">Многопоточные "
"приложения</a>:   какие соображения необходимы для безопасной многопоточной "
"работы\n"
"</li><li><a href=\"#Transaction-Details\">Детали транзакции</a>:   более "
"глубокое понимание транзакций и избежание ловушек. \n"
"</li><li><a href=\"#Multi_002drepository-Operation\">Работа с несколькими "
"репозиториями</a>:   указание репозиториев. \n"
"</li><li><a href=\"#Multiple-Processes-and-Distributed-Applications"
"\">Множественные процессы и распределенные приложения</a>:   может ли "
"Elephant работать на нескольких процессорах и на нескольких машинах? \n"
"</li><li><a href=\"#Repository-Migration-and-Upgrade\">Миграция и обновление "
"репозитория</a>:   как перемещать объекты из одного репозитория в другой. \n"
"</li><li><a href=\"#Performance-Tuning\">Настройка производительности</a>:   "
"как получить максимальную отдачу от Elephant. \n"
"</li><li><a href=\"#Garbage-Collection\">Сборка мусора</a>:   как "
"восстановить хранилище и OID в долгоживущих репозиториях.  \n"
"</li><li><a href=\"#Berkeley-DB-Data-Store\">Хранилище данных Berkeley DB</"
"a>:   команды и проблемы, относящиеся к: хранилищу данных BDB\n"
"</li><li><a href=\"#CLSQL-Data-Store\">Хранилище данных CLSQL:</a>:   "
"команды и проблемы, относящиеся к хранилищу данных CLSQL\n"
"</li><li><a href=\"#Postmodern-Data-Store\">Постмодернистское хранилище "
"данных</a>\n"
"</li><li><a href=\"#Native-Lisp-Data-Store\">Собственное хранилище данных "
"Lisp </a>\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3018
msgctxt "in_ed/ElephantUserManual.html:3018"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:3020
msgctxt "in_ed/ElephantUserManual.html:3020"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3025
msgid ""
"<hr>\n"
"<a name=\"The-Store-Controller\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Serialization-details"
"\">Serialization details</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""
"<hr>\n"
"<a name=\"The-Store-Controller\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Serialization-details"
"\">Serialization details</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"

#: in_ed/ElephantUserManual.html:3027
msgctxt "in_ed/ElephantUserManual.html:3027"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:3030
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.1 The Store Controller</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.1 Контроллер Хранилища</h3>"

#: in_ed/ElephantUserManual.html:3041
msgid ""
"<p>An instance of the <code>store-controller</code> class mediates "
"interactions\n"
"between Lisp and a data store.  All elephant operations are performed\n"
"in the context of a store controller.  To be more specific, a data\n"
"store provides a subclass of <code>store-controller</code> specialized to\n"
"that data store.  Typically this object contains pointers to the disk\n"
"files, foreign memory regions and any other necessary bookkeeping\n"
"information to support Elephant operations such as slot writes and\n"
"btree operations.  The store also contains the root objects and other\n"
"bookeeping common to all data stores."
msgstr ""
"<p>Экземпляр класса <code>store-controller</code>(контроллера хранилища) "
"обеспечивает\n"
"взаимодействие между Lisp и хранилищем данных. Все операции слона "
"выполняются в контексте\n"
"контроллера хранилища. Чтобы быть более конкретным, хранилище данных "
"предоставляет подкласс\n"
"<code>store-controller</code>(контроллера хранилища), специализированный для "
"этого хранилища\n"
"данных. Обычно этот объект содержит указатели на файлы диска, области "
"внешней памяти и \n"
"любую другую необходимую бухгалтерскую информацию для поддержки операций "
"Elephant, таких как \n"
"запись в слоты и операции btree. Хранилище также содержит корневые объекты и "
"другую \n"
"бухгалтерию, общую для всех хранилищ данных."

#: in_ed/ElephantUserManual.html:3043
msgctxt "in_ed/ElephantUserManual.html:3043"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3048
msgid ""
"<p>To obtain a <code>store-controller</code> object, call the function\n"
"<code>open-store</code> with a store controller specification.  The current\n"
"data store specification formats are:"
msgstr ""
"<p>Чтобы получить объект <code>store-controller</code>, вызовите функцию \n"
"<code>open-store</code> со спецификацией контроллера хранилища. Текущие \n"
"форматы спецификации хранилища данных: "

#: in_ed/ElephantUserManual.html:3050
msgctxt "in_ed/ElephantUserManual.html:3050"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3055
msgid ""
"<ul>\n"
"<li>Berkeley DB: '(:BDB \"/path/to/datastore/directory/\")\n"
"</li><li>CLSQL: '(:CLSQL (&lt;sql-db-name&gt; &lt;sql-connect-command&gt;))\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3060
msgid ""
"<p>Valid CLSQL database tags for <code>&lt;sql-db-name&gt;</code> are\n"
"<code>:SQLITE</code> and <code>:POSTGRESQL</code>.  The <code>&lt;sql-"
"connect-command&gt;</code> is\n"
"what you would pass to CLSQL's <code>connect</code> command."
msgstr ""
"<p>Допустимые теги базы данных CLSQL для <code>&lt;sql-db-name&gt;</code> "
"<code>\n"
":SQLITE</code> и <code>:POSTGRESQL</code>. <code>&lt;sql-connect-command&gt;"
"</code> - это то, \n"
"что вы должны передать команде <code>connect</code>(подключения) CLSQL."

#: in_ed/ElephantUserManual.html:3062
msgctxt "in_ed/ElephantUserManual.html:3062"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3069
msgid ""
"<p>The open store function uses the first symbol in the specification\n"
"(i.e. :BDB or :CLSQL) to dispatch instance creation to the specified\n"
"data store which returns a specialized instance of\n"
"<code>store-controller</code>.  <code>open-store</code> then initializes the "
"store\n"
"using an internal call to <code>open-controller</code>."
msgstr ""
"<p>Функция открытия хранилища использует первый символ в спецификации "
"(например \n"
":BDB или :CLSQL) для отправки создания экземпляра в указанное хранилище "
"данных, \n"
"которое возвращает специализированный экземпляр <code>store-controller</"
"code>(контроллера\n"
" хранилища). Затем <code>open-store</code> инициализирует хранилище, "
"используя внутренний \n"
"вызов  <code>open-controller</code>."

#: in_ed/ElephantUserManual.html:3071
msgctxt "in_ed/ElephantUserManual.html:3071"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3077
msgid ""
"<p>The final step of <code>open-store</code> is to set the global variable\n"
"<code>*store-controller*</code>.  This special variable is used as a "
"default\n"
"value in the optional or keyword arguments to number of operations\n"
"such as:"
msgstr ""
"<p>Последний шаг <code>open-store</code> - установить глобальную "
"переменную \n"
"<code>*store-controller*</code>. Эта специальная переменная используется в "
"качестве \n"
"значения по умолчанию в необязательных аргументах или аргументах ключевого "
"слова \n"
"для ряда операций, таких как:"

#: in_ed/ElephantUserManual.html:3079
msgctxt "in_ed/ElephantUserManual.html:3079"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3085
msgid ""
"<ul>\n"
"<li><code>make-instance</code> for persistent objects\n"
"</li><li><code>get-from-root</code> and <code>add-to-root</code> for "
"accessing a store's root\n"
"</li><li><code>make-btree</code> for creating persistent index instances\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><code>make-instance</code>  для постоянных объектов\n"
"</li><li><code>get-from-root</code> и <code>add-to-root</code> для доступа к "
"корню хранилища\n"
"</li><li><code>make-btree</code> для создания постоянных экземпляров "
"индекса \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3091
msgid ""
"<p>Each of these functions also accepts an explicit store controller\n"
"argument for use in multiple store environments.  Normal applications\n"
"should only be aware that this global parameter is used.  For further\n"
"discussion of <code>*store-controller*</code> see <a href="
"\"#Multi_002drepository-Operation\">Multi-repository Operation</a>."
msgstr ""
"<p>Каждая из этих функций также принимает явный аргумент контроллер "
"хранилища \n"
"для использования в средах с несколькими хранилищами. Обычные приложения "
"должны \n"
"знать только об использовании этого глобального параметра. Для дальнейшего "
"обсуждения \n"
"<code>*store-controller*</code> см. <a href=\"#Multi_002drepository-Operation"
"\">Работа \n"
"с несколькими репозиториями</a>."

#: in_ed/ElephantUserManual.html:3093
msgctxt "in_ed/ElephantUserManual.html:3093"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3098
msgid ""
"<p>Additionally, <code>open-store</code> accepts data store specific "
"keyword\n"
"arguments.  For example, you can force recovery to be run on Berkeley\n"
"DB data stores:"
msgstr ""
"<p>Кроме того, <code>open-store</code>(открытие хранилища) принимает "
"аргументы \n"
"ключевого слова, определенные хранилищем данных. Например, вы можете "
"принудительно \n"
"запустить восстановление в хранилищах данных Berkeley DB: "

#: in_ed/ElephantUserManual.html:3100
msgctxt "in_ed/ElephantUserManual.html:3100"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3103
msgid ""
"<pre class=\"lisp\">     (open-store *my-spec* :recover t)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3106
msgid ""
"<p>The data store sections of the user guide (<a href=\"#Berkeley-DB-Data-"
"Store\">Berkeley DB Data Store</a> and <a href=\"#CLSQL-Data-Store\">CLSQL "
"Data Store</a>) list all the data-store specific\n"
"options to various elephant functions."
msgstr ""
"<p>В разделах руководства пользователя, посвященных хранилищам данных (\n"
"<a href=\"#Berkeley-DB-Data-Store\">Berkeley DB Data Store</a> и \n"
"<a href=\"#CLSQL-Data-Store\">CLSQL Data Store</a>), перечислены все "
"специфические параметры\n"
"хранилища данных для различных функций elephant.\n"

#: in_ed/ElephantUserManual.html:3108
msgctxt "in_ed/ElephantUserManual.html:3108"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3114
msgid ""
"<p>When you finish your application, <code>close-store</code> will close "
"the\n"
"store controller.  Failing to do this properly may lead to a need to\n"
"run recovery on the data store during the next session.  Again, see\n"
"the relevant data store sections for more detail."
msgstr ""
"<p>Когда вы закончите свое приложение, <code>close-store</code> закроет "
"контроллер хранилища.\n"
"Несоблюдение этого правила может привести к необходимости запустить "
"восстановление хранилища \n"
"данных во время следующего сеанса. Опять же, см. Соответствующие разделы "
"хранилища данных \n"
"для более подробной информации. "

#: in_ed/ElephantUserManual.html:3116
msgctxt "in_ed/ElephantUserManual.html:3116"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3118
msgctxt "in_ed/ElephantUserManual.html:3118"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:3120
msgctxt "in_ed/ElephantUserManual.html:3120"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3126
msgid ""
"<hr>\n"
"<a name=\"Serialization-details\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Classes-and-"
"Objects\">Persistent Classes and Objects</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#The-Store-"
"Controller\">The Store Controller</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:3128
msgctxt "in_ed/ElephantUserManual.html:3128"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:3131
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.2 Serialization details</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.2  Детали сериализации</h3>"

#: in_ed/ElephantUserManual.html:3144
msgid ""
"<p>There are consequences to trying to move values from lisp memory onto\n"
"disk in order to persist them.  The first consequence is that that\n"
"pointers cannot be guaranteed to be valid and so references to lisp\n"
"objects cannot be maintained.  This is very similar to the problems\n"
"with passing references in foreign function interfaces.  The second,\n"
"and more frustrating limitation is that lisp operations that commit\n"
"side effects on aggregate objects, such as objects, arrays, etc,\n"
"cannot be trapped and replicated on the disk representation.  This\n"
"leads up to a very important consequence: all lisp objects are stored\n"
"by <em>value</em>.  This policy has a number of consequences which are\n"
"detailed below."
msgstr ""
"<p>Есть последствия попытки переместить значения из памяти lisp на диск, \n"
"чтобы сохранить их. Первое следствие заключается в том, что нельзя "
"гарантировать \n"
"действительность указателей, и поэтому ссылки на объекты lisp не могут "
"поддерживаться. \n"
"Это очень похоже на проблемы с передачей ссылок в интерфейсах внешних "
"функций. \n"
"Второе и более неприятное ограничение заключается в том, что операции "
"lisp, \n"
"которые фиксируют побочные эффекты для агрегированных объектов, таких как "
"объекты, \n"
"массивы и т. Д., Не могут быть захвачены и реплицированы на дисковое "
"представление. \n"
"Это приводит к очень важному следствию: все объекты lisp хранятся по "
"<em>значению</em>. \n"
"Эта политика имеет ряд последствий, которые подробно описаны ниже. "

#: in_ed/ElephantUserManual.html:3146
msgctxt "in_ed/ElephantUserManual.html:3146"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3148
msgid "<h4 class=\"subsection\">4.2.1 Restrictions of Store-by-Value</h4>"
msgstr ""
"<h4 class=\"subsection\">4.2.1  Ограничения Store-by-Value(сохранения по "
"значению)</h4>"

#: in_ed/ElephantUserManual.html:3155
msgid ""
"     <ol type=\"1\" start=\"1\">\n"
"<li><strong>Lisp identity can't be preserved</strong>. \n"
"      Since this is a store which persists across invocations of Lisp,\n"
"this probably doesn't even make sense.  However if you get an object\n"
"from the index, store it to a lisp variable, then get it again - they\n"
"will not be eq:"
msgstr ""
"     <ol type=\"1\" start=\"1\">\n"
"<li><strong>Идентичность Lisp не может быть сохранена</strong>. \n"
"      Поскольку это хранилище, которое сохраняется при вызовах Lisp, "
"вероятно, \n"
"это даже не имеет смысла. Однако, если вы получите объект из индекса, "
"сохраните его \n"
"в переменной lisp, а затем получите снова - они не будут eq: "

#: in_ed/ElephantUserManual.html:3171
msgid ""
"     <pre class=\"lisp\">          (setq foo (cons nil nil))\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my key\" foo)\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my other key\" foo)\n"
"          =&gt; (NIL)\n"
"          (eq (get-from-root \"my key\")\n"
"                (get-from-root \"my other key\"))\n"
"          =&gt; NIL\n"
"     </pre>\n"
"     </li><li><strong>Nested aggregates are serialized recursively into a "
"single buffer</strong>. \n"
"If you store an set of objects in a hash table you try to store a hash\n"
"table, all of those objects will get stored in one large binary buffer\n"
"with the hash keys.  This is true for all aggregates that can store\n"
"type T (cons, array, standard object, etc)."
msgstr ""
"     <pre class=\"lisp\">          (setq foo (cons nil nil))\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my key\" foo)\n"
"          =&gt; (NIL)\n"
"          (add-to-root \"my other key\" foo)\n"
"          =&gt; (NIL)\n"
"          (eq (get-from-root \"my key\")\n"
"                (get-from-root \"my other key\"))\n"
"          =&gt; NIL\n"
"     </pre>\n"
"     </li><li><strong>Вложенные агрегаты рекурсивно сериализуются в один "
"буфер</strong>. \n"
"Если вы храните набор объектов в хеш-таблице, вы пытаетесь сохранить хеш-"
"таблицу, \n"
"все эти объекты будут храниться в одном большом двоичном буфере с хеш-"
"ключами. \n"
"Это верно для всех агрегатов, которые могут хранить тип T (cons, массив, \n"
"стандартный объект и т. Д.)."

#: in_ed/ElephantUserManual.html:3181
msgid ""
"     </li><li><strong>Circular References</strong>. \n"
"One benefit provided by the serializer is that the recursive\n"
"serialization process does not lead to infinite loops when they\n"
"encounter circular references among aggregate types.  It accomplishes\n"
"this by assigning an ID to any non-atomic object and keeping a mapping\n"
"between previously serialized objects and these ids.  This same\n"
"mapping is used to reconstruct references in lisp memory on\n"
"deserialization such that the original structure is properly\n"
"reproduced."
msgstr ""
"     </li><li><strong>Циркулярные(замыкающие список в кольцо) ссылки</"
"strong>. \n"
"Одно из преимуществ сериализатора заключается в том, что процесс рекурсивной "
"сериализации \n"
"не приводит к бесконечным циклам при обнаружении циклических ссылок между "
"агрегатными типами. \n"
"Это достигается путем присвоения идентификатора любому неатомарному объекту "
"и сохранения\n"
"сопоставления между ранее сериализованными объектами и этими "
"идентификаторами. Это же \n"
"отображение используется для восстановления ссылок в памяти lisp при "
"десериализации, \n"
"так что исходная структура воспроизводится должным образом. "

#: in_ed/ElephantUserManual.html:3195
msgid ""
"     </li><li><strong>Storage limitations</strong>. \n"
"The serializer writes sequentially into a contiguous foreign byte\n"
"array before passing that array to a given data store's API.  There\n"
"are practical limits to the size of the foreign buffer that lisp can\n"
"allocate (usually somewhere on the order of 10-100MB due to address\n"
"space fragmentation).  Moreoever, most data stores will have a\n"
"practical limit to the size of a transaction or the size of key or\n"
"value they will store.  Either of these considerations should\n"
"encourage you to plan to limit the size of objects that you serialize\n"
"to disk.  A good rule of thumb is to stay under a handful of\n"
"megabytes.  We have successfully serialized arrays over 100MB in the\n"
"past, but have not tested the robustness of these large values over\n"
"time."
msgstr ""
"     </li><li><strong>Ограничения по хранению</strong>. \n"
"Сериализатор последовательно записывает в непрерывный внешний массив байтов "
"перед \n"
"передачей этого массива в API данного хранилища данных. Существуют "
"практические ограничения \n"
"на размер внешнего буфера, который может выделить Lisp (обычно где-то "
"порядка 10–100 МБ \n"
"из-за фрагментации адресного пространства). Более того, у большинства "
"хранилищ данных \n"
"будет практический предел размера транзакции или размера ключа или значения, "
"которое они \n"
"будут хранить. Любое из этих соображений должно побудить вас спланировать "
"ограничение \n"
"размера объектов, сериализуемых на диск. Хорошее практическое правило - не "
"превышать \n"
"нескольких мегабайт. В прошлом мы успешно сериализовали массивы размером "
"более 100 МБ, \n"
"но не проверяли устойчивость этих больших значений с течением времени. "

#: in_ed/ElephantUserManual.html:3197
msgctxt "in_ed/ElephantUserManual.html:3197"
msgid "     </li><li><strong>Mutated substructure does not persist</strong>."
msgstr ""
"     </li><li><strong>Мутировавшая субструктура не сохраняется. </strong>."

#: in_ed/ElephantUserManual.html:3203
msgctxt "in_ed/ElephantUserManual.html:3203"
msgid ""
"     <pre class=\"lisp\">          (setf (car foo) T)\n"
"          =&gt; T\n"
"          (get-from-root \"my key\")\n"
"          =&gt; (NIL)\n"
"     </pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3209
msgid ""
"<p>This will affect all aggregate types: objects, conses, hash-tables, et\n"
"cetera.  (You can of course manually re-store the cons.)  In this\n"
"sense elephant does not automatically provide persistent collections. \n"
"If you want to persist every access, you have to use Persistent Sets\n"
"(see <a href=\"#Persistent-Sets\">Persistent Sets</a>) or BTrees (see <a "
"href=\"#Persistent-BTrees\">Persistent BTrees</a>)."
msgstr ""
"<p>Это повлияет на все типы агрегатов: объекты, conses, хеш-таблицы и так "
"далее. \n"
"(Вы, конечно, можете вручную повторно сохранить списки(conses).) В этом "
"смысле elephant не\n"
"предоставляет постоянные коллекции автоматически. Если вы хотите сохранить "
"каждый доступ, \n"
"вы должны использовать постоянные наборы (см. <a href=\"#Persistent-Sets"
"\">Постоянные \n"
"Sets(наборы)</a>) или BTrees (см. <a href=\"#Persistent-BTrees\">Постоянные "
"BTrees</a>)."

#: in_ed/ElephantUserManual.html:3211
msgctxt "in_ed/ElephantUserManual.html:3211"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3220
msgctxt "in_ed/ElephantUserManual.html:3220"
msgid ""
"</li><li><strong>Serialization and deserialization can be costly</strong>. "
"While\n"
"serialization is pretty fast, but it is still expensive to store large\n"
"objects wholesale.  Also, since object identity is impossible to\n"
"maintain, deserialization must re-cons or re-allocate the entire\n"
"object every time increasing the number of GCs the system does.  This\n"
"eager allocation is contrary to how most people want to use a\n"
"database: one of the reasons to use a database is if your objects\n"
"can't fit into main memory all at once."
msgstr ""
"</li><li><strong>Сериализация и десериализация могут быть дорогостоящими</"
"strong>. \n"
"Хотя сериализация происходит довольно быстро, но хранить большие объекты "
"оптом все равно \n"
"дорого. Кроме того, поскольку идентичность объекта невозможно поддерживать, "
"десериализация \n"
"должна повторно согласовывать или перераспределять весь объект каждый раз, "
"когда \n"
"увеличивается количество сборщиков мусора, которые выполняет система. Это "
"стремительное\n"
"распределение противоречит тому, как большинство людей хотят использовать "
"базу данных: \n"
"одна из причин использования базы данных - это то, что ваши объекты не могут "
"поместиться \n"
"в основную память сразу. "

#: in_ed/ElephantUserManual.html:3224
msgid ""
"     </li><li><strong>Merge-conflicts in heavily multi-process/threaded "
"situations</strong>. \n"
"This is the common read-modify-write problem in all databases.  We will "
"talk\n"
"more about this in the <a href=\"#Transaction-Details\">Transaction Details</"
"a> section."
msgstr ""
"     </li><li><strong>Конфликты слияния в сильно многопроцессорных/"
"многопоточных ситуациях</strong>. \n"
"Это общая проблема чтения-изменения-записи во всех базах данных. Подробнее "
"об этом мы \n"
"поговорим в разделе <a href=\"#Transaction-Details\">Детали транзакции</a>."

#: in_ed/ElephantUserManual.html:3230
msgid ""
"     </li><li><strong>Byte Ordering</strong>. \n"
"      The primitive elements such as integers are written to disk in\n"
"the native byte ordering of the machine on which the lisp runs.  This\n"
"means that little endian machines cannot read values written by big\n"
"endian machines and vice a versa."
msgstr ""
"     </li><li><strong>Порядок байтов</strong>. \n"
"      Примитивные элементы, такие как целые числа, записываются на диск в "
"собственном \n"
"порядке байтов машины, на которой выполняется lisp. Это означает, что машины "
"с прямым \n"
"порядком(little endian) байтов не могут читать значения, записанные машинами "
"с \n"
"обратным порядком(big endian) байтов, и наоборот."

#: in_ed/ElephantUserManual.html:3248
msgid ""
"     </li><li><strong>Unicode codes and Serialized Strings</strong>. \n"
"      The characters and strings stored to disk can store and recover\n"
"lisp character codes that implement unicode, but the character maps\n"
"are the lisp character maps (produced by <code>char-code</code>) and not\n"
"strict unicode codes so lisps may not be able to interoperably read\n"
"characters unless they have identical character code maps for the\n"
"character sets you are reading and writing.  All standard ASCII\n"
"strings should be portable.  Here is what we know about specific\n"
"lisps, but this should not be taken as gospel.\n"
"          <ul>\n"
"<li>SBCL: In versions with the :sb-unicode feature (after 0.8.17) <code>char-"
"code</code>\n"
"            produces proper Unicode codes\n"
"</li><li>Allegro: In the interational version, <code>char-code</code> "
"produces proper Unicode codes for codes &lt; 2^16\n"
"</li><li>OpenMCL: OpenMCL 1.1 supports unicode, we are unsure about earlier "
"versions\n"
"</li><li>Lispworks: Lispworks 5 does not, to our knowledge, produce proper "
"Unicode characters. \n"
"(<em>This can be fixed on request iff users ask for it and are willing to "
"pay the performance hit</em>)\n"
"</li></ul>"
msgstr ""
"     </li><li><strong>Коды Юникода и сериализованные строки</strong>. \n"
"      Символьные знаки и строки, хранящиеся на диске, могут хранить и "
"восстанавливать \n"
"коды символьных знаков lisp, которые реализуют unicode, но карты символьных "
"знаков - \n"
"это карты символьных знаков lisp (созданные с помощью <code>char-code</"
"code>), а \n"
"не строгие коды unicode, поэтому lisp может быть не в состоянии "
"взаимодействовать с \n"
"символьными знаками, если только они не имеют идентичные карты кодов "
"символьных знаков\n"
"для наборов символьных знаков, которые вы читаете и пишете. Все стандартные "
"строки ASCII \n"
"должны быть переносимыми. Вот что мы знаем о конкретных лиспах, но это не "
"следует \n"
"воспринимать как евангелие.\n"
"          <ul>\n"
"<li>SBCL: в версиях с функцией :sb-unicode (после 0.8.17) <code>char-code</"
"code> создает\n"
"правильные коды Unicode\n"
"</li><li>Allegro: в интернациональной версии <code>char-code</code> создает "
"правильные коды\n"
"Unicode для кодов  &lt; 2^16\n"
"</li><li>OpenMCL: OpenMCL 1. поддерживает юникод, мы не уверены в более "
"ранних версиях\n"
"</li><li>Lispworks: Насколько нам известно, Lispworks 5 не производит "
"правильных символьных\n"
"знаков Unicode.  \n"
"(<em>Это может быть исправлено по запросу, если пользователи просят об этом "
"и готовы платить з\n"
"а снижение производительности</em>)\n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3250
msgid "     </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:3252
msgid "<h4 class=\"subsection\">4.2.2 Atomic Types</h4>"
msgstr "<h4 class=\"subsection\">4.2.2 Атомарные типы</h4>"

#: in_ed/ElephantUserManual.html:3259
msgid ""
"<p>Atomic types have no recursive substructure.  That is they cannot\n"
"contain arbitrary objects and are of a bounded size.  (Bignums are an\n"
"exception, but they have a predictable structure and cannot reference\n"
"or otherwise encapsulate other objects).  The following is a list of\n"
"atoms and a discussion of how they are serialized."
msgstr ""
"<p>Атомарные типы не имеют рекурсивной подструктуры. То есть они не могут \n"
"содержать произвольные объекты и имеют ограниченный размер. (Bignums "
"являются \n"
"исключением, но они имеют предсказуемую структуру и не могут ссылаться или "
"иным \n"
"образом инкапсулировать другие объекты). Ниже приводится список атомов и "
"обсуждение \n"
"того, как они сериализуются. "

#: in_ed/ElephantUserManual.html:3261
msgctxt "in_ed/ElephantUserManual.html:3261"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3315
msgid ""
"<ul>\n"
"<li><code>nil</code>:\n"
"      nil has it's own special tag in the serializer so it is easily\n"
"identifiable.  <code>nil</code> is an awkward value as it is also a "
"boolean. \n"
"The boolean value <code>t</code> is stored as the symbol 'T. \n"
"</li><li><strong>fixnums</strong>:\n"
"      The serializer will store both 32-bit and 64-bit fixnums.  Both\n"
"types of fixnums are readable by a 32-bit or 64-bit lisp, but 64-bit\n"
"fixnums are only written if the underlying lisp is supports fixnums\n"
"between 32 and 64 bits. \n"
"</li><li><strong>bignums</strong>:\n"
"      Bignums are broken into a sequence of fixnum-sized chunks and\n"
"assembled by masking words onto the bignum.  This is awfully\n"
"expensive, but it's always correct and fully portable. \n"
"</li><li><strong>small-float</strong>:\n"
"      Supported only on Lispworks 5 where type <code>small-float</code> is\n"
"not equivalent to type <code>single-float</code> as it is on all other\n"
"supported platforms.  Written to disk and deserialized as a single\n"
"float so any memory footprint savings of <code>small-float</code> is lost. \n"
"</li><li><strong>single-float</strong>:\n"
"      32-bit floating point numbers\n"
"</li><li><strong>double-float</strong>:\n"
"      64-bit floating point numbers\n"
"</li><li><strong>rational</strong>:\n"
"      A rational is merely a ratio of two integers stored as fixnums or "
"bignums. \n"
"</li><li><strong>complex</strong>:\n"
"      A complex is a pair of floating point values, rationals or integers. \n"
"</li><li><strong>char</strong>:\n"
"      Standalone chars are represented by their char-code and are\n"
"stored in 32-bit format to ensure that all lisps are stored correctly. \n"
"</li><li><strong>strings</strong>:\n"
"      Strings can be represented as 8, 16 or 32 bit sequences\n"
"depending on the character sizes used in the underlying lisp.  Because\n"
"strings can be such a large percentage of on-disk space, Elephant uses\n"
"a peculiar method of encoding strings.  Strings are converted from\n"
"their in-memory representation using <code>char-code</code>.  The size of\n"
"the first character dictates the word width used for encoding.  If a\n"
"character violates the word width, the string encoding is aborted and\n"
"the next larger width is chosen.  The rationale here is that many\n"
"strings consist of Latin characters with codes less than 256.  Strings\n"
"stored in other character sets tend to all be of codes &gt; 256. \n"
"Therefore it is likely that the first character will properly\n"
"determine the word size of the string.  (<em>On request, we can easily make\n"
"a configuration option to fix the word width for encoding</em>)\n"
"</li><li><strong>pathname</strong>:\n"
"      A pathname is merely the <code>namestring</code> of the path object\n"
"stored as a string.  The path object is reconstructed from the\n"
"namestring using <code>parse-namestring</code> during deserialization. \n"
"</li><li><strong>symbol</strong>:\n"
"      Symbols are stored as two strings, the package name and the symbol\n"
" name in that package.  When deserialized, the target package is \n"
"searched for and the symbol is interned in that package. \n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><code>nil</code>:\n"
"     nil имеет собственный специальный тег в сериализаторе, поэтому его "
"легко \n"
"идентифицировать. <code>nil</code> - неудобное значение, так как оно также "
"является логическим.\n"
"Логическое значение <code>t</code> сохраняется как символ 'T. \n"
"</li><li><strong>fixnums</strong>:\n"
"      сериализатор будет хранить как 32-битные, так и 64-битные "
"фиксированные числа. Оба \n"
"типа фиксированных номеров читаются 32-битным или 64-битным лиспом, но 64-"
"битные фиксированные\n"
"числа записываются только в том случае, если базовый лисп поддерживает "
"fixnums между \n"
"32 и 64 битами.\n"
"</li><li><strong>bignums</strong>:\n"
"      Bignum разбиваются на последовательность chunks(кусков) фиксированного "
"размера и \n"
"собираются путем маскировки слов на bignum. Это ужасно дорого, но всегда "
"правильно и \n"
"полностью портируемо. \n"
"</li><li><strong>small-float</strong>:\n"
"      поддерживается только в Lispworks 5, где тип <code>small-float</code> "
"не эквивалентен \n"
"типу <code>single-float</code>, как на всех других поддерживаемых "
"платформах. Записывается \n"
"на диск и десериализуется в виде одного числа с плавающей запятой, поэтому "
"любая экономия \n"
"памяти при использовании <code>small-float</code> теряется. \n"
"</li><li><strong>single-float</strong>:\n"
"      32-битные числа с плавающей запятой\n"
"</li><li><strong>double-float</strong>:\n"
"      64-битные числа с плавающей запятой\n"
"</li><li><strong>rational</strong>:\n"
"      рациональное - это просто отношение двух целых чисел, хранящихся как "
"fixnums \n"
"или bignums. \n"
"</li><li><strong>complex</strong>:\n"
"      комплексное число - это пара значений с плавающей запятой, "
"рациональных или целых чисел.\n"
"</li><li><strong>char</strong>:\n"
"      Автономные символьные числа представлены своим char-кодом и хранятся в "
"32-битном \n"
"формате, чтобы гарантировать, что все лиспы сохраняют правильно. \n"
"</li><li><strong>strings</strong>:\n"
"      строки могут быть представлены как 8-, 16- или 32-битные "
"последовательности в \n"
"зависимости от размеров символьных знаков, используемых в базовом lisp. "
"Поскольку строки \n"
"могут занимать такой большой процент дискового пространства, Elephant "
"использует особый метод\n"
"кодирования строк. Строки преобразуются из их представления в памяти с "
"помощью использования\n"
"<code>char-code</code>. Размер первого символьного знака определяет ширину "
"слова, используемую \n"
"для кодирования. Если символьный знак нарушает ширину слова, кодировка "
"строки прерывается и выбирается следующая большая ширина. Обоснованием здесь "
"является то, что многие строки состоят\n"
"из латинских символов с кодами меньше 256. Строки, хранящиеся в других "
"наборах знаков, \n"
"обычно имеют коды &gt; 256. Поэтому вполне вероятно, что первый символьный "
"знак правильно\n"
"определит размер слова в строке. (<em>По запросу мы можем легко сделать "
"опцию конфигурации, \n"
"чтобы исправить ширину слова для кодирования</em>)\n"
"</li><li><strong>pathname</strong>:\n"
"      имя пути - это просто <code>namestring</code>(строка имени) объекта "
"пути, хранящегося в\n"
"виде строки. Объект пути восстанавливается из строки имен(namestring) с "
"помощью \n"
"<code>parse-namestring</code> во время десериализации. \n"
"</li><li><strong>symbol</strong>:\n"
"      символы хранятся в виде двух строк, имени пакета и имени символа в "
"этом пакете. \n"
"При десериализации ищется целевой пакет, и символ интернируется в этом "
"пакете. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3317
msgid "<h4 class=\"subsection\">4.2.3 Aggregate Types</h4>"
msgstr "<h4 class=\"subsection\">4.2.3 Агрегатные типы</h4>"

#: in_ed/ElephantUserManual.html:3326
msgid ""
"<p>The next list are <em>aggregate</em> types, meaning that elements of\n"
"that type can contain references to elements of type <code>T</code>.  That\n"
"means, in theory, that storing an aggregate type to disk that refers\n"
"to other objects can copy every reachable object!  This is a direct\n"
"and dire consequence of the store-by-value restriction. \n"
"(see <a href=\"#Persistent-Classes-and-Objects\">Persistent Classes and "
"Objects</a> for how to design around the\n"
"store-by-value restriction)."
msgstr ""
"<p>Следующий список это  <em>агрегатные/aggregate</em> типы. Это означает, "
"что элементы\n"
"этого типа могут содержать ссылки на элементы типа <code>T</code>.  "
"Теоретически это\n"
"означает, что при сохранении агрегированного типа, который ссылается на "
"другие объекты, \n"
"на диск, можно скопировать любой достижимый объект!  Это прямое и ужасное "
"следствие\n"
"ограничения \"хранения по значению/store-by-value\". \n"
"(см. <a href=\"#Persistent-Classes-and-Objects\">Постоянные Классы и "
"Объекты</a>, чтобы узнать,\n"
"как спроектировать ограничение на хранение по значению)."

#: in_ed/ElephantUserManual.html:3328
msgctxt "in_ed/ElephantUserManual.html:3328"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3331
msgid "<p>This list describes how aggregates are handled by the serializer."
msgstr "<p>Этот список описывает, как агрегаты обрабатываются сериализатором."

#: in_ed/ElephantUserManual.html:3333
msgctxt "in_ed/ElephantUserManual.html:3333"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3369
msgid ""
"<ul>\n"
"<li><strong>cons</strong>:\n"
"      Cons is simply stored as a cons record containing two nested\n"
"elements.  Linear lists are not treated specially (i.e. no cdr-coding)\n"
"by the serializer. \n"
"</li><li><strong>array</strong>:\n"
"      Arrays are stored as sequences of nested, serialized elements. \n"
"The array parameters are also stored so that arrays with fill\n"
"pointers, adjustable arrays can be stored and reconstructed.  The only\n"
"arrays that cannot be reproduced are displaced arrays, which are\n"
"copied by value and reconstructed as standard arrays during\n"
"deserialization. \n"
"</li><li><strong>hash-table</strong>:\n"
"      Hash tables are stored as a sequence of key-value pairs, where\n"
"the key and value can be any serializable value.  On deserialization,\n"
"the reconstructed key and value quantities are written incrementally\n"
"into the hash table.  The hash table does remember it's test, rehash\n"
"size and threshold and it's total count.  The final size of the new\n"
"hash table is set to <code>(* (/ size reshash-threshold) rehash-size)</"
"code>. \n"
"</li><li><strong>struct</strong>:\n"
"      Structure objects are serialized using the metaprotocol.  Each\n"
"slot where the value is bound is serialized by serializing the slot\n"
"name and the value in sequence.  The underlying lisp must support the\n"
"<code>struct-constructor</code> method so that a new, empty instance of the\n"
"structure can be created and then populated by the stored keys and\n"
"values. \n"
"</li><li><strong>object</strong>:\n"
"      Instances of subclasses of standard-object are stored almost\n"
"identically to structs.  The type of the object is stored and the\n"
"object slots with bound values are serialized as slotname-value pairs. \n"
"To read an object of this type, the lisp image must have the class\n"
"defined and it must have at least the slots that are stored on disk. \n"
"There is no good method for schema evolution (redefining objects to\n"
"have less slots) of ordinary classes. \n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><strong>cons</strong>:\n"
"      Cons просто хранится как cons запись, содержащая два вложенных "
"элемента.\n"
"Линейные списки не обрабатываются сериализатором, как то специально (т.е. "
"без cdr-кодирования). \n"
"</li><li><strong>array</strong>:\n"
"      Массивы хранятся как последовательности вложенных сериализованных "
"элементов.\n"
"Параметры массива также сохраняются, так что массивы с указателями "
"заполнения, \n"
"регулируемые массивы могут быть сохранены и восстановлены.  Единственные "
"массивы,\n"
"которые не могут быть воспроизведены, - это смещенные(displaced) массивы, "
"которые\n"
"копируются по значению и восстанавливаются как стандартные массивы во время "
"десериалзации. \n"
"</li><li><strong>hash-table</strong>:\n"
"      Хеш-таблицы хранятся как последовательность пар ключ-значение, где "
"ключ и значение \n"
"могут быть любым сериализуемым значением. При десериализации восстановленные "
"значения ключа\n"
"и значения постепенно записываются в хеш-таблицу. Хеш-таблица запоминает "
"тест, размер повторного\n"
"хеширования(rehash size) и порог, а также общее количество.  Окончательный "
"размер новой \n"
"хеш-таблицы устанавливается в <code>(* (/ size reshash-threshold) rehash-"
"size)</code>. \n"
"</li><li><strong>struct</strong>:\n"
"      Объект структуры сериализуется с использованием метапротокола. Каждый "
"слот, к которому\n"
"привязано значение, сериализуется путем последовательной сериализации имени "
"слота и значения.\n"
"Базовый лисп должен поддерживать метод <code>struct-constructor</code>, "
"чтобы можно было\n"
"создать новый пустой экземпляр структуры и затем заполнить его сохраненными "
"ключами и\n"
"значениями. \n"
"</li><li><strong>object</strong>:\n"
"      Экземпляры подклассов стандартного объекта хранятся почти так же, как "
"и структуры.\n"
"Тип объекта сохраняется, а слоты объектов со связанными значениями "
"сериализуются как пары\n"
"имя-значение. Чтобы прочитать объект этого типа, в образе лисп должен быть "
"определен\n"
"класс, и в нем должны быть по крайней мере слоты, которые хранятся на диске. "
"Не существует\n"
"хорошего метода эволюции схемы(переопределения объектов, чтобы у них было "
"меньше слотов)\n"
"обычных классов. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3377
msgid ""
"<p>One final strategic consideration is to whether you plan on sharing the "
"binary\n"
"database between machines or between different lisp platforms on the\n"
"same machine.  This is almost possible today, but there are some\n"
"restrictions.  In the section <a href=\"#Repository-Migration-and-Upgrade"
"\">Repository Migration and Upgrade</a>\n"
"we will discuss possible ways of migrating an existing database across\n"
"platforms and lisps."
msgstr ""
"<p>Последнее стратегическое соображение заключается в том, планируете ли вы\n"
"совместное использование двоичной базы данных между машинами или между\n"
"разными платформами на одной машине. Сегодня это практически возможно, но\n"
"есть некоторые ограничения. В разделе <a href=\"#Repository-Migration-and-"
"Upgrade\">Миграция\n"
"и обновления репозитория</a>\n"
"мы обсудим возможные способы миграции существующей базы данных между "
"платформами и\n"
"лиспами."

#: in_ed/ElephantUserManual.html:3379
msgctxt "in_ed/ElephantUserManual.html:3379"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3381
msgctxt "in_ed/ElephantUserManual.html:3381"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:3383
msgctxt "in_ed/ElephantUserManual.html:3383"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3389
msgid ""
"<hr>\n"
"<a name=\"Persistent-Classes-and-Objects\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Class-Indices\">Class "
"Indices</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Serialization-"
"details\">Serialization details</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:3391
msgctxt "in_ed/ElephantUserManual.html:3391"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:3394
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.3 Persistent Classes and Objects</h3>"
msgstr ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.3 Постоянные классы и объекты</h3>"

#: in_ed/ElephantUserManual.html:3401
msgid ""
"<p>Persistent classes are instances of the <code>persistent-metaclass</"
"code>\n"
"metaclass.  All persistent classes keep track of which slots are\n"
"<code>:persistent</code>, <code>:transient</code> and/or <code>:indexed</"
"code> and are\n"
"used as specializers in the persistence meta-object protocols\n"
"(initialization of slots, slot-access, etc)."
msgstr ""
"<p>Постоянные классы - это экземпляры метакласса <code>persistent-metaclass</"
"code>.  \n"
"Все постоянные классы отслеживают, что представляют из себя слоты: <code>:"
"persistent</code>,\n"
"<code>:transient</code> и/или <code>:indexed</code> и используются в "
"качестве специализааций\n"
"в протоколах обеспечания постоянства мета-объектов(инициализация слотов, "
"доступ к слотам(slot-access) и т.д.)."

#: in_ed/ElephantUserManual.html:3403
msgctxt "in_ed/ElephantUserManual.html:3403"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3414
msgid ""
"<p>All persistent classes create objects that inherit from the\n"
"<code>persistent</code> class.  The <code>persistent</code> class provides "
"two\n"
"slots that contain a unique object identifier (oid) and a reference to\n"
"the <code>store-controller</code> specification they are associated with. \n"
"Persistent slots do not take up any storage space in memory, instead\n"
"the <code>persistent-metaclass</code> slot access protocol redirects slot\n"
"accesses into calls to the store controller.  Typically, the\n"
"underlying data store will then perform the necessary serialization,\n"
"deserialization to read and write data to disk."
msgstr ""
"<p>Все постоянные классы создают объекты, которые наследуются от\n"
"класса <code>persistent</code>(постоянного).  Класс <code>persistent</code>\n"
"предоставляет два слота, которые содержат уникальный идентификатор объекта - "
"(oid) \n"
"и ссылку на специфицированный  <code>store-controller</code>(контроллер "
"хранилища),\n"
"с которой они связаны. \n"
"Постоянные слоты не занимают места в памяти, вместо этого протокол доступа к "
"слотам\n"
"<code>persistent-metaclass</code>(постоянного метакласса) перенаправляет "
"доступ к слотам\n"
"в вызовы/обращения к контроллеру хранилища.  Обычно базовое хранилище данных "
"затем\n"
"выполняет необходимую сериализацию, десериализацию для чтения и записи "
"данных на диск."

#: in_ed/ElephantUserManual.html:3416
msgctxt "in_ed/ElephantUserManual.html:3416"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3425
msgid ""
"<p>When a reference to a <code>persistent</code> instance itself is written "
"to\n"
"the database, for example as a key or value in a <code>btree</code>, only\n"
"the unique ID and class of the instance is stored.  When read, a\n"
"persistent object instance is re-created (see below).  This means that\n"
"serialization of persistent objects is exceedingly cheap compared to\n"
"standard objects.  The subsection on instance creation below will\n"
"discuss the lifecycle of a persistent object in more detail."
msgstr ""
"<p>Когда ссылка на сам экземпляр <code>persistent</code> записывается в базу "
"данных,\n"
"например как ключи или значение в <code>btree</code>, сохраняется только\n"
"уникальный идентификатор(ID) и класс экземпляра. При чтении экземпляр "
"постоянного\n"
"объекта создается заново (см. ниже).  Это означает, что сериализация "
"постоянных объектов\n"
"чрезвычайно дешева по сравнению со стандартными объектами. В подразделе о\n"
"создании экземпляра ниже более подробно обсуждается жизненный цикл "
"постоянного объекта."

#: in_ed/ElephantUserManual.html:3427
msgctxt "in_ed/ElephantUserManual.html:3427"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3429
msgid "<h4 class=\"subsection\">4.3.1 Persistent Class Definition</h4>"
msgstr "<h4 class=\"subsection\">4.3.1 Определение постоянного класса</h4>"

#: in_ed/ElephantUserManual.html:3433
msgid ""
"<p>To create persistent classes, the user needs to specify the\n"
"<code>persistent-metaclass</code> to the class initarg <code>:metaclass</"
"code>."
msgstr ""
"<p>Чтобы создать постоянные классы, пользователю необходимо указать "
"постоянный \n"
"метакласс - <code>persistent-metaclass</code> для класса initarg <code>:"
"metaclass</code>."

#: in_ed/ElephantUserManual.html:3435
msgctxt "in_ed/ElephantUserManual.html:3435"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3440
msgid ""
"<pre class=\"lisp\">     (defclass my-pclass ()\n"
"        ((slot1 :accessor slot1 :initarg :slot1 :initform 1))\n"
"        (:metaclass persistent-metaclass))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3447
msgid ""
"<p>The only differences between the syntax of standard and persistent\n"
"class definitions is the ability to specify a slot storage policy and\n"
"an index policy.  Slot value storage policies are specified by a\n"
"boolean argument to the slot initargs <code>:persistent</code>,\n"
"<code>:transient</code> and <code>:indexed</code>.  Slots are <code>:"
"persistent</code>\n"
"and not <code>:indexed</code> by default."
msgstr ""
"<p>Единственное различие между синтаксисом определений классов стандартных "
"и \n"
"постоянных  - это возможность указать политику хранения слотов и политику "
"индекса. \n"
"Политики хранения значений слота задаются логическим аргументом для initargs "
"слота: \n"
"<code>:persistent</code>, <code>:transient</code> и <code>:indexed</code>. \n"
"Слоты:  по умолчанию <code>:persistent</code> и не <code>:indexed</code>."

#: in_ed/ElephantUserManual.html:3449
msgctxt "in_ed/ElephantUserManual.html:3449"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3453
msgid ""
"<p>The <code>defpclass</code> macro is provided as a convenience to hide "
"the\n"
"<code>:metaclass</code> slot option."
msgstr ""
"<p>Макрос <code>defpclass</code> предоставляется для удобства, чтобы "
"скрыть \n"
"параметр слота <code>:metaclass</code>. "

#: in_ed/ElephantUserManual.html:3455
msgctxt "in_ed/ElephantUserManual.html:3455"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3463
msgid ""
"<pre class=\"lisp\">     (defpclass my-pclass ()\n"
"        ((pslot1 :accessor pslot1 :initarg :pslot1 :initform 'one)\n"
"         (pslot2 :accessor pslot2 :initarg :pslot2 :initform 'two\n"
"                 :persistent t)\n"
"         (tslot1 :accessor tslot1 :initarg :tslot1 :initform 'three\n"
"                 :transient t)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3468
msgid ""
"<p>In the definition above the class <code>my-pclass</code> is an instance "
"of\n"
"the metaclass <code>persistent-metaclass</code>.  According to this\n"
"definition <code>pslot1</code> and <code>pslot2</code> are persistent while\n"
"<code>tslot1</code> is transient and stored in memory."
msgstr ""
"<p>В приведенном выше определении класс <code>my-pclass</code> является \n"
"экземпляром метакласса <code>persistent-metaclass</code>. Согласно этому \n"
"определению <code>pslot1</code> и <code>pslot2</code> являются "
"постоянными, \n"
"а <code>tslot1</code> - временными(transient) и хранятся в памяти."

#: in_ed/ElephantUserManual.html:3470
msgctxt "in_ed/ElephantUserManual.html:3470"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3479
msgid ""
"<p>Slot storage class implications are straightforward.  Persistent slot\n"
"writes are durably stored to disk and reads are made from disk and can\n"
"be part of a ACID compliant transaction .  Transient slots are\n"
"initialized on instance creation according to initforms or initargs. \n"
"Transient slot values are never stored to nor loaded from the database\n"
"and their accesses cannot be protected by transactions.  (Ordinary\n"
"multi-process synchronization would be required instead)."
msgstr ""
"<p>Значение класса памяти слота очевидное. Постоянные записи в слоты \n"
"надежно сохраняются на диск и чтения выполняются с диска и могут быть \n"
"частью транзакции, соответствующей ACID. Временные слоты инициализируются "
"при \n"
"создании экземпляра в соответствии с initforms или initargs. Значения \n"
"временных слотов никогда не сохраняются и не загружаются из базы данных, \n"
"и доступ к ним не может быть защищен транзакциями. (Вместо этого "
"потребуется \n"
"обычная многопроцессная синхронизация)."

#: in_ed/ElephantUserManual.html:3481
msgctxt "in_ed/ElephantUserManual.html:3481"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3487
msgid ""
"<p>The <code>:index</code> option tells Elephant whether to maintain an\n"
"inverted index that maps slot values to their parent objects.  The\n"
"behavior of indexed classes and class slots are discussed in depth in\n"
"<a href=\"#Class-Indices\">Class Indices</a>."
msgstr ""
"<p>Параметр <code>:index</code> сообщает Elephant, следует ли поддерживать \n"
"инвертированный индекс, который сопоставляет значения слотов их \n"
"родительским объектам. Поведение индексированных классов и слотов классов \n"
"подробно обсуждается в разделе <a href=\"#Class-Indices\">Индексные Классы</"
"a>."

#: in_ed/ElephantUserManual.html:3489
msgctxt "in_ed/ElephantUserManual.html:3489"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3497
msgid ""
"<p>Persistent classes have their metaobject protocols modified through\n"
"specializations on <code>persistent-metaclass</code>.  These "
"specializations\n"
"include the creation of special slot metaobjects:\n"
"<code>transient-slot-definition</code>, <code>persistent-slot-definition</"
"code>\n"
"and direct and effective versions of each.  For the MOP aficionado the\n"
"highlights of the new class initialization protocols are as follows:"
msgstr ""
"<p>Протоколы метаобъектов персистентных классов изменены с помощью "
"специализаций \n"
"на <code>persistent-metaclass</code>. Эти специализации включают создание \n"
"специальных метаобъектов слотов: <code>transient-slot-definition</code>, \n"
"<code>persistent-slot-definition</code>, а также прямые и эффективные "
"версии \n"
"каждого из них. Для поклонников MOP основные моменты новых протоколов "
"инициализации \n"
"классов заключаются в следующем:"

#: in_ed/ElephantUserManual.html:3499
msgctxt "in_ed/ElephantUserManual.html:3499"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3522
msgid ""
"<ul>\n"
"<li><code>shared-initialize :around</code> ensures that this class inherits "
"from\n"
"      <code>persistent-object</code> and <code>persistent</code> if it "
"doesn't\n"
"      already and that the class option <code>:index</code> results in class "
"indexes\n"
"      being indexed;. \n"
"</li><li><code>direct-slot-initialization-class</code> returns the "
"appropriate slot\n"
"      metaobject based on the values of the <code>:transient</code> and "
"<code>:persistent</code>\n"
"      slot definition keywords.  It also does some simple error checking for "
"invalid\n"
"      combinations, for example, indexed transient slots. \n"
"</li><li><code>effective-slot-definition-class</code> performs the same role "
"as the above for\n"
"      effective slots. \n"
"</li><li><code>slot-definition-allocation</code> returns the <code>:"
"database</code> allocation for\n"
"      persistent slot definitions so the underlying lisp will not allocate "
"instance or\n"
"      class storage under some lisps. \n"
"</li><li><code>compute-effective-slot-definition-initargs</code> performs "
"some error checking\n"
"      to ensure a subclass does not try to make an inherited persistent slot "
"transient. \n"
"</li><li><code>finalize-inheritance</code> called before the first instance "
"is created in order\n"
"      to finalize the list of persistent slots to account for any\n"
"      forward referenced classes in the inheritence list.  Similarly the\n"
"      list of indexed slots is computed.  This function is also called by "
"the class indexing\n"
"      code if any calls are made that depend on knowing which slots are "
"indexed. \n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li><code>shared-initialize :around</code>  гарантирует, что этот класс "
"наследуется \n"
"      от <code>persistent-object</code> и <code>persistent</code>, если он "
"еще не \n"
"      наследуется, и что опция класса <code>:index</code> приводит к "
"индексации \n"
"      индексов класса;.\n"
"</li><li><code>direct-slot-initialization-class</code> возвращает "
"соответствующий \n"
"      метаобъект слота на основе значений ключевых слов <code>:transient</"
"code> и\n"
"      <code>:persistent</code> определения слота. Он также выполняет простую "
"проверку \n"
"      ошибок на недопустимые комбинации, например, indexed "
"transient(проиндексированные\n"
"      не постоянные слоты. \n"
"</li><li><code>effective-slot-definition-class</code> выполняет ту же роль, "
"что и выше \n"
"      для эффективных слотов.\n"
"</li><li><code>slot-definition-allocation</code> возвращает <code>:database</"
"code>  выделенную\n"
"      для постоянных определений слотов, поэтому базовый lisp не будет "
"выделять хранилище\n"
"      экземпляров или классов при некоторых lisp.\n"
"</li><li><code>compute-effective-slot-definition-initargs</code> выполняет "
"некоторую проверку\n"
"      ошибок, чтобы гарантировать, что подкласс не пытается сделать "
"унаследованный постоянный\n"
"      временный слот переходным(не постоянным). \n"
"</li><li><code>finalize-inheritance</code>  вызывается перед созданием "
"первого экземпляра, \n"
"      чтобы завершить список постоянных слотов для учета любых классов с "
"прямой ссылкой в ​​\n"
"      списке наследования. Аналогичным образом вычисляется список "
"проиндексированных слото в. \n"
"      Эта функция также вызывается кодом индексации класса, если выполняются "
"какие-либо вызовы,\n"
"      зависящие от знания того, какие слоты индексируются. \n"
"</li></ul>"

#: in_ed/ElephantUserManual.html:3525
msgid "<p>Reinitialization is discussed in the section on class redefinition."
msgstr ""
"<p>Повторная инициализация обсуждается в разделе о переопределении класса. "

#: in_ed/ElephantUserManual.html:3527
msgctxt "in_ed/ElephantUserManual.html:3527"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3529
msgid "<h4 class=\"subsection\">4.3.2 Instance Creation</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3540
msgid ""
"<p>Persistent objects are created just like standard objects, with a call\n"
"to <code>make-instance</code>.  Initforms and slot initargs behave as the\n"
"user expects.  The call to <code>make-instance</code> of a persistent class\n"
"will fail unless there is a default <code>store-controller</code> instance\n"
"in the variable <code>*store-controller*</code> or the <code>:sc</code> "
"keyword\n"
"argument is provided a valid store controller object.  The store\n"
"controller is required to provide a unique object id, initialize the\n"
"specification pointer of the instance and to store the values of any\n"
"initialized slots.  The initialization process is as follows:"
msgstr ""

#: in_ed/ElephantUserManual.html:3542
msgctxt "in_ed/ElephantUserManual.html:3542"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3555
msgid ""
"<ul>\n"
"<li><code>initialize-instance :before</code> is called to initialize the\n"
"      <code>oid</code> slot and the data store specification slot <code>dbcn-"
"spc-pst</code>. \n"
"      The oid is set by the argument <code>:from-oid</code> or by calling "
"the store\n"
"      controller for a new oid. \n"
"</li><li><code>shared-initialize :around</code> is called to ensure that the "
"underlying\n"
"      lisp does not bypass the metaobject protocol during slot\n"
"      initialization by manually initializing the persistent slots\n"
"      and passing the transient slots to the underlying lisp. \n"
"      Finally it adds the instance to the class index so that any inverted "
"indicies\n"
"      are updated appropriately. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3558
msgid ""
"<p>Persistent slots are initialized only under the following conditions:"
msgstr ""

#: in_ed/ElephantUserManual.html:3560
msgctxt "in_ed/ElephantUserManual.html:3560"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3565
msgid ""
"<ul>\n"
"<li>An initarg is provided to <code>make-instance</code>\n"
"</li><li>The database slot value is unbound, an initform exists and from-oid "
"was not specified\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3571
msgid ""
"<p>After initialization the persistent instance is added to its host\n"
"store controller's object cache.  This cache is a weak hash table that\n"
"maps oids to object instances.  So after initialization the following\n"
"state has been created:"
msgstr ""

#: in_ed/ElephantUserManual.html:3573
msgctxt "in_ed/ElephantUserManual.html:3573"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3591
msgid ""
"<ul>\n"
"<li><strong>Placeholder Instance:</strong> An instance of the class is in "
"memory, containing storage for\n"
"      the oid, the specification reference, lisp instance data and any\n"
"  transient slot values.  We call this the placeholder instance which\n"
"  mediates access to persistent values, but does not itself persist. \n"
"</li><li><strong>Cached Reference:</strong> A weak reference to the instance "
"is in the store controller object cache\n"
"</li><li><strong>Memory References:</strong> A normal reference to the "
"instance is (maybe) retained by the caller of\n"
"      <code>make-instance</code>. \n"
"</li><li><strong>Database Slot Values:</strong> The data store contains the "
"persistent slot values that were initialized,\n"
"      indexed by the object id and slot name. \n"
"</li><li><strong>Database References:</strong> If the resulting placeholder "
"instance was written to a persistent slot,\n"
"      added to a btree or the class is indexed, a <strong>reference</"
"strong>\n"
"to the instance was written into the data store.  Today this reference\n"
"consists of an oid and a class name.  If this reference is reachable,\n"
"then the persistent object can be reconstructed using the\n"
"<code>:from-oid</code> argument. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3597
msgid ""
"<p>If you mnanually create an object using an OID which already exists in\n"
"the database, <code>initargs</code> to <code>make-instance</code> take "
"precedence\n"
"over existing values in the database, which in turn take precedence\n"
"over any <code>initforms</code> defined in the class."
msgstr ""

#: in_ed/ElephantUserManual.html:3599
msgctxt "in_ed/ElephantUserManual.html:3599"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3601
msgid "<h4 class=\"subsection\">4.3.3 Persistent Instance Lifecycle</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3608
msgid ""
"<p>The distributed nature of persistent instance storage results in some\n"
"interesting behaviors, especially with respect to transient slots. \n"
"The prior section detailed the state of the system after the original\n"
"initialization of an object.  The object can then be in a number of\n"
"different states:"
msgstr ""

#: in_ed/ElephantUserManual.html:3610
msgctxt "in_ed/ElephantUserManual.html:3610"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3626
msgid ""
"<ul>\n"
"<li><strong>Resident:</strong> The canonical state of an in-use persistent\n"
"      object as described in the initialization section above. \n"
"</li><li><strong>Unreferenced, Unreclaimed:</strong> All memory references "
"to the\n"
"      object have been dropped but the placeholder instance has not yet\n"
"      been garbage collected.  The weak pointer still exists in the cache. \n"
"      If a database reference is fetched from the data store, the cached\n"
"      value will be used. \n"
"</li><li><strong>Non-resident:</strong> The object only exists as reachable "
"database\n"
"      references and slot values.  This is the state after garbage "
"collection\n"
"      of the placeholder instance. \n"
"</li><li><strong>Recreated:</strong> An intermediary state where a non "
"resident object\n"
"      is fetched from the data store and its placeholder object must be\n"
"      recreated prior to the object enter the resident state. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3632
msgid ""
"<p>The garbage collection of the placeholder instance is an important\n"
"feature.  This means that we can have more objects in our system than\n"
"are currently resident in memory.  If this were not the case, what\n"
"would be the point of an object database?"
msgstr ""

#: in_ed/ElephantUserManual.html:3634
msgctxt "in_ed/ElephantUserManual.html:3634"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3641
msgid ""
"<p>The recreated state deserves to be discussed in more detail.  We\n"
"learned earlier that the database reference contains the oid and class\n"
"of the object, and of course we know the store-controller the\n"
"reference is stored into<a rel=\"footnote\" href=\"#fn-1\" name="
"\"fnd-1\"><sup>1</sup></a>, so this information is\n"
"sufficient to reconstruct the placeholder instance."
msgstr ""

#: in_ed/ElephantUserManual.html:3643
msgctxt "in_ed/ElephantUserManual.html:3643"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3648
msgid ""
"<p>When the reference is deserialized, its oid is used to look up the\n"
"object in the store controller's object cache.  If this fails, then\n"
"the instance is created with a call much like this:"
msgstr ""

#: in_ed/ElephantUserManual.html:3650
msgctxt "in_ed/ElephantUserManual.html:3650"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3653
msgid ""
"<pre class=\"lisp\">     (make-instance 'pclass :from-oid 2000 :sc *store-"
"controller*)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3658
msgid ""
"<p>The <code>:from-oid</code> argument to <code>make-instance</code> "
"overrides some\n"
"of the normal make-instance behavior by inhibiting all initform\n"
"initialization as the object's slots are assumed to be properly\n"
"initialized from the original call to <code>make-instance</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:3660
msgctxt "in_ed/ElephantUserManual.html:3660"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3662
msgid "<h4 class=\"subsection\">4.3.4 Using Transient Slots</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3669
msgid ""
"<p>What about transient slots?  Transients slots are tied to the\n"
"placeholder object where their storage is allocated.  While the\n"
"persistent slots are permanently stored in the data store, transient\n"
"slots can be garbage collected when all memory references have been\n"
"dropped, even if database references exist."
msgstr ""

#: in_ed/ElephantUserManual.html:3671
msgctxt "in_ed/ElephantUserManual.html:3671"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3678
msgid ""
"<p>After collection, if you retrieve an object from the store, its\n"
"transient slots will be reset to the slot initforms from the class\n"
"definition.  You can only reliably use <code>:initargs</code> to initialize\n"
"transient or persistent slots during the initial call to\n"
"<code>make-instance</code> or when manually creating the instance from an "
"oid."
msgstr ""

#: in_ed/ElephantUserManual.html:3680
msgctxt "in_ed/ElephantUserManual.html:3680"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3684
msgid ""
"<p>Here is an example illustrating the ephemeral nature of transient\n"
"slots:"
msgstr ""

#: in_ed/ElephantUserManual.html:3686
msgctxt "in_ed/ElephantUserManual.html:3686"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3689
msgid ""
"<pre class=\"lisp\">     (setf pobj1 (make-instance 'my-pclass :pslot1 1 :"
"tslot3 3))\n"
"     =&gt; #&lt;MY-PCLASS&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:3693
msgid ""
"     (pslot1 pobj1) =&gt; 1\n"
"     (pslot2 pobj1) =&gt; 'two\n"
"     (tslot1 pobj1) =&gt; 3"
msgstr ""

#: in_ed/ElephantUserManual.html:3695
msgid "     (add-to-root 'pobj1 pobj1)"
msgstr ""

#: in_ed/ElephantUserManual.html:3698
msgid ""
"     (setf pobj2 (get-from-root 'pobj1))\n"
"     =&gt; #&lt;MY-PCLASS&gt;"
msgstr ""

#: in_ed/ElephantUserManual.html:3702
msgid ""
"     (pslot1 pobj2) =&gt; 1\n"
"     (pslot2 pobj2) =&gt; 'two\n"
"     (tslot1 pobj2) =&gt; 3"
msgstr ""

#: in_ed/ElephantUserManual.html:3706
msgid ""
"     (setf pobj1 nil)\n"
"     (setf pobj2 nil)\n"
"     (gc)"
msgstr ""

#: in_ed/ElephantUserManual.html:3712
msgid ""
"     (setf pobj3 (get-from-root 'pobj1))\n"
"     (pslot1 pobj2) =&gt; 1\n"
"     (pslot2 pobj2) =&gt; 'two\n"
"     (tslot1 pobj2) =&gt; 'three\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:3718
msgid ""
"<p>The implications of this behavior is that you need to think carefully\n"
"about how to use employ transient values.  Essentially you cannot make\n"
"assumptions about the state of transient values in objects loaded from\n"
"the store unless you know that they were loaded at some point in time\n"
"and cannot be GC'ed (i.e. they are stored in a list or hash table)."
msgstr ""

#: in_ed/ElephantUserManual.html:3720
msgctxt "in_ed/ElephantUserManual.html:3720"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3728
msgid ""
"<p>A good policy is to initialize transient values using an <code>:after</"
"code>\n"
"method on <code>initialize-instance</code>.  This allows you to initialize\n"
"transient values using either system defaults or persistent slot\n"
"values.  That way you can ensure that the transient slots are always\n"
"in a consistent state when accessed by the application, regardless of\n"
"when the placeholder object was recreated."
msgstr ""

#: in_ed/ElephantUserManual.html:3730
msgctxt "in_ed/ElephantUserManual.html:3730"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3739
msgid ""
"<p>In general, transient slots are a good place for intermediate values\n"
"in a computation or to cache frequently read items to avoid\n"
"deserialization overhead.  <code>indexed-btree</code> is an example of this\n"
"approach, an in-memory hash is cached in the transient slot for reads\n"
"and writes are mirrored to a serialized hash in a persistent slot. \n"
"The <code>:after</code> method just copies the persistent hash value to the\n"
"transient slot."
msgstr ""

#: in_ed/ElephantUserManual.html:3741
msgctxt "in_ed/ElephantUserManual.html:3741"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3743
msgid "<h4 class=\"subsection\">4.3.5 Using Persistent Slots</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3751
msgid ""
"<p>Persistent slot use is straightforward.  You can read from them, write\n"
"to them or make them unbound.  Remember that every access goes to the\n"
"data store.  This makes reads relatively expensive as they may result\n"
"in a disk seek.  Writes can be doubly expensive, especially outside a\n"
"transaction, as the write will result in a synchronous disk synch\n"
"operation."
msgstr ""

#: in_ed/ElephantUserManual.html:3753
msgctxt "in_ed/ElephantUserManual.html:3753"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3760
msgid ""
"<p>Reads and writes require the home store controller to be valid and\n"
"open.  The placeholder object's specification pointer is used to\n"
"retrieve the <code>store-controller</code> object.  If this object is "
"closed\n"
"or mising, the system will give you a restart option to reopen the\n"
"controller and continue."
msgstr ""

#: in_ed/ElephantUserManual.html:3762
msgctxt "in_ed/ElephantUserManual.html:3762"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3766
msgid ""
"<p>Persistent slot behavior is implemented by overloading the relevant\n"
"MOP functions controlling slot access:"
msgstr ""

#: in_ed/ElephantUserManual.html:3768
msgctxt "in_ed/ElephantUserManual.html:3768"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3775
msgid ""
"<ul>\n"
"<li><code>slot-value-using-class</code>\n"
"</li><li><code>(setf slot-value-using-class)</code>\n"
"</li><li><code>slot-boundp-using-class</code>\n"
"</li><li><code>slot-makunbound-using-class</code>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3782
msgid ""
"<p>Each of these functions retrieves the home store-controller for the\n"
"instance and then calls a method specialized on the class of that\n"
"store controller.  This method is responsible for mapping the oid and\n"
"slotname of the slot access to the appropriate value in the data\n"
"store."
msgstr ""

#: in_ed/ElephantUserManual.html:3784
msgctxt "in_ed/ElephantUserManual.html:3784"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3786
msgid "<h4 class=\"subsection\">4.3.6 Class Redefinition</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3795
msgid ""
"<p>Class redefinition is problematic in the current (0.9) version of\n"
"Elephant.  The usual CLOS mechanisms are properly implemented, but\n"
"updating instances will only work for those instances that are in\n"
"memory at the time.  Instances that are non-resident will not be\n"
"updated.  This is usually not as big a problem as it seems, because\n"
"the slot values are stored independently.  An outline of the update\n"
"procedure follows:"
msgstr ""

#: in_ed/ElephantUserManual.html:3797
msgctxt "in_ed/ElephantUserManual.html:3797"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3802
msgid ""
"<p>The function <code>update-instance-for-redefined-class</code> is called "
"by\n"
"CLOS whenever <code>defclass</code> is re-evaluated and results in a change\n"
"in the list of slots."
msgstr ""

#: in_ed/ElephantUserManual.html:3804
msgctxt "in_ed/ElephantUserManual.html:3804"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3808
msgid ""
"<p>For transient slots the behavior is the same as it is in CLOS for\n"
"all in-memory slots."
msgstr ""

#: in_ed/ElephantUserManual.html:3810
msgctxt "in_ed/ElephantUserManual.html:3810"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3816
msgid ""
"<ul>\n"
"<li>Added slots: are added to the object and their initforms\n"
"      called just as if they were created without initargs\n"
"</li><li>Discarded slots: are dropped and their values lost\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3820
msgid ""
"<p>Persistent slots have a slightly different behavior, as only resident\n"
"(those with valid placeholder objects) objects are updated."
msgstr ""

#: in_ed/ElephantUserManual.html:3822
msgctxt "in_ed/ElephantUserManual.html:3822"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3837
msgid ""
"<ul>\n"
"<li>Added slots (resident): are added to the object and the initforms\n"
"      are called only on in-memory objects, as in an empty call to\n"
"      <code>make-instance</code>\n"
"</li><li>Added slots (non-resident): the added slots will have unbound "
"values\n"
"</li><li>Discarded slots (resident): slots are dropped from the class and "
"become\n"
"      inaccessible, but their values are not deleted from the database.  "
"This\n"
"      is a precautionary measure as losing persistent data because of an\n"
"      accidental re-evaluation while editing a defclass could be painful.  "
"If\n"
"      you add the slot back, the original value will be accessible "
"regardless of\n"
"      the initform. \n"
"</li><li>Discarded slots (non-resident): This has the same behavior as "
"resident objects,\n"
"      as no side effects are made on the objects or their slots\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3843
msgid ""
"<p>There are additional considerations for matching class indexing\n"
"options in the class object to the actual indices in the database. \n"
"The following section will discuss synchronizing these if they\n"
"diverge."
msgstr ""

#: in_ed/ElephantUserManual.html:3845
msgctxt "in_ed/ElephantUserManual.html:3845"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3851
msgid ""
"<p><em>(Note: release 0.9.1 should fix this by providing an oid-&gt;class "
"map that allows\n"
"the system to cheaply iterate over all objects and update them "
"appropriately.  This\n"
"hasn't been done yet due to performance implications.  See Trac system for "
"the appropriate\n"
"tickets)</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:3853
msgctxt "in_ed/ElephantUserManual.html:3853"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3855
msgid ""
"<h4 class=\"subsection\">4.3.7 Support for <code>change-class</code></h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3864
msgid ""
"<p>Elephant also supports the <code>change-class</code> by overloading\n"
"<code>update-instance-for-different-class</code>.  The handling of slots in\n"
"this case is identical to the class redefinition above.  Persistent\n"
"and transient slot values are retained if their name matches a\n"
"slotname in the new class and initforms are called on newly added\n"
"slots.  Valid initargs for any slot will override this default behavior\n"
"and set the slot value to the initarg value."
msgstr ""

#: in_ed/ElephantUserManual.html:3866
msgctxt "in_ed/ElephantUserManual.html:3866"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3870
msgid ""
"<p>Because the instance is guaranteed to be resident, the operation has none "
"of the\n"
"resident/non-resident conflicts above."
msgstr ""

#: in_ed/ElephantUserManual.html:3872
msgctxt "in_ed/ElephantUserManual.html:3872"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3877
msgid ""
"<p>Change class cannot convert between persistent and non-persistent classes "
"and will\n"
"flag an error if you try to do so.  <em>(Note: this could be implemented in "
"the\n"
"future if users request it)</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:3879
msgctxt "in_ed/ElephantUserManual.html:3879"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3881
msgctxt "in_ed/ElephantUserManual.html:3881"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:3883
msgctxt "in_ed/ElephantUserManual.html:3883"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3889
msgid ""
"<hr>\n"
"<a name=\"Class-Indices\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Sets"
"\">Persistent Sets</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-"
"Classes-and-Objects\">Persistent Classes and Objects</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:3891
msgctxt "in_ed/ElephantUserManual.html:3891"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:3894
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.4 Class Indices</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:3901
msgid ""
"<p>You can enable/disable class indexing for an entire class.  When you "
"disable\n"
"indexing all references to instances of that class are lost.  If you re-"
"enable\n"
"class indexing only newly created classes will be stored in the class "
"index. \n"
"You can manually restore them by using <code>find-class-index</code> to get "
"the\n"
"clas index BTree if you have an alternate in-memory index."
msgstr ""

#: in_ed/ElephantUserManual.html:3903
msgctxt "in_ed/ElephantUserManual.html:3903"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3907
msgid ""
"<p>You can add/remove a secondary index for a slot.  So long as the class "
"index\n"
"remains, this can be done multiple times without losing any data."
msgstr ""

#: in_ed/ElephantUserManual.html:3909
msgctxt "in_ed/ElephantUserManual.html:3909"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3918
msgid ""
"<p>There is also a facility for defining 'derived slots'.  These can be non-"
"slot\n"
"parameters which are a function of the class's persistent slot values.  For\n"
"example you can use an index to keep an alternate representation available\n"
"for fast indexing.  If an object has an x,y coordinate, you could define a\n"
"derived index for r,theta which stored references in polar coordinates. \n"
"These would be ordered so you could iterate over a class-index to get "
"objects\n"
"in order of increasing radius from the origin or over a range of theta."
msgstr ""

#: in_ed/ElephantUserManual.html:3920
msgctxt "in_ed/ElephantUserManual.html:3920"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3931
msgid ""
"<p>Beware, however, that derived indices have to compute their result every\n"
"time you update any persistent instance's slot.  This is because there is\n"
"no way to know which persistent slots the derived index value(s) depends\n"
"on.  Thus there is a fairly significant computational cost to objects\n"
"with frequent updates having derived indices.  The storage cost, however,\n"
"may be less as all that is added is the index value and an OID reference\n"
"into the class index.  To add a slot value you add a serialized\n"
"OID+class-ref+slotname to index value which can be much larger if you\n"
"use long slotnames and package names and unicode."
msgstr ""

#: in_ed/ElephantUserManual.html:3933
msgctxt "in_ed/ElephantUserManual.html:3933"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3939
msgid ""
"<p>Thus, the question of if and how a given class should be indexed is\n"
"very flexible and dynamic, and does not need to be determined at the\n"
"beginning of your development.  This represents the ability to late bind\n"
"the decision of what to index."
msgstr ""

#: in_ed/ElephantUserManual.html:3941
msgctxt "in_ed/ElephantUserManual.html:3941"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3947
msgid ""
"<p>In general, there is always a tradeoff: an indexed slot increases "
"storage\n"
"associated with that slot and slows down write operations.  Reads however "
"remain\n"
"as fast as for unindexed persistent slots.  The Elephant system\n"
"makes it simple to choose where and when one wants to utilize this tradeoff."
msgstr ""

#: in_ed/ElephantUserManual.html:3949
msgctxt "in_ed/ElephantUserManual.html:3949"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3956
msgid ""
"<p>Finally, that file <samp><span class=\"file\">src/elephant/classindex-"
"utils.lisp</span></samp> documents\n"
"tools for handling class redefinitions and the policy that should be\n"
"used for synchronizing the classes with the database.  This process is\n"
"somewhat user customizable; documentation for this exists in the source\n"
"file referenced above."
msgstr ""

#: in_ed/ElephantUserManual.html:3958
msgctxt "in_ed/ElephantUserManual.html:3958"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3960
msgid ""
"<h4 class=\"subsection\">4.4.1 Synchronizing Classes and Data Stores</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:3971
msgid ""
"<p>Sometimes you may change a defclass form and then connect to a\n"
"database with instances that do not match the current defclass\n"
"definition.  Because of the defclass behavior above, there is no need\n"
"to detect this case as the behavior will be as if all instances were\n"
"non-resident at redefinition time.  However, this is an issue for\n"
"indexed classes as the cost of indexing is high.  There is a\n"
"synchronization policy which updates either the class or the online\n"
"class indexing mechanism at the time you try to perform an index\n"
"operation (i.e. when <code>find-class-index</code> is called)."
msgstr ""

#: in_ed/ElephantUserManual.html:3973
msgctxt "in_ed/ElephantUserManual.html:3973"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3978
msgid ""
"<p>A policy is selected by setting the value of\n"
"<code>*default-indexed-class-synch-policy*</code> with the appropriate\n"
"policy:"
msgstr ""

#: in_ed/ElephantUserManual.html:3980
msgctxt "in_ed/ElephantUserManual.html:3980"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:3990
msgid ""
"<ul>\n"
"<li>:class - The class is the master, and indices are deleted for any slots\n"
"               that are no longer indexed\n"
"</li><li>:db - The database is the master and the class indexing annotations "
"are\n"
"            updated so that the slots that satisfy <code>class-indexedp-by-"
"name</code>\n"
"            are isomorphic to the existing indices in the db. \n"
"</li><li>:union - This does what you would expect, updates the class to "
"match any\n"
"               existing indices and creates new indices. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:3996
msgid ""
"<p>Derived slots can be problematic as they may depend on slot values\n"
"that no longer exist in the changed defclass.  This will result in an\n"
"error, so for now you will have to manage any mismatches such as this\n"
"yourself."
msgstr ""

#: in_ed/ElephantUserManual.html:3998
msgctxt "in_ed/ElephantUserManual.html:3998"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4006
msgid ""
"<p><em>Note: release 0.9.1 should fix both mismatches and performance issues "
"related\n"
"to derived indices by allowing the user to provide hints as to which slot "
"values the\n"
"index depends.  This will allow the system to only update when the "
"appropriate slots\n"
"change and to delete or inhibit derived indicies when slots are deleted.  We "
"will also\n"
"improve error handling for this case, so you can delete the derived index "
"and continue\n"
"performing the write to a persistent object that flagged the error.</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:4008
msgctxt "in_ed/ElephantUserManual.html:4008"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4010
msgctxt "in_ed/ElephantUserManual.html:4010"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4012
msgctxt "in_ed/ElephantUserManual.html:4012"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4018
msgid ""
"<hr>\n"
"<a name=\"Persistent-Sets\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-BTrees"
"\">Persistent BTrees</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Class-Indices"
"\">Class Indices</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4020
msgctxt "in_ed/ElephantUserManual.html:4020"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4023
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.5 Persistent Sets</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4028
msgid ""
"<p>Persistent sets are fairly straightforward and are well-introduced by\n"
"the tutorial, please review the tutorial or read the reference section\n"
"for persistent sets."
msgstr ""

#: in_ed/ElephantUserManual.html:4030
msgctxt "in_ed/ElephantUserManual.html:4030"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4032
msgctxt "in_ed/ElephantUserManual.html:4032"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4034
msgctxt "in_ed/ElephantUserManual.html:4034"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4040
msgid ""
"<hr>\n"
"<a name=\"Persistent-BTrees\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#BTree-Cursors\">BTree "
"Cursors</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-Sets"
"\">Persistent Sets</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4042
msgctxt "in_ed/ElephantUserManual.html:4042"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4045
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.6 Persistent BTrees</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4055
msgid ""
"<p>A BTree is a data structure designed for on-disk databases.  It's\n"
"design goal is to minimize the number of disk seeks while traversing\n"
"the tree structure.  In contrast to a binary tree, the BTree exploits\n"
"the properties of memory/disk data heirarchies.  Disk seeks are\n"
"expensive while loading large blocks of data is relatively inexpensive\n"
"and in-memory scanning of a block of memory is much cheaper than a\n"
"disk seek.  This means a few, large nodes containing many keys is\n"
"a more balanced data structure than"
msgstr ""

#: in_ed/ElephantUserManual.html:4057
msgctxt "in_ed/ElephantUserManual.html:4057"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4065
msgid ""
"<p>The BTree, or derivatives, are the basis of most record-oriented\n"
"database including SQL servers, Berkeley DB and many others.  Elephant\n"
"directly exposes the BTree structure to the user so the user can\n"
"decide how best to manage and traverse it.  Many of Elephant's other\n"
"facilities, such as the class indexing discussed above, are\n"
"implemented on top of the BTree."
msgstr ""

#: in_ed/ElephantUserManual.html:4067
msgctxt "in_ed/ElephantUserManual.html:4067"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4074
msgid ""
"<p>The basic interface to the BTree is via the <code>get-value</code> "
"method. \n"
"Both the key and the value are serialized and then the BTree is\n"
"traversed according to the sorted order of the key and the value\n"
"inserted in its sorted order.  Insertion, access and deletion (via\n"
"<code>remove-kv</code>) are all O(log N) complexity operations."
msgstr ""

#: in_ed/ElephantUserManual.html:4076
msgctxt "in_ed/ElephantUserManual.html:4076"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4086
msgid ""
"<p>Sorting in BTrees requires some discussion.  The sorting constraints\n"
"on btrees are dictated by the original implementation on Berkeley DB. \n"
"The Berkeley DB data store sorts keys based on their serialized\n"
"representation.  The CLSQL implementation has to sort based on the\n"
"deserialized lisp value, so sorted traversals require reading all the\n"
"objects into memory.  This places some limitations on systems that\n"
"exploit the CLSQL implementation (see <a href=\"#CLSQL-Data-Store\">CLSQL "
"Data Store</a> for more\n"
"information)."
msgstr ""

#: in_ed/ElephantUserManual.html:4088
msgctxt "in_ed/ElephantUserManual.html:4088"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4093
msgid ""
"<p>Sorting is done first by primitive type (string, standard-class,\n"
"array, etc) and then by value within that type.  The type order and\n"
"internal sorting constraint is:"
msgstr ""

#: in_ed/ElephantUserManual.html:4095
msgctxt "in_ed/ElephantUserManual.html:4095"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4109
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Numbers.  All numbers are sorted as a class by their numeric value.  "
"Effectively\n"
"all numbers are coerced into a double float and sorted relative to each "
"other. \n"
"</li><li>Strings.  Because the serializer stores strings in variable \n"
"width structures.  Each width type is sorted separately, then sorted \n"
"lexically.  (NOTE: This should get fixed for 1.0.  Strings should be \n"
"sorted together)\n"
"</li><li>Pathnames.  Sorted by their string radix then lexically. \n"
"</li><li>Symbols.  Sorted by string radix, then lexically. \n"
"</li><li>Aggregates.  Sorted by type in the following order, then \n"
"arbitrarily internally.  Persistent instance references, cons, \n"
"hash-table, standard objects, arrays, structs and then nil.\n"
"        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:4114
msgid ""
"<p>String comparisons are case insensitive today, so <code>\"Adam\" =\n"
"\"adam\" &gt; \"Steve\" </code>.  When unicode support is finalized, "
"comparisons\n"
"will be case sensitive."
msgstr ""

#: in_ed/ElephantUserManual.html:4116
msgctxt "in_ed/ElephantUserManual.html:4116"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4123
msgid ""
"<p>Like persistent sets, BTrees are not garbage collected so to recover\n"
"the storage of a BTree, just run the function <code>drop-btree</code> to\n"
"delete all the key-value pairs and return their storage to the\n"
"database for reuse.  The oid used by the btree, however, will not be\n"
"recovered."
msgstr ""

#: in_ed/ElephantUserManual.html:4125
msgctxt "in_ed/ElephantUserManual.html:4125"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4127
msgctxt "in_ed/ElephantUserManual.html:4127"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4129
msgctxt "in_ed/ElephantUserManual.html:4129"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4135
msgid ""
"<hr>\n"
"<a name=\"BTree-Cursors\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#BTree-Indexing\">BTree "
"Indexing</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-BTrees"
"\">Persistent BTrees</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4137
msgctxt "in_ed/ElephantUserManual.html:4137"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4140
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.7 BTree Cursors</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4145
msgid ""
"<p>Aside from getting, setting and dropping key-value pairs from the\n"
"database, you can also traverse the BTree structure one key-value pair\n"
"at a time."
msgstr ""

#: in_ed/ElephantUserManual.html:4147
msgctxt "in_ed/ElephantUserManual.html:4147"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4155
msgid ""
"<p>Cursors must be created in the context of an active transaction\n"
"(i.e. a <code>with/ensure-transaction</code> body).  A cursor is made\n"
"through a call to the <code>make-cursor</code> method of the BTree you wish\n"
"to traverse. You must ensure that the cursor gets closed when\n"
"the stack is unwound; it's best to use the convenience macro\n"
"<code>with-btree-cursor</code> instead of <code>make-cursor</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:4157
msgctxt "in_ed/ElephantUserManual.html:4157"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4162
msgid ""
"<p>An existing cursors can also be duplicated within the same transaction\n"
"by calling <code>cursor-duplicate</code> which avoids the overhead of\n"
"setting a second cursor to the same location."
msgstr ""

#: in_ed/ElephantUserManual.html:4164
msgctxt "in_ed/ElephantUserManual.html:4164"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4168
msgid ""
"<p>Cursors can be in two states: initialized and uninitialized. \n"
"<a href=\"#BTree-Cursor-API\">BTree Cursor API</a> for details."
msgstr ""

#: in_ed/ElephantUserManual.html:4170
msgctxt "in_ed/ElephantUserManual.html:4170"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4174
msgid ""
"<p>To initialize a cursor, you have to use one of the initializing\n"
"functions to select a key-value pair in the btree."
msgstr ""

#: in_ed/ElephantUserManual.html:4176
msgctxt "in_ed/ElephantUserManual.html:4176"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4186
msgid ""
"<ul>\n"
"<li><code>cursor-first</code> and <code>cursor-last</code>: initialize the\n"
"cursor to the first and last element of the btree, respectively. \n"
"</li><li><code>cursor-set</code> and <code>cursor-set-range</code>: Sets the "
"cursor\n"
"to the first key-pair values according to the specified key.  If the\n"
"set fails, the cursor will remain uninitialized.  The ranged set will\n"
"set it to the first key-value pair where the key is equal to or\n"
"greater than the key argument. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:4192
msgid ""
"<p>A valid cursor will return multiple values: <code>(exists? key\n"
"value)</code>.  The first argument tells whether or not the cursor is\n"
"initialized and pointing at a proper value.  The second two arguments\n"
"are self-explanatory."
msgstr ""

#: in_ed/ElephantUserManual.html:4194
msgctxt "in_ed/ElephantUserManual.html:4194"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4198
msgid ""
"<p><code>cursor-current</code> returns the current state of the cursor, nil "
"if\n"
"it is uninitialized."
msgstr ""

#: in_ed/ElephantUserManual.html:4200
msgctxt "in_ed/ElephantUserManual.html:4200"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4204
msgid ""
"<p>Once a cursor is properly initialized, it can be incremented or\n"
"decremented, a simple constant-time operation on BTrees."
msgstr ""

#: in_ed/ElephantUserManual.html:4206
msgctxt "in_ed/ElephantUserManual.html:4206"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4211
msgid ""
"<p><code>cursor-next</code> and <code>cursor-prev</code> move the cursor a "
"single step\n"
"forward or back across the sorted key-value pairs.  <code>cursor-next</"
"code>\n"
"moves in ascending order, <code>cursor-prev</code> in descending order."
msgstr ""

#: in_ed/ElephantUserManual.html:4213
msgctxt "in_ed/ElephantUserManual.html:4213"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4221
msgid ""
"<p>Finally cursors can be used for side effects on the current key-value\n"
"pair.  The function <code>cursor-put</code> replaces the value (but does "
"not\n"
"increment the current value) and <code>cursor-delete</code> deletes the\n"
"key-value pair and become uninitialized.  It is a valid operation to\n"
"use the <code>(setf get-value)</code> method while the cursor is active to\n"
"change the value at the current cursor."
msgstr ""

#: in_ed/ElephantUserManual.html:4223
msgctxt "in_ed/ElephantUserManual.html:4223"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4231
msgid ""
"<p>If cursors take place within a transaction, what happens when\n"
"traversing a very large BTree?  This depends on the data store policy\n"
"regarding whether a cursor read locks its entire btree (or the subset\n"
"that is being iterated over) or allows changes to any pairs its\n"
"transaction has not changed.  See your data store documentation for\n"
"details."
msgstr ""

#: in_ed/ElephantUserManual.html:4233
msgctxt "in_ed/ElephantUserManual.html:4233"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4235
msgctxt "in_ed/ElephantUserManual.html:4235"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4237
msgctxt "in_ed/ElephantUserManual.html:4237"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4243
msgid ""
"<hr>\n"
"<a name=\"BTree-Indexing\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Index-Cursors\">Index "
"Cursors</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#BTree-Cursors"
"\">BTree Cursors</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4245
msgctxt "in_ed/ElephantUserManual.html:4245"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4248
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.8 BTree Indexing</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4255
msgid ""
"<p>One powerful feature of Elephant is the ability to add indexes to\n"
"BTrees.  An indexed btree is a subclass of the standard <code>btree</code>\n"
"called <code>indexed-btree</code>.  The indexed btree maintain a set of\n"
"indices (instances of <code>btree-index</code>) which provide alternative\n"
"ways of indexing into the values of the main btree."
msgstr ""

#: in_ed/ElephantUserManual.html:4257
msgctxt "in_ed/ElephantUserManual.html:4257"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4262
msgid ""
"<p>Each index is itself a btree, but with the property that its values\n"
"are matched to the keys of the main btree.  That is if you have a btree\n"
"with key-value pairs:"
msgstr ""

#: in_ed/ElephantUserManual.html:4264
msgctxt "in_ed/ElephantUserManual.html:4264"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4268
msgid ""
"<pre class=\"lisp\">     (\"henry\" . #&lt;name: Henry, age: 45&gt;)\n"
"     (\"larry\" . #&lt;name: Larry, age: 29&gt;)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4270
msgid ""
"<p>You can define an index that is populated by the age of the person object:"
msgstr ""

#: in_ed/ElephantUserManual.html:4272
msgctxt "in_ed/ElephantUserManual.html:4272"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4276
msgid ""
"<pre class=\"lisp\">     (29 . \"Larry\")\n"
"     (45 . \"Henry\")\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4283
msgid ""
"<p>Now when you call <code>(get-value 29 index)</code> you get back\n"
"<code>#&lt;name: Larry, age: 29&gt;</code>!  Note also that these new pairs "
"are\n"
"ordered by age, the opposite of the alphabetic ordering of the names\n"
"in the first two pairs.  If you read through the tutorial, you may\n"
"have guessed by now that this is the mechanism used to implement the\n"
"class indexing capabilities previously described."
msgstr ""

#: in_ed/ElephantUserManual.html:4285
msgctxt "in_ed/ElephantUserManual.html:4285"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4293
msgid ""
"<p>An index is created by using the <code>add-index</code> function.  This\n"
"function takes the <code>indexed-btree</code> you wish to index, an "
"symbolic\n"
"name for the index and a key-form which dictates how the index\n"
"populates it's keys as a function of the main btree's keys and values. \n"
"(It is a function of three arguments: the index itself, the key and\n"
"the value)."
msgstr ""

#: in_ed/ElephantUserManual.html:4295
msgctxt "in_ed/ElephantUserManual.html:4295"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4298
msgid "<p>A simple, contrived example is shown in the figure below:"
msgstr ""

#: in_ed/ElephantUserManual.html:4300
msgctxt "in_ed/ElephantUserManual.html:4300"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4302
msgid ""
"<div align=\"center\"><img src=\"ElephantUserManual_files/IndexedBtrees1.png"
"\" alt=\"[BTree Index Diagram]\"></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4308
msgid ""
"<p>Here we have a primary, indexed btree with a set of keys and values\n"
"represented by symbols.  We'll declare the function <code>val</code> to "
"take\n"
"a value symbol and extract it's number.  The key-form in the\n"
"<code>mod5 * 2</code> index is:"
msgstr ""

#: in_ed/ElephantUserManual.html:4310
msgctxt "in_ed/ElephantUserManual.html:4310"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4316
msgid ""
"<pre class=\"lisp\">     (lambda (k v)\n"
"       (if (= 0 (mod (val v) 5))\n"
"           (values t (* 2 (val v)))\n"
"           (values nil nil)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4327
msgid ""
"<p>When a key-value pair is written to the primary btree, the index is\n"
"automatically updated through a call to the key-form.  If the key-form\n"
"above is called with <code>key1</code> and <code>value1</code>, <code>val</"
"code> will\n"
"return 1 which fails the if test.  The second values statement,\n"
"<code>(values nil nil)</code> indicates that this pair is not to be "
"indexed. \n"
"If I pass <code>key5</code> and <code>value5</code> to this same key form, I "
"get\n"
"back 10 as the <code>(val 'value5)</code> is 5 and <code>(= 0 (mod 5 5))</"
"code> so\n"
"the form returns <code>(values t 10)</code> meaning the index should add an\n"
"index entry of 10 (<code>(* 2 5)</code>) associated with the key value\n"
"<code>key5</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:4329
msgctxt "in_ed/ElephantUserManual.html:4329"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4333
msgid ""
"<p>So, of course, making the call <code>(get-value 10 index-mod5)</code> "
"will\n"
"return <code>value5</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:4335
msgctxt "in_ed/ElephantUserManual.html:4335"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4343
msgid ""
"<p>The second index in our little example calculates the number of bits\n"
"in all odd numbered values.  This illustrates an important property of\n"
"the <code>btree-index</code>: it allows duplicate keys.  Standard\n"
"<code>btree</code> and <code>indexed-btree</code> classes are not allowed to "
"have\n"
"duplicate elements.  The odd index allows us to ask simple questions\n"
"like: what are all the odd values with ids that fit into 4 bits?."
msgstr ""

#: in_ed/ElephantUserManual.html:4345
msgctxt "in_ed/ElephantUserManual.html:4345"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4349
msgid ""
"<p>To extract this set, we have to use cursor functions specifically\n"
"designed for the index that iterate over duplicate values."
msgstr ""

#: in_ed/ElephantUserManual.html:4351
msgctxt "in_ed/ElephantUserManual.html:4351"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4353
msgctxt "in_ed/ElephantUserManual.html:4353"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4355
msgctxt "in_ed/ElephantUserManual.html:4355"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4361
msgid ""
"<hr>\n"
"<a name=\"Index-Cursors\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Multi_002dthreaded-"
"Applications\">Multi-threaded Applications</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#BTree-Indexing"
"\">BTree Indexing</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4363
msgctxt "in_ed/ElephantUserManual.html:4363"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4366
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.9 Index Cursors</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4373
msgid ""
"<p>Index cursors are just like BTree cursors except you can get the main\n"
"BTree value instead of the index value.  There are also a parallel set\n"
"of operations such as <code>cursor-pnext</code> instead of\n"
"<code>cursor-next</code> which returns <code>exists</code>, <code>key</"
"code>,\n"
"<code>primary-btree-value</code> and <code>index-value = primary-btree-key</"
"code>."
msgstr ""

#: in_ed/ElephantUserManual.html:4375
msgctxt "in_ed/ElephantUserManual.html:4375"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4379
msgid ""
"<p>Operations that have the same behavior, but return primary btree\n"
"values and keys are:"
msgstr ""

#: in_ed/ElephantUserManual.html:4381
msgctxt "in_ed/ElephantUserManual.html:4381"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4384
msgid ""
"<p><table summary=\"\"><tbody><tr align=\"left\"><th width=\"30%\" valign="
"\"top\">BTree Cursor Function </th><th width=\"10%\" valign=\"top\"></th><th "
"width=\"35%\" valign=\"top\">Index Cursor Function"
msgstr ""

#: in_ed/ElephantUserManual.html:4387
msgctxt "in_ed/ElephantUserManual.html:4387"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4392
msgid ""
"</th></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-first</"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-pfirst</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4395
msgctxt "in_ed/ElephantUserManual.html:4395"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4400
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-last </"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-plast</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4403
msgctxt "in_ed/ElephantUserManual.html:4403"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4408
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-current </"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-pcurrent</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4411
msgctxt "in_ed/ElephantUserManual.html:4411"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4416
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-next </"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-pnext</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4419
msgctxt "in_ed/ElephantUserManual.html:4419"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4424
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-prev</"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-pprev</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4427
msgctxt "in_ed/ElephantUserManual.html:4427"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4432
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-set</code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-pset</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:4435
msgctxt "in_ed/ElephantUserManual.html:4435"
msgid "<p><br></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4442
msgid ""
"</td></tr>\n"
"<tr align=\"left\"><td width=\"30%\" valign=\"top\"><code>cursor-set-range</"
"code>\n"
"</td><td width=\"10%\" valign=\"top\">=&gt;\n"
"</td><td width=\"35%\" valign=\"top\"><code>cursor-set-prange</code>\n"
"   <br></td></tr>\n"
"</tbody></table>"
msgstr ""

#: in_ed/ElephantUserManual.html:4444
msgctxt "in_ed/ElephantUserManual.html:4444"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4450
msgid ""
"<p>The big difference between btree cursors and index cursors is that\n"
"indices can have duplicate key values.  This means we have to choose\n"
"between incrementing over elements, unique key-values or only within\n"
"a duplicate segment.  There are cursor operations for each:"
msgstr ""

#: in_ed/ElephantUserManual.html:4452
msgctxt "in_ed/ElephantUserManual.html:4452"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4458
msgid ""
"<ul>\n"
"<li>Simple move. Standard btree operations work plus <code>cursor-pnext</"
"code> and <code>cursor-pprev</code>\n"
"</li><li>Move to a different key value. <code>cursor-pnext-nodup</code> and "
"<code>cursor-pprev-nodup</code>\n"
"</li><li>Move to next duplicate key value. <code>cursor-pnext-dup</code> and "
"<code>cursor-pprev-dup</code>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:4465
msgid ""
"<p>After incrementing through a set of duplicate items using a\n"
"<code>xxx-dup</code> function, the last next operation returns nil\n"
"indicating there are no more duplicates.  The consequence of this is\n"
"that the cursor is now uninitialized (<code>cursor-initialized-p</code>) "
"and\n"
"needs to be reset by a set or set both call."
msgstr ""

#: in_ed/ElephantUserManual.html:4467
msgctxt "in_ed/ElephantUserManual.html:4467"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4470
msgid ""
"<p>See <a href=\"#Index-Cursor-API\">Index Cursor API</a> for further "
"details."
msgstr ""

#: in_ed/ElephantUserManual.html:4472
msgctxt "in_ed/ElephantUserManual.html:4472"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4474
msgctxt "in_ed/ElephantUserManual.html:4474"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4476
msgctxt "in_ed/ElephantUserManual.html:4476"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4483
msgid ""
"<hr>\n"
"<a name=\"Multi-threaded-Applications\"></a>\n"
"<a name=\"Multi_002dthreaded-Applications\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Transaction-Details"
"\">Transaction Details</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Index-Cursors"
"\">Index Cursors</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4485
msgctxt "in_ed/ElephantUserManual.html:4485"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4488
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.10 Multi-threaded Applications</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4492
msgid ""
"<p>Elephant is thread-safe by design.  Users should not have to think\n"
"about threading except to follow a couple of simple rules."
msgstr ""

#: in_ed/ElephantUserManual.html:4494
msgctxt "in_ed/ElephantUserManual.html:4494"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4500
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Do not perform transactions across multiple threads\n"
"</li><li>Do not perform add/remove index operations on indexed-btrees\n"
"in more than one thread.\n"
"        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:4506
msgid ""
"<p>This and common coding sense should be sufficient!  Elephant's\n"
"internal design for thread safety employs a number of policies\n"
"to try to minimize using lisp locks and simplify analysis of\n"
"multi threaded interactions:"
msgstr ""

#: in_ed/ElephantUserManual.html:4508
msgctxt "in_ed/ElephantUserManual.html:4508"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4516
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li><strong>Rely on the thread safety of the data store databases</strong>\n"
"</li><li><strong>Ensure transaction isolation</strong>\n"
"</li><li><strong>Minimize dependency on thread-local special variables</"
"strong>\n"
"</li><li><strong>Protect shared resources for a given store controller</"
"strong>. \n"
"</li><li><strong>A use policy for shared objects (above)</strong>\n"
"        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:4518
msgid "<h4 class=\"subsection\">4.10.1 Shared Resources</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4522
msgid ""
"<p>Elephant has a few shared resources which are protected by standard "
"locks. \n"
"These are:"
msgstr ""

#: in_ed/ElephantUserManual.html:4524
msgctxt "in_ed/ElephantUserManual.html:4524"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4531
msgid ""
"<ul>\n"
"<li>The store controller connection table\n"
"</li><li>The instance cache\n"
"</li><li>The circularity buffer pool for the serializer\n"
"</li><li>The buffer-stream pool in memutils\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:4536
msgid ""
"<p>In some cases, and on some lisp platforms, we try to use a fast lock\n"
"strategy for frequently accessed items (the resource pools and\n"
"instance cache especially)."
msgstr ""

#: in_ed/ElephantUserManual.html:4538
msgctxt "in_ed/ElephantUserManual.html:4538"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4540
msgid ""
"<h4 class=\"subsection\">4.10.2 Data Store Thread Safety and Transactions</"
"h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4546
msgid ""
"<p>Both CLSQL and Berkelely DB backends are thread safe.  In CLSQL this\n"
"is by ensuring that every thread has it's own handle into the SQL\n"
"libraries or sockets.  Berkeley DB is reentrant and handles locking\n"
"internally."
msgstr ""

#: in_ed/ElephantUserManual.html:4548
msgctxt "in_ed/ElephantUserManual.html:4548"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4554
msgid ""
"<p>Elephant depends on these guarantees especially for the isolation\n"
"properties of transactions.  All operations in the context of a\n"
"given transaction should be isolated and atomic.  It is important\n"
"that a transaction not be shared across threads, however."
msgstr ""

#: in_ed/ElephantUserManual.html:4556
msgctxt "in_ed/ElephantUserManual.html:4556"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4558
msgid ""
"<h4 class=\"subsection\">4.10.3 Minimize Dependency on Thread-Local "
"Specials</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4562
msgid ""
"<p>Elephant uses several global variables as default arguments.  Most\n"
"of these were removed leaving only a couple to handle:"
msgstr ""

#: in_ed/ElephantUserManual.html:4564
msgctxt "in_ed/ElephantUserManual.html:4564"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4579
msgid ""
"<ul>\n"
"<li><code>*store-controller*</code>.  Store controller objects can\n"
"be shared between threads and if a user resets this variable in a local\n"
"thread to another controller, there is no problem with that either. \n"
"Users of multiple concurrent stores can specify the store controller to\n"
"all elephant API commands that don't get it from a persistent object\n"
"implicitely. \n"
"<code>*current-transaction*</code>.  This is always set to the proper null\n"
"value globally and should not be reset in local threads.  Instead,\n"
"transactions take place in a dynamic context that rebinds this variable\n"
"as a special with the current transaction.  This allows for a dynamic\n"
"transaction stack for data stores that can nest transactions or when\n"
"two datastores are both doing transactions concurrently. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:4581
msgctxt "in_ed/ElephantUserManual.html:4581"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4583
msgctxt "in_ed/ElephantUserManual.html:4583"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4589
msgid ""
"<hr>\n"
"<a name=\"Transaction-Details\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Multi_002drepository-"
"Operation\">Multi-repository Operation</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href="
"\"#Multi_002dthreaded-Applications\">Multi-threaded Applications</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4591
msgctxt "in_ed/ElephantUserManual.html:4591"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4594
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.11 Transaction Details</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4602
msgid ""
"<p>Transactions are dynamic contexts in which all side effects to\n"
"persistent slots and other persistent objects such as BTrees are\n"
"guaranteed to have the ACID properties: atomicity, consistency,\n"
"isolation and durability.  On a normal exit from context, the\n"
"side effects are committed as a group.  On a non-local exit,\n"
"the transaction is aborted."
msgstr ""

#: in_ed/ElephantUserManual.html:4604
msgctxt "in_ed/ElephantUserManual.html:4604"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4609
msgid ""
"<p>For most users, the tutorial section <a href=\"#Using-Transactions"
"\">Using Transactions</a> is the\n"
"best introduction to transactions.  This section adds to that by\n"
"exposing some of the details of how it is implemented."
msgstr ""

#: in_ed/ElephantUserManual.html:4611
msgctxt "in_ed/ElephantUserManual.html:4611"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4614
msgid "<p>To reiterate, there are a few important restrictions to adhere to:"
msgstr ""

#: in_ed/ElephantUserManual.html:4616
msgctxt "in_ed/ElephantUserManual.html:4616"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4622
msgid ""
"<ul>\n"
"<li><code>*current-transaction*</code> is reserved for use by the "
"transaction system.  Users should not override, manipulate or close over "
"this variable. \n"
"</li><li>The body of a transaction cannot throw, signal or jump without \n"
"aborting the transaction.  Any non-local exit is considered an aborting \n"
"event.  Catch signals inside the transaction and return a value instead."
msgstr ""

#: in_ed/ElephantUserManual.html:4625
msgid ""
"</li><li>The dynamic extent of a transaction body must stay within the same "
"thread\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:4627
msgid ""
"<h4 class=\"subsection\">4.11.1 <code>with-transaction</code> internals</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4633
msgid ""
"<p>The <code>with-transaction</code> macro wraps the body expression with "
"an\n"
"anonymous lambda expression.  This closure is passed to a call to the\n"
"<code>execute-transaction</code> generic function which is specialized to\n"
"the current data store."
msgstr ""

#: in_ed/ElephantUserManual.html:4635
msgctxt "in_ed/ElephantUserManual.html:4635"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4644
msgid ""
"<p>The only bookkeeping done by the macro is ensuring that the\n"
"<code>:parent</code> argument is checked for the current dynamic "
"transaction\n"
"context.  If it is not owned by the default or provided store\n"
"controller, then it is not passed to <code>execute-transaction</code>.  "
"This\n"
"maintains a continuous dynamic stack transactions through the\n"
"with/ensure transaction macros, but allows for a single leaf\n"
"transaction to another store controller."
msgstr ""

#: in_ed/ElephantUserManual.html:4646
msgctxt "in_ed/ElephantUserManual.html:4646"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4650
msgid ""
"<p>Be very careful about mixing transactions between store controller. \n"
"This facility was only added to ensure that migrate worked correctly."
msgstr ""

#: in_ed/ElephantUserManual.html:4652
msgctxt "in_ed/ElephantUserManual.html:4652"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4661
msgid ""
"<p>The macro processes keywords arguments <code>:store-controller</code>\n"
"(defaults to <code>*store-controller*</code>), <code>:parent</code> "
"(defaults to\n"
"<code>*current-transaction*</code>) and <code>:retries</code> and passes "
"the\n"
"remaining keywords to the call to <code>execute-transaction</code> allowing\n"
"the user to pass data store specific transaction keywords to their\n"
"preferred data store.  The consumed keywords are analyzed and then\n"
"passed on to <code>execute-transaction</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:4663
msgctxt "in_ed/ElephantUserManual.html:4663"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4669
msgid ""
"<p>Any non-standard keywords for a given data store will be ignored by\n"
"other data store implementation of <code>execute-transaction</code> so\n"
"portable programs should not use keywords that change the semantics of\n"
"the transaction."
msgstr ""

#: in_ed/ElephantUserManual.html:4671
msgctxt "in_ed/ElephantUserManual.html:4671"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4679
msgid ""
"<p><code>ensure-transaction</code> only calls <code>execute-transaction</"
"code> if\n"
"it needs to create a fresh transaction.  If the transaction in\n"
"<code>*current-transaction*</code> exists and belongs to the store "
"controller\n"
"passed to <code>ensure-transaction</code> then it merely calls the "
"transaction\n"
"closure, relying on the environment that created the transaction to\n"
"handle any exit procedures and determining whether to abort or commit."
msgstr ""

#: in_ed/ElephantUserManual.html:4681
msgctxt "in_ed/ElephantUserManual.html:4681"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4687
msgid ""
"<p><code>*current-transaction*</code> contains transaction records during "
"the\n"
"dynamic execution of a transaction.  These records capture any data\n"
"store specific bookkeeping as well as the store-controller that the\n"
"transaction is associated with."
msgstr ""

#: in_ed/ElephantUserManual.html:4689
msgctxt "in_ed/ElephantUserManual.html:4689"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4691
msgid ""
"<h4 class=\"subsection\">4.11.2 <code>execute-transaction</code> internals</"
"h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4696
msgid ""
"<p>See the <a href=\"#Elephant-Architecture\">Elephant Architecture</a> "
"section for details on how\n"
"execute-transaction works.  It will provide some deeper insight\n"
"into the transaction system."
msgstr ""

#: in_ed/ElephantUserManual.html:4698
msgctxt "in_ed/ElephantUserManual.html:4698"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4700
msgid ""
"<h4 class=\"subsection\">4.11.3 Building your own transactional framework</"
"h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4710
msgid ""
"<p>Data stores are required to implement three primitive transaction\n"
"methods: <code>controller-start-transaction</code>,\n"
"<code>controller-abort-transaction</code> and\n"
"<code>controller-commit-transaction</code>.  These are wrappers for the "
"data\n"
"store's primitive transaction mechanism.  If you use these, it is up\n"
"to you to make sure that you properly manage nested transactions,\n"
"maintain the state of <code>*current-transaction*</code> handle any\n"
"automated retries you might want, and handle detecting"
msgstr ""

#: in_ed/ElephantUserManual.html:4712
msgctxt "in_ed/ElephantUserManual.html:4712"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4718
msgid ""
"<p>If you use these, you are on your own - it is easy to make mistakes with\n"
"transactions and create very complex bugs that are hard to track down. \n"
"Most users are much better off sticking with the two transaction macros\n"
"and the underlying <code>execute-transaction</code> method."
msgstr ""

#: in_ed/ElephantUserManual.html:4720
msgctxt "in_ed/ElephantUserManual.html:4720"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4722
msgid ""
"<h4 class=\"subsection\">4.11.4 Analyzing Dynamic Transaction Behavior</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:4727
msgid ""
"<p>You can trace <code>elephant::execute-transaction</code> to see the "
"sequence\n"
"of calls that occur dynamically and detect where and how many\n"
"transactions are and are not happening."
msgstr ""

#: in_ed/ElephantUserManual.html:4730
msgid ""
"<!-- IT WOULD BE GOOD TO EXPAND ON THIS REGARDING HOW TO SOLVE COMMON "
"PROBLEMS -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4732
msgctxt "in_ed/ElephantUserManual.html:4732"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4734
msgctxt "in_ed/ElephantUserManual.html:4734"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4741
msgid ""
"<hr>\n"
"<a name=\"Multi-repository-Operation\"></a>\n"
"<a name=\"Multi_002drepository-Operation\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Multiple-Processes-and-"
"Distributed-Applications\">Multiple Processes and Distributed Applications</"
"a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Transaction-"
"Details\">Transaction Details</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4743
msgctxt "in_ed/ElephantUserManual.html:4743"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4746
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.12 Multi-repository Operation</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4750
msgid ""
"<p>Elephant maintains a small hashtable that maps database\n"
"specifications into actual <code>store-controller</code> objects."
msgstr ""

#: in_ed/ElephantUserManual.html:4752
msgctxt "in_ed/ElephantUserManual.html:4752"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4759
msgid ""
"<p>The basic strategy is that the database specification object is\n"
"stored in every persistent object and collection so that the\n"
"repository can be found.  In this way, objects that reside in\n"
"different repositories can coexist within the LISP object space,\n"
"allowing data migration or multiple user stores."
msgstr ""

#: in_ed/ElephantUserManual.html:4761
msgctxt "in_ed/ElephantUserManual.html:4761"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4768
msgid ""
"<p>All persistent instances store their oid and a store-controller\n"
"reference in internal slots.  Slot access and other protocols use\n"
"this to provide access.  This executes an auto-transaction or joins\n"
"a surrounding transaction if the <code>transaction-record</code> in\n"
"<code>*current-transaction*</code> matches the store."
msgstr ""

#: in_ed/ElephantUserManual.html:4770
msgctxt "in_ed/ElephantUserManual.html:4770"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4778
msgid ""
"<p>When operating with multiple stores and nested transactions there are\n"
"some subtle issues to work around: how to avoid writing one store with\n"
"a transaction created in the context of another.  A nested or ensured\n"
"transaction is only indicated in the call to\n"
"<code>execute-transaction</code> if the store controllers match, otherwise "
"a\n"
"new transaction for that store is created."
msgstr ""

#: in_ed/ElephantUserManual.html:4781
msgid ""
"<!-- A PICTURE OF THE DYNAMIC CONTEXT WOULD BE USEFUL HERE -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4783
msgctxt "in_ed/ElephantUserManual.html:4783"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4785
msgctxt "in_ed/ElephantUserManual.html:4785"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4791
msgid ""
"<hr>\n"
"<a name=\"Multiple-Processes-and-Distributed-Applications\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Repository-Migration-and-"
"Upgrade\">Repository Migration and Upgrade</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href="
"\"#Multi_002drepository-Operation\">Multi-repository Operation</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4793
msgctxt "in_ed/ElephantUserManual.html:4793"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4796
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.13 Multiple Processes and Distributed Applications</"
"h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4802
msgid ""
"<p>Just start up two lisp images and connect to the same database. \n"
"Transactions will ensure there is no interaction between processes. \n"
"This has not been extensively tested, but should work without any\n"
"problem.  Any field experience will get reflected in this section of the "
"manual"
msgstr ""

#: in_ed/ElephantUserManual.html:4804
msgctxt "in_ed/ElephantUserManual.html:4804"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4810
msgid ""
"<p>Distributed applications may be supported if the underlying SQL server\n"
"or an appropriate Berkeley DB database is used.  We provide no\n"
"documentation nor have we heard of this use-case.  This remains\n"
"fertile ground for future investigation."
msgstr ""

#: in_ed/ElephantUserManual.html:4812
msgctxt "in_ed/ElephantUserManual.html:4812"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4814
msgctxt "in_ed/ElephantUserManual.html:4814"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4816
msgctxt "in_ed/ElephantUserManual.html:4816"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4822
msgid ""
"<hr>\n"
"<a name=\"Repository-Migration-and-Upgrade\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Performance-Tuning"
"\">Performance Tuning</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Multiple-"
"Processes-and-Distributed-Applications\">Multiple Processes and Distributed "
"Applications</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4824
msgctxt "in_ed/ElephantUserManual.html:4824"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4827
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.14 Repository Migration and Upgrade</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4831
msgid ""
"<p>This version of Elephant supports migration between store controllers of\n"
"any backend type."
msgstr ""

#: in_ed/ElephantUserManual.html:4833
msgctxt "in_ed/ElephantUserManual.html:4833"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4837
msgid ""
"<p>The tests <code>migrate1</code> - <code>migrate5</code> are "
"demonstrations of this\n"
"capability."
msgstr ""

#: in_ed/ElephantUserManual.html:4839
msgctxt "in_ed/ElephantUserManual.html:4839"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4846
msgid ""
"<p>There is a single generic function <code>migrate</code> that is used to "
"copy\n"
"different object types to a target repository.  It is assumed that "
"typically\n"
"migrate will be called on two repositories and all live objects (those\n"
"reachable in the root or class-root) will be copied to the target "
"repository\n"
"via recursive calls to migrate for specific objects."
msgstr ""

#: in_ed/ElephantUserManual.html:4848
msgctxt "in_ed/ElephantUserManual.html:4848"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4855
msgid ""
"<p>When persistent instances are copied, their internal pointer will be "
"updated\n"
"to point to the new repository so after migration the lisp image should be\n"
"merely updated to refer to the target repository in the *store-controller*\n"
"variable or whatever variable the application is using to store the primary\n"
"controller instance."
msgstr ""

#: in_ed/ElephantUserManual.html:4857
msgctxt "in_ed/ElephantUserManual.html:4857"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4861
msgid ""
"<p>There are some limitations to the current migration implementation:\n"
"     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4864
msgid ""
"<ol type=\"1\" start=\"1\">\n"
"<li>Migrate currently will not handle circular list objects"
msgstr ""

#: in_ed/ElephantUserManual.html:4870
msgid ""
"     <!-- @item Migrate does not support arrays with nested persistent "
"objects -->\n"
"</li><li>Indexed classes only have their class index copied if you use the\n"
"   top level migration.  Objects will be copied without slot data if you\n"
"   try to migrate an object outside of a store-to-store migration due to\n"
"   the class object belonging to one store or another"
msgstr ""

#: in_ed/ElephantUserManual.html:4873
msgid ""
"     </li><li>Migrate assumes that after migration, indexed classes belong "
"to the\n"
"   target store."
msgstr ""

#: in_ed/ElephantUserManual.html:4877
msgid ""
"     </li><li>In general, migration is a one-time activity and afterwards "
"(or after\n"
"   a validation test) the source store should be closed.  Any failures\n"
"   in migration should then be easy to catch."
msgstr ""

#: in_ed/ElephantUserManual.html:4884
msgid ""
"     </li><li>Each call to migration will be good about keeping track of "
"already\n"
"   copied objects to avoid duplication.  Duplication shouldn't screw\n"
"   up the semantics, just add storage overhead but is to be avoided. \n"
"   However this information is not saved between calls and there's no\n"
"   other way to do comparisons between objects across stores (different\n"
"   oid namespaces) so user beware of the pitfalls of partial migrations..."
msgstr ""

#: in_ed/ElephantUserManual.html:4889
msgid ""
"     </li><li>Migrate keeps a memory-resident hash of all objects; this "
"means\n"
"   you cannot currently migrate a store that has more data than your\n"
"   main memory.  (This could be fixed by keeping the oid table in\n"
"   the target store and deleting it on completion)"
msgstr ""

#: in_ed/ElephantUserManual.html:4895
msgid ""
"     </li><li>Migration does not maintain OID equivalence so any "
"datastructures which\n"
"   index into those will have to have a way to reconstruct themselves "
"(better\n"
"   to keep the object references themselves rather than oids in general)\n"
"   but they can overload the migrate method to accomplish this cleanly\n"
"        </li></ol>"
msgstr ""

#: in_ed/ElephantUserManual.html:4903
msgid ""
"<p>Users can customize migration if they create unusual datastructures that\n"
"are not automatically supported by the existing <code>migrate</code> "
"methods. \n"
"For example, a datastructure that stores only object OIDs instead of\n"
"serialized object references will need to overload migrate to ensure\n"
"that all referenced objects are in fact copied (otherwise the OIDs will\n"
"just be treated as fixnums potentially leaving dangling references."
msgstr ""

#: in_ed/ElephantUserManual.html:4905
msgctxt "in_ed/ElephantUserManual.html:4905"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4909
msgid ""
"<p>To customize migration overload a version of migrate to specialize on\n"
"your specific persistent class type."
msgstr ""

#: in_ed/ElephantUserManual.html:4911
msgctxt "in_ed/ElephantUserManual.html:4911"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4914
msgid ""
"<pre class=\"lisp\">     (defmethod migrate ((dst store-controller) (src my-"
"class)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4921
msgid ""
"<p>In the body of this method you can call <code>(call-next-method)</code>\n"
"to get a destination repository object with all the slots copied over\n"
"to the target repository which you can then overwrite.  To avoid the\n"
"default persistent slot copying, bind the dynamic variable\n"
"<code>*inhibit-slot-writes*</code> in your user method using\n"
"<code>with-inhibited-slot-copy</code> a convenience macro."
msgstr ""

#: in_ed/ElephantUserManual.html:4923
msgctxt "in_ed/ElephantUserManual.html:4923"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4925
msgctxt "in_ed/ElephantUserManual.html:4925"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:4927
msgctxt "in_ed/ElephantUserManual.html:4927"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4933
msgid ""
"<hr>\n"
"<a name=\"Performance-Tuning\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Garbage-Collection"
"\">Garbage Collection</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Repository-"
"Migration-and-Upgrade\">Repository Migration and Upgrade</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:4935
msgctxt "in_ed/ElephantUserManual.html:4935"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:4938
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.15 Performance Tuning</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:4943
msgid ""
"<p>Performance is usually measured in transactions per second.  Database\n"
"reads are cheap.  To get more transactions throughput, consider\n"
"setting"
msgstr ""

#: in_ed/ElephantUserManual.html:4945
msgctxt "in_ed/ElephantUserManual.html:4945"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4949
msgid ""
"<pre class=\"lisp\">     (db-env-set-flags (controller-environment *store-"
"controller*)\n"
"                       1 :txn-nosync t)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4955
msgid ""
"<p>or look at other flags in the Berkeley DB docs.  This will greatly\n"
"increase your throughput at the cost of some durability; I get around\n"
"a 100x improvement.  Durability can be recovered with judicious use of\n"
"checkpointing and replication, though this is currently not supported\n"
"directly by Elephant  see the sleepycat docs."
msgstr ""

#: in_ed/ElephantUserManual.html:4957
msgctxt "in_ed/ElephantUserManual.html:4957"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4962
msgid ""
"<p>The serializer is definitely fast on fixnums, strings, and persistent\n"
"things.  It is fast but consing with floats and doubles.  YMMV with\n"
"other values, though I've tried to make them fast."
msgstr ""

#: in_ed/ElephantUserManual.html:4964
msgctxt "in_ed/ElephantUserManual.html:4964"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4968
msgid ""
"<p>Use <code>with-transactions</code> to avoid many automatic transactions, "
"for\n"
"example you'll find that this construct"
msgstr ""

#: in_ed/ElephantUserManual.html:4970
msgctxt "in_ed/ElephantUserManual.html:4970"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4973
msgid ""
"<pre class=\"lisp\">     (dotimes (i 1000) (add-to-root \"key\" \"value\"))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4975
msgid "<p>is much slower than"
msgstr ""

#: in_ed/ElephantUserManual.html:4977
msgctxt "in_ed/ElephantUserManual.html:4977"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4981
msgid ""
"<pre class=\"lisp\">     (with-transaction ()\n"
"      (dotimes (i 1000) (add-to-root \"key\" \"value\"))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:4985
msgid ""
"<p>since there's only 1 transaction in the latter.  However storing\n"
"transaction state requires allocated main memory of which there is\n"
"a finite amount so do not make your transactions too large."
msgstr ""

#: in_ed/ElephantUserManual.html:4987
msgctxt "in_ed/ElephantUserManual.html:4987"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:4991
msgid ""
"<p>Use the persistent classes and collections; if you're using\n"
"transactions correctly they should be much faster."
msgstr ""

#: in_ed/ElephantUserManual.html:4993
msgctxt "in_ed/ElephantUserManual.html:4993"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5001
msgid ""
"<p>If you don't need transactions you can turn them off.  Opening the DB\n"
"in less concurrent / transactional modes will be supported very soon\n"
"(it's just an argument change, I think.)  However you will need to\n"
"ensure that multiple threads do not interleave access so single user\n"
"mode is not suitable for use in web servers or other typically\n"
"multi-threaded applications."
msgstr ""

#: in_ed/ElephantUserManual.html:5003
msgctxt "in_ed/ElephantUserManual.html:5003"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5005
msgctxt "in_ed/ElephantUserManual.html:5005"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5007
msgctxt "in_ed/ElephantUserManual.html:5007"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5013
msgid ""
"<hr>\n"
"<a name=\"Garbage-Collection\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Berkeley-DB-Data-Store"
"\">Berkeley DB Data Store</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Performance-Tuning"
"\">Performance Tuning</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5015
msgctxt "in_ed/ElephantUserManual.html:5015"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5018
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.16 Garbage Collection</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5023
msgid ""
"<p>Garbage collection is not implemented as part of the persistent object\n"
"protocol.  However, the migration (see <a href=\"#Repository-Migration-and-"
"Upgrade\">Repository Migration and Upgrade</a>) mechanism will consolidate "
"storage and recover OIDs which is\n"
"an effective offline GC.  No online solution is currently anticipated."
msgstr ""

#: in_ed/ElephantUserManual.html:5025
msgctxt "in_ed/ElephantUserManual.html:5025"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5027
msgctxt "in_ed/ElephantUserManual.html:5027"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5029
msgctxt "in_ed/ElephantUserManual.html:5029"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5035
msgid ""
"<hr>\n"
"<a name=\"Berkeley-DB-Data-Store\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#CLSQL-Data-Store\">CLSQL "
"Data Store</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Garbage-Collection"
"\">Garbage Collection</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5037
msgctxt "in_ed/ElephantUserManual.html:5037"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5040
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.17 Berkeley DB Data Store</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5046
msgid ""
"<p>This section briefly describes special facilities of the Berkeley DB\n"
"data store and explains how persistent objects map onto it.  Elephant\n"
"was originally written targeting only Berkeley DB.  As such, the\n"
"design of Elephant was heavily influenced by the Berkeley DB architecture."
msgstr ""

#: in_ed/ElephantUserManual.html:5048
msgctxt "in_ed/ElephantUserManual.html:5048"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5058
msgid ""
"<p>Berkeley DB is a C library that very efficiently implements a database\n"
"by allowing the application to directly manipulate the memory pools\n"
"and disk storage without requiring communication through a server as\n"
"in many relational database applications.  The library supports\n"
"multi-threaded and multi-process transactions through a shared memory\n"
"region that provides for shared buffer pools, shared locks, etc.  Each\n"
"process in a multi-process application is independently linked to the\n"
"library, but shares the memory pool and disk storage."
msgstr ""

#: in_ed/ElephantUserManual.html:5060
msgctxt "in_ed/ElephantUserManual.html:5060"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5064
msgid ""
"<p>The following subsections discuss places where Berkeley DB provides\n"
"additional facilities to the Elephant interfaces described above."
msgstr ""

#: in_ed/ElephantUserManual.html:5066
msgctxt "in_ed/ElephantUserManual.html:5066"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5068
msgid "<h4 class=\"subsection\">4.17.1 Architecture Overview</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5075
msgid ""
"<p>The Berkeley DB data store (indicated by a <code>:BDB</code> in the data\n"
"store specification) supports the Elephant protocols using Berkeley DB\n"
"as a backend.  The primary features of the BDB library that are used\n"
"are BTree databases, the transactional subsystem, a shared buffer pool\n"
"and unique ID sequences."
msgstr ""

#: in_ed/ElephantUserManual.html:5077
msgctxt "in_ed/ElephantUserManual.html:5077"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5082
msgid ""
"<p>All data written to the data store ends up in a BTree slot using a\n"
"transaction.  There are two databases, one for persistent slot values\n"
"and one for btrees.  The mapping of Elephant objects is quite simple."
msgstr ""

#: in_ed/ElephantUserManual.html:5084
msgctxt "in_ed/ElephantUserManual.html:5084"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5090
msgid ""
"<p>Persistent slots are written to a btree using a unique key and the\n"
"serialized value being written.  The key is the oid of the persistent\n"
"object concatenated to the serialized name of the slot being written. \n"
"This ordering groups slots together on the disk"
msgstr ""

#: in_ed/ElephantUserManual.html:5092
msgctxt "in_ed/ElephantUserManual.html:5092"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5094
msgid "<h4 class=\"subsection\">4.17.2 Opening a Store</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5097
msgid ""
"<p>When opening a store there are several special options you can invoke:"
msgstr ""

#: in_ed/ElephantUserManual.html:5099
msgctxt "in_ed/ElephantUserManual.html:5099"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5117
msgid ""
"<ul>\n"
"<li><code>:recover</code> tells Berkeley DB to run recovery on the\n"
"      underlying database.  This is reasonably cheap if you do not need\n"
"      to run recovery, but can take a very long time if you let your log\n"
"      files get too long.  This option must be run in a single-threaded\n"
"      mode before other threads or processes are accessing the same "
"database. \n"
"</li><li><code>:recover-fatal</code> runs Berkeley DB catastrophic recovery "
"(see BDB documentation). \n"
"</li><li><code>:thread</code> set this to nil if you want to run single "
"threaded,\n"
"      it avoids locking overhead on the environment.  The default is\n"
"      to run <em>free-threaded</em>. \n"
"</li><li>The <code>:deadlock-detect</code> launches a background process "
"via\n"
"      the run-shell commands of lisp.  This background process connects to a "
"Berkeley\n"
"      DB database and runs a regular check for deadlock, freeing locks as "
"appropriate\n"
"      when it finds them.  This can avoid a set of annoying crashes in "
"Berkeley DB,\n"
"      the very crashes that, in part, motivated Franz to abandon "
"AllegroStore and write\n"
"      the pure-Lisp AllegroCache. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:5119
msgid "<h4 class=\"subsection\">4.17.3 Starting a Transaction</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5125
msgid ""
"<p>Berkeley DB transactions have a number of additional keyword\n"
"parameters that can help you tune performance or change the semantics\n"
"in Berkeley DB applications.  They are summaried briefly here, see the\n"
"BDB docs for detailed information:"
msgstr ""

#: in_ed/ElephantUserManual.html:5127
msgctxt "in_ed/ElephantUserManual.html:5127"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5157
msgid ""
"<ul>\n"
"<li><code>:degree-2</code> This option provides for cursor stability, that "
"is whatever\n"
"      object the cursor is currently at will not change, however prior\n"
"values read may change.  This can significantly enhance performance if\n"
"you frequently map over a btree as it doesn't lock the entire btree,\n"
"just the current element.  All transactions running concurrently over\n"
"the btree can commit without restarting.  The global parameter\n"
"<code>*map-using-degree2*</code> determines the default behavior of this\n"
"option.  It is set to true by default so that map has similar\n"
"semantics to lists.  This violates both <em>Atomicity and\n"
"Consistency</em> depending on how it is used. \n"
"</li><li><code>:read-uncommitted</code> Allows reading data that has been "
"written by other\n"
"transactions, this avoids the current thread blocking on a read access\n"
"(for example you are merely dumping a btree for inspection) so long as\n"
"you don't care whether the data you read changes or not.  This\n"
"violates <em>Atomicity and Consistency</em> depending on how it is used\n"
"</li><li><code>:txn-nosync</code> Do not flush the log when this transaction "
"completes.  This means\n"
"that you lose the <em>Durability</em> of a transaction, but gain performance "
"by avoiding the expensive\n"
"sync operation. \n"
"</li><li><code>:txn-nowait</code> If a lock is unavailable, have the "
"underlying database return a\n"
"deadlock message immediately, rather than blocking, so that the transaction "
"restarts. \n"
"</li><li><code>:txn-sync</code> This is the default behavior and specifies "
"that the transaction log\n"
"of the current transaction is flushed to disk before the transaction commit "
"routine returns.  This\n"
"provides full ACID compliance. \n"
"</li><li><code>:transaction</code> This argument is for advanced use.  It "
"tells\n"
"      the Berkeley DB transaction subsystem the transaction it should use "
"rather\n"
"than to create a new one.  The <code>:parent</code> argument provides a "
"parent transaction\n"
"that can result in a true nested transaction. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:5159
msgid "<h4 class=\"subsection\">4.17.4 Special Commands</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5163
msgid ""
"<p>The berkeley DB data store exports some special facilities that are not\n"
"currently supported by other data stores."
msgstr ""

#: in_ed/ElephantUserManual.html:5165
msgctxt "in_ed/ElephantUserManual.html:5165"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5186
msgid ""
"<ul>\n"
"<li><code>optimize-layout</code>.  This function provides an interface\n"
"     to tell Berkeley DB to try to reclaim freed storage from the file\n"
"system.  This is of limited utility as it can only shrink database by\n"
"the number of empty pages at the end of the file.  Depending on what\n"
"storage you have deleted, this can end up being only a handful or even\n"
"zero pages.  This will work well if you recently ran an experiment\n"
"where you created a bunch of new data, then deleted it all and want to\n"
"reclaim the space (i.e. you had runaway loop that was creating endless\n"
"objects). \n"
"</li><li><code>db-bdb:checkpoint</code>. This internal function forces\n"
"the transaction log to be flushed and all active data to be written to\n"
"the database so that the logs and database are in synch.  This is good\n"
"to run when you want to delete old log files and backup your database\n"
"files as a coherent, recoverable set.  Run checkpoing, close the\n"
"database and then manually run db_archive -d on the database to\n"
"remove old logs.  Finally, copy the resulting data to stable storage. \n"
"Read the Berkeley DB docs for more details of backing up and\n"
"checkpointing. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:5188
msgid "<h4 class=\"subsection\">4.17.5 Performance Tuning</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5195
msgid ""
"<p>Performance tuning for Berkeley DB is a complex topic and we will not\n"
"cover it here.  You need to understand the Berkeley DB data store\n"
"architecture, the transaction architecture, the serializer and other\n"
"such parameters.  The primary performance related parameters are\n"
"described in config.sexp.  They are:"
msgstr ""

#: in_ed/ElephantUserManual.html:5197
msgctxt "in_ed/ElephantUserManual.html:5197"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5209
msgid ""
"<ul>\n"
"<li><code>:berkeley-db-map-degree2</code> - Improve the efficiency of cursor "
"traversals\n"
"  in the various mapping functions.  Defaults to true, meaning a value\n"
"you just read while mapping may change before the traversal is done. \n"
"So if you operate only on the current cursor location, you are\n"
"guaranteed that it's value is stable. \n"
"</li><li><code>:berkeley-db-cachesize</code> - Change the size of the buffer "
"cache\n"
"for Berkeley DB to match your working set.  Default is 10MB, or about\n"
"twenty thousand indexed class objects, or 50k standard persistent\n"
"objects.  You can save memory by reducing this value. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:5211
msgctxt "in_ed/ElephantUserManual.html:5211"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5213
msgctxt "in_ed/ElephantUserManual.html:5213"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5219
msgid ""
"<hr>\n"
"<a name=\"CLSQL-Data-Store\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Postmodern-Data-Store"
"\">Postmodern Data Store</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Berkeley-DB-Data-"
"Store\">Berkeley DB Data Store</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5221
msgctxt "in_ed/ElephantUserManual.html:5221"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5224
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.18 CLSQL Data Store</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5236
msgid ""
"<p>Elephant uses Kevin Rosenberg's excellent <a href=\"http://clsql.b9.com/"
"\">CLSQL</a>\n"
" CLSQL lisp binding to relational databases\n"
"(it does not use the ORM functionality offered by that package.) \n"
"CLSQL interfaces to many databases (Postgres, MySQL, Oracle,\n"
"ODBC, SQLite3, Microsoft SQL Server (via ODBC)).  Right now, Elephant has\n"
"been tested with Postgress and SQLite3.  Probably getting it to work with\n"
"one of the others will take a small amount of debugging; in principle there\n"
"is no reason it won't work out of the box.  We invite users to try\n"
"other database, and will quickly incorporate patches needed to make them\n"
"work."
msgstr ""

#: in_ed/ElephantUserManual.html:5238
msgctxt "in_ed/ElephantUserManual.html:5238"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5242
msgid ""
"<p>Because CLSQL is very generic, the CLSQL interface does not offer any\n"
"special feature as discussed in the previous section <a href=\"#Berkeley-DB-"
"Data-Store\">Berkeley DB Data Store</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:5244
msgctxt "in_ed/ElephantUserManual.html:5244"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5246
msgid "<h4 class=\"subsection\">4.18.1 Basic CLSQL Implementation</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5252
msgid ""
"<p>The CLSQL uses base64 encoding to store binary data as text directly.  "
"This\n"
"has the advantage that it works with all databases, which tend to differ\n"
"widely in their treatment of Binary Large Objects (BLOBs.)  It imposes some\n"
"obvious overhead."
msgstr ""

#: in_ed/ElephantUserManual.html:5254
msgctxt "in_ed/ElephantUserManual.html:5254"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5263
msgid ""
"<p>The CLSQL implementation is structurally exactly the same as the BDB "
"implementation. \n"
"A single table is created to hold all (key,value) pairs.  An index on the "
"key column\n"
"provides efficient key lookup.  No additional indexing offered by the "
"underlying\n"
"databases is used.  This has the advantage that the API is exactly the same "
"as the\n"
"BDB api, and all of the functional indexes, cursors, and secondary indexes "
"work exactly\n"
"the same way.  It does not exploit the performance that a database-specific "
"solution\n"
"would offer (see <a href=\"#Postmodern-Data-Store\">Postmodern Data Store</"
"a> for an example of such a system."
msgstr ""

#: in_ed/ElephantUserManual.html:5265
msgctxt "in_ed/ElephantUserManual.html:5265"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5272
msgid ""
"<p>Our basic strategy is to leave the CLSQL interface as simple as possible, "
"in order to\n"
"work with as many databases as possible.  When there is enough motivation to "
"support\n"
"a backend that is specific to one database (and therefore probably faster), "
"such an\n"
"interface can be placed into the contrib directory and migrated into the "
"main\n"
"code base as time allows the complete integration with the test suite."
msgstr ""

#: in_ed/ElephantUserManual.html:5274
msgctxt "in_ed/ElephantUserManual.html:5274"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5276
msgctxt "in_ed/ElephantUserManual.html:5276"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5278
msgctxt "in_ed/ElephantUserManual.html:5278"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5284
msgid ""
"<hr>\n"
"<a name=\"Postmodern-Data-Store\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Native-Lisp-Data-Store"
"\">Native Lisp Data Store</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#CLSQL-Data-Store"
"\">CLSQL Data Store</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5286
msgctxt "in_ed/ElephantUserManual.html:5286"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5289
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.19 Postmodern Data Store</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5293
msgid ""
"<p>The postmodern data store is not yet integrated.  It should be\n"
"documented for the forthcoming release 0.9.1 or 0.9.2."
msgstr ""

#: in_ed/ElephantUserManual.html:5295
msgctxt "in_ed/ElephantUserManual.html:5295"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5299
msgid ""
"<p>This backend will presumably be much faster, when used against PostGres, "
"than the\n"
"generic CLSQL store."
msgstr ""

#: in_ed/ElephantUserManual.html:5301
msgctxt "in_ed/ElephantUserManual.html:5301"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5303
msgctxt "in_ed/ElephantUserManual.html:5303"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5305
msgctxt "in_ed/ElephantUserManual.html:5305"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5310
msgid ""
"<hr>\n"
"<a name=\"Native-Lisp-Data-Store\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Postmodern-Data-"
"Store\">Postmodern Data Store</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-Guide\">User Guide</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5312
msgctxt "in_ed/ElephantUserManual.html:5312"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5315
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">4.20 Native Lisp Data Store</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5320
msgid ""
"<p>The native lisp data store is unimplemented.  It is tentatively\n"
"planned for a 1.1 release sometime in the distant future.  Yes,\n"
"this is a deliberatively vague declaration."
msgstr ""

#: in_ed/ElephantUserManual.html:5405
msgid ""
"<!-- @node Querying persistent instances -->\n"
"<!-- @comment node-name, next, previous, up -->\n"
"<!-- @section Querying persistent instances -->\n"
"<!-- A SQL select-like interface is in the works, but for now queries are --"
">\n"
"<!-- limited to manual mapping over class instances or doing small queries --"
">\n"
"<!-- with @code{get-instances-*} functions.  One advantage of this is that --"
">\n"
"<!-- it is easy to estimate the performance costs of your queries and to --"
">\n"
"<!-- choose standard and derived indices that give you the ordering and -->\n"
"<!-- performance you want. -->\n"
"<!-- There is, however, a quick and dirty query API example that is not -->\n"
"<!-- officially supported in the release but is intended to invite comment. "
"-->\n"
"<!-- This is an example of a full query system that would automatically -->\n"
"<!-- perform joins, use the appropriate indices and perhaps even adaptively "
"-->\n"
"<!-- suggest or add indices to facilitate better performance on common -->\n"
"<!-- queries. -->\n"
"<!-- There are two functions @ref{Function elephant:get-query-instances} --"
">\n"
"<!-- and @ref{Function elephant:map-class-query} which accept a set of -->\n"
"<!-- constraints instead of the familiar value or range arguments. -->\n"
"<!-- We'll use the classes @code{person} and @code{department} to -->\n"
"<!-- illustrate how to perform queries over a set of objects that may be --"
">\n"
"<!-- constrainted by their relationships to other objects. -->\n"
"<!-- @lisp -->\n"
"<!-- (defpclass person () -->\n"
"<!-- ((name :initarg :name :index t) -->\n"
"<!-- (salary :initarg :salary :index t) -->\n"
"<!-- (department :initarg :dept))) -->\n"
"<!-- (defmethod print-object ((p person) stream) -->\n"
"<!-- (format stream \"#<PERS: ~A>\" (slot-value p 'name))) -->\n"
"<!-- (defun print-name (inst) -->\n"
"<!-- (format t \"Name: ~A~%\" (slot-value inst 'name))) -->\n"
"<!-- (defpclass department () -->\n"
"<!-- ((name :initarg :name) -->\n"
"<!-- (manager :initarg :manager))) -->\n"
"<!-- (defmethod print-object ((d department) stream) -->\n"
"<!-- (format stream \"#<DEPT ~A, mgr = ~A>\" -->\n"
"<!-- (slot-value d 'name) -->\n"
"<!-- (when (slot-boundp d 'manager) -->\n"
"<!-- (slot-value (slot-value d 'manager) 'name)))) -->\n"
"<!-- @end lisp -->\n"
"<!-- Here we have a simple employee database with managers (also of type --"
">\n"
"<!-- person) and departments.  This simple system will provide fodder for --"
">\n"
"<!-- some reasonably complex constraints.  Let's create a few departments. --"
">\n"
"<!-- @lisp -->\n"
"<!-- (setf marketing (make-instance 'department :name \"Marketing\")) -->\n"
"<!-- (setf engineering (make-instance 'department :name \"Engineering\")) --"
">\n"
"<!-- (setf sales (make-instance 'department :name \"Sales\")) -->\n"
"<!-- @end lisp -->\n"
"<!-- And manager @code{people} for the departments. -->\n"
"<!-- @lisp -->\n"
"<!-- (make-instance 'person :name \"George\" :salary 140000 :department "
"marketing) -->\n"
"<!-- (setf (slot-value marketing 'manager) *) -->\n"
"<!-- (make-instance 'person :name \"Sally\" :salary 140000 :department "
"engineering) -->\n"
"<!-- (setf (slot-value engineering 'manager) *) -->\n"
"<!-- (make-instance 'person :name \"Freddy\" :salary 180000 :department "
"sales) -->\n"
"<!-- (setf (slot-value sales 'manager) *) -->\n"
"<!-- @end lisp -->\n"
"<!-- And of course we need some folks to manage -->\n"
"<!-- @lisp -->\n"
"<!-- (defparameter *names* -->\n"
"<!-- '(\"Jacob\" \"Emily\" \"Michael\" \"Joshua\" \"Andrew\" \"Olivia\" "
"\"Hannah\" \"Christopher\")) -->\n"
"<!-- (defun random-element (list) -->\n"
"<!-- \"Choose a random element from the list and return it\" -->\n"
"<!-- (nth (random (length list)) list)) -->\n"
"<!-- (with-transaction () -->\n"
"<!-- (loop for i from 0 upto 40 do -->\n"
"<!-- (make-instance 'person -->\n"
"<!-- :name (format nil \"~A~A\" (random-elephant *names*) i) -->\n"
"<!-- :salary (floor (+ (* (random 1000) 100) 30000)) -->\n"
"<!-- :department (case (random 3) -->\n"
"<!-- (0 marketing) -->\n"
"<!-- (1 engineering) -->\n"
"<!-- (2 sales))))) -->\n"
"<!-- @end lisp -->\n"
"<!-- Now we can look at a few queries. -->\n"
"<!-- @lisp -->\n"
"<!-- (defun get-managers () -->\n"
"<!-- (get-query-instances `((person -->\n"
"<!-- For those familiar with SQL, if an instance of @code{person} has a -->\n"
"<!-- pointer to an instance of @code{department} then that relation can be --"
">\n"
"<!-- used to perform a join.  Of course joins in the object world won't -->\n"
"<!-- return a table, instead they will return conjunctions of objects that --"
">\n"
"<!-- satisfy a mutual set of constraints. -->\n"
"<!-- *-texinfo-*- -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5407
msgctxt "in_ed/ElephantUserManual.html:5407"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5409
msgctxt "in_ed/ElephantUserManual.html:5409"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5415
msgid ""
"<hr>\n"
"<a name=\"User-API-Reference\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Design-Patterns\">Design "
"Patterns</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#User-Guide\">User "
"Guide</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5417
msgctxt "in_ed/ElephantUserManual.html:5417"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5420
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">5 User API Reference</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:5423
msgid ""
"<p><a name=\"index-User-API-Reference-6\"></a><a name=\"index-API-"
"Reference-7\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5425
msgctxt "in_ed/ElephantUserManual.html:5425"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5439
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#Store-Controller-API\">Store Controllers</"
"a>:  Connecting to a data store. \n"
"</li><li><a accesskey=\"2\" href=\"#Persistent-Object-API\">Persistent "
"Objects</a>:  Defining persistent classes and creating and manipulating "
"persistent indices. \n"
"</li><li><a accesskey=\"3\" href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing</a>:  Convenient indexing of persistent "
"classes. \n"
"</li><li><a accesskey=\"4\" href=\"#Persistent-Set-API\">Persistent Sets</"
"a>:  Maintaining persistent collections the easy way. \n"
"<!-- * Query Interfaces:: Finding instances. -->\n"
"</li><li><a accesskey=\"5\" href=\"#BTree-API\">BTrees</a>:  BTrees and "
"indices, a low level persistent data structure. \n"
"</li><li><a accesskey=\"6\" href=\"#BTree-Cursor-API\">BTree Cursors</a>:  "
"Traversing BTrees. \n"
"</li><li><a accesskey=\"7\" href=\"#Index-Cursor-API\">Index Cursors</a>:  "
"Traversing BTree Indicies. \n"
"</li><li><a accesskey=\"8\" href=\"#Transaction-API\">Transactions</a>:  "
"Transaction functions. \n"
"</li><li><a accesskey=\"9\" href=\"#Migration-and-Upgrading-API\">Migration "
"and Upgrading</a>:  Migration and upgrading. \n"
"<!-- * Miscellaneous API:: Other functions and data store specific functions "
"-->\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:5441
msgctxt "in_ed/ElephantUserManual.html:5441"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5443
msgctxt "in_ed/ElephantUserManual.html:5443"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5448
msgid ""
"<hr>\n"
"<a name=\"Store-Controller-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Object-API"
"\">Persistent Object API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5450
msgctxt "in_ed/ElephantUserManual.html:5450"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5453
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.1 Store Controllers</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5460
msgid ""
"<p><a name=\"index-Store-Controller-8\"></a><a name=\"index-API-9\"></a>\n"
"Store controllers provide the persistent storage for CLOS objects and\n"
"BTree collections.  Any persistent operations must be done in the\n"
"context of a store controller.  The default store-controller is stored\n"
"in a global variable."
msgstr ""

#: in_ed/ElephantUserManual.html:5462
msgctxt "in_ed/ElephantUserManual.html:5462"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5465
msgid ""
"<p><a name=\"Variable-elephant_003a_002astore_002dcontroller_002a\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5467
msgctxt "in_ed/ElephantUserManual.html:5467"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5473
msgid ""
"<div class=\"defun\">\n"
" Variable: <b>elephant:*store-controller*</b><var><a name=\"index-"
"elephant_003a_002astore_002dcontroller_002a-10\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003a_002astore_002dcontroller_002a-11\"></a>The "
"store controller which persistent objects talk to. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5475
msgctxt "in_ed/ElephantUserManual.html:5475"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5477
msgid "<!-- @include includes/class-elephant-store-controller.texinfo -->"
msgstr ""

#: in_ed/ElephantUserManual.html:5480
msgid ""
"<p><a href=\"#Class-elephant_003astore_002dcontroller\">Class elephant:store-"
"controller</a> is associated with the following\n"
"user methods and macros:"
msgstr ""

#: in_ed/ElephantUserManual.html:5482
msgctxt "in_ed/ElephantUserManual.html:5482"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5485
msgid "<p><a name=\"Macro-elephant_003awith_002dopen_002dstore\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5487
msgctxt "in_ed/ElephantUserManual.html:5487"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5494
msgid ""
"<div class=\"defun\">\n"
" Macro: <b>elephant:with-open-store</b><var> spec &amp;body body<a name="
"\"index-elephant_003awith_002dopen_002dstore-12\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003awith_002dopen_002dstore-13\"></a>Executes "
"the body with an open controller,\n"
"   unconditionally closing the controller on exit. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5496
msgctxt "in_ed/ElephantUserManual.html:5496"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5499
msgid "<p><a name=\"Function-elephant_003aopen_002dstore\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5501
msgctxt "in_ed/ElephantUserManual.html:5501"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5512
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:open-store</b><var> spec &amp;rest args<a name="
"\"index-elephant_003aopen_002dstore-14\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aopen_002dstore-15\"></a>Conveniently open a "
"store controller.  Set *store-controller* to the new controller\n"
"   unless it is already set (opening a second controller means you must keep "
"track of\n"
"   controllers yourself.  *store-controller* is a convenience variable for "
"single-store\n"
"   applications or single-store per thread apps.  Multi-store apps should "
"either confine\n"
"   their *store-controller* to a given dynamic context or wrap each store-"
"specific op in\n"
"   a transaction using with or ensure transaction.  Returns the opened store "
"controller. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5514
msgctxt "in_ed/ElephantUserManual.html:5514"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5517
msgid "<p><a name=\"Function-elephant_003aclose_002dstore\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5519
msgctxt "in_ed/ElephantUserManual.html:5519"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5525
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:close-store</b><var> &amp;optional sc<a name=\"index-"
"elephant_003aclose_002dstore-16\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aclose_002dstore-17\"></a>Conveniently close "
"the store controller.  If you pass a custom store controller, you are "
"responsible for setting it to <code>nil</code>. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5527
msgctxt "in_ed/ElephantUserManual.html:5527"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5530
msgid "<p><a name=\"Function-elephant_003aget_002dfrom_002droot\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5532
msgctxt "in_ed/ElephantUserManual.html:5532"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5541
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:get-from-root</b><var> key &amp;key sc<a name=\"index-"
"elephant_003aget_002dfrom_002droot-18\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dfrom_002droot-19\"></a>Get the value "
"associated with key from the root.  Returns two\n"
"   values, the value, or nil, and a boolean indicating whether a\n"
"   value was found or not (so you know if nil is a value or an\n"
"   indication of non-presence)\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5543
msgctxt "in_ed/ElephantUserManual.html:5543"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5546
msgid "<p><a name=\"Function-elephant_003aadd_002dto_002droot\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5548
msgctxt "in_ed/ElephantUserManual.html:5548"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5556
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:add-to-root</b><var> key value &amp;key sc<a name="
"\"index-elephant_003aadd_002dto_002droot-20\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aadd_002dto_002droot-21\"></a>Add an "
"arbitrary persistent thing to the root, so you can\n"
"   retrieve it in a later session.  Anything referenced by an\n"
"   object added to the root is considered reachable and thus live\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5558
msgctxt "in_ed/ElephantUserManual.html:5558"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5561
msgid "<p><a name=\"Function-elephant_003aremove_002dfrom_002droot\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5563
msgctxt "in_ed/ElephantUserManual.html:5563"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5569
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:remove-from-root</b><var> key &amp;key sc<a name="
"\"index-elephant_003aremove_002dfrom_002droot-22\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aremove_002dfrom_002droot-23\"></a>Remove "
"something from the root by the key value\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5571
msgctxt "in_ed/ElephantUserManual.html:5571"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5574
msgid "<p><a name=\"Function-elephant_003aroot_002dexistsp\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5576
msgctxt "in_ed/ElephantUserManual.html:5576"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5582
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:root-existsp</b><var> key &amp;key sc<a name=\"index-"
"elephant_003aroot_002dexistsp-24\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aroot_002dexistsp-25\"></a>Test whether a "
"given key is instantiated in the root\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5584
msgctxt "in_ed/ElephantUserManual.html:5584"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5587
msgid "<p><a name=\"Function-elephant_003amap_002droot\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5589
msgctxt "in_ed/ElephantUserManual.html:5589"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5596
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:map-root</b><var> fn &amp;key sc<a name=\"index-"
"elephant_003amap_002droot-26\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002droot-27\"></a>Takes a function of "
"two arguments, key and value, to map over\n"
"   all key-value pairs in the root\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5598
msgctxt "in_ed/ElephantUserManual.html:5598"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5600
msgctxt "in_ed/ElephantUserManual.html:5600"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5602
msgctxt "in_ed/ElephantUserManual.html:5602"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5608
msgid ""
"<hr>\n"
"<a name=\"Persistent-Object-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Object-"
"Indexing-API\">Persistent Object Indexing API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Store-Controller-"
"API\">Store Controller API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5610
msgctxt "in_ed/ElephantUserManual.html:5610"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5613
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.2 Persistent Objects</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5620
msgid ""
"<p><a name=\"index-Persistent-Objects-28\"></a><a name=\"index-API-29\"></"
"a>\n"
"<a href=\"#Class-elephant_003apersistent_002dmetaclass\">Class elephant:"
"persistent-metaclass</a> can be used as the\n"
":metaclass argument in a defclass form to create a persistent object. \n"
"Slots of the metaclass take the :index and :transient keyword\n"
"arguments and the class accepts the :index keyword argument."
msgstr ""

#: in_ed/ElephantUserManual.html:5622
msgctxt "in_ed/ElephantUserManual.html:5622"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5625
msgid "<p><a name=\"Macro-elephant_003adefpclass\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5627
msgctxt "in_ed/ElephantUserManual.html:5627"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5634
msgid ""
"<div class=\"defun\">\n"
" Macro: <b>elephant:defpclass</b><var> cname parents slot-defs &amp;rest "
"class-opts<a name=\"index-elephant_003adefpclass-30\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003adefpclass-31\"></a>Shorthand for defining "
"persistent objects.  Wraps the main\n"
"   class definition with persistent-metaclass\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5636
msgctxt "in_ed/ElephantUserManual.html:5636"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5639
msgid "<p><a name=\"Generic_002dFunction-elephant_003adrop_002dinstance\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5641
msgctxt "in_ed/ElephantUserManual.html:5641"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5654
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:drop-instance</b><var> persistent-object<a "
"name=\"index-elephant_003adrop_002dinstance-32\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003adrop_002dinstance-33\"></a>drop-instance "
"reclaims persistent object storage by unbinding\n"
"   all persistent slot values.  It can also helps catch errors\n"
"   where an object should be unreachable, but a reference still\n"
"   exists elsewhere in the <code>db</code>.  On access, the unbound slots\n"
"   should flag an error in the application program.  <code>important:</"
"code>\n"
"   this function does not clear any serialized references still in the db. \n"
"   Need a migration or <code>gc</code> for that!  drop-instances is the user-"
"facing call\n"
"   as it implements the proper behavior for indexed classes\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5656
msgctxt "in_ed/ElephantUserManual.html:5656"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5658
msgctxt "in_ed/ElephantUserManual.html:5658"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5660
msgctxt "in_ed/ElephantUserManual.html:5660"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5666
msgid ""
"<hr>\n"
"<a name=\"Persistent-Object-Indexing-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-Set-API"
"\">Persistent Set API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-Object-"
"API\">Persistent Object API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5668
msgctxt "in_ed/ElephantUserManual.html:5668"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5671
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.3 Persistent Object Indexing</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5674
msgid ""
"<p><a name=\"index-Persistent-Object-Indexing-34\"></a><a name=\"index-"
"API-35\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5676
msgctxt "in_ed/ElephantUserManual.html:5676"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5678
msgid "<h4 class=\"subsection\">5.3.1 Indexed Object Accessors</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:5681
msgid "<p><a name=\"Function-elephant_003amap_002dclass\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5683
msgctxt "in_ed/ElephantUserManual.html:5683"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5690
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:map-class</b><var> fn class &amp;key collect oids "
"sc<a name=\"index-elephant_003amap_002dclass-36\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dclass-37\"></a>Perform a map "
"operation over all instances of class.  Takes a\n"
"   function of one argument, a class instance. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5692
msgctxt "in_ed/ElephantUserManual.html:5692"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5695
msgid "<p><a name=\"Function-elephant_003amap_002dinverted_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5697
msgctxt "in_ed/ElephantUserManual.html:5697"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5706
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:map-inverted-index</b><var> fn class index &amp;rest "
"args &amp;key start end value from-end collect oids<a name=\"index-"
"elephant_003amap_002dinverted_002dindex-38\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dinverted_002dindex-39\"></a>map-"
"inverted-index maps a function of two variables, taking key\n"
"   and instance, over a subset of class instances in the order\n"
"   defined by the index.  Specify the class by classname or class object\n"
"   and index by quoted name.  The index may be a slot index, derived index,\n"
"   or a valued association slot."
msgstr ""

#: in_ed/ElephantUserManual.html:5708
msgctxt "in_ed/ElephantUserManual.html:5708"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5715
msgid ""
"<p>To map only a subset of key-value pairs, specify the range\n"
"   using the :start and :end keywords; all elements greater than\n"
"   or equal to :start and less than or equal to :end will be\n"
"   traversed regardless of whether the start or end value is in\n"
"   the index."
msgstr ""

#: in_ed/ElephantUserManual.html:5717
msgctxt "in_ed/ElephantUserManual.html:5717"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5721
msgid ""
"<p>Use nil in the place of start or end to specify the first\n"
"   element or last element, respectively."
msgstr ""

#: in_ed/ElephantUserManual.html:5723
msgctxt "in_ed/ElephantUserManual.html:5723"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5727
msgid ""
"<p>To map a single value, iff it exists, use the :value keyword. \n"
"   This is the only way to travers all nil values."
msgstr ""

#: in_ed/ElephantUserManual.html:5729
msgctxt "in_ed/ElephantUserManual.html:5729"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5733
msgid ""
"<p>To map from :end to :start in descending order, set :from-end\n"
"   to true.  If :value is used, :from-end is ignored"
msgstr ""

#: in_ed/ElephantUserManual.html:5735
msgctxt "in_ed/ElephantUserManual.html:5735"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5740
msgid ""
"<p>The 'oids' argument passes the oid of the instance to the provided\n"
"   function instead of the recreated instance. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5742
msgctxt "in_ed/ElephantUserManual.html:5742"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5745
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003aget_002dinstances_002dby_002dclass\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5747
msgctxt "in_ed/ElephantUserManual.html:5747"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5753
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-instances-by-class</b><var> persistent-"
"metaclass<a name=\"index-"
"elephant_003aget_002dinstances_002dby_002dclass-40\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dinstances_002dby_002dclass-41\"></"
"a>Retrieve all instances from the class index as a list of objects\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5755
msgctxt "in_ed/ElephantUserManual.html:5755"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5758
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003aget_002dinstance_002dby_002dvalue\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5760
msgctxt "in_ed/ElephantUserManual.html:5760"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5767
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-instance-by-value</b><var> persistent-"
"metaclass slot-name value<a name=\"index-"
"elephant_003aget_002dinstance_002dby_002dvalue-42\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dinstance_002dby_002dvalue-43\"></"
"a>Retrieve instances from a slot index by value.  Will return only the "
"first\n"
"                  instance if there are duplicates. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5769
msgctxt "in_ed/ElephantUserManual.html:5769"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5772
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003aget_002dinstances_002dby_002dvalue\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5774
msgctxt "in_ed/ElephantUserManual.html:5774"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5780
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-instances-by-value</b><var> persistent-"
"metaclass slot-name value<a name=\"index-"
"elephant_003aget_002dinstances_002dby_002dvalue-44\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dinstances_002dby_002dvalue-45\"></"
"a>Returns a list of all instances where the slot value is equal to value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5782
msgctxt "in_ed/ElephantUserManual.html:5782"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5785
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003aget_002dinstances_002dby_002drange\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5787
msgctxt "in_ed/ElephantUserManual.html:5787"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5796
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-instances-by-range</b><var> persistent-"
"metaclass slot-name start end<a name=\"index-"
"elephant_003aget_002dinstances_002dby_002drange-46\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dinstances_002dby_002drange-47\"></"
"a>Returns a list of all instances that match\n"
"                   values between start and end.  An argument of\n"
"                   nil to start or end indicates, respectively,\n"
"                   the lowest or highest value in the index\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5798
msgctxt "in_ed/ElephantUserManual.html:5798"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5801
msgid "<p><a name=\"Function-elephant_003adrop_002dinstances\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5803
msgctxt "in_ed/ElephantUserManual.html:5803"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5810
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:drop-instances</b><var> instances &amp;key sc txn-"
"size<a name=\"index-elephant_003adrop_002dinstances-48\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003adrop_002dinstances-49\"></a>Removes a list "
"of persistent objects from all class indices\n"
"   and unbinds any persistent slot values associated with those instances\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5812
msgctxt "in_ed/ElephantUserManual.html:5812"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5828
msgid ""
"<!-- @subsection Direct Class Index Manipulation -->\n"
"<!-- @include includes/fun-elephant-find-class-index.texinfo -->\n"
"<!-- @include includes/fun-elephant-find-inverted-index.texinfo -->\n"
"<!-- @include includes/fun-elephant-make-class-cursor.texinfo -->\n"
"<!-- @include includes/macro-elephant-with-class-cursor.texinfo -->\n"
"<!-- @include includes/fun-elephant-make-inverted-cursor.texinfo -->\n"
"<!-- @include includes/macro-elephant-with-inverted-cursor.texinfo -->\n"
"<!-- @subsection Dynamic Indexing API -->\n"
"<!-- @include includes/fun-elephant-enable-class-indexing.texinfo -->\n"
"<!-- @include includes/fun-elephant-disable-class-indexing.texinfo -->\n"
"<!-- @include includes/fun-elephant-add-class-slot-index.texinfo -->\n"
"<!-- @include includes/fun-elephant-remove-class-slot-index.texinfo -->\n"
"<!-- @include includes/fun-elephant-add-class-derived-index.texinfo -->\n"
"<!-- @include includes/fun-elephant-remove-class-derived-index.texinfo -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5830
msgctxt "in_ed/ElephantUserManual.html:5830"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5836
msgid ""
"<hr>\n"
"<a name=\"Persistent-Set-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#BTree-API\">BTree API</"
"a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-Object-"
"Indexing-API\">Persistent Object Indexing API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5838
msgctxt "in_ed/ElephantUserManual.html:5838"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5841
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.4 Persistent Sets</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5849
msgid ""
"<p><a name=\"index-Persistent-Sets-50\"></a>\n"
"Persistent sets are a simple persistent collection abstraction.  They\n"
"maintain an unordered collection of objects.  Unlike the normal\n"
"list-oriented sets of Lisp, persistent sets use the equivalent of\n"
"<code>pushnew</code> such that only one copy of any object or value is\n"
"maintained using the serializer's <code>equal</code> implementation."
msgstr ""

#: in_ed/ElephantUserManual.html:5851
msgctxt "in_ed/ElephantUserManual.html:5851"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5854
msgid "<p><a name=\"Class-elephant_003apset\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5856
msgctxt "in_ed/ElephantUserManual.html:5856"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5861
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:pset</b><var><a name=\"index-elephant_003apset-51\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apset-52\"></a>Class precedence list: "
"<code>pset<!-- /@w -->, persistent-collection<!-- /@w -->, persistent<!-- /"
"@w -->, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:5863
msgctxt "in_ed/ElephantUserManual.html:5863"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5868
msgid ""
"<p>An unordered persistent collection of unique elements according to\n"
"                   serializer equal comparison\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5870
msgctxt "in_ed/ElephantUserManual.html:5870"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5873
msgid "<p><a name=\"Generic_002dFunction-elephant_003ainsert_002ditem\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5875
msgctxt "in_ed/ElephantUserManual.html:5875"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5881
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:insert-item</b><var> item pset<a name=\"index-"
"elephant_003ainsert_002ditem-53\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003ainsert_002ditem-54\"></a>Insert a new item "
"into the pset\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5883
msgctxt "in_ed/ElephantUserManual.html:5883"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5886
msgid "<p><a name=\"Generic_002dFunction-elephant_003aremove_002ditem\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5888
msgctxt "in_ed/ElephantUserManual.html:5888"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5894
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:remove-item</b><var> item pset<a name=\"index-"
"elephant_003aremove_002ditem-55\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aremove_002ditem-56\"></a>Remove specified "
"item from pset\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5896
msgctxt "in_ed/ElephantUserManual.html:5896"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5899
msgid "<p><a name=\"Generic_002dFunction-elephant_003afind_002ditem\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5901
msgctxt "in_ed/ElephantUserManual.html:5901"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5907
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:find-item</b><var> item pset &amp;key key "
"test test<a name=\"index-elephant_003afind_002ditem-57\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003afind_002ditem-58\"></a>Find a an item in the "
"pset using key and test\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5909
msgctxt "in_ed/ElephantUserManual.html:5909"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5912
msgid "<p><a name=\"Generic_002dFunction-elephant_003amap_002dpset\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5914
msgctxt "in_ed/ElephantUserManual.html:5914"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5920
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:map-pset</b><var> fn pset<a name=\"index-"
"elephant_003amap_002dpset-59\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dpset-60\"></a>Map operator for "
"psets\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5922
msgctxt "in_ed/ElephantUserManual.html:5922"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5925
msgid "<p><a name=\"Generic_002dFunction-elephant_003apset_002dlist\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5927
msgctxt "in_ed/ElephantUserManual.html:5927"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5933
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:pset-list</b><var> pset<a name=\"index-"
"elephant_003apset_002dlist-61\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apset_002dlist-62\"></a>Convert items of pset "
"into a list for processing\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5935
msgctxt "in_ed/ElephantUserManual.html:5935"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5938
msgid "<p><a name=\"Generic_002dFunction-elephant_003adrop_002dpset\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5940
msgctxt "in_ed/ElephantUserManual.html:5940"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5946
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:drop-pset</b><var> pset<a name=\"index-"
"elephant_003adrop_002dpset-63\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003adrop_002dpset-64\"></a>Release pset storage "
"to database for reuse\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5948
msgctxt "in_ed/ElephantUserManual.html:5948"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5960
msgid ""
"<!-- @node Query Interfaces -->\n"
"<!-- @comment node-name, next, previous, up -->\n"
"<!-- @section Query Interfaces -->\n"
"<!-- @cindex Query Interfaces -->\n"
"<!-- The query interface is currently unsupported.  See @code{query.lisp} --"
">\n"
"<!-- and @code{query-example.lisp} for a sketch of what the query interface "
"-->\n"
"<!-- will eventually look like.  The upcoming version 0.9.1 will include --"
">\n"
"<!-- the query system and associated documentation system. -->\n"
"<!-- @include includes/fun-elephant-get-query-results.texinfo -->\n"
"<!-- @include includes/fun-elephant-map-class-query.texinfo -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:5962
msgctxt "in_ed/ElephantUserManual.html:5962"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5968
msgid ""
"<hr>\n"
"<a name=\"BTree-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#BTree-Cursor-API\">BTree "
"Cursor API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-Set-API"
"\">Persistent Set API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5970
msgctxt "in_ed/ElephantUserManual.html:5970"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:5973
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.5 BTrees</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:5976
msgid "<p><a name=\"index-BTree-65\"></a><a name=\"index-API-66\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5978
msgctxt "in_ed/ElephantUserManual.html:5978"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5985
msgid ""
"<p>Persistent collections inherit from <a href=\"#Class-"
"elephant_003apersistent_002dcollection\">Class elephant:persistent-"
"collection</a>\n"
"and consist of the <a href=\"#Class-elephant_003abtree\">Class elephant:"
"btree</a>, <a href=\"#Class-elephant_003aindexed_002dbtree\">Class elephant:"
"indexed-btree</a> and\n"
" <a href=\"#Class-elephant_003abtree_002dindex\">Class elephant:btree-index</"
"a> classes.  The following operations are defined\n"
"on most of these classes.  More information can be found in <a href="
"\"#Persistent-BTrees\">Persistent BTrees</a>\n"
"and <a href=\"#BTree-Indexing\">BTree Indexing</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:5987
msgctxt "in_ed/ElephantUserManual.html:5987"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:5990
msgid "<p><a name=\"Function-elephant_003amake_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:5992
msgctxt "in_ed/ElephantUserManual.html:5992"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6000
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:make-btree</b><var><a name=\"index-"
"elephant_003amake_002dbtree-67\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amake_002dbtree-68\"></a>Constructs a new "
"BTree instance for use by the user.  Each backend\n"
"   returns its own internal type as appropriate and ensures that the\n"
"   btree is associated with the store-controller that created it. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6002
msgctxt "in_ed/ElephantUserManual.html:6002"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6005
msgid "<p><a name=\"Generic_002dFunction-elephant_003aget_002dvalue\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6007
msgctxt "in_ed/ElephantUserManual.html:6007"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6013
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-value</b><var> key bt<a name=\"index-"
"elephant_003aget_002dvalue-69\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dvalue-70\"></a>Get a value from a "
"Btree. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6015
msgctxt "in_ed/ElephantUserManual.html:6015"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6019
msgid ""
"<p>Values are written to a btree using the <code>setf</code> method on "
"<code>get-value</code>. \n"
"<!-- @include includes/fun-elephant-setf-get-value.texinfo -->"
msgstr ""

#: in_ed/ElephantUserManual.html:6021
msgctxt "in_ed/ElephantUserManual.html:6021"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6024
msgid "<p><a name=\"Generic_002dFunction-elephant_003aremove_002dkv\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6026
msgctxt "in_ed/ElephantUserManual.html:6026"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6032
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:remove-kv</b><var> key bt<a name=\"index-"
"elephant_003aremove_002dkv-71\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aremove_002dkv-72\"></a>Remove a key / value "
"pair from a BTree. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6035
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003aremove_002dkv-_0028key-_0028bt-"
"btree_002dindex_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6042
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:remove-kv</b><var> key </var>(<var>bt btree-index</"
"var>)<var><a name=\"index-elephant_003aremove_002dkv-73\"></a></var><br>\n"
"<blockquote>\n"
"<p>Remove a key / value from the <code>primary</code> by a secondary\n"
"lookup, updating <code>all</code> other secondary indices. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6044
msgctxt "in_ed/ElephantUserManual.html:6044"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6047
msgid "<p><a name=\"Generic_002dFunction-elephant_003aexistsp\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6049
msgctxt "in_ed/ElephantUserManual.html:6049"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6055
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:existsp</b><var> key bt<a name=\"index-"
"elephant_003aexistsp-74\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aexistsp-75\"></a>Test existence of a key / "
"value pair in a BTree\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6057
msgctxt "in_ed/ElephantUserManual.html:6057"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6060
msgid "<p><a name=\"Generic_002dFunction-elephant_003adrop_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6062
msgctxt "in_ed/ElephantUserManual.html:6062"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6069
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:drop-btree</b><var> bt<a name=\"index-"
"elephant_003adrop_002dbtree-76\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003adrop_002dbtree-77\"></a>Delete all key-value "
"pairs from the btree and\n"
"   render it an invalid object in the data store\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6071
msgctxt "in_ed/ElephantUserManual.html:6071"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6074
msgid "<p><a name=\"Generic_002dFunction-elephant_003amap_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6076
msgctxt "in_ed/ElephantUserManual.html:6076"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6089
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:map-btree</b><var> fn btree &amp;rest args "
"&amp;key start end value from-end collect value &amp;allow-other-keys<a name="
"\"index-elephant_003amap_002dbtree-78\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dbtree-79\"></a>Map btree maps over a "
"btree from the value start to the value of end. \n"
"   If values are not provided, then it maps over all values.  BTrees\n"
"   do not have duplicates, but map-btree can also be used with indices\n"
"   in the case where you don't want access to the primary key so we\n"
"   require a value argument as well for mapping duplicate value sets. \n"
"   The collect keyword will accumulate the results from\n"
"   each call of fn in a fresh list and return that list in the\n"
"   same order the calls were made (first to last). \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6091
msgctxt "in_ed/ElephantUserManual.html:6091"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6094
msgid "<p>These functions are only defined on indexed btrees."
msgstr ""

#: in_ed/ElephantUserManual.html:6096
msgctxt "in_ed/ElephantUserManual.html:6096"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6099
msgid "<p><a name=\"Function-elephant_003amake_002dindexed_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6101
msgctxt "in_ed/ElephantUserManual.html:6101"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6110
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant:make-indexed-btree</b><var><a name=\"index-"
"elephant_003amake_002dindexed_002dbtree-80\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amake_002dindexed_002dbtree-81\"></"
"a>Constructs a new indexed BTree instance for use by the user. \n"
"   Each backend returns its own internal type as appropriate and\n"
"   ensures that the btree is associated with the store-controller\n"
"   that created it. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6112
msgctxt "in_ed/ElephantUserManual.html:6112"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6115
msgid "<p><a name=\"Generic_002dFunction-elephant_003aadd_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6117
msgctxt "in_ed/ElephantUserManual.html:6117"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6135
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:add-index</b><var> bt &amp;key index-name key-"
"form populate<a name=\"index-elephant_003aadd_002dindex-82\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aadd_002dindex-83\"></a>Add a secondary "
"index.  The indices are stored in an eq\n"
"hash-table, so the index-name should be a symbol.  key-form\n"
"should be a symbol naming a function, a function call form\n"
"eg '(create-index 3) or a lambda expression <code>--</code>\n"
"actual functions aren't supported. \n"
"Lambda expresssions are converted to functions through compile\n"
"and function call forms are transformed applying\n"
"the first element of the list to the rest of the list. \n"
"The function should take 3 arguments: the secondary <code>db</code>, "
"primary\n"
"key and value, and return two values: a boolean indicating\n"
"whether to index this key / value, and the secondary key if\n"
"so.  If populate = t it will fill in secondary keys for\n"
"existing primary entries (may be expensive!) \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6137
msgctxt "in_ed/ElephantUserManual.html:6137"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6140
msgid "<p><a name=\"Generic_002dFunction-elephant_003aget_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6142
msgctxt "in_ed/ElephantUserManual.html:6142"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6148
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-index</b><var> bt index-name<a name="
"\"index-elephant_003aget_002dindex-84\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dindex-85\"></a>Get a named index. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6150
msgctxt "in_ed/ElephantUserManual.html:6150"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6153
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003aget_002dprimary_002dkey\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6155
msgctxt "in_ed/ElephantUserManual.html:6155"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6161
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:get-primary-key</b><var> key bt<a name="
"\"index-elephant_003aget_002dprimary_002dkey-86\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aget_002dprimary_002dkey-87\"></a>Get the "
"primary key from a secondary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6163
msgctxt "in_ed/ElephantUserManual.html:6163"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6166
msgid "<p><a name=\"Generic_002dFunction-elephant_003aremove_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6168
msgctxt "in_ed/ElephantUserManual.html:6168"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6174
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:remove-index</b><var> bt index-name<a name="
"\"index-elephant_003aremove_002dindex-88\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aremove_002dindex-89\"></a>Remove a named "
"index. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6176
msgctxt "in_ed/ElephantUserManual.html:6176"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6179
msgid "<p>This function is only valid for indexes."
msgstr ""

#: in_ed/ElephantUserManual.html:6181
msgctxt "in_ed/ElephantUserManual.html:6181"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6184
msgid "<p><a name=\"Generic_002dFunction-elephant_003amap_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6186
msgctxt "in_ed/ElephantUserManual.html:6186"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6202
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:map-index</b><var> fn index &amp;rest args "
"&amp;key start end value from-end collect value &amp;allow-other-keys<a name="
"\"index-elephant_003amap_002dindex-90\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dindex-91\"></a>Map-index is like map-"
"btree but for secondary indices, it\n"
"   takes a function of three arguments: key, value and primary\n"
"   key.  As with map-btree the keyword arguments start and end\n"
"   determine the starting element and ending element, inclusive. \n"
"   Also, start = nil implies the first element, end = nil implies\n"
"   the last element in the index.  If you want to traverse only a\n"
"   set of identical key values, for example all nil values, then\n"
"   use the value keyword which will override any values of start\n"
"   and end.  The collect keyword will accumulate the results from\n"
"   each call of fn in a fresh list and return that list in the\n"
"   same order the calls were made (first to last)\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6204
msgctxt "in_ed/ElephantUserManual.html:6204"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6206
msgctxt "in_ed/ElephantUserManual.html:6206"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:6208
msgctxt "in_ed/ElephantUserManual.html:6208"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6214
msgid ""
"<hr>\n"
"<a name=\"BTree-Cursor-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Index-Cursor-API\">Index "
"Cursor API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#BTree-API\">BTree "
"API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6216
msgctxt "in_ed/ElephantUserManual.html:6216"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6219
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.6 Btree Cursors</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:6224
msgid ""
"<p><a name=\"index-Cursors-92\"></a><a name=\"index-API-93\"></a>\n"
"Cursors are objects of type cursor (see <a href=\"#Class-elephant_003acursor"
"\">Class elephant:cursor</a>)\n"
"which provide methods for complex traversals of BTrees."
msgstr ""

#: in_ed/ElephantUserManual.html:6226
msgctxt "in_ed/ElephantUserManual.html:6226"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6229
msgid "<p><a name=\"Macro-elephant_003awith_002dbtree_002dcursor\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6231
msgctxt "in_ed/ElephantUserManual.html:6231"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6238
msgid ""
"<div class=\"defun\">\n"
" Macro: <b>elephant:with-btree-cursor</b><var> var &amp;body body<a name="
"\"index-elephant_003awith_002dbtree_002dcursor-94\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003awith_002dbtree_002dcursor-95\"></a>Macro "
"which opens a named cursor on a BTree (primary or\n"
"not), evaluates the forms, then closes the cursor. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6240
msgctxt "in_ed/ElephantUserManual.html:6240"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6243
msgid "<p><a name=\"Generic_002dFunction-elephant_003amake_002dcursor\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6245
msgctxt "in_ed/ElephantUserManual.html:6245"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6251
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:make-cursor</b><var> bt<a name=\"index-"
"elephant_003amake_002dcursor-96\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amake_002dcursor-97\"></a>Construct a cursor "
"for traversing BTrees. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6253
msgctxt "in_ed/ElephantUserManual.html:6253"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6256
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dclose\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6258
msgctxt "in_ed/ElephantUserManual.html:6258"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6265
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-close</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dclose-98\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dclose-99\"></a>Close the cursor.  "
"Make sure to close cursors before the\n"
"enclosing transaction is closed! \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6267
msgctxt "in_ed/ElephantUserManual.html:6267"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6270
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dduplicate\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6272
msgctxt "in_ed/ElephantUserManual.html:6272"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6278
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-duplicate</b><var> cursor<a name="
"\"index-elephant_003acursor_002dduplicate-100\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dduplicate-101\"></a>Duplicate a "
"cursor. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6282
msgid ""
"</blockquote></div>\n"
"   <!-- fixme, not generated by docstrings -->\n"
"<!-- @include includes/fun-elephant-cursor-initialized-p.texinfo -->"
msgstr ""

#: in_ed/ElephantUserManual.html:6286
msgid ""
"<p>Each of the following methods return multiple values consisting of\n"
"<code>(exists? key value)</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:6288
msgctxt "in_ed/ElephantUserManual.html:6288"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6291
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dcurrent\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6293
msgctxt "in_ed/ElephantUserManual.html:6293"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6301
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-current</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dcurrent-102\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dcurrent-103\"></a>Get the key / "
"value at the cursor position.  Returns\n"
"has-pair key value, where has-pair is a boolean indicating\n"
"there was a pair. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6303
msgctxt "in_ed/ElephantUserManual.html:6303"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6306
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dfirst\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6308
msgctxt "in_ed/ElephantUserManual.html:6308"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6315
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-first</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dfirst-104\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dfirst-105\"></a>Move the cursor "
"to the beginning of the BTree, returning\n"
"has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6317
msgctxt "in_ed/ElephantUserManual.html:6317"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6320
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dlast\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6322
msgctxt "in_ed/ElephantUserManual.html:6322"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6329
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-last</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dlast-106\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dlast-107\"></a>Move the cursor to "
"the end of the BTree, returning\n"
"has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6331
msgctxt "in_ed/ElephantUserManual.html:6331"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6334
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dnext\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6336
msgctxt "in_ed/ElephantUserManual.html:6336"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6342
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-next</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dnext-108\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dnext-109\"></a>Advance the "
"cursor, returning has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6344
msgctxt "in_ed/ElephantUserManual.html:6344"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6347
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dprev\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6349
msgctxt "in_ed/ElephantUserManual.html:6349"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6355
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-prev</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dprev-110\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dprev-111\"></a>Move the cursor "
"back, returning has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6357
msgctxt "in_ed/ElephantUserManual.html:6357"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6360
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dset\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6362
msgctxt "in_ed/ElephantUserManual.html:6362"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6369
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-set</b><var> cursor key<a name=\"index-"
"elephant_003acursor_002dset-112\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dset-113\"></a>Move the cursor to "
"a particular key, returning has-pair\n"
"key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6371
msgctxt "in_ed/ElephantUserManual.html:6371"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6374
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dset_002drange\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6376
msgctxt "in_ed/ElephantUserManual.html:6376"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6384
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-set-range</b><var> cursor key<a name="
"\"index-elephant_003acursor_002dset_002drange-114\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dset_002drange-115\"></a>Move the "
"cursor to the first key-value pair with key\n"
"greater or equal to the key argument, according to the lisp\n"
"sorter.  Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6386
msgctxt "in_ed/ElephantUserManual.html:6386"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6389
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dget_002dboth\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6391
msgctxt "in_ed/ElephantUserManual.html:6391"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6398
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-get-both</b><var> cursor key value<a "
"name=\"index-elephant_003acursor_002dget_002dboth-116\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dget_002dboth-117\"></a>Moves the "
"cursor to a particular key / value pair,\n"
"returning has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6400
msgctxt "in_ed/ElephantUserManual.html:6400"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6403
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003acursor_002dget_002dboth_002drange\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6405
msgctxt "in_ed/ElephantUserManual.html:6405"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6414
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-get-both-range</b><var> cursor key "
"value<a name=\"index-elephant_003acursor_002dget_002dboth_002drange-118\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dget_002dboth_002drange-119\"></"
"a>Moves the cursor to the first key / value pair with key\n"
"equal to the key argument and value greater or equal to the\n"
"value argument.  Not really useful for us since primaries\n"
"don't have duplicates.  Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6416
msgctxt "in_ed/ElephantUserManual.html:6416"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6419
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002ddelete\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6421
msgctxt "in_ed/ElephantUserManual.html:6421"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6428
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-delete</b><var> cursor<a name=\"index-"
"elephant_003acursor_002ddelete-120\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002ddelete-121\"></a>Delete by "
"cursor.  The cursor is at an invalid position,\n"
"and uninitialized, after a successful delete. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6430
msgctxt "in_ed/ElephantUserManual.html:6430"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6433
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dput\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6435
msgctxt "in_ed/ElephantUserManual.html:6435"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6442
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-put</b><var> cursor value &amp;key "
"key<a name=\"index-elephant_003acursor_002dput-122\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dput-123\"></a>Overwrite value at "
"current cursor location.  Cursor remains\n"
"   at the current location\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6444
msgctxt "in_ed/ElephantUserManual.html:6444"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6446
msgctxt "in_ed/ElephantUserManual.html:6446"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:6448
msgctxt "in_ed/ElephantUserManual.html:6448"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6454
msgid ""
"<hr>\n"
"<a name=\"Index-Cursor-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Transaction-API"
"\">Transaction API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#BTree-Cursor-API"
"\">BTree Cursor API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6456
msgctxt "in_ed/ElephantUserManual.html:6456"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6459
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.7 Index Cursors</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:6469
msgid ""
"<p><a name=\"index-Cursor-124\"></a><a name=\"index-Index-125\"></a><a name="
"\"index-Indices-126\"></a><a name=\"index-API-127\"></a>\n"
"Index cursors are made the same way standard cursors are, with a call\n"
"to <code>make-cursor</code>, except with the index as the argument instead\n"
"of a standard btree.  In addition to the standard cursor operations,\n"
"which provide the direct key and value of a <code>btree-index</code>, the\n"
"following class of p cursors work on an index and allow you to get\n"
"the primary value of the <code>indexed-btree</code> that the\n"
"<code>btree-index</code> belongs to."
msgstr ""

#: in_ed/ElephantUserManual.html:6471
msgctxt "in_ed/ElephantUserManual.html:6471"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6475
msgid ""
"<p>They each return multiple values <code>(exists? key primary-value\n"
"primary-key)</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:6477
msgctxt "in_ed/ElephantUserManual.html:6477"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6480
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpcurrent\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6482
msgctxt "in_ed/ElephantUserManual.html:6482"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6489
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pcurrent</b><var> cursor<a name="
"\"index-elephant_003acursor_002dpcurrent-128\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpcurrent-129\"></a>Returns has-"
"tuple / secondary key / value / primary key\n"
"at the current position. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6491
msgctxt "in_ed/ElephantUserManual.html:6491"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6494
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpfirst\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6496
msgctxt "in_ed/ElephantUserManual.html:6496"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6503
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pfirst</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dpfirst-130\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpfirst-131\"></a>Moves the key to "
"the beginning of the secondary index. \n"
"Returns has-tuple / secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6505
msgctxt "in_ed/ElephantUserManual.html:6505"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6508
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dplast\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6510
msgctxt "in_ed/ElephantUserManual.html:6510"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6517
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-plast</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dplast-132\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dplast-133\"></a>Moves the key to "
"the end of the secondary index.  Returns\n"
"has-tuple / secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6519
msgctxt "in_ed/ElephantUserManual.html:6519"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6522
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpnext\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6524
msgctxt "in_ed/ElephantUserManual.html:6524"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6531
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pnext</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dpnext-134\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpnext-135\"></a>Advances the "
"cursor.  Returns has-tuple / secondary key /\n"
"value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6533
msgctxt "in_ed/ElephantUserManual.html:6533"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6536
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpprev\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6538
msgctxt "in_ed/ElephantUserManual.html:6538"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6545
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pprev</b><var> cursor<a name=\"index-"
"elephant_003acursor_002dpprev-136\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpprev-137\"></a>Moves the cursor "
"back.  Returns has-tuple / secondary key\n"
"/ value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6547
msgctxt "in_ed/ElephantUserManual.html:6547"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6550
msgid "<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpset\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6552
msgctxt "in_ed/ElephantUserManual.html:6552"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6559
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pset</b><var> cursor key<a name="
"\"index-elephant_003acursor_002dpset-138\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpset-139\"></a>Moves the cursor "
"to a particular key.  Returns has-tuple\n"
"/ secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6561
msgctxt "in_ed/ElephantUserManual.html:6561"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6564
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpset_002drange\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6566
msgctxt "in_ed/ElephantUserManual.html:6566"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6574
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pset-range</b><var> cursor key<a name="
"\"index-elephant_003acursor_002dpset_002drange-140\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpset_002drange-141\"></a>Move the "
"cursor to the first key-value pair with key\n"
"greater or equal to the key argument, according to the lisp\n"
"sorter.  Returns has-pair secondary key value primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6576
msgctxt "in_ed/ElephantUserManual.html:6576"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6579
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpget_002dboth\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6581
msgctxt "in_ed/ElephantUserManual.html:6581"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6589
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pget-both</b><var> cursor key value<a "
"name=\"index-elephant_003acursor_002dpget_002dboth-142\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpget_002dboth-143\"></a>Moves the "
"cursor to a particular secondary key / primary\n"
"key pair.  Returns has-tuple / secondary key / value /\n"
"primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6591
msgctxt "in_ed/ElephantUserManual.html:6591"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6594
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003acursor_002dpget_002dboth_002drange\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6596
msgctxt "in_ed/ElephantUserManual.html:6596"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6605
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pget-both-range</b><var> cursor key "
"value<a name=\"index-elephant_003acursor_002dpget_002dboth_002drange-144\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpget_002dboth_002drange-145\"></"
"a>Moves the cursor to a the first secondary key / primary\n"
"key pair, with secondary key equal to the key argument, and\n"
"primary key greater or equal to the pkey argument.  Returns\n"
"has-tuple / secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6607
msgctxt "in_ed/ElephantUserManual.html:6607"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6610
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dnext_002dnodup\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6612
msgctxt "in_ed/ElephantUserManual.html:6612"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6619
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-next-nodup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dnext_002dnodup-146\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dnext_002dnodup-147\"></a>Move to "
"the next non-duplicate element (with different\n"
"key.)  Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6621
msgctxt "in_ed/ElephantUserManual.html:6621"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6624
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dnext_002ddup\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6626
msgctxt "in_ed/ElephantUserManual.html:6626"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6633
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-next-dup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dnext_002ddup-148\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dnext_002ddup-149\"></a>Move to "
"the next duplicate element (with the same key.) \n"
"Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6635
msgctxt "in_ed/ElephantUserManual.html:6635"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6638
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpnext_002dnodup"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6640
msgctxt "in_ed/ElephantUserManual.html:6640"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6648
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pnext-nodup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dpnext_002dnodup-150\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpnext_002dnodup-151\"></a>Move to "
"the next non-duplicate element (with different\n"
"key.)  Returns has-tuple / secondary key / value / primary\n"
"key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6650
msgctxt "in_ed/ElephantUserManual.html:6650"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6653
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpnext_002ddup\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6655
msgctxt "in_ed/ElephantUserManual.html:6655"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6662
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pnext-dup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dpnext_002ddup-152\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpnext_002ddup-153\"></a>Move to "
"the next duplicate element (with the same key.) \n"
"Returns has-tuple / secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6664
msgctxt "in_ed/ElephantUserManual.html:6664"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6667
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dprev_002dnodup\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6669
msgctxt "in_ed/ElephantUserManual.html:6669"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6676
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-prev-nodup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dprev_002dnodup-154\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dprev_002dnodup-155\"></a>Move to "
"the previous non-duplicate element (with\n"
"different key.)  Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6678
msgctxt "in_ed/ElephantUserManual.html:6678"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6681
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dprev_002ddup\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6683
msgctxt "in_ed/ElephantUserManual.html:6683"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6690
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-prev-dup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dprev_002ddup-156\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dprev_002ddup-157\"></a>Move to "
"the previous duplicate element (with the same key.) \n"
"Returns has-pair key value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6692
msgctxt "in_ed/ElephantUserManual.html:6692"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6695
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpprev_002dnodup"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6697
msgctxt "in_ed/ElephantUserManual.html:6697"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6705
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pprev-nodup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dpprev_002dnodup-158\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpprev_002dnodup-159\"></a>Move to "
"the previous non-duplicate element (with\n"
"different key.)  Returns has-tuple / secondary key / value /\n"
"primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6707
msgctxt "in_ed/ElephantUserManual.html:6707"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6710
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_003acursor_002dpprev_002ddup\"></"
"a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6712
msgctxt "in_ed/ElephantUserManual.html:6712"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6719
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:cursor-pprev-dup</b><var> cursor<a name="
"\"index-elephant_003acursor_002dpprev_002ddup-160\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor_002dpprev_002ddup-161\"></a>Move to "
"the previous duplicate element (with the same key.) \n"
"Returns has-tuple / secondary key / value / primary key. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6721
msgctxt "in_ed/ElephantUserManual.html:6721"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6723
msgctxt "in_ed/ElephantUserManual.html:6723"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:6725
msgctxt "in_ed/ElephantUserManual.html:6725"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6731
msgid ""
"<hr>\n"
"<a name=\"Transaction-API\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Migration-and-Upgrading-"
"API\">Migration and Upgrading API</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Index-Cursor-API"
"\">Index Cursor API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6733
msgctxt "in_ed/ElephantUserManual.html:6733"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6736
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.8 Transactions</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:6739
msgid ""
"<p><a name=\"index-Transaction-API-162\"></a><a name=\"index-API-163\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6741
msgctxt "in_ed/ElephantUserManual.html:6741"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6744
msgid "<p><a name=\"Macro-elephant_003awith_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6746
msgctxt "in_ed/ElephantUserManual.html:6746"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6756
msgid ""
"<div class=\"defun\">\n"
" Macro: <b>elephant:with-transaction</b><var> &amp;rest &amp;body body<a "
"name=\"index-elephant_003awith_002dtransaction-164\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003awith_002dtransaction-165\"></a>Execute a "
"body with a transaction in place.  On success,\n"
"   the transaction is committed.  Otherwise, the transaction is\n"
"   aborted.  If the body deadlocks, the body is re-executed in\n"
"   a new transaction, retrying a fixed number of iterations. \n"
"   If nested, the backend must support nested transactions. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6758
msgctxt "in_ed/ElephantUserManual.html:6758"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6764
msgid ""
"<p>The following functions are an advanced use of the transaction system. \n"
"They may be useful if, or example, you want to integrate Elephant\n"
"transactions with non-Elephant side-effects that you explicitely make\n"
"transactional."
msgstr ""

#: in_ed/ElephantUserManual.html:6766
msgctxt "in_ed/ElephantUserManual.html:6766"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6769
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003acontroller_002dstart_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6771
msgctxt "in_ed/ElephantUserManual.html:6771"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6777
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:controller-start-transaction</b><var> store-"
"controller &amp;key &amp;allow-other-keys<a name=\"index-"
"elephant_003acontroller_002dstart_002dtransaction-166\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acontroller_002dstart_002dtransaction-167\"></"
"a>Start an elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6779
msgctxt "in_ed/ElephantUserManual.html:6779"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6782
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003acontroller_002dabort_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6784
msgctxt "in_ed/ElephantUserManual.html:6784"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6790
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:controller-abort-transaction</b><var> store-"
"controller transaction &amp;key &amp;allow-other-keys<a name=\"index-"
"elephant_003acontroller_002dabort_002dtransaction-168\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acontroller_002dabort_002dtransaction-169\"></"
"a>Abort an elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6792
msgctxt "in_ed/ElephantUserManual.html:6792"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6795
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_003acontroller_002dcommit_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6797
msgctxt "in_ed/ElephantUserManual.html:6797"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6803
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:controller-commit-transaction</b><var> store-"
"controller transaction &amp;key &amp;allow-other-keys<a name=\"index-"
"elephant_003acontroller_002dcommit_002dtransaction-170\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_003acontroller_002dcommit_002dtransaction-171\"></a>Commit an "
"elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6805
msgctxt "in_ed/ElephantUserManual.html:6805"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6807
msgctxt "in_ed/ElephantUserManual.html:6807"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:6809
msgctxt "in_ed/ElephantUserManual.html:6809"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6814
msgid ""
"<hr>\n"
"<a name=\"Migration-and-Upgrading-API\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Transaction-API"
"\">Transaction API</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#User-API-Reference\">User API "
"Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6816
msgctxt "in_ed/ElephantUserManual.html:6816"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6819
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">5.9 Migration and Upgrading</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:6827
msgid ""
"<p><a name=\"index-Migration-and-Upgrading-172\"></a><a name=\"index-"
"API-173\"></a>\n"
"Upgrade is a call to Migrate with checks for compatability.  The\n"
"migrate methods are included here in case you wish to develop a more\n"
"specific partial upgrade or partial migrate of data from one\n"
"store to another instead of using the top-level copy which migrates all\n"
"live objects."
msgstr ""

#: in_ed/ElephantUserManual.html:6829
msgctxt "in_ed/ElephantUserManual.html:6829"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6832
msgid "<p><a name=\"Generic_002dFunction-elephant_003aupgrade\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6834
msgctxt "in_ed/ElephantUserManual.html:6834"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6843
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:upgrade</b><var> sc spec<a name=\"index-"
"elephant_003aupgrade-174\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aupgrade-175\"></a>Given an open store "
"controller from a prior version,\n"
"                   open a new store specified by spec and migrate the\n"
"                   data from the original store to the new one, upgrading\n"
"                   it to the latest version\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6845
msgctxt "in_ed/ElephantUserManual.html:6845"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6848
msgid "<p><a name=\"Generic_002dFunction-elephant_003amigrate\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6850
msgctxt "in_ed/ElephantUserManual.html:6850"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6859
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:migrate</b><var> dst src<a name=\"index-"
"elephant_003amigrate-176\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amigrate-177\"></a>Migrate an object from the "
"src object, collection or controller\n"
"    to the dst controller.  Returns a copy of the object in the new\n"
"    store so you can drop it into a parent object or the root of\n"
"    the dst controller\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6862
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-hash_002dtable_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6868
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"hash-table</var>)<var><a name=\"index-elephant_003amigrate-178\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>Migrate each hash element as the types are non-uniform\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6871
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-array_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6879
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"array</var>)<var><a name=\"index-elephant_003amigrate-179\"></a></var><br>\n"
"<blockquote>\n"
"<p>We really only need to handle arrays of type 't' that point\n"
"   to other objects; fixnum, float, etc array can just be\n"
"   written to the new store but we don't bother to optimize here\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6882
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-cons_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6888
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"cons</var>)<var><a name=\"index-elephant_003amigrate-180\"></a></var><br>\n"
"<blockquote>\n"
"<p><code>warning:</code> This doesn't work for circular lists\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6891
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-pathname_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6897
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"pathname</var>)<var><a name=\"index-elephant_003amigrate-181\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>Migrate pathname as just return itself\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6900
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-structure_002dobject_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6907
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"structure-object</var>)<var><a name=\"index-elephant_003amigrate-182\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>Walks structure slot values and ensures that any persistent references\n"
"   are written back into the slot pointint to the new store\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6910
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-standard_002dobject_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6919
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"standard-object</var>)<var><a name=\"index-elephant_003amigrate-183\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>If we have persistent objects that are unindexed and <code>only</code> "
"stored in\n"
"   a standard object slot that is referenced from the root, then it\n"
"   will only be copied by recursing through the slot substructure just\n"
"   as the serializer will, but copying any persistent objects found\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6922
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-indexed_002dbtree_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6928
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"indexed-btree</var>)<var><a name=\"index-elephant_003amigrate-184\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>Also copy the inverse indices for indexed btrees\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6931
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-btree_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6937
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"btree</var>)<var><a name=\"index-elephant_003amigrate-185\"></a></var><br>\n"
"<blockquote>\n"
"<p>Copy an index and it's contents to the target repository\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6940
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-persistent_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6950
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>) (<var>src "
"persistent</var>)<var><a name=\"index-elephant_003amigrate-186\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p>Migrate a persistent object and apply a binary (lambda (dst src) ...) \n"
"    function to the new object.  Users can override migrate by creating\n"
"    a function that calls the default copy and then does stuff with the\n"
"    slot values.  A dynamic variable: *inhibit-slot-copy* can be bound\n"
"    in the caller to keep the new object from having its slots copied\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6953
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-after-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-store_002dcontroller_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6959
msgid ""
"<div class=\"defun\">\n"
" Method: <b>after</b><var> elephant:migrate </var>(<var>dst store-"
"controller</var>) (<var>src store-controller</var>)<var><a name=\"index-"
"after-187\"></a></var><br>\n"
"<blockquote>\n"
"<p>This method ensures that we reset duplicate object detection over the "
"store-controller\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6962
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-before-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-store_002dcontroller_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6968
msgid ""
"<div class=\"defun\">\n"
" Method: <b>before</b><var> elephant:migrate </var>(<var>dst store-"
"controller</var>) (<var>src store-controller</var>)<var><a name=\"index-"
"before-188\"></a></var><br>\n"
"<blockquote>\n"
"<p>This method ensures that we reset duplicate object detection over the "
"store-controller\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6971
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-before-_0028_0028dst-"
"store_002dcontroller_0029-_0028src-persistent_0029_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6980
msgid ""
"<div class=\"defun\">\n"
" Method: <b>before</b><var> elephant:migrate </var>(<var>dst store-"
"controller</var>) (<var>src persistent</var>)<var><a name=\"index-"
"before-189\"></a></var><br>\n"
"<blockquote>\n"
"<p>This provides some sanity checking that we aren't trying to copy\n"
"   to the same controller.  We also need to be careful about deadlocking\n"
"   our transactions among the two gets/puts.  Each leaf migration should\n"
"   be in its own transaction to avoid too many write locks. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6983
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_003amigrate-_0028_0028dst-"
"store_002dcontroller_0029-src_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:6989
msgid ""
"<div class=\"defun\">\n"
" Method: <b>elephant:migrate</b> (<var>dst store-controller</var>)<var> "
"src<a name=\"index-elephant_003amigrate-190\"></a></var><br>\n"
"<blockquote>\n"
"<p>Default: standard objects are automatically migrated\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:6991
msgctxt "in_ed/ElephantUserManual.html:6991"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:6994
msgctxt "in_ed/ElephantUserManual.html:6994"
msgid ""
"<!-- *-texinfo-*- -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:6996
msgctxt "in_ed/ElephantUserManual.html:6996"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7002
msgid ""
"<hr>\n"
"<a name=\"Design-Patterns\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Elephant-Architecture"
"\">Elephant Architecture</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#User-API-Reference"
"\">User API Reference</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7004
msgctxt "in_ed/ElephantUserManual.html:7004"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7007
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">6 Design Patterns</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:7010
msgid "<p><a name=\"index-Design-Patterns-191\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7012
msgctxt "in_ed/ElephantUserManual.html:7012"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7027
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#File-System-Replacement\">File System "
"Replacement</a>:  Deployment of Elephant as file replacement\n"
"</li><li><a accesskey=\"2\" href=\"#Checkpointing-Conventional-Program-State"
"\">Checkpointing Conventional Program State</a>:\n"
"  How to recover the application state as recorded in a set of \n"
"interdependant standard classes for purposes of undo, crash recovery and\n"
" session persistence. \n"
"</li><li><a accesskey=\"3\" href=\"#Persistent-System-Objects\">Persistent "
"System Objects</a>:  Making persistent objects a natural part of your "
"system\n"
"</li><li><a accesskey=\"4\" href=\"#Elephant-as-Database\">Elephant as "
"Database</a>:  Using Elephant as a database for records and user data "
"instead of using a SQL relational Database\n"
"</li><li><a accesskey=\"5\" href=\"#Multithreaded-Web-Applications"
"\">Multithreaded Web Applications</a>:  Elephant is a natural match for web "
"applications\n"
"<!-- * Graph-oriented Applications:: Elephant is good, but not optimized, "
"for graph-oriented applications. -->\n"
"</li><li><a accesskey=\"6\" href=\"#Real_002dWorld-Application-Examples"
"\">Real-World Application Examples</a>:\n"
"  See some real-world applications Elephant has been used for and a \n"
"brief discussion of how it was used and any novel uses of Elephant. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:7035
msgid ""
"<p>This chapter explores different ways that Elephant can be used to\n"
"solve common problems in user programs.  The term Design Pattern\n"
"may be overkill as there is no formal specification of patterns. \n"
"However the goals is similar to classical design patterns: provide a\n"
"coherent description of how to approach ceratain common problems using\n"
"Elephant as an enabling tool."
msgstr ""

#: in_ed/ElephantUserManual.html:7037
msgctxt "in_ed/ElephantUserManual.html:7037"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7043
msgid ""
"<p>Most of this chapter falls short of a tutorial in the application of a\n"
"pattern.  Instead it provides a conceptual guide to implementing the\n"
"pattern along with some code examples to show how Elephant features\n"
"are invoked to support the pattern."
msgstr ""

#: in_ed/ElephantUserManual.html:7045
msgctxt "in_ed/ElephantUserManual.html:7045"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7050
msgid ""
"<p>The authors hope that users of Elephant will find this a good source\n"
"of inspiration for how to apply Elephant to their own programs and\n"
"that they will be motivated to contribute design patterns of their own."
msgstr ""

#: in_ed/ElephantUserManual.html:7052
msgctxt "in_ed/ElephantUserManual.html:7052"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7054
msgctxt "in_ed/ElephantUserManual.html:7054"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7056
msgctxt "in_ed/ElephantUserManual.html:7056"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7062
msgid ""
"<hr>\n"
"<a name=\"Persistent-System-Objects\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Elephant-as-Database"
"\">Elephant as Database</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Checkpointing-"
"Conventional-Program-State\">Checkpointing Conventional Program State</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7064
msgctxt "in_ed/ElephantUserManual.html:7064"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7067
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.1 Persistent System Objects</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7075
msgid ""
"<p>The simplest design pattern supported by Elephant is the use of\n"
"persistent objects in the place of standard objects.  Typically you\n"
"can just modify the old class definition to inherit the\n"
"<code>persistent-metaclass</code>.  Depending on your application, objects\n"
"may need to have transient slots for performance reasons.  We'll\n"
"create a dummy class to illustrate:"
msgstr ""

#: in_ed/ElephantUserManual.html:7077
msgctxt "in_ed/ElephantUserManual.html:7077"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7084
msgid ""
"<pre class=\"lisp\">     (defclass system-object ()\n"
"       ((appname :accessor system-appname :initarg :name)\n"
"        (url :accessor system-url :initarg :url)\n"
"        (state :accessor system-state :initarg :state :initform 'idle))\n"
"       (:metaclass persistent-metaclass))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7088
msgid ""
"<p>When starting up your application you need to recover references to\n"
"any persistent objects that were created in a prior session or\n"
"initialize a new one."
msgstr ""

#: in_ed/ElephantUserManual.html:7090
msgctxt "in_ed/ElephantUserManual.html:7090"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7094
msgid ""
"<p>If you are storing system objects in parameters, you can just call\n"
"an initialization function on startup:"
msgstr ""

#: in_ed/ElephantUserManual.html:7096
msgctxt "in_ed/ElephantUserManual.html:7096"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7098
msgctxt "in_ed/ElephantUserManual.html:7098"
msgid "<pre class=\"lisp\">     (defparameter *system* nil)"
msgstr ""

#: in_ed/ElephantUserManual.html:7104
msgid ""
"     (defun initialize-system (appname)\n"
"       (let ((system-object (get-from-root '*system*)))\n"
"         (setf *system\n"
"               (if system-object system-object\n"
"                   (make-instance 'system-object :name appname)))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7108
msgid ""
"     *system*\n"
"     =&gt; #&lt;SYSTEM-OBJECT ...&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7112
msgid ""
"<p>And now you can use your parameter as you did before.  If you want to\n"
"avoid calling initialization functions, you can just accesss system\n"
"objects through functions instead of parameters."
msgstr ""

#: in_ed/ElephantUserManual.html:7114
msgctxt "in_ed/ElephantUserManual.html:7114"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7116
msgctxt "in_ed/ElephantUserManual.html:7116"
msgid "<pre class=\"lisp\">     (defparameter *system* nil)"
msgstr ""

#: in_ed/ElephantUserManual.html:7125
msgid ""
"     (defun sys-object ()\n"
"       (unless *system\n"
"         (let ((appname (get-application-name))\n"
"               (url (get-system-url)))\n"
"           (setf *system* (make-instance 'system-object\n"
"                                         :name appname\n"
"                                         :url url))))\n"
"       *system*)"
msgstr ""

#: in_ed/ElephantUserManual.html:7129
msgid ""
"     (sys-object)\n"
"     =&gt; #&lt;SYSTEM-OBJECT ...&gt;\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7138
msgid ""
"<p>One constraint to keep in mind is that slot access will be slower as\n"
"it has to synchronize to disk.  This is usually not noticable for\n"
"objects that are accessed on the order of seconds instead of\n"
"milliseconds.  For objects read constantly, but where you want to save\n"
"any written values it helps to have a transient slot to cache values. \n"
"You can override some methods to ensure that the persistent value is\n"
"always updated, but that reads happen from the cached value and that\n"
"the cached value is restored whenever the object is loaded."
msgstr ""

#: in_ed/ElephantUserManual.html:7140
msgctxt "in_ed/ElephantUserManual.html:7140"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7148
msgid ""
"<pre class=\"lisp\">     (defclass system-object ()\n"
"       ((appname :accessor system-appname :initarg :name)\n"
"        (url :accessor system-url :initarg :url)\n"
"        (laststate :accessor system-laststate :initarg :state\n"
"                   :initform 'idle)\n"
"        (state :accessor system-state :initarg :state :transient t)\n"
"       (:metaclass persistent-metaclass))"
msgstr ""

#: in_ed/ElephantUserManual.html:7151
msgid ""
"     (defmethod (setf system-state) :after (state (sys system-state))\n"
"       (setf (system-laststate sys) state))"
msgstr ""

#: in_ed/ElephantUserManual.html:7157
msgid ""
"     (defmethod initialize-instance :after ((sys system-state) &amp;rest "
"rest)\n"
"       (declare (ignore rest))\n"
"       (when (slot-boundp sys 'laststate)\n"
"         (setf (system-state sys) (system-laststate sys))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7160
msgid ""
"<p>And now you have an instant read cache for a slot value.  This pattern\n"
"is used several times within the Elephant implementation."
msgstr ""

#: in_ed/ElephantUserManual.html:7162
msgctxt "in_ed/ElephantUserManual.html:7162"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7164
msgctxt "in_ed/ElephantUserManual.html:7164"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7166
msgctxt "in_ed/ElephantUserManual.html:7166"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7171
msgid ""
"<hr>\n"
"<a name=\"File-System-Replacement\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Checkpointing-"
"Conventional-Program-State\">Checkpointing Conventional Program State</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7173
msgctxt "in_ed/ElephantUserManual.html:7173"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7176
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.2 File System Replacement</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7187
msgid ""
"<p>One of the more annoying time-wasting activities in programming is\n"
"saving and restoring data from disk.  Data in configuration files,\n"
"static data such as graphics and other formats take time and attention\n"
"away from solving the main problem and are additional sources of bugs. \n"
"Because Elephant's serializer supports most lisp types, Elephant can\n"
"greatly simplify ease these concerns and allow you to work directly\n"
"with your natural in-memory representations with almost no work to\n"
"encode/decode formats or manage files in the file\n"
"system<a rel=\"footnote\" href=\"#fn-2\" name=\"fnd-2\"><sup>2</sup></a>."
msgstr ""

#: in_ed/ElephantUserManual.html:7189
msgctxt "in_ed/ElephantUserManual.html:7189"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7196
msgid ""
"<p>The simplest way to accomplish this is to simply open a store\n"
"controller and initialize a key-value pair in the root btree as a\n"
"instead of a filename and file data in some system directory.  Like\n"
"the initialization process described for standard objects, you can\n"
"hide some of the details like this:"
msgstr ""

#: in_ed/ElephantUserManual.html:7198
msgctxt "in_ed/ElephantUserManual.html:7198"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7200
msgid "<pre class=\"lisp\">     (defvar *resources* (make-hash-table))"
msgstr ""

#: in_ed/ElephantUserManual.html:7209
msgid ""
"     (defun get-resource (name)\n"
"       (multiple-value-bind (value foundp) (gethash name *resources*)\n"
"         (if foundp\n"
"             value\n"
"             (multiple-value-bind (value foundp) (get-from-root name)\n"
"                (if foundp\n"
"                    value\n"
"                    (error \"Resource named ~A was not initialized\" "
"name))))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7213
msgid ""
"     (defun set-resource (value name)\n"
"       (add-to-root name value)\n"
"       (setf (gethash name *resources*) value))"
msgstr ""

#: in_ed/ElephantUserManual.html:7216
msgid ""
"     (defsetf get-resource set-resource)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7220
msgid ""
"<p>Another simple metaphor is to use Elephant btrees as persistent hash\n"
"tables that persist key-value pairs for you.  We'll wrap the Elephant\n"
"btree in a simple class to provide a little conceptual isolation."
msgstr ""

#: in_ed/ElephantUserManual.html:7222
msgctxt "in_ed/ElephantUserManual.html:7222"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7226
msgid ""
"<pre class=\"lisp\">     (defclass phash ()\n"
"       ((btree :accessor phash-btree :initarg :btree\n"
"               :initform (make-btree))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7234
msgid ""
"     (defun make-persistent-hash (name)\n"
"       (let ((btree (get-from-root name)))\n"
"         (if btree\n"
"             (make-instance 'phash :btree btree)\n"
"             (let ((phash (make-instance 'phash)))\n"
"                (add-to-root name (phash-btree phash))\n"
"                phash))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7237
msgid ""
"     (defun getphash (key phash)\n"
"       (get-value key (phash-btree phash)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7240
msgid ""
"     (defun setphash (value key phash)\n"
"       (setf (get-value key (phash-btree phash)) value))"
msgstr ""

#: in_ed/ElephantUserManual.html:7243
msgid ""
"     (defsetf getphash setphash)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7247
msgid ""
"<p>Of course to make a proper abstraction we'd want to provide some\n"
"conditions that allowed restarts that initialized values or allowed\n"
"users to update the hash in the background and continue computation."
msgstr ""

#: in_ed/ElephantUserManual.html:7249
msgctxt "in_ed/ElephantUserManual.html:7249"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7251
msgctxt "in_ed/ElephantUserManual.html:7251"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7253
msgctxt "in_ed/ElephantUserManual.html:7253"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7259
msgid ""
"<hr>\n"
"<a name=\"Checkpointing-Conventional-Program-State\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Persistent-System-Objects"
"\">Persistent System Objects</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#File-System-"
"Replacement\">File System Replacement</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7261
msgctxt "in_ed/ElephantUserManual.html:7261"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7264
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.3 Checkpointing Conventional Program State</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7270
msgid ""
"<p>Another challenge for many programs is saving some subset of program\n"
"state.  This could involve checkpointing an evolving computation,\n"
"keeping track of state for the purposes of 'undo' or enabling crash\n"
"recovery at key points in the program's execution."
msgstr ""

#: in_ed/ElephantUserManual.html:7272
msgctxt "in_ed/ElephantUserManual.html:7272"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7279
msgid ""
"<p>One approach is to transform all our program state into persistent\n"
"objects.  However if the use of program state is slot-access\n"
"intensive, this can have a significant performance impact.  To improve\n"
"the performance of the application, careful use of transactions is\n"
"needed which further complicates program design and operation."
msgstr ""

#: in_ed/ElephantUserManual.html:7281
msgctxt "in_ed/ElephantUserManual.html:7281"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7289
msgid ""
"<p>Can Elephant be used to provide a simple solution that retains the\n"
"in-memory performance that we want?  Can we do all this without having\n"
"to put a ton of persistence assumptions into our main program code? \n"
"The answer is yes, assuming you are willing to explicitly checkpoint\n"
"your code and adhere to some simple constraints in accessing your\n"
"program objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7291
msgctxt "in_ed/ElephantUserManual.html:7291"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7293
msgid "<h4 class=\"subsection\">6.3.1 Assumptions</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:7302
msgid ""
"<p>To maintain processing speed and convenience we would like all our\n"
"objects to be standard lisp objects without special harnesses that\n"
"would interfere with applying the full power of lisp.  At some point\n"
"during execution, we want to store the current state of a set of\n"
"objects to disk and yet make it easy to reproduce the original state\n"
"at a later point in time.  For simplicity, we'll limit ourselves\n"
"to collections of CLOS objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7304
msgctxt "in_ed/ElephantUserManual.html:7304"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7311
msgid ""
"<p>A complication is that many programs have sets of interdependant\n"
"objects.  These could be complex program graphs, the state of an\n"
"ongoing search process or a standard OO system that uses a bunch of\n"
"different program object types to run.  This means that we need to\n"
"persist not just object state, but also references to other objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7313
msgctxt "in_ed/ElephantUserManual.html:7313"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7320
msgid ""
"<p>Using CLOS reflection we can provide a general solution to capturing\n"
"objects, slot values and references.  However to reproduce references,\n"
"we'll need to be able to find the object referenced and the only way\n"
"to do that is to store it as well.  Thus we want to create a snapshot\n"
"of a closed set of self-referential objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7322
msgctxt "in_ed/ElephantUserManual.html:7322"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7325
msgid "<p>The assumptions underlying the snapshot mechanism is:"
msgstr ""

#: in_ed/ElephantUserManual.html:7327
msgctxt "in_ed/ElephantUserManual.html:7327"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7346
msgid ""
"<ul>\n"
"<li><strong>Use standard CLOS objects and references to other CLOS objects.</"
"strong>\n"
"We need reflection to\n"
"</li><li><strong>Use standard hash tables to keep track of sets of objects.</"
"strong>\n"
"Your program should use the hash table as an entry point to find\n"
"objects.  When objects are restored, just replace an existing hash\n"
"table with the new one and access your objects that way.  Any parts of\n"
"your program that have pointers into your objects but are not\n"
"themselves snapshotted, will need to be able to refresh their pointers\n"
"in some way. \n"
"</li><li><strong>Find your root object (s) and know what is reachable from "
"them.</strong>\n"
"Ensure that you aren't referring to standard objects outside those you\n"
"want to store as they will be stored too (persistent object references\n"
"are fine though).  Make sure your root refers to objects that refers\n"
"to other objects and so on such that all objects you want to store can\n"
"be reached by some set of pointer traversals.  Looping references are\n"
"fine. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:7348
msgid "<h4 class=\"subsection\">6.3.2 Snapshot Set</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:7353
msgid ""
"<p>The snapshot implementation is called a <code>snapshot-set</code>.  The "
"next\n"
"section will go into detail, but a walkthrough will help make it\n"
"clearer<a rel=\"footnote\" href=\"#fn-3\" name=\"fnd-3\"><sup>3</sup></a>."
msgstr ""

#: in_ed/ElephantUserManual.html:7355
msgctxt "in_ed/ElephantUserManual.html:7355"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7360
msgid ""
"<p>A snapshot set is quite easy to use.  Load the complete code and play\n"
"with this simple walk through.  The code can be located in the\n"
"Elephant source tree under <code>src/conrib/eslick/snapshot-set.lisp</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:7362
msgctxt "in_ed/ElephantUserManual.html:7362"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7365
msgid "<p>The first step is to create a <code>snapshot-set</code> object,"
msgstr ""

#: in_ed/ElephantUserManual.html:7367
msgctxt "in_ed/ElephantUserManual.html:7367"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7370
msgid ""
"<pre class=\"lisp\">     (setf my-set (make-instance 'snapshot-set))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7372
msgid "<p>and add it to the root so we don't lose track of it."
msgstr ""

#: in_ed/ElephantUserManual.html:7374
msgctxt "in_ed/ElephantUserManual.html:7374"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7377
msgid ""
"<pre class=\"lisp\">     (add-to-root 'my-set my-set)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7379
msgid "<p>Then we need some objects to play with."
msgstr ""

#: in_ed/ElephantUserManual.html:7381
msgctxt "in_ed/ElephantUserManual.html:7381"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7385
msgid ""
"<pre class=\"lisp\">     (defclass my-test-class ()\n"
"       ((value :accessor test-value :initarg :value)\n"
"        (reference :accessor test-reference :initarg :reference)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7389
msgid ""
"     (setf obj1 (make-instance 'my-test-class :value 1 :reference nil))\n"
"     (setf obj2 (make-instance 'my-test-class :value 2 :reference obj1))\n"
"     (setf obj3 (make-instance 'my-test-class :value 3 :reference obj2))"
msgstr ""

#: in_ed/ElephantUserManual.html:7393
msgid ""
"     (register-object obj3 my-set)\n"
"     (snapshot my-set)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7396
msgid ""
"<p>Now your set should have persistent versions of all three classes that\n"
"are reachable from <code>obj3</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:7398
msgctxt "in_ed/ElephantUserManual.html:7398"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7405
msgid ""
"<pre class=\"lisp\">     (map-set (lambda (x) (print (test-value x))) my-"
"set)\n"
"     =&gt;\n"
"     3\n"
"     2\n"
"     1\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7410
msgid ""
"<p>Of course such fully connected objects are not always common, so we'll\n"
"demonstrate using hash tables to create root indexes into our objects\n"
"and sidestep registration calls entirely.  We'll create a fresh set to\n"
"work with."
msgstr ""

#: in_ed/ElephantUserManual.html:7412
msgctxt "in_ed/ElephantUserManual.html:7412"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7415
msgid ""
"<pre class=\"lisp\">     (setf my-set (make-instance 'snapshot-set))\n"
"     (add-to-root 'my-set my-set)"
msgstr ""

#: in_ed/ElephantUserManual.html:7418
msgid ""
"     (setf obj4 (make-instance 'my-test-class :value 4 :reference obj1))\n"
"     (setf obj5 (make-instance 'my-test-class :value 5 :reference nil))"
msgstr ""

#: in_ed/ElephantUserManual.html:7421
msgid ""
"     (setf hash (make-hash-table))\n"
"     (setf (snapshot-root my-set) hash)"
msgstr ""

#: in_ed/ElephantUserManual.html:7425
msgid ""
"     (setf (gethash 'obj3 hash) obj3)\n"
"     (setf (gethash 'obj4 hash) obj4)\n"
"     (setf (gethash 'obj5 hash) obj5)"
msgstr ""

#: in_ed/ElephantUserManual.html:7428
msgid ""
"     (snapshot my-set)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7432
msgid ""
"<p>To properly simulate restoring objects, we need to drop our old hash\n"
"table as well as clear the persistent object cache so the snapshot set\n"
"transient object is reset."
msgstr ""

#: in_ed/ElephantUserManual.html:7434
msgctxt "in_ed/ElephantUserManual.html:7434"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7439
msgid ""
"<pre class=\"lisp\">     (setf my-set nil)\n"
"     (setf hash nil)\n"
"     (elephant::flush-instance-cache *store-controller*)\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7441
msgid "<p>Now we'll pretend we're startup up a new session."
msgstr ""

#: in_ed/ElephantUserManual.html:7443
msgctxt "in_ed/ElephantUserManual.html:7443"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7447
msgid ""
"<pre class=\"lisp\">     (setf my-set (get-from-root 'my-set))\n"
"     (setf hash (snapshot-root my-set))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7451
msgid ""
"<p>The cache is automatically populated by the implicit <code>restore</"
"code>\n"
"call during snapshot-set initialization, and our hash table should now\n"
"have all the proper references.  We'll pull out a few."
msgstr ""

#: in_ed/ElephantUserManual.html:7453
msgctxt "in_ed/ElephantUserManual.html:7453"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7457
msgid ""
"<pre class=\"lisp\">     (setf o4 (gethash 'obj4 hash))\n"
"     (setf o3 (gethash 'obj3 hash))\n"
"     (setf o2 (test-reference o3))"
msgstr ""

#: in_ed/ElephantUserManual.html:7463
msgid ""
"     (not (or (eq o4 obj4)\n"
"              (eq o3 obj3)\n"
"              (eq o2 obj2)))\n"
"     =&gt; t\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7466
msgid ""
"<p>The new objects should not be eq the old ones as we have restored\n"
"fresh copies from the disk."
msgstr ""

#: in_ed/ElephantUserManual.html:7468
msgctxt "in_ed/ElephantUserManual.html:7468"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7474
msgid ""
"<p>If you review the setup above, <code>obj3</code> references <code>obj2</"
"code>\n"
"which references <code>obj1</code> and <code>obj4</code> also references\n"
"<code>obj1</code>.  So if the objects were properly restored, these\n"
"references should be <code>eq</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:7476
msgctxt "in_ed/ElephantUserManual.html:7476"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7480
msgid ""
"<pre class=\"lisp\">     (eq (test-reference o2) (test-reference o4))\n"
"     =&gt; t\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7482
msgid ""
"<p>And finally we can demonstrate the restorative power of snapshot sets."
msgstr ""

#: in_ed/ElephantUserManual.html:7484
msgctxt "in_ed/ElephantUserManual.html:7484"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7486
msgid "<pre class=\"lisp\">     (remhash 'obj5 hash)"
msgstr ""

#: in_ed/ElephantUserManual.html:7489
msgid ""
"     (gethash 'obj5 hash)\n"
"     =&gt; nil nil"
msgstr ""

#: in_ed/ElephantUserManual.html:7492
msgid ""
"     (restore my-set)\n"
"     (setf hash (snapshot-root my-set))"
msgstr ""

#: in_ed/ElephantUserManual.html:7495
msgid ""
"     (gethash 'obj5 hash)\n"
"     =&gt; #&lt;MY-TEST-CLASS ..&gt; t"
msgstr ""

#: in_ed/ElephantUserManual.html:7499
msgid ""
"     (test-value *)\n"
"     =&gt; 5\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7504
msgid ""
"<p>This means that while our set object was not reset, the restore\n"
"operation properly restored the old reference structure of our root\n"
"hash object.  Unfortunately, in this implementation you have to reset\n"
"your lisp pointers to get access to the restored objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7506
msgctxt "in_ed/ElephantUserManual.html:7506"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7511
msgid ""
"<p>A future version could traverse the existing object cache, dropping\n"
"new references and restoring old ones so that in-memory lisp pointers\n"
"were still valid."
msgstr ""

#: in_ed/ElephantUserManual.html:7513
msgctxt "in_ed/ElephantUserManual.html:7513"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7515
msgid "<h4 class=\"subsection\">6.3.3 Snapshot Set Implementation</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:7519
msgid ""
"<p>In this section we walk through the implementation of the snapshot set\n"
"in detail as it provides:"
msgstr ""

#: in_ed/ElephantUserManual.html:7521
msgctxt "in_ed/ElephantUserManual.html:7521"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7529
msgid ""
"<ul>\n"
"<li>Insight into constraints in serialization and lisp object identity\n"
"</li><li>How to leverage Elephant for some more sophisticated applications "
"than\n"
"      persistent indices and class slots. \n"
"</li><li>Helps you understand a useful utility (that we may add to an "
"extensions\n"
"      release in the future)\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:7535
msgid ""
"<p>To generalize the behavior discussed above, we will define a new\n"
"persistent class called a snapshot set.  The set itself is a wrapper\n"
"around the btree, but provides all the automation to store and recover\n"
"sets of standard objects."
msgstr ""

#: in_ed/ElephantUserManual.html:7537
msgctxt "in_ed/ElephantUserManual.html:7537"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7555
msgid ""
"<pre class=\"lisp\">     (defpclass snapshot-set ()\n"
"       ((index :accessor snapshot-set-index :initform (make-btree))\n"
"        (next-id :accessor snapshot-set-next-id :initform 0)\n"
"        (root :accessor snapshot-set-root :initform nil)\n"
"        (cache :accessor snapshot-set-cache\n"
"               :initform (make-hash-table :weak-keys t)\n"
"               :transient t)\n"
"        (touched :accessor snapshot-set-touched\n"
"                 :initform (make-array 20 :element-type 'fixnum\n"
"                              :initial-element 0 :fill-pointer t\n"
"                              :adjustable t)\n"
"                 :transient t))\n"
"       (:documentation \"Keeps track of a set of standard objects\n"
"         allowing a single snapshot call to update the store\n"
"         controller with the latest state of all objects registered with\n"
"         this set\"))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7560
msgid ""
"<p>The set class keeps track of IDs, a set of cached objects in memory,\n"
"the on-disk btree for storing instances by uid and the current uid\n"
"variable value.  Notice the use of the transient keyword argument for\n"
"the cache."
msgstr ""

#: in_ed/ElephantUserManual.html:7562
msgctxt "in_ed/ElephantUserManual.html:7562"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7568
msgid ""
"<p>There are two major operations supported by sets <code>snapshot</code> "
"and\n"
"<code>restore</code>.  These save objects to disk and restore objects to\n"
"memory, along with proper recovery of multiple references to the same\n"
"object."
msgstr ""

#: in_ed/ElephantUserManual.html:7570
msgctxt "in_ed/ElephantUserManual.html:7570"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7573
msgid "<p>Additional operations are:"
msgstr ""

#: in_ed/ElephantUserManual.html:7575
msgctxt "in_ed/ElephantUserManual.html:7575"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7581
msgid ""
"<ul>\n"
"<li>Registration: Adding and removing objects from a set\n"
"</li><li>Root operations: Easy access to a single root hash table or object\n"
"</li><li>Mapping: Walk over all objects in a set\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:7586
msgid ""
"<p>To enable snapshots, we have to register a set of root objects with\n"
"the set. This function ignores objects that are already cached,\n"
"otherwise allocates a new ID and caches the object."
msgstr ""

#: in_ed/ElephantUserManual.html:7588
msgctxt "in_ed/ElephantUserManual.html:7588"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7597
msgid ""
"<pre class=\"lisp\">     (defmethod register-object ((object standard-"
"object) (set snapshot-set))\n"
"       \"Register a standard object.  Not recorded until\n"
"        the snapshot function is called on db\"\n"
"       (aif (lookup-cached-id object set)\n"
"            (values object it)\n"
"            (let ((id (incf (snapshot-set-next-id set))))\n"
"     \t (cache-snapshot-object id object set)\n"
"     \t (values object id))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7600
msgid ""
"     (defun lookup-cached-id (obj set)\n"
"       (gethash obj (snapshot-set-cache set)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7604
msgid ""
"     (defun cache-snapshot-object (id obj set)\n"
"       (setf (gethash obj (snapshot-set-cache set)) id))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7611
msgid ""
"<p>A parallel function registers hash tables.  One very important\n"
"invariant implied here is that the cache always contains objects that\n"
"are eq and mapped back to a serialized object in the backing btree. \n"
"There is no need, however, to immediately write objects to the store\n"
"and this gives us some transactional properties: snapshots are atomic,\n"
"consistent and durable.  Isolation is not enforced by snapshots."
msgstr ""

#: in_ed/ElephantUserManual.html:7613
msgctxt "in_ed/ElephantUserManual.html:7613"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7617
msgid ""
"<p>This means that the transient cache has to be valid immediately after\n"
"the snapshot set is loaded from the data store."
msgstr ""

#: in_ed/ElephantUserManual.html:7619
msgctxt "in_ed/ElephantUserManual.html:7619"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7623
msgid ""
"<pre class=\"lisp\">     (defmethod initialize-instance :after ((set "
"snapshot-set) &amp;key lazy-load &amp;allow-other-keys)\n"
"       (unless lazy-load (restore set)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7630
msgid ""
"<p>This also has consequences for unregistration.  Removing a root object\n"
"should also result in the removal of all objects that are unreachable\n"
"from other roots.  However, since side effects are not permanent until\n"
"a snapshot operation, we merely have to garbage collect id's that were\n"
"not touched during a snapshot operation.  This makes unregistration\n"
"simple."
msgstr ""

#: in_ed/ElephantUserManual.html:7632
msgctxt "in_ed/ElephantUserManual.html:7632"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7640
msgid ""
"<pre class=\"lisp\">     (defmethod unregister-object (object (set snapshot-"
"set))\n"
"       \"Drops the object from the cache and backing store\"\n"
"       (let ((id (gethash object (snapshot-set-cache set))))\n"
"         (when (null id)\n"
"           (error \"Object ~A not registered in ~A\" object set))\n"
"         (drop-cached-object object set)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7642
msgid "<p>But snapshots are a little bit more work."
msgstr ""

#: in_ed/ElephantUserManual.html:7644
msgctxt "in_ed/ElephantUserManual.html:7644"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7655
msgid ""
"<pre class=\"lisp\">     (defmethod snapshot ((set snapshot-set))\n"
"       \"Saves all objects in the set (and any objects reachable from the\n"
"        current set of objects) to the persistent store\"\n"
"       (with-transaction (:store-controller (get-con\n"
"                                              (snapshot-set-index set)))\n"
"         (loop for (obj . id) in\n"
"                   (get-cache-entries (snapshot-set-cache set))\n"
"               do\n"
"     \t  (save-snapshot-object id obj set))\n"
"         (collect-untouched set)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7666
msgid ""
"     (defun save-snapshot-object (id obj set)\n"
"       (unless (touched id set)\n"
"         (setf (get-value id (snapshot-set-index set))\n"
"     \t  (cond ((standard-object-subclass-p obj)\n"
"     \t\t (save-proxy-object obj set))\n"
"     \t\t((hash-table-p obj)\n"
"     \t\t (save-proxy-hash obj set))\n"
"     \t\t(t (error \"Cannot only snapshot standard-objects and hash-tables"
"\"))))\n"
"         (touch id set))\n"
"       id)"
msgstr ""

#: in_ed/ElephantUserManual.html:7674
msgid ""
"     (defun collect-untouched (set)\n"
"       (map-btree (lambda (k v)\n"
"     \t       (unless (touched k set)\n"
"     \t\t (remove-kv k (snapshot-set-index set))))\n"
"     \t     (snapshot-set-index set))\n"
"       (clear-touched set))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7685
msgid ""
"<p>We go through all objects in the cache, storing objects as we go via\n"
"<code>save-snapshot-object</code>.  This function is responsible for "
"storing\n"
"objects and hash tables and recursing on any instances that are\n"
"referenced.  Any object that is saved is added to a touch list so they\n"
"are not stored again and we can mark stored instances for the\n"
"<code>collect-untouched</code> call which ensures that newly unreachable\n"
"objects are deleted from the persistent store.  Any newly found\n"
"objects are added to the in-memory cache which, being a weak array,\n"
"should eventually drop references to objects that are not referred to\n"
"elsewhere."
msgstr ""

#: in_ed/ElephantUserManual.html:7687
msgctxt "in_ed/ElephantUserManual.html:7687"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7694
msgid ""
"<p>It should be noted that garbage objects not garbage collected from the\n"
"weak-array based cache may be stored to and restored from the\n"
"persistent store.  However this is merely a storage overhead as they\n"
"will eventually be dropped across sessions as there are no saved\n"
"references to them."
msgstr ""

#: in_ed/ElephantUserManual.html:7696
msgctxt "in_ed/ElephantUserManual.html:7696"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7708
msgid ""
"<p>Now when we serialize a standard object, all the slot values are\n"
"stored inline.  This means that by default, a slot that refers to a\n"
"standard object would get an immediately serialized version rather\n"
"than a reference.  This of course makes it impossible to restore\n"
"multiple references to a single object.  The approach taken here is to\n"
"instantiate a <em>proxy</em> object which is a copy of the original\n"
"class and stores references to normal values in its slots.  Any\n"
"references to hashes or standard classes are replaced with a reference\n"
"object that records the unique id of the object so it can be properly\n"
"restored."
msgstr ""

#: in_ed/ElephantUserManual.html:7710
msgctxt "in_ed/ElephantUserManual.html:7710"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7723
msgid ""
"<pre class=\"lisp\">     (defun save-proxy-object (obj set)\n"
"       (let ((svs (subsets 2 (slots-and-values obj))))\n"
"         (if (some #'reified-class-p (mapcar #'second svs))\n"
"     \t(let ((proxy (make-instance (type-of obj))))\n"
"     \t  (loop for (slotname value) in svs do\n"
"     \t       (setf (slot-value proxy slotname)\n"
"     \t\t     (if (reify-class-p value)\n"
"     \t\t\t (reify-value value set)\n"
"     \t\t\t value)))\n"
"     \t  proxy)\n"
"     \tobj)))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7728
msgid ""
"<p>The function checks whether any slot value can be reified (represented\n"
"by a unique id) and if so, makes a new proxy instance and properly\n"
"instantiates its slots, returning it to the main store function which\n"
"writes the proxy object to the btree."
msgstr ""

#: in_ed/ElephantUserManual.html:7730
msgctxt "in_ed/ElephantUserManual.html:7730"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7733
msgid "<p>On restore, we simply load all objects into memory."
msgstr ""

#: in_ed/ElephantUserManual.html:7735
msgctxt "in_ed/ElephantUserManual.html:7735"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7747
msgid ""
"<pre class=\"lisp\">     (defmethod restore ((set snapshot-set))\n"
"       \"Restores a snapshot by setting the snapshot-set state to the last\n"
"     snapshot.  If this is used during runtime, the user needs to drop all\n"
"     references to objects and retrieve again from the snapshot set.  Also\n"
"     used to initialize the set state when a set is created, for example\n"
"     pulled from the root of a store-controller, unless :lazy-load is\n"
"     specified\"\n"
"       (clear-cache set)\n"
"       (map-btree (lambda (id object)\n"
"     \t       (load-snapshot-object id object set))\n"
"     \t     (snapshot-set-index set)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7757
msgid ""
"     (defun load-snapshot-object (id object set)\n"
"       (let ((object (ifret object (get-value id (snapshot-set-index "
"set)))))\n"
"         (cond ((standard-object-subclass-p object)\n"
"     \t   (load-proxy-object id object set))\n"
"     \t  ((hash-table-p object)\n"
"     \t   (load-proxy-hash id object set))\n"
"     \t  (t (error \"Unrecognized type ~A for id ~A in set ~A\"\n"
"                         (type-of object) id set)))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7764
msgid ""
"<p>If an object has a reference object in a slot, then we simply restore\n"
"that object as well.  <code>load-snapshot-object</code> accepts null for an\n"
"object so it can be used recursively when a reference object refers to\n"
"an object (via the unique id) that is not yet cached.  The <code>load</"
"code>\n"
"functions return an object so that they can used directly to create\n"
"values for writing slots or hash entries."
msgstr ""

#: in_ed/ElephantUserManual.html:7766
msgctxt "in_ed/ElephantUserManual.html:7766"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7779
msgid ""
"<pre class=\"lisp\">     (defun load-proxy-object (id obj set)\n"
"       (ifret (lookup-cached-object id set)\n"
"     \t (progn\n"
"     \t   (cache-snapshot-object id obj set)\n"
"     \t   (let ((svs (subsets 2 (slots-and-values obj))))\n"
"     \t     (loop for (slotname value) in svs do\n"
"     \t\t  (when (setrefp value)\n"
"     \t\t    (setf (slot-value obj slotname)\n"
"     \t\t\t  (load-snapshot-object (snapshot-set-reference-id value) nil "
"set)))))\n"
"     \t   obj)))\n"
"</pre>\n"
"   <h4 class=\"subsection\">6.3.4 Isolating multiple snapshot sets</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:7788
msgid ""
"<p>A brief note on how to separate out the objects you want to store from\n"
"those you don't may be useful.  We want to snapshot groups of\n"
"inter-referential objects without sucking in the whole system in one\n"
"snapshot.  These object sets must be closed and fully connected.  If\n"
"the program consists of a set of subgraphs, a root element of each\n"
"graph should be stored in a hash table that is then treated as the\n"
"snapshot root."
msgstr ""

#: in_ed/ElephantUserManual.html:7790
msgctxt "in_ed/ElephantUserManual.html:7790"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7812
msgid ""
"<ul>\n"
"<li><strong>Manual registration:</strong>\n"
"Objects without external references are easy, just <code>register</code> or\n"
"<code>unregister</code> them from the <code>snapshot-set</code> as needed "
"and then\n"
"map over them to get them back. \n"
"</li><li><strong>Implicit registration:</strong>\n"
"Just store objects in a hash that is the root of a <code>snapshot-set</"
"code>\n"
"and you are good to go. \n"
"</li><li><strong>Graphs:</strong>\n"
"Graphs are easy to store as they naturally consist of a closed set of\n"
"objects.  If the graph nodes reference other system objects that you\n"
"don't want to store, you'll need to implement something akin to the\n"
"indirection provided here.  Just store the root of the graph in the\n"
"snapshot set root and go from there. \n"
"</li><li><strong>All instances of a type:</strong>\n"
"Another easy way to create sets is to overload <code>make-instance</code> "
"to\n"
"store all new objects in a weak hash table that is treated as the root\n"
"of a <code>snapshot-set</code> (NOTE: I have not verified that weak hashes\n"
"are properly serialized and reproduced - I suspect they are not so you\n"
"might have to copy after a <code>restore</code>). \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:7822
msgid ""
"<p>For more complex applications, you can isolate these closed sets of\n"
"objects by using <code>snapshot-set</code> root hash tables as an\n"
"indirection mechanism.  Instead of storing direct references in an\n"
"object slot or hash value, isolation is ensured by storing keys and\n"
"indirecting through a hash table to get the target object.  This can\n"
"be hidden from the programmer in multiple ways.  The easiest way is\n"
"just to make sure that when you store references you store a key and\n"
"overload the slot accessor.  A sketch of this follows:"
msgstr ""

#: in_ed/ElephantUserManual.html:7824
msgctxt "in_ed/ElephantUserManual.html:7824"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7828
msgid ""
"<pre class=\"lisp\">     (defparameter *island1-hash* (make-hash-table))\n"
"     (defparameter *island2-hash* (make-hash-table))\n"
"     (defvar *unique-id* 0)"
msgstr ""

#: in_ed/ElephantUserManual.html:7832
msgid ""
"     (defclass island1-object ()\n"
"       ((pointer-to-island1 :accessor child :initform nil)\n"
"        (pointer-to-island2 :accessor neighbor :initform nil)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7836
msgid ""
"     (defmethod neighbor :around ((obj island1-object))\n"
"       (let ((key (call-next-method)))\n"
"          (when key (gethash key *island2-hash*))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7849
msgid ""
"     (defmethod (setf neighbor) :around (ref (obj island1-object))\n"
"       (cond ((subtypep (type-of ref) 'island2-object)\n"
"              (let ((key (find-object ref *island2-hash*)))\n"
"                (if key\n"
"                    (progn\n"
"                      (call-next-method key obj)\n"
"                      obj)\n"
"                    (progn\n"
"                      (setf (gethash (incf *unique-id*) *island2-hash*) "
"ref)\n"
"                      (call-next-method *unique-id* obj)\n"
"                      obj))))\n"
"             (t (call-next-method))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7857
msgid ""
"     (defun find-object (obj hash)\n"
"        (map-hash (lambda (k v)\n"
"                    (declare (ignore k))\n"
"                    (if (eq obj v)\n"
"                        (return-from find-object obj)))\n"
"                   hash))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7861
msgid ""
"<p>The same template would apply to <code>island2</code> references to\n"
"<code>island1</code> objects.  You could further simplify creating these\n"
"hash table indirections with a little macro:"
msgstr ""

#: in_ed/ElephantUserManual.html:7863
msgctxt "in_ed/ElephantUserManual.html:7863"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7884
msgid ""
"<pre class=\"lisp\">     (defmacro def-snapshot-wrapper (accessor-name\n"
"               (source-classname target-classname hashname uid))\n"
"       (with-gensysms (obj key ref)\n"
"        `(progn\n"
"           (defmethod ,accessorname :around ((,obj ,source-classname))\n"
"              (let ((,key (call-next-method)))\n"
"                (when ,key (gethash ,key ,hashname))))\n"
"           (defmethod (setf ,accessorname) :around\n"
"                      (,ref (,obj ,source-classname))\n"
"              (cond ((subtypep (type-of ,ref) ,target-classname)\n"
"                     (let ((,key (find-object ,ref ,hashname)))\n"
"                       (if ,key\n"
"                           (progn\n"
"                             (call-next-method ,key ,obj)\n"
"                             ,obj)\n"
"                           (progn\n"
"                             (setf (gethash (incf ,uid) ,hashname) ,ref)\n"
"                             (call-next-method ,uid ,obj)\n"
"                             ,obj))))\n"
"                    (t (call-next-method)))))))"
msgstr ""

#: in_ed/ElephantUserManual.html:7888
msgid ""
"     (defclass island2-object ()\n"
"       ((pointer-to-island2 :accessor child :initform nil)\n"
"        (pointer-to-island1 :accessor neighbor :initform nil)))"
msgstr ""

#: in_ed/ElephantUserManual.html:7892
msgid ""
"     (def-snapshot-wrapper neighbor\n"
"                           (island2 island1 *island1-hash* *unique-id*))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:7898
msgid ""
"<p>Of course this doesn't work for multi-threaded environments, or for\n"
"separating more complex collections of types.  I am also sure that\n"
"more elegant solutions are possible.  In most cases, we assume the\n"
"user will have a natural collection of objects that can be closed over\n"
"by types or references so such efforts are unnecessary."
msgstr ""

#: in_ed/ElephantUserManual.html:7900
msgctxt "in_ed/ElephantUserManual.html:7900"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7902
msgctxt "in_ed/ElephantUserManual.html:7902"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7904
msgctxt "in_ed/ElephantUserManual.html:7904"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7910
msgid ""
"<hr>\n"
"<a name=\"Elephant-as-Database\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Multithreaded-Web-"
"Applications\">Multithreaded Web Applications</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Persistent-System-"
"Objects\">Persistent System Objects</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7912
msgctxt "in_ed/ElephantUserManual.html:7912"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7915
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.4 Elephant as Database</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7922
msgid ""
"<p>As we move beyond replacing standard objects with persistent objects\n"
"and using Elephant to save conventional lisp data, we can exploit\n"
"Elephant's advanced class indexing features and the query system. \n"
"With these facilities, Elephant can be used as a full-fledged object\n"
"oriented database system"
msgstr ""

#: in_ed/ElephantUserManual.html:7924
msgctxt "in_ed/ElephantUserManual.html:7924"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7928
msgid ""
"<p><em>NOTE: Will finish this section after the query engine is done\n"
"            as it will be more coherent/complete</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:7930
msgctxt "in_ed/ElephantUserManual.html:7930"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7932
msgctxt "in_ed/ElephantUserManual.html:7932"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7934
msgctxt "in_ed/ElephantUserManual.html:7934"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7940
msgid ""
"<hr>\n"
"<a name=\"Multithreaded-Web-Applications\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Real_002dWorld-"
"Application-Examples\">Real-World Application Examples</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Elephant-as-"
"Database\">Elephant as Database</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7942
msgctxt "in_ed/ElephantUserManual.html:7942"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7945
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.5 Multithreaded Web Applications</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7952
msgid ""
"<p>Web applications can exploit all of the patterns described in previous\n"
"sections.  Each server thread can have transactional access to objects\n"
"encapsulating user data, commercial transactions, database data, etc. \n"
"Users can formulate queries against objects and get html rendering of\n"
"the result views."
msgstr ""

#: in_ed/ElephantUserManual.html:7954
msgctxt "in_ed/ElephantUserManual.html:7954"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7960
msgid ""
"<p>The most important characteristic of Elephant in these settings is\n"
"that instances and <code>store-controller</code> objects in versions 0.9 "
"and\n"
"greater are automatically thread-safe.  The only consideration in\n"
"these cases is transaction design."
msgstr ""

#: in_ed/ElephantUserManual.html:7962
msgctxt "in_ed/ElephantUserManual.html:7962"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7966
msgid ""
"<p><em>NOTE: What are common wrappers for Elephant that come up in web\n"
"applications?  Presentation functions?</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:7968
msgctxt "in_ed/ElephantUserManual.html:7968"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7972
msgid ""
"<p><em>NOTE: Should this section be supplanted by a full application "
"example\n"
"which uses most of the patterns above?</em>"
msgstr ""

#: in_ed/ElephantUserManual.html:7980
msgid ""
"<!-- @node Graph-oriented Applications -->\n"
"<!-- @comment node-name, next, previous, up -->\n"
"<!-- @section Graph-oriented Applications -->\n"
"<!-- Graph traversal and matching -->\n"
"<!-- Using the query system for graph queries -->\n"
"<!-- Performance issues -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7982
msgctxt "in_ed/ElephantUserManual.html:7982"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:7984
msgctxt "in_ed/ElephantUserManual.html:7984"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:7990
msgid ""
"<hr>\n"
"<a name=\"Real-World-Application-Examples\"></a>\n"
"<a name=\"Real_002dWorld-Application-Examples\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Multithreaded-Web-"
"Applications\">Multithreaded Web Applications</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Design-Patterns\">Design "
"Patterns</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:7992
msgctxt "in_ed/ElephantUserManual.html:7992"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:7995
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">6.6 Real-World Application Examples</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:7999
msgid ""
"<p>This section contains a collection of case studies or overviews of\n"
"read-world applications that have exploited Elephant."
msgstr ""

#: in_ed/ElephantUserManual.html:8001
msgctxt "in_ed/ElephantUserManual.html:8001"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8003
msgid "<h4 class=\"subsection\">6.6.1 Konsenti</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:8008
msgid ""
"<p>Elephant is used by Konsenti(tm), a for-profit company of Robert\n"
"L. Read, one of the maintainers of Elephant.  It can be visited at\n"
"<a href=\"http://konsenti.com/\">http://konsenti.com</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:8010
msgctxt "in_ed/ElephantUserManual.html:8010"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8018
msgid ""
"<p>Konsenti uses the Data Collection Management (DCM) package, found in\n"
"the <code>src/contrib/rread directory</code>.  DCM provides\n"
"prevalence-style in-memory write-through caching.  The most enjoyable\n"
"feature about Elephant for this project is that new Business Layer\n"
"objects can be created without having to deal with an\n"
"Object-Relational Mapping, enabling extremely rapid development."
msgstr ""

#: in_ed/ElephantUserManual.html:8020
msgctxt "in_ed/ElephantUserManual.html:8020"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8033
msgid ""
"<p>All Business objects are persisted via a <code>director</code> in DCM "
"(which\n"
"sits on top of Elephant.)  Many of these business objects are in fact\n"
"finite state machines decorated with functions.  The functions are\n"
"represented by lambda s-expressions stored in slots on the business\n"
"objects.  A complete Message Factory and double-entry accounting\n"
"system are also implemented as DCM objects.  Binary objects, such as\n"
"uploaded PDFs, can be attached to objects as comments and are stored\n"
"directly in Elephant.  Konsenti is based on utf-8, and unicode\n"
"characters outside of the ISO-8859-1 character set are routinely\n"
"stored in Elephant.  Konsenti uses Postgres as a backend for licensing\n"
"reasons; but use of other data stores is possible."
msgstr ""

#: in_ed/ElephantUserManual.html:8035
msgctxt "in_ed/ElephantUserManual.html:8035"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8037
msgid "<h4 class=\"subsection\">6.6.2 Conceptminer</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:8044
msgid ""
"<p>Conceptminer is an Elephant-based web-mining framework developed by\n"
"Ian Eslick (<a href=\"http://www.media.mit.edu/~eslick\">http://www.media."
"mit.edu/~eslick</a>) that performs\n"
"large-scale text analysis over the web to identify semantic\n"
"relationships such as PartOf, DesireOf and EffectOf\n"
"between English phrases."
msgstr ""

#: in_ed/ElephantUserManual.html:8046
msgctxt "in_ed/ElephantUserManual.html:8046"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8055
msgid ""
"<p>Elephant's persistence capability is used to keep full records of\n"
"all source material, extracted relationships and search queries so\n"
"that it is always possible to trace the source of a learned relation\n"
"and to avoid repeated queries to web search engines.  Conceptminer\n"
"used Elephant 0.6.0 and the development branch of Elephant 0.9 to\n"
"perform months of analysis consisting of millions of pages and a\n"
"page/query database of over ten gigabytes."
msgstr ""

#: in_ed/ElephantUserManual.html:8057
msgctxt "in_ed/ElephantUserManual.html:8057"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8061
msgid ""
"<p>There are several interesting uses and extensions of Elephant in\n"
"Conceptminer:"
msgstr ""

#: in_ed/ElephantUserManual.html:8063
msgctxt "in_ed/ElephantUserManual.html:8063"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8079
msgid ""
"<ul>\n"
"<li>Bulk storage of post-processed web data: Elephant was used to\n"
"store hundreds of thousands of processed web pages as strings, associate\n"
"pages with queries and store related metadata. \n"
"</li><li>Derived index: a custom string hash function over URLs was used to "
"populate\n"
"a class derived index, allowing fast identification of pages from\n"
"their URL without requiring expensive eql comparisons. \n"
"</li><li>Inverted document index: a (not terribly efficient) data structure\n"
"that efficiently maps words to documents allowing pages to indexed by\n"
"the words contained in them.  Allowed for phrase and conjunction searches. \n"
"</li><li>User association data structure: a data structure based on oids "
"that supports\n"
"general one-to-many mappings between classes.  Had a custom migrate\n"
"method to support migration of associations.  Supplanted by persistent\n"
"sets as of 0.9. \n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8092
msgid ""
"<p>The most interesting use of Elephant was extending its transactional\n"
"architecture to cover in-memory lisp operations. <code>PCOMP</code> "
"(Process\n"
"Components) is a framework for constructing and managing simple,\n"
"dataflow-style multi-threaded applications in Common Lisp.  The goal\n"
"is to simplify the process sufficiently so that the ordinary user can\n"
"hide from many of the details associated with aborting transactions. \n"
"To this end, the model provides for safe, asynchronous communications\n"
"among a set of components which may be scheduled together in a single\n"
"process or communicate across separate threads (and potentially\n"
"processes).  Components are packaged into a system inside a Container\n"
"object which schedules execution and mediates communications."
msgstr ""

#: in_ed/ElephantUserManual.html:8094
msgctxt "in_ed/ElephantUserManual.html:8094"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8101
msgid ""
"<p>Communications between components can be in a dataflow style or using "
"messages.  Each\n"
"component has a single port for receiving incoming data items.  These items, "
"if access\n"
"is shared among components, should have the proper synchronization "
"protections on\n"
"mutating accesses.  There is also an asynchronous communications method "
"allowing you\n"
"to send messages to components with particular names."
msgstr ""

#: in_ed/ElephantUserManual.html:8103
msgctxt "in_ed/ElephantUserManual.html:8103"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8107
msgid ""
"<p>The basic building block is a component.  Components are defined using "
"the defcomponent\n"
"form and contain several major elements, such as:"
msgstr ""

#: in_ed/ElephantUserManual.html:8109
msgctxt "in_ed/ElephantUserManual.html:8109"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8117
msgid ""
"<pre class=\"lisp\">     (defcomponent counter\n"
"       (:vars (count 0) end (increment 1))\n"
"       (:initialize (assert end))\n"
"       (:body\n"
"          (when (&gt;= (incf count increment) end)\n"
"             (terminate))))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:8119
msgid "<p>The arguments to defcomponent behave as follows:"
msgstr ""

#: in_ed/ElephantUserManual.html:8121
msgctxt "in_ed/ElephantUserManual.html:8121"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8127
msgid ""
"<ul>\n"
"<li><code>:vars</code> - Values that the body wants to retain between "
"invocations\n"
"</li><li><code>:initialize</code> - A reserved message handler called at the "
"begining of time\n"
"</li><li><code>:body</code> - A body expression that is executed whenever "
"data has arrived\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8131
msgid ""
"<p>The body and messages are evaluated in a very specific environment.  "
"Within the body\n"
"certain variables and functions are bound:"
msgstr ""

#: in_ed/ElephantUserManual.html:8133
msgctxt "in_ed/ElephantUserManual.html:8133"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8153
msgid ""
"<ul>\n"
"<li>Variables:\n"
"          <ul>\n"
"  <li><code>data</code> - The current data item\n"
"  </li><li><code>self</code> - The component object\n"
"  </li><li><code>\"vars\"</code> - all variables named in <code>:vars</code> "
"are bound using <code>symbol-macrolet</code> and available as in a "
"<code>let</code>\n"
" statement.  Any side effects to those vars are visible, but not saved \n"
"to th component state until the component commits (see below). \n"
"  </li></ul>\n"
"     </li><li>Functions:\n"
"          <ul>\n"
"  <li><code>(terminate)</code>\n"
"  </li><li><code>(send data)</code>\n"
"  </li><li><code>(receive data)</code>\n"
"  </li><li><code>(get-ctrl-msg target type data)</code>\n"
"  </li><li><code>(pause)</code>\n"
"  </li><li><code>(abort)</code>\n"
"  </li></ul>\n"
"     </li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8162
msgid ""
"<p>Each component execution is bound in a transactional framework.  No\n"
"variables are written, messages consumed or messages sent until the\n"
"body or control handler has exited normally.  Users can tap into this\n"
"transactional framework by overriding <code>start-transaction</code>,\n"
"<code>commit-transaction</code> and <code>abort-transaction</code> methods "
"for the\n"
"component class.  Transactional variables are implemented via\n"
"<code>:after</code> methods on these generic functions."
msgstr ""

#: in_ed/ElephantUserManual.html:8164
msgctxt "in_ed/ElephantUserManual.html:8164"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8168
msgid ""
"<p>When signals are asserted by the body or a message handler, they are also "
"wrapped\n"
"in restart handlers called:"
msgstr ""

#: in_ed/ElephantUserManual.html:8170
msgctxt "in_ed/ElephantUserManual.html:8170"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8173
msgid ""
"<ul>\n"
"<li><strong>retry:</strong> Try to execute the component again"
msgstr ""

#: in_ed/ElephantUserManual.html:8177
msgid ""
"     </li><li><strong>retry n times:</strong> Using retry you can retry the "
"body or\n"
"      message again.  Usually this works best at the REPL when you can\n"
"      test or repair the error and then keep the procesess running"
msgstr ""

#: in_ed/ElephantUserManual.html:8181
msgid ""
"     </li><li><strong>replace:</strong> Interactively or automatically enter "
"an\n"
"      expression to replace the current data item with one of your\n"
"      choosing"
msgstr ""

#: in_ed/ElephantUserManual.html:8183
msgid ""
"     </li><li><strong>ignore:</strong> Drop the message or data input as if "
"it never arrived"
msgstr ""

#: in_ed/ElephantUserManual.html:8186
msgid ""
"     </li><li><strong>terminate:</strong> Terminate execution of the current "
"component\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8190
msgid ""
"<!-- *-texinfo-*- -->\n"
"<!-- *** FINISH *** -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:8192
msgctxt "in_ed/ElephantUserManual.html:8192"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8198
msgid ""
"<hr>\n"
"<a name=\"Elephant-Architecture\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Design-Patterns"
"\">Design Patterns</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8200
msgctxt "in_ed/ElephantUserManual.html:8200"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8203
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">7 Elephant Architecture</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:8210
msgid ""
"<p><a name=\"index-design-192\"></a>\n"
"Elephant's early architecture was tightly coupled to the Berkeley DB\n"
"API.  Over time we've moved towards a more modular architecture to\n"
"support easy upgrading, repository migration, shared functionality\n"
"between data stores and general hygene."
msgstr ""

#: in_ed/ElephantUserManual.html:8212
msgctxt "in_ed/ElephantUserManual.html:8212"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8215
msgid "<p>The architecture has been carefully modularized:"
msgstr ""

#: in_ed/ElephantUserManual.html:8217
msgctxt "in_ed/ElephantUserManual.html:8217"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8219
msgid ""
"<div class=\"block-image\"><img src=\"ElephantUserManual_files/ArchDiagram."
"png\" alt=\"[Architecture Diagram]\"></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8224
msgid ""
"<p>To get a feeling for what is happening inside elephant, it is probably\n"
"best to walk through the various major protocols to see how these\n"
"components participate in implementing them."
msgstr ""

#: in_ed/ElephantUserManual.html:8226
msgctxt "in_ed/ElephantUserManual.html:8226"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8234
msgid ""
"<ul>\n"
"<li>Initialization of a store controller\n"
"</li><li>Creating a persistent object\n"
"</li><li>Operations on persistent slots\n"
"</li><li>Operations on persistent collections\n"
"</li><li>Implementing <code>with-transaction</code>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8236
msgid "<h3 class=\"section\">7.1 Initializing a store controller</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8241
msgid ""
"<p>When the main elephant <code>open-store</code> function is called with a\n"
"specification, it calls get-controller which first checks to see if a\n"
"controller already exists for that spec."
msgstr ""

#: in_ed/ElephantUserManual.html:8243
msgctxt "in_ed/ElephantUserManual.html:8243"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8251
msgid ""
"<p>If there is no controller, it calls <code>build-controller</code> to\n"
"construct one.  If the data store code base is not present,\n"
"<code>load-data-store</code> is called to ensure that any asdf dependencies\n"
"are satisfied.  The associations for asdf dependencies are statically\n"
"configured in <code>*elephant-data-stores*</code> for each data store type\n"
"supported by elephant."
msgstr ""

#: in_ed/ElephantUserManual.html:8253
msgctxt "in_ed/ElephantUserManual.html:8253"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8259
msgid ""
"<p>While being loaded, the data store is responsible for calling\n"
"<code>register-data-store-con-init</code> to register a data store\n"
"initialization function for its spec type (i.e. :BDB or :CLSQL). \n"
"For example, from bdb-controller.lisp:"
msgstr ""

#: in_ed/ElephantUserManual.html:8261
msgctxt "in_ed/ElephantUserManual.html:8261"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8265
msgid ""
"<pre class=\"lisp\">     (eval-when (:compile-toplevel :load-toplevel)\n"
"       (register-data-store-con-init :bdb 'bdb-test-and-construct))\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:8272
msgid ""
"<p>This mapping between spec types and initialization functions is\n"
"accessed by <code>lookup-data-store-con-init</code> from within\n"
"<code>build-controller</code>.  The function returned by\n"
"<code>lookup-data-store-con-init</code> is passed the full specification "
"and\n"
"returns a <code>store-controller</code> subclass instance for the specified\n"
"data store."
msgstr ""

#: in_ed/ElephantUserManual.html:8274
msgctxt "in_ed/ElephantUserManual.html:8274"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8280
msgid ""
"<p>The new controller is stored in the <code>*dbconnection-spec*</code> "
"hash\n"
"table, associating the object with its specification.  Finally\n"
"Elephant calls open-controller to actually establish a connection to\n"
"or create the files of the data store."
msgstr ""

#: in_ed/ElephantUserManual.html:8282
msgctxt "in_ed/ElephantUserManual.html:8282"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8288
msgid ""
"<p>Finally, if the default store controller <code>*store-controller*</code> "
"is\n"
"nil, it will be initialized with the new store controller, otherwise\n"
"the original value is left in <code>*store-controller*</code> until that\n"
"store controller is closed using <code>close-store</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8290
msgctxt "in_ed/ElephantUserManual.html:8290"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8294
msgid ""
"<p>The data store implementor has access to various utilities to aid\n"
"initialization."
msgstr ""

#: in_ed/ElephantUserManual.html:8296
msgctxt "in_ed/ElephantUserManual.html:8296"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8317
msgid ""
"<ul>\n"
"<li><code>get-user-configuration-parameter</code> - Access symbol tags\n"
"      in my-config.sexp to access data store specific user\n"
"configuration.  You can also add special variables to variables.lisp\n"
"and add a tag-variable pair to <code>*user-configurable-parameters*</code>\n"
"in variables.lisp to automatically initialize it when the store\n"
"controller is opened. \n"
"</li><li><code>get-con</code> behavior when store is closed or lost\n"
"</li><li><code>database-version</code> a store controller implements this\n"
"      in order to tell Elephant what serializer to use.  Currently,\n"
"      version 0.6.0 databases use serializer1 and all later database\n"
"      use serializer version 2.  This is to ensure that a given version\n"
"      of the Elephant code can open databases from prior versions in\n"
"      order to properly upgrade to the new code base. \n"
"</li><li>Symbol conversions.  To aid in opening legacy databases, a\n"
"      symbol conversion facility is provided in controller.lisp to\n"
"      be applied to any symbols extracted from the legacy data store. \n"
"      (if, for instance, the type name of subclasses changed, such as\n"
"       sleepycat-btree becoming bdb-btree)\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8321
msgid ""
"<p>At this point, all operations referencing the store controller should\n"
"be able to proceed."
msgstr ""

#: in_ed/ElephantUserManual.html:8323
msgctxt "in_ed/ElephantUserManual.html:8323"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8326
msgid "<p>At the end of a session,"
msgstr ""

#: in_ed/ElephantUserManual.html:8328
msgctxt "in_ed/ElephantUserManual.html:8328"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8330
msgid "<h3 class=\"section\">7.2 Persistent Object Creation</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8336
msgid ""
"<p>The only thing that a data store has to do to support new object\n"
"creation, other than implement the slot protocol, is implement the\n"
"method <code>next-oid</code> to return the next unique object id for the\n"
"persistent object being created."
msgstr ""

#: in_ed/ElephantUserManual.html:8338
msgctxt "in_ed/ElephantUserManual.html:8338"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8348
msgid ""
"<p>Existing objects are created during deserialization of object\n"
"references.  The serializer subsystem is built-into the core of\n"
"elephant and can be used by data stores.  The serializer is abstracted\n"
"so that multiple serializers can be co-resident and the data store can\n"
"choose the appropriate one.  The abstraction boundary between the\n"
"serializer, the data store, and the core Elephant system is not\n"
"perfect, so be aware and refer to existing data store implementations\n"
"if in doubt."
msgstr ""

#: in_ed/ElephantUserManual.html:8350
msgctxt "in_ed/ElephantUserManual.html:8350"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8359
msgid ""
"<p>A serializer takes as arguments the store-controller, lisp object and\n"
"a <code>buffer-stream</code> from the memory utility library and returns "
"the\n"
"buffer-stream with the binary serialized object.  The deserializer\n"
"reverses this process.  For all lisp objects except persistent\n"
"classes, this means reallocating the storage space for the object and\n"
"recreating all its contents.  Deserializing a standard object results\n"
"in a new standard object of the same class with the same slot values."
msgstr ""

#: in_ed/ElephantUserManual.html:8361
msgctxt "in_ed/ElephantUserManual.html:8361"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8371
msgid ""
"<p>Persistent classes are dealt with specially.  When a persistent object\n"
"is serialized, it's oid and class are stored in the\n"
"<code>buffer-stream</code>.  On deserialization it uses the oid to check in\n"
"the store-controller's cache for an existing placeholder object.  If\n"
"the cache misses, then it creates a new placeholder object using the\n"
"class and oid as described in See <a href=\"#Persistent-Classes-and-Objects"
"\">Persistent Classes and Objects</a>. \n"
"The store controller contains a cache instance that is automatically\n"
"initialized by the core Elephant object protocol."
msgstr ""

#: in_ed/ElephantUserManual.html:8373
msgctxt "in_ed/ElephantUserManual.html:8373"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8381
msgid ""
"<p>Currently the serializer is selected by the core Elephant code based\n"
"on the store controller's database version.  See the reference section\n"
"for details on implementing the store-controller database version\n"
"method.  It is a relatively small change to have the data store choose\n"
"its own serializer, however we will have to tighten up and document\n"
"the contracts between the Elephant core code, serializer and data store."
msgstr ""

#: in_ed/ElephantUserManual.html:8383
msgctxt "in_ed/ElephantUserManual.html:8383"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8385
msgid "<h3 class=\"section\">7.3 Persistent Slot Protocol</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8390
msgid ""
"<p>The core protocol that the data store needs to support is the slot\n"
"access protocol.  During object initialization, these functions are\n"
"called to initialize the slots of the object.  The four functions are:"
msgstr ""

#: in_ed/ElephantUserManual.html:8392
msgctxt "in_ed/ElephantUserManual.html:8392"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8399
msgid ""
"<ul>\n"
"<li><code>persistent-slot-reader</code>\n"
"</li><li><code>persistent-slot-writer</code>\n"
"</li><li><code>persistent-slot-boundp</code>\n"
"</li><li><code>persistent-slot-makunbound</code>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8404
msgid ""
"<p>More details can be found in the data store api reference section.  In\n"
"short, these functions specialize on the specific <code>store-controller</"
"code> of\n"
"the data store and take instances, values and slotnames as appropriate."
msgstr ""

#: in_ed/ElephantUserManual.html:8406
msgctxt "in_ed/ElephantUserManual.html:8406"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8412
msgid ""
"<p>Typically the oid will be extracted from the instance and be used to\n"
"update a table or record where the oid and slotname identifies the\n"
"value.  A slot is typically unbound when no value exists (as opposed to\n"
"nil)."
msgstr ""

#: in_ed/ElephantUserManual.html:8414
msgctxt "in_ed/ElephantUserManual.html:8414"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8416
msgid "<h3 class=\"section\">7.4 Persistent Collection Protocols</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8425
msgid ""
"<p>The BTree protocol is the most extensive interface that data stores must\n"
"implement.  Data store implementations are required to subclass the\n"
"abstract classes <code>btree</code>, <code>indexed-btree</code>, and "
"<code>index</code>\n"
"and implement their complete APIs.  Each class type is constructed\n"
"by Elephant using a <code>store-controller</code> that builds them.  These\n"
"methods are <code>build-btree</code>, <code>build-indexed-btree</code> and\n"
"<code>build-index</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8427
msgctxt "in_ed/ElephantUserManual.html:8427"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8433
msgid ""
"<p>The <code>get-value</code> interface is similar to the persistent\n"
"slot reader and writer, but instead of using oid and slotname to set\n"
"values, it uses the btree oid and a key value as a unique identifier\n"
"for a value."
msgstr ""

#: in_ed/ElephantUserManual.html:8435
msgctxt "in_ed/ElephantUserManual.html:8435"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8441
msgid ""
"<p>The BTree protocol almost requires an actual BTree implementation to\n"
"be at all efficient.  Keys and values need to be accessible via the\n"
"cursor API, which means they need to be walked linearly in the sort\n"
"order of the keys (described in <a href=\"#Persistent-BTrees\">Persistent "
"BTrees</a>)."
msgstr ""

#: in_ed/ElephantUserManual.html:8443
msgctxt "in_ed/ElephantUserManual.html:8443"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8448
msgid ""
"<p>An indexed BTree automatically maintains a hash table of the indices\n"
"defined on it so that users can access them by mapping or\n"
"lookup-by-name.  The data store also has access to this interface."
msgstr ""

#: in_ed/ElephantUserManual.html:8450
msgctxt "in_ed/ElephantUserManual.html:8450"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8456
msgid ""
"<p>A BTree index must also maintain a connection to its parent BTree so\n"
"that an index value can be used as a primary tree key to retrieve the\n"
"primary BTree value as part of the <code>cursor-pnext</code> and\n"
"<code>cursor-pprev</code> family of methods."
msgstr ""

#: in_ed/ElephantUserManual.html:8458
msgctxt "in_ed/ElephantUserManual.html:8458"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8462
msgid ""
"<p>The contract of <code>remove-kv</code> is that the storage in the data "
"store\n"
"is actually freed for reuse."
msgstr ""

#: in_ed/ElephantUserManual.html:8464
msgctxt "in_ed/ElephantUserManual.html:8464"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8468
msgid ""
"<p>Persistent set implemenation is optional.  A default BTree based\n"
"implementation is provided by default"
msgstr ""

#: in_ed/ElephantUserManual.html:8470
msgctxt "in_ed/ElephantUserManual.html:8470"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8472
msgid "<h3 class=\"section\">7.5 Implementing Transactions</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8481
msgid ""
"<p>One of the most important pieces of functionality remaining to discuss\n"
"is implementing transactions.  In existing data stores, transactions\n"
"are merely extensions of the underlying start, commit and abort\n"
"methods of the 3rd party library or server being used.  The Elephant\n"
"user interfaces to these functions in two ways: a call to\n"
"<code>execute-transaction</code> or explicit calls to <code>controller-start-"
"transaction</code>,\n"
"<code>controller-commit-transaction</code> and <code>controller-abort-"
"transaction</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8483
msgctxt "in_ed/ElephantUserManual.html:8483"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8485
msgid "<h4 class=\"subsection\">7.5.1 Implementing Execute Transaction</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:8493
msgid ""
"<p>The macros <code>with-transaction</code> and <code>ensure-transaction</"
"code> wrap\n"
"access to the data store's <code>execute-transaction</code>.  This function\n"
"has a rich contract.  It accepts as arguments the store controller, a\n"
"closure that executes the transaction body and a set of keywords. \n"
"Keywords required to be supported by the method (or ignored without\n"
"loss of semantics) are <code>:parent</code> and <code>:retries</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8495
msgctxt "in_ed/ElephantUserManual.html:8495"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8501
msgid ""
"<p>The semantics of <code>with-transaction</code> are that a new "
"transaction\n"
"will always be requested of the data store.  If a transaction exists,\n"
"<code>ensure-transaction</code> will merely call the transaction closure. \n"
"If not it will function as a call to <code>with-transaction</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8503
msgctxt "in_ed/ElephantUserManual.html:8503"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8513
msgid ""
"<p><code>execute-transaction</code> is that it must ensure that the "
"transaction\n"
"closure is executed within a dynamic context that insures the ACID\n"
"properties of any database operations (<code>pset</code>,<code>btree</code> "
"or\n"
"persistent slot operations).  If there is a non-local exit during this\n"
"execution, the transaction should be aborted.  If it returns normally,\n"
"the transaction is committed.  The integer in the <code>:retries</code>\n"
"argument dictates how many times <code>execute-transaction</code> should\n"
"retry the transaction before failing."
msgstr ""

#: in_ed/ElephantUserManual.html:8515
msgctxt "in_ed/ElephantUserManual.html:8515"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8528
msgid ""
"<p>Elephant provides some bookkeeping to the data store to help with\n"
"nested transactions by using the <code>*current-transaction*</code> dynamic\n"
"variable.  In the dynamic context of the transaction closure, another\n"
"call to <code>execute-transaction</code> may occur with the transaction\n"
"argument defaulting to the value of <code>*current-transaction*</code>.  "
"The\n"
"data store has to decide how to handle these cases.  To support this,\n"
"the first call to execute transaction can create a dynamic binding for\n"
"<code>*current-transaction*</code> using the <code>make-transaction-record</"
"code>\n"
"call.  This creates a transaction object that records the store\n"
"controller that started the transaction and any data store-specific\n"
"transaction data."
msgstr ""

#: in_ed/ElephantUserManual.html:8530
msgctxt "in_ed/ElephantUserManual.html:8530"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8537
msgid ""
"<p>The current policy is that the body of a transaction is executed with\n"
"the <code>*store-controller*</code> variable bound to the store-controller\n"
"object creating the transaction.  This is important for default\n"
"arguments and generally helps more than it hurts, so is an\n"
"implementation requirement placed on <code>execute-transaction</code>."
msgstr ""

#: in_ed/ElephantUserManual.html:8539
msgctxt "in_ed/ElephantUserManual.html:8539"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8547
msgid ""
"<p>If two nested calls to <code>with-transaction</code> are made "
"successively\n"
"in a dynamic context, the data store can create true nested\n"
"transactions.  The first transaction is passed to the <code>:parent</code>\n"
"argument of the second.  The second can choose to just continue the\n"
"current transaction (the CLSQL data store policy) or to nest the\n"
"transaction (the BDB data store policy)."
msgstr ""

#: in_ed/ElephantUserManual.html:8549
msgctxt "in_ed/ElephantUserManual.html:8549"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8551
msgid ""
"<h4 class=\"subsection\">7.5.2 Interleaving Multiple Store Transactions</h4>"
msgstr ""

#: in_ed/ElephantUserManual.html:8558
msgid ""
"<p>Finally, some provision is made for the case where two store\n"
"controllers have concurrently active transactions in the same thread. \n"
"This feature was created to allow for migration, where a read from one\n"
"database happens in one transaction, and while active has to writes to\n"
"another data store with a valid transaction."
msgstr ""

#: in_ed/ElephantUserManual.html:8560
msgctxt "in_ed/ElephantUserManual.html:8560"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8566
msgid ""
"<p>The trick is that <code>with-transaction</code> checks to see if the "
"current\n"
"transaction object is the same as the <code>store-controller</code> object\n"
"passed to the <code>:store-controller</code> argument.  If not, a fresh\n"
"transaction is started."
msgstr ""

#: in_ed/ElephantUserManual.html:8568
msgctxt "in_ed/ElephantUserManual.html:8568"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8576
msgid ""
"<p>Currently no provision is made for more than two levels of multi-store\n"
"nesting as we do not implement a full transaction stack (to avoid\n"
"walking the stack on each call to handle this rare case).  If a third\n"
"transaction is started by the store controller that started the first\n"
"transaction, it will have no access to the parent transaction which\n"
"may be a significant source of problems for the underlying database."
msgstr ""

#: in_ed/ElephantUserManual.html:8579
msgctxt "in_ed/ElephantUserManual.html:8579"
msgid ""
"<!-- *-texinfo-*- -->\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8581
msgctxt "in_ed/ElephantUserManual.html:8581"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:8583
msgctxt "in_ed/ElephantUserManual.html:8583"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8589
msgid ""
"<hr>\n"
"<a name=\"Data-Store-API-Reference\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Copyright-and-License"
"\">Copyright and License</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Elephant-"
"Architecture\">Elephant Architecture</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8591
msgctxt "in_ed/ElephantUserManual.html:8591"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8594
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">8 Data Store API Reference</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:8606
msgid ""
"<p><a name=\"index-Data-Store-193\"></a><a name=\"index-API-194\"></a>\n"
"This reference includes functions that need to be overridden, classes\n"
"inherited from or other action taken to implement support for a new\n"
"data store.  Included are the exported elephant functions that\n"
"need methods defined on them as well as the data-store-only functions\n"
"exported in data-store-api.lisp.  Some functions here are utilities from "
"the\n"
"main elephant package that support store implementations, but are not\n"
"required.  Migration, class indices and query interfaces are\n"
"implemented on top of the store API and require no special support by\n"
"implementors."
msgstr ""

#: in_ed/ElephantUserManual.html:8608
msgctxt "in_ed/ElephantUserManual.html:8608"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8614
msgid ""
"<p>Because the number of data store implementors is small, this is a\n"
"minimal documentation set intended to serve as an initial guide and a\n"
"reference.  However, it is anticipated that some interaction will be\n"
"needed with the developers to properly harden a datastore for release."
msgstr ""

#: in_ed/ElephantUserManual.html:8616
msgctxt "in_ed/ElephantUserManual.html:8616"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8620
msgid ""
"<p>The sections each contain a short guide and a list of functions\n"
"relevant to them."
msgstr ""

#: in_ed/ElephantUserManual.html:8622
msgctxt "in_ed/ElephantUserManual.html:8622"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8635
msgid ""
"<ul class=\"menu\">\n"
"<li><a accesskey=\"1\" href=\"#DSR-Registration\">Registration</a>:  "
"Register the data store for the appropriate controller specifications. \n"
"</li><li><a accesskey=\"2\" href=\"#DSR-Store-Controllers\">Store "
"Controllers</a>:  Subclassing the store controller. \n"
"</li><li><a accesskey=\"3\" href=\"#DSR-Handling-Serialization\">Handling "
"Serialization</a>:  Available facilities for serializing objects. \n"
"</li><li><a accesskey=\"4\" href=\"#DSR-Persistent-Objects-and-Slot-Access"
"\">Persistent Objects and Slot access</a>:  Support for metaprotocol slot "
"access. \n"
"</li><li><a accesskey=\"5\" href=\"#DSR-Collections\">Collections</a>:  "
"BTrees and indices. \n"
"</li><li><a accesskey=\"6\" href=\"#DSR-Cursors\">Cursors</a>:   Traversing "
"BTrees. \n"
"</li><li><a accesskey=\"7\" href=\"#DSR-Transactions\">Transactions</a>:  "
"Transaction implementation. \n"
"</li><li><a accesskey=\"8\" href=\"#DSR-Multithreading-Considerations"
"\">Multithreading Considerations</a>:   Multithreading considerations. \n"
"<!-- * Memory Utilities: DSR Memory Utilities. Writing primitive C types. --"
">\n"
"<!-- * Foreign Libraries: DSR Foreign Libraries. Using UFFI and ASDF to "
"build or link foreign libraries -->\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8637
msgctxt "in_ed/ElephantUserManual.html:8637"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:8639
msgctxt "in_ed/ElephantUserManual.html:8639"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8644
msgid ""
"<hr>\n"
"<a name=\"DSR-Registration\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Store-Controllers"
"\">DSR Store Controllers</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8646
msgctxt "in_ed/ElephantUserManual.html:8646"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8649
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.1 Registration</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8658
msgid ""
"<p><a name=\"index-Registration-and-Initialization-195\"></a>\n"
"Elephant looks at the first element of the specification list to\n"
"determine which data store module to use.  The master table for this\n"
"information is <code>*elephant-data-stores*</code> in elephant/controller."
"lisp. \n"
"This will need to be augmented for every data store with the\n"
"specification keyword tag to be used (such as <code>:BDB</code> or\n"
"<code>:CLSQL</code>) and the required asdf dependencies."
msgstr ""

#: in_ed/ElephantUserManual.html:8660
msgctxt "in_ed/ElephantUserManual.html:8660"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8664
msgid ""
"<p>In addition, the data store source should use an eval-when statement to\n"
"call the following function:"
msgstr ""

#: in_ed/ElephantUserManual.html:8666
msgctxt "in_ed/ElephantUserManual.html:8666"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8669
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003aregister_002ddata_002dstore_002dcon_002dinit"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8671
msgctxt "in_ed/ElephantUserManual.html:8671"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8681
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:register-data-store-con-init</b><var> name "
"controller-init-fn<a name=\"index-"
"elephant_002ddata_002dstore_003aregister_002ddata_002dstore_002dcon_002dinit-196\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aregister_002ddata_002dstore_002dcon_002dinit-197\"></"
"a>Data stores must call this function during the\n"
"   loading/compilation process to register their initialization\n"
"   function for the tag name in *elephant-data-stores*.  The\n"
"   initialization function returns a fresh instance of the\n"
"   data stores store-controller subclass\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8683
msgctxt "in_ed/ElephantUserManual.html:8683"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8688
msgid ""
"<p>If the data store requires any special user-specified configuration,\n"
"augment the key types in config.sexp with what you need and use the\n"
"following function to access."
msgstr ""

#: in_ed/ElephantUserManual.html:8690
msgctxt "in_ed/ElephantUserManual.html:8690"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8693
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003aget_002duser_002dconfiguration_002dparameter"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8695
msgctxt "in_ed/ElephantUserManual.html:8695"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8703
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:get-user-configuration-parameter</b><var> "
"name<a name=\"index-"
"elephant_002ddata_002dstore_003aget_002duser_002dconfiguration_002dparameter-198\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aget_002duser_002dconfiguration_002dparameter-199\"></"
"a>This function pulls a value from the key-value pairs stored in\n"
"   my-config.sexp so data stores can have their own pairs for appropriate\n"
"   customization after loading. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8705
msgctxt "in_ed/ElephantUserManual.html:8705"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8707
msgctxt "in_ed/ElephantUserManual.html:8707"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:8709
msgctxt "in_ed/ElephantUserManual.html:8709"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8715
msgid ""
"<hr>\n"
"<a name=\"DSR-Store-Controllers\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Handling-Serialization"
"\">DSR Handling Serialization</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Registration"
"\">DSR Registration</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8717
msgctxt "in_ed/ElephantUserManual.html:8717"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8720
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.2 Store Controllers</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:8725
msgid ""
"<p><a name=\"index-Store-Controllers-200\"></a>\n"
"Subclass store-controller and implement store and close controller\n"
"which are called by open-store and close-store respectively."
msgstr ""

#: in_ed/ElephantUserManual.html:8727
msgctxt "in_ed/ElephantUserManual.html:8727"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8730
msgid "<p><a name=\"Class-elephant_003astore_002dcontroller\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8732
msgctxt "in_ed/ElephantUserManual.html:8732"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8737
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:store-controller</b><var><a name=\"index-"
"elephant_003astore_002dcontroller-201\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003astore_002dcontroller-202\"></a>Class "
"precedence list: <code>store-controller<!-- /@w -->, standard-object<!-- /@w "
"-->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8739
msgctxt "in_ed/ElephantUserManual.html:8739"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8743
msgctxt "in_ed/ElephantUserManual.html:8743"
msgid ""
"<p>Slots:\n"
"          </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8746
msgid ""
"<ul>\n"
"<li><code>spec</code>  initargs: <code>:spec<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8752
msgid ""
"<p>Data store initialization functions are\n"
"\t expected to initialize :spec on the call to\n"
"\t make-instance\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8754
msgid "</li><li><code>root</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8761
msgid ""
"<p>This is an instance of the data store\n"
"\t persistent btree.  It should have an <code>oid</code> that is fixed in\n"
"\t the code and does not change between sessions.  Usually\n"
"\t it this is something like 0, 1 or -1\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8763
msgid "</li><li><code>schema-table</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8767
msgid ""
"<p>Schema id to schema database table\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8769
msgid "</li><li><code>schema-name-index</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8773
msgid ""
"<p>Schema name to schema database table\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8775
msgid "</li><li><code>schema-cache</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8779
msgid ""
"<p>This is a cache of class schemas stored in the database indexed by "
"classid\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8781
msgid "</li><li><code>schema-classes</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8785
msgid ""
"<p>Maintains a list of all classes that have a cached schema value so we can "
"shutdown cleanly\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8787
msgid "</li><li><code>schema-cache-lock</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8792
msgid ""
"<p>Protection for updates to the cache from multiple threads. \n"
"                                        Do not override. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8794
msgid "</li><li><code>instance-table</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8798
msgid ""
"<p>Contains btree of oid to class ids\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8800
msgid "</li><li><code>instance-class-index</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8804
msgid ""
"<p>A reverse map of class id to oid\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8806
msgid "</li><li><code>instance-cache</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8812
msgid ""
"<p>This is an instance cache and part of the\n"
"                    metaclass protocol.  Data stores should not\n"
"                    override the default behavior. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8814
msgid "</li><li><code>instance-cache-lock</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8820
msgid ""
"<p>Protection for updates to\n"
"\t\t\tthe cache from multiple threads.  Do not\n"
"\t\t\toverride. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8822
msgid "</li><li><code>index-table</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8829
msgid ""
"<p>This is another root for class indexing that is\n"
"\t       also a data store specific persistent btree instance\n"
"\t       with a unique <code>oid</code> that persists between sessions. \n"
"               No cache is needed because we cache in the class slots. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8831
msgid "</li><li><code>serializer-version</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8839
msgid ""
"<p>Governs the default\n"
"\t\t       behavior regarding which serializer\n"
"\t\t       version the current elephant core is\n"
"\t\t       using.  Data stores can override by creating\n"
"\t\t       a method on initialize-serializer. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8841
msgid "</li><li><code>serialize</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8847
msgctxt "in_ed/ElephantUserManual.html:8847"
msgid ""
"<p>Accessed by elephant::serialize to\n"
"\t      get the entry point to the default serializer or to\n"
"\t      a data store specific serializer\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8849
msgid "</li><li><code>serialize-fn</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8855
msgctxt "in_ed/ElephantUserManual.html:8855"
msgid ""
"<p>Accessed by elephant::serialize to\n"
"\t      get the entry point to the default serializer or to\n"
"\t      a data store specific serializer\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8857
msgid "</li><li><code>deserialize</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8863
msgctxt "in_ed/ElephantUserManual.html:8863"
msgid ""
"<p>Contains the entry point for the\n"
"\t\tspecific serializer to be called by\n"
"\t\telephant::deserialize\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8865
msgid "</li><li><code>deserialize-fn</code>"
msgstr ""

#: in_ed/ElephantUserManual.html:8871
msgctxt "in_ed/ElephantUserManual.html:8871"
msgid ""
"<p>Contains the entry point for the\n"
"\t\tspecific serializer to be called by\n"
"\t\telephant::deserialize\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8873
msgctxt "in_ed/ElephantUserManual.html:8873"
msgid "</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:8882
msgid ""
"<p>Superclass for the data store controller, the main interface\n"
"    to any book-keeping, references to <code>db</code> handles, the "
"instance\n"
"    cache, btree table creation, counters, locks, the roots (for\n"
"    garbage collection,) et cetera.  Behavior is shared between\n"
"    the superclass and subclasses.  See slot documentation for\n"
"    details. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8884
msgctxt "in_ed/ElephantUserManual.html:8884"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8887
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003aopen_002dcontroller\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8889
msgctxt "in_ed/ElephantUserManual.html:8889"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8904
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:open-controller</b><var> sc &amp;"
"key recover recover-fatal thread &amp;allow-other-keys<a name=\"index-"
"elephant_002ddata_002dstore_003aopen_002dcontroller-203\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aopen_002dcontroller-204\"></a>Opens the "
"underlying environment and all the necessary\n"
"database tables.  Different data stores may use different keys so\n"
"all methods should &amp;allow-other-keys.  There are three standard\n"
"keywords: :recover, :recover-fatal and :thread.  Recover means\n"
"that recovery should be checked for or performed on startup. \n"
"Recover fatal means a full rebuild from log files is requested. \n"
"Thread merely indicates to the data store that it is a threaded\n"
"application and any steps that need to be taken (for example\n"
"transaction implementation) are taken.  :thread is usually\n"
"true. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8906
msgctxt "in_ed/ElephantUserManual.html:8906"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8909
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003aclose_002dcontroller\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8911
msgctxt "in_ed/ElephantUserManual.html:8911"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8920
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:close-controller</b><var> sc<a "
"name=\"index-elephant_002ddata_002dstore_003aclose_002dcontroller-205\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aclose_002dcontroller-206\"></a>Close the db "
"handles and environment.  Should be in a state\n"
"   where lisp could be shut down without causing an inconsistent\n"
"   state in the db.  Also, the object could be used by\n"
"   open-controller to reopen the database\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8922
msgctxt "in_ed/ElephantUserManual.html:8922"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8925
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003aconnection_002dis_002dindeed_002dopen\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8927
msgctxt "in_ed/ElephantUserManual.html:8927"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8933
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:connection-is-indeed-open</b><var> "
"controller<a name=\"index-"
"elephant_002ddata_002dstore_003aconnection_002dis_002dindeed_002dopen-207\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aconnection_002dis_002dindeed_002dopen-208\"></"
"a>Validate the controller and the db that it is connected to\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8935
msgctxt "in_ed/ElephantUserManual.html:8935"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8943
msgid ""
"<p>For upgrading and opening legacy databases it is important that a\n"
"store be able to indicate which version of elephant was used to create\n"
"it.  This governs the chosen serializer, mappings between elephant\n"
"symbols used in an old vs. new version, etc.  Because this is called\n"
"to initialize the serializer, it must directly implemented by the\n"
"data store without using the serializer."
msgstr ""

#: in_ed/ElephantUserManual.html:8945
msgctxt "in_ed/ElephantUserManual.html:8945"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8948
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003adatabase_002dversion\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8950
msgctxt "in_ed/ElephantUserManual.html:8950"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8961
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:database-version</b><var> sc<a "
"name=\"index-elephant_002ddata_002dstore_003adatabase_002dversion-209\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003adatabase_002dversion-210\"></a>Data stores "
"implement this to store the serializer version. \n"
"                   The protocol requires that data stores report their "
"database\n"
"                   version.  On new database creation, the database is "
"written with the\n"
"                   *elephant-code-version* so that is returned by database-"
"version. \n"
"                   If a legacy database does not have a version according to "
"the method\n"
"                   then it should return nil\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8964
msgid ""
"</blockquote></div>\n"
"   <a name=\"Method-elephant_002ddata_002dstore_003adatabase_002dversion-"
"around-_0028sc_0029\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8972
msgid ""
"<div class=\"defun\">\n"
" Method: <b>around</b><var> elephant-data-store:database-version sc<a name="
"\"index-around-211\"></a></var><br>\n"
"<blockquote>\n"
"<p>Default version assumption for unmarked databases is 0.6.0. \n"
"   It is possible to check for 0.5.0 databases, but it is not implemented\n"
"   now due to the low (none?) number of users still on 0.5.0\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8974
msgctxt "in_ed/ElephantUserManual.html:8974"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8978
msgid ""
"<p>There are some utilities for serializing simple data without a\n"
"serializer using the memutil package."
msgstr ""

#: in_ed/ElephantUserManual.html:8980
msgctxt "in_ed/ElephantUserManual.html:8980"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8983
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dkey"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8985
msgctxt "in_ed/ElephantUserManual.html:8985"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8992
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:serialize-database-version-key</b><var> "
"bs<a name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dkey-212\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dkey-213\"></"
"a>Given a buffer-stream, encode a key indicating the version using\n"
"   the constant +elephant-version+\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:8994
msgctxt "in_ed/ElephantUserManual.html:8994"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:8997
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dvalue"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:8999
msgctxt "in_ed/ElephantUserManual.html:8999"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9005
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:serialize-database-version-value</b><var> "
"version bs<a name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dvalue-214\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dvalue-215\"></"
"a>Serializes a list containing three integers to the buffer stream bs\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9007
msgctxt "in_ed/ElephantUserManual.html:9007"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9010
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003adeserialize_002ddatabase_002dversion_002dvalue"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9012
msgctxt "in_ed/ElephantUserManual.html:9012"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9018
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:deserialize-database-version-value</"
"b><var> bs<a name=\"index-"
"elephant_002ddata_002dstore_003adeserialize_002ddatabase_002dversion_002dvalue-216\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003adeserialize_002ddatabase_002dversion_002dvalue-217\"></"
"a>Deserializes the 3 integer list from buffer stream bs\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9020
msgctxt "in_ed/ElephantUserManual.html:9020"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9022
msgctxt "in_ed/ElephantUserManual.html:9022"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9024
msgctxt "in_ed/ElephantUserManual.html:9024"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9030
msgid ""
"<hr>\n"
"<a name=\"DSR-Persistent-Objects-and-Slot-Access\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Collections\">DSR "
"Collections</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Handling-"
"Serialization\">DSR Handling Serialization</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9032
msgctxt "in_ed/ElephantUserManual.html:9032"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9035
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.3 Slot Access</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9040
msgid ""
"<p><a name=\"index-Persistent-Objects-and-Slot-Access-218\"></a>\n"
"Persistence is implement with a metaclass and several required base\n"
"classes."
msgstr ""

#: in_ed/ElephantUserManual.html:9042
msgctxt "in_ed/ElephantUserManual.html:9042"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9045
msgid "<p><a name=\"Class-elephant_003apersistent_002dmetaclass\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9047
msgctxt "in_ed/ElephantUserManual.html:9047"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9052
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:persistent-metaclass</b><var><a name=\"index-"
"elephant_003apersistent_002dmetaclass-219\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apersistent_002dmetaclass-220\"></a>Class "
"precedence list: <code>persistent-metaclass<!-- /@w -->, standard-class<!-- /"
"@w -->, class<!-- /@w -->, specializer<!-- /@w -->, metaobject<!-- /@w -->, "
"standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9054
msgctxt "in_ed/ElephantUserManual.html:9054"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9058
msgctxt "in_ed/ElephantUserManual.html:9058"
msgid ""
"<p>Slots:\n"
"          </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9061
msgid ""
"<ul>\n"
"<li><code>%class-schema</code>  initargs: <code>:schemas<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9065
msgid ""
"<p>The code master schema\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9067
msgctxt "in_ed/ElephantUserManual.html:9067"
msgid "</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9074
msgid ""
"<p>Metaclass for persistent classes.  Use this metaclass to\n"
"    define persistent classes.  All slots are persistent by\n"
"    default; use the :transient flag otherwise.  Slots can also\n"
"    be indexed for by-value retrieval. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9076
msgctxt "in_ed/ElephantUserManual.html:9076"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9079
msgid "<p><a name=\"Class-elephant_003apersistent\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9081
msgctxt "in_ed/ElephantUserManual.html:9081"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9086
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:persistent</b><var><a name=\"index-"
"elephant_003apersistent-221\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apersistent-222\"></a>Class precedence list: "
"<code>persistent<!-- /@w -->, standard-object<!-- /@w -->, t<!-- /@w --></"
"code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9088
msgctxt "in_ed/ElephantUserManual.html:9088"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9092
msgctxt "in_ed/ElephantUserManual.html:9092"
msgid ""
"<p>Slots:\n"
"          </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9095
msgid ""
"<ul>\n"
"<li><code>oid</code>  initargs: <code>:from-oid<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9099
msgid ""
"<p>All persistent objects have an oid\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9101
msgid "</li><li><code>spec</code>  initargs: <code>:db-spec<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9106
msgid ""
"<p>Persistent objects use a spec pointer to identify which store\n"
"                         they are connected to\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9108
msgctxt "in_ed/ElephantUserManual.html:9108"
msgid "</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9113
msgid ""
"<p>Abstract superclass for all persistent classes (common\n"
"    to both user-defined classes and Elephant-defined objects such as "
"collections.) \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9115
msgctxt "in_ed/ElephantUserManual.html:9115"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9118
msgid "<p><a name=\"Class-elephant_003apersistent_002dobject\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9120
msgctxt "in_ed/ElephantUserManual.html:9120"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9125
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:persistent-object</b><var><a name=\"index-"
"elephant_003apersistent_002dobject-223\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apersistent_002dobject-224\"></a>Class "
"precedence list: <code>persistent-object<!-- /@w -->, persistent<!-- /@w --"
">, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9127
msgctxt "in_ed/ElephantUserManual.html:9127"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9135
msgid ""
"<p>Superclass for all user-defined persistent classes.  This is\n"
"    automatically inherited if you use the persistent-metaclass\n"
"    metaclass.  This allows specialization of functions for user\n"
"    objects that would not be appropriate for Elephant objects\n"
"    such as persistent collections\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9137
msgctxt "in_ed/ElephantUserManual.html:9137"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9142
msgid ""
"<p>Persistent objects can be queries for their home store controller so\n"
"that functions such as map-btree do not need a store-controller\n"
"argument.  (NOTE: Should this function be user visible?)"
msgstr ""

#: in_ed/ElephantUserManual.html:9144
msgctxt "in_ed/ElephantUserManual.html:9144"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9147
msgid ""
"<p><a name=\"Generic_002dFunction-elephant_002ddata_002dstore_003aget_002dcon"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9149
msgctxt "in_ed/ElephantUserManual.html:9149"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9158
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:get-con</b><var> instance<a name="
"\"index-elephant_002ddata_002dstore_003aget_002dcon-225\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_002ddata_002dstore_003aget_002dcon-226\"></"
"a>This is used to find and validate the connection spec\n"
"   maintained for in-memory persistent objects.  Should\n"
"   we re-open the controller from the spec if it's not\n"
"   cached?  That might be dangerous so for now we error\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9160
msgctxt "in_ed/ElephantUserManual.html:9160"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9164
msgid ""
"<p>All objects require a unique object identifier.  During new object\n"
"creation the data store is asked to produce a unique id."
msgstr ""

#: in_ed/ElephantUserManual.html:9166
msgctxt "in_ed/ElephantUserManual.html:9166"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9169
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003anext_002doid\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9171
msgctxt "in_ed/ElephantUserManual.html:9171"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9177
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:next-oid</b><var> sc<a name="
"\"index-elephant_002ddata_002dstore_003anext_002doid-227\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_002ddata_002dstore_003anext_002doid-228\"></"
"a>Provides a persistent source of unique id's\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9179
msgctxt "in_ed/ElephantUserManual.html:9179"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9185
msgid ""
"<p>These functions are called by the metaclass protocol to implement the\n"
"appropriate operations on persistent class slots.  Unless protected by\n"
"a transaction, the side effects of these functions should be atomic,\n"
"persistent and visible to other threads on completion."
msgstr ""

#: in_ed/ElephantUserManual.html:9187
msgctxt "in_ed/ElephantUserManual.html:9187"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9190
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dwriter\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9192
msgctxt "in_ed/ElephantUserManual.html:9192"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9198
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:persistent-slot-writer</b><var> sc "
"new-value instance name<a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dwriter-229\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dwriter-230\"></"
"a>Data store specific slot writer function\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9200
msgctxt "in_ed/ElephantUserManual.html:9200"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9203
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dreader\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9205
msgctxt "in_ed/ElephantUserManual.html:9205"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9211
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:persistent-slot-reader</b><var> sc "
"instance name &amp;optional oids-only<a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dreader-231\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dreader-232\"></"
"a>Data store specific slot reader function\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9213
msgctxt "in_ed/ElephantUserManual.html:9213"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9216
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dboundp\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9218
msgctxt "in_ed/ElephantUserManual.html:9218"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9224
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:persistent-slot-boundp</b><var> sc "
"instance name<a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dboundp-233\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dboundp-234\"></"
"a>Data store specific slot bound test function\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9226
msgctxt "in_ed/ElephantUserManual.html:9226"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9229
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dmakunbound\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9231
msgctxt "in_ed/ElephantUserManual.html:9231"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9237
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:persistent-slot-makunbound</"
"b><var> sc instance name<a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dmakunbound-235\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dmakunbound-236\"></"
"a>Data store specific slot makunbound handler\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9239
msgctxt "in_ed/ElephantUserManual.html:9239"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9241
msgctxt "in_ed/ElephantUserManual.html:9241"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9243
msgctxt "in_ed/ElephantUserManual.html:9243"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9249
msgid ""
"<hr>\n"
"<a name=\"DSR-Collections\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Cursors\">DSR "
"Cursors</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Persistent-"
"Objects-and-Slot-Access\">DSR Persistent Objects and Slot Access</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9251
msgctxt "in_ed/ElephantUserManual.html:9251"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9254
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.4 Collections</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9259
msgid ""
"<p><a name=\"index-Collections-237\"></a>\n"
"To support collections, the data store must subclass the following\n"
"classes."
msgstr ""

#: in_ed/ElephantUserManual.html:9261
msgctxt "in_ed/ElephantUserManual.html:9261"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9264
msgid "<p><a name=\"Class-elephant_003apersistent_002dcollection\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9266
msgctxt "in_ed/ElephantUserManual.html:9266"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9271
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:persistent-collection</b><var><a name=\"index-"
"elephant_003apersistent_002dcollection-238\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003apersistent_002dcollection-239\"></a>Class "
"precedence list: <code>persistent-collection<!-- /@w -->, persistent<!-- /@w "
"-->, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9273
msgctxt "in_ed/ElephantUserManual.html:9273"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9277
msgid ""
"<p>Abstract superclass of all collection types. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9279
msgctxt "in_ed/ElephantUserManual.html:9279"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9282
msgid "<p><a name=\"Class-elephant_003abtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9284
msgctxt "in_ed/ElephantUserManual.html:9284"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9289
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:btree</b><var><a name=\"index-elephant_003abtree-240\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003abtree-241\"></a>Class precedence list: "
"<code>btree<!-- /@w -->, persistent-collection<!-- /@w -->, persistent<!-- /"
"@w -->, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9291
msgctxt "in_ed/ElephantUserManual.html:9291"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9296
msgid ""
"<p>A hash-table like interface to a BTree, which stores things\n"
"    in a semi-ordered fashion. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9298
msgctxt "in_ed/ElephantUserManual.html:9298"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9301
msgid "<p><a name=\"Class-elephant_003abtree_002dindex\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9303
msgctxt "in_ed/ElephantUserManual.html:9303"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9308
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:btree-index</b><var><a name=\"index-"
"elephant_003abtree_002dindex-242\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003abtree_002dindex-243\"></a>Class precedence "
"list: <code>btree-index<!-- /@w -->, btree<!-- /@w -->, persistent-"
"collection<!-- /@w -->, persistent-object<!-- /@w -->, persistent<!-- /@w --"
">, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9310
msgctxt "in_ed/ElephantUserManual.html:9310"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9314
msgid ""
"<p>Secondary index to an indexed-btree. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9316
msgctxt "in_ed/ElephantUserManual.html:9316"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9319
msgid "<p><a name=\"Class-elephant_003aindexed_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9321
msgctxt "in_ed/ElephantUserManual.html:9321"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9326
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:indexed-btree</b><var><a name=\"index-"
"elephant_003aindexed_002dbtree-244\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003aindexed_002dbtree-245\"></a>Class precedence "
"list: <code>indexed-btree<!-- /@w -->, btree<!-- /@w -->, persistent-"
"collection<!-- /@w -->, persistent<!-- /@w -->, standard-object<!-- /@w -->, "
"t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9328
msgctxt "in_ed/ElephantUserManual.html:9328"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9332
msgid ""
"<p>A BTree which supports secondary indices. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9334
msgctxt "in_ed/ElephantUserManual.html:9334"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9338
msgid ""
"<p>To create the data store-appropriate type of btree, the data store\n"
"implements this method (and possibly related methods) aginst their store-"
"controller."
msgstr ""

#: in_ed/ElephantUserManual.html:9340
msgctxt "in_ed/ElephantUserManual.html:9340"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9343
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003abuild_002dbtree\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9345
msgctxt "in_ed/ElephantUserManual.html:9345"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9351
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:build-btree</b><var> sc<a name="
"\"index-elephant_002ddata_002dstore_003abuild_002dbtree-246\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_002ddata_002dstore_003abuild_002dbtree-247\"></"
"a>Construct a btree of the appropriate type corresponding to this store-"
"controller. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9353
msgctxt "in_ed/ElephantUserManual.html:9353"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9359
msgid ""
"<p>Most of the user-visible operations over BTrees must be implemented. \n"
"Class indexing functions such as <code>map-class</code> and\n"
"<code>get-instances-by-value</code> and related functions are all\n"
"implemented using map-btree and map-index."
msgstr ""

#: in_ed/ElephantUserManual.html:9361
msgctxt "in_ed/ElephantUserManual.html:9361"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9372
msgid ""
"<ul>\n"
"<li><a href=\"#Generic_002dFunction-elephant_003aget_002dvalue\">Generic-"
"Function elephant:get-value</a> (and <code>(setf get-value)</code>)\n"
"<!-- @item @ref{Generic-Function (setf elephant:get-value)} -->\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003aexistsp\">Generic-"
"Function elephant:existsp</a>\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003aremove_002dkv"
"\">Generic-Function elephant:remove-kv</a>\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003aget_002dindex"
"\">Generic-Function elephant:get-index</a>\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003aremove_002dindex"
"\">Generic-Function elephant:remove-index</a>\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003amap_002dbtree"
"\">Generic-Function elephant:map-btree</a>\n"
"</li><li><a href=\"#Generic_002dFunction-elephant_003amap_002dindex"
"\">Generic-Function elephant:map-index</a>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9376
msgid ""
"<p>Mapping over the indices of a btree is important to derived facilities\n"
"such as class indexing and the query subsystem."
msgstr ""

#: in_ed/ElephantUserManual.html:9378
msgctxt "in_ed/ElephantUserManual.html:9378"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9381
msgid "<p><a name=\"Generic_002dFunction-elephant_003amap_002dindices\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9383
msgctxt "in_ed/ElephantUserManual.html:9383"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9390
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant:map-indices</b><var> fn bt<a name=\"index-"
"elephant_003amap_002dindices-248\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003amap_002dindices-249\"></a>Calls a two input "
"function with the name and\n"
"   btree-index object of all secondary indices in the btree\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9392
msgctxt "in_ed/ElephantUserManual.html:9392"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9394
msgctxt "in_ed/ElephantUserManual.html:9394"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9396
msgctxt "in_ed/ElephantUserManual.html:9396"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9402
msgid ""
"<hr>\n"
"<a name=\"DSR-Cursors\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Transactions\">DSR "
"Transactions</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Collections"
"\">DSR Collections</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9404
msgctxt "in_ed/ElephantUserManual.html:9404"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9407
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.5 Cursors</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9412
msgid ""
"<p><a name=\"index-Cursors-250\"></a>\n"
"Data stores must subclass these cursor classes and implement all the\n"
"methods described in <a href=\"#DSR-Cursors\">DSR Cursors</a> except <a href="
"\"#Macro-elephant_003awith_002dbtree_002dcursor\">Macro elephant:with-btree-"
"cursor</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:9414
msgctxt "in_ed/ElephantUserManual.html:9414"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9417
msgid "<p><a name=\"Class-elephant_003acursor\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9419
msgctxt "in_ed/ElephantUserManual.html:9419"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9424
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:cursor</b><var><a name=\"index-"
"elephant_003acursor-251\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003acursor-252\"></a>Class precedence list: "
"<code>cursor<!-- /@w -->, standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9426
msgctxt "in_ed/ElephantUserManual.html:9426"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9430
msgctxt "in_ed/ElephantUserManual.html:9430"
msgid ""
"<p>Slots:\n"
"          </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9433
msgid ""
"<ul>\n"
"<li><code>initialized-p</code>  initargs: <code>:initialized-p<!-- /@w --></"
"code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9445
msgid ""
"<p>Predicate indicating whether\n"
"the btree in question is initialized or not.  Initialized means\n"
"that the cursor has a legitimate position, not that any\n"
"initialization action has been taken.  The implementors of this\n"
"abstract class should make sure that happens under the\n"
"sheets...  Cursors are initialized when you invoke an operation\n"
"that sets them to something (such as cursor-first), and are\n"
"uninitialized if you move them in such a way that they no longer\n"
"have a legimtimate value. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9447
msgctxt "in_ed/ElephantUserManual.html:9447"
msgid "</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9451
msgid ""
"<p>A cursor for traversing (primary) BTrees. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9453
msgctxt "in_ed/ElephantUserManual.html:9453"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9456
msgid "<p><a name=\"Class-elephant_003asecondary_002dcursor\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9458
msgctxt "in_ed/ElephantUserManual.html:9458"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9463
msgid ""
"<div class=\"defun\">\n"
" Class: <b>elephant:secondary-cursor</b><var><a name=\"index-"
"elephant_003asecondary_002dcursor-253\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_003asecondary_002dcursor-254\"></a>Class "
"precedence list: <code>secondary-cursor<!-- /@w -->, cursor<!-- /@w -->, "
"standard-object<!-- /@w -->, t<!-- /@w --></code>"
msgstr ""

#: in_ed/ElephantUserManual.html:9465
msgctxt "in_ed/ElephantUserManual.html:9465"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9469
msgid ""
"<p>Cursor for traversing secondary indices. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9471
msgctxt "in_ed/ElephantUserManual.html:9471"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9473
msgctxt "in_ed/ElephantUserManual.html:9473"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9475
msgctxt "in_ed/ElephantUserManual.html:9475"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9481
msgid ""
"<hr>\n"
"<a name=\"DSR-Transactions\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Multithreading-"
"Considerations\">DSR Multithreading Considerations</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Cursors\">DSR "
"Cursors</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9483
msgctxt "in_ed/ElephantUserManual.html:9483"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9486
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.6 Transactions</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9490
msgid ""
"<p><a name=\"index-Transactions-255\"></a>\n"
"These functions must be implemented or stubbed by all data stores."
msgstr ""

#: in_ed/ElephantUserManual.html:9492
msgctxt "in_ed/ElephantUserManual.html:9492"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9495
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003aexecute_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9497
msgctxt "in_ed/ElephantUserManual.html:9497"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9506
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:execute-transaction</b><var> store-"
"controller txn-fn &amp;rest rest &amp;key &amp;allow-other-keys<a name="
"\"index-elephant_002ddata_002dstore_003aexecute_002dtransaction-256\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aexecute_002dtransaction-257\"></a>This is an "
"interface to the backend's transaction function.  The\n"
"    body should be executed in a dynamic environment that protects against\n"
"    non-local exist, provides <code>acid</code> properties for <code>db</"
"code> operations within the\n"
"    body and properly binds any relevant parameters. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9508
msgctxt "in_ed/ElephantUserManual.html:9508"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9511
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003acontroller_002dstart_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9513
msgctxt "in_ed/ElephantUserManual.html:9513"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9519
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:controller-start-transaction</"
"b><var> store-controller &amp;key &amp;allow-other-keys<a name=\"index-"
"elephant_002ddata_002dstore_003acontroller_002dstart_002dtransaction-258\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003acontroller_002dstart_002dtransaction-259\"></"
"a>Start an elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9521
msgctxt "in_ed/ElephantUserManual.html:9521"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9524
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003acontroller_002dcommit_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9526
msgctxt "in_ed/ElephantUserManual.html:9526"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9532
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:controller-commit-transaction</"
"b><var> store-controller transaction &amp;key &amp;allow-other-keys<a name="
"\"index-"
"elephant_002ddata_002dstore_003acontroller_002dcommit_002dtransaction-260\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003acontroller_002dcommit_002dtransaction-261\"></"
"a>Commit an elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9534
msgctxt "in_ed/ElephantUserManual.html:9534"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9537
msgid ""
"<p><a name=\"Generic_002dFunction-"
"elephant_002ddata_002dstore_003acontroller_002dabort_002dtransaction\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9539
msgctxt "in_ed/ElephantUserManual.html:9539"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9545
msgid ""
"<div class=\"defun\">\n"
" Generic Function: <b>elephant-data-store:controller-abort-transaction</"
"b><var> store-controller transaction &amp;key &amp;allow-other-keys<a name="
"\"index-"
"elephant_002ddata_002dstore_003acontroller_002dabort_002dtransaction-262\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003acontroller_002dabort_002dtransaction-263\"></"
"a>Abort an elephant transaction\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9547
msgctxt "in_ed/ElephantUserManual.html:9547"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9551
msgid ""
"<p>These are supporting functions and variables for implementing\n"
"transactions."
msgstr ""

#: in_ed/ElephantUserManual.html:9553
msgctxt "in_ed/ElephantUserManual.html:9553"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9556
msgid ""
"<p><a name=\"Variable-"
"elephant_002ddata_002dstore_003a_002acurrent_002dtransaction_002a\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9558
msgctxt "in_ed/ElephantUserManual.html:9558"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9564
msgid ""
"<div class=\"defun\">\n"
" Variable: <b>elephant-data-store:*current-transaction*</b><var><a name="
"\"index-"
"elephant_002ddata_002dstore_003a_002acurrent_002dtransaction_002a-264\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003a_002acurrent_002dtransaction_002a-265\"></"
"a>The transaction which is currently in effect. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9566
msgctxt "in_ed/ElephantUserManual.html:9566"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9569
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003amake_002dtransaction_002drecord\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9571
msgctxt "in_ed/ElephantUserManual.html:9571"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9577
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:make-transaction-record</b><var> sc txn "
"&amp;optional prior<a name=\"index-"
"elephant_002ddata_002dstore_003amake_002dtransaction_002drecord-266\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003amake_002dtransaction_002drecord-267\"></"
"a>Backends must use this to assign values to *current-transaction* binding\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9579
msgctxt "in_ed/ElephantUserManual.html:9579"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9582
msgid ""
"<p><a name=\"Function-elephant_002ddata_002dstore_003atransaction_002dstore"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9584
msgctxt "in_ed/ElephantUserManual.html:9584"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9590
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:transaction-store</b><var> txnrec<a name="
"\"index-elephant_002ddata_002dstore_003atransaction_002dstore-268\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003atransaction_002dstore-269\"></a>Get the "
"store that owns the transaction from a transaction record\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9592
msgctxt "in_ed/ElephantUserManual.html:9592"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9595
msgid ""
"<p><a name=\"Function-elephant_002ddata_002dstore_003atransaction_002dobject"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9597
msgctxt "in_ed/ElephantUserManual.html:9597"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9603
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:transaction-object</b><var> txnrec<a name="
"\"index-elephant_002ddata_002dstore_003atransaction_002dobject-270\"></a></"
"var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003atransaction_002dobject-271\"></a>Get the "
"backend-specific transaction object\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9605
msgctxt "in_ed/ElephantUserManual.html:9605"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9626
msgid ""
"<p>;; Designer considerations:\n"
";; - with-transaction passes *current-transaction* or the user parameter to "
"execute-transaction\n"
";;   in the parent keyword argument.  Backends allowing nested transactions "
"can treat the transaction\n"
";;   as a parent, otherwise they can reuse the current transaction by "
"ignoring it (inheriting the dynamic\n"
";;   value of *current-transaction*) or rebinding the dynamic context "
"(whatever makes coding easier). \n"
";; - ensure-transaction uses *current-transaction* to determine if there is "
"a current transaction\n"
";;   in progress (not null).  If so, it jumps to the body directly.  "
"Otherwise it executes the body in a\n"
";;   new transaction by calling ... \n"
";; - execute-transaction contract:\n"
";;   - Backends must dynamically bind *current-transaction* to a meaningful "
"identifier for the\n"
";;     transaction in progress and execute the provided closure in that "
"context\n"
";;   - All non-local exists result in an abort; only regular return values "
"result in a commit\n"
";;   - If a transaction is aborted due to a deadlock or read conflict, "
"execute-transaction should\n"
";;     automatically retry with an appropriate default amount\n"
";;   - execute-transaction can take any number of backend-defined keywords, "
"although designers should\n"
";;     make sure there are no semantic conflicts if there is a name overlap "
"with existing backends\n"
";; - A typical design approach is to make sure that the most primitive "
"interfaces to the backend\n"
";;   database look at *current-transaction* to determine whether a "
"transaction is active.  Users code can also\n"
";;   access this parameter to check whether a transaction is active."
msgstr ""

#: in_ed/ElephantUserManual.html:9628
msgctxt "in_ed/ElephantUserManual.html:9628"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9630
msgctxt "in_ed/ElephantUserManual.html:9630"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9632
msgctxt "in_ed/ElephantUserManual.html:9632"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9637
msgid ""
"<hr>\n"
"<a name=\"DSR-Multithreading-Considerations\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Transactions"
"\">DSR Transactions</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9639
msgctxt "in_ed/ElephantUserManual.html:9639"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9642
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.7 Multithreading Considerations</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9647
msgid ""
"<p><a name=\"index-Multithreading-272\"></a>\n"
"This expands slightly on the multithreading discussion in\n"
"<a href=\"#Multi_002dthreaded-Applications\">Multi-threaded Applications</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:9649
msgctxt "in_ed/ElephantUserManual.html:9649"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9659
msgid ""
"<p>Elephant provides a set of generic locking functions in\n"
"<code>src/utils/locks.lisp</code> to help protect any shared structures. \n"
"There are standard locking functions (<code>ele-with-lock</code>) and then\n"
"a special locking interface called <code>ele-with-fast-lock</code> which\n"
"on some lisps provides a faster locking option than the standard OS\n"
"locks of the basic interface.  (i.e. under Allegro this uses\n"
"<code>without-interrupts</code> because Allegro still runs in a single\n"
"OS process on all platforms, this is not true of SBCL)."
msgstr ""

#: in_ed/ElephantUserManual.html:9661
msgctxt "in_ed/ElephantUserManual.html:9661"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9668
msgid ""
"<p>See the sections on Transaction handling, particularly the dynamic\n"
"behavior of <code>*current-transaction*</code>.  Also read up on the\n"
"store controller section in the User Guide to better understand the\n"
"role of <code>*store-controller*</code>.  At this time there are no other\n"
"global variables to worry about."
msgstr ""

#: in_ed/ElephantUserManual.html:9670
msgctxt "in_ed/ElephantUserManual.html:9670"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9672
msgctxt "in_ed/ElephantUserManual.html:9672"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9674
msgctxt "in_ed/ElephantUserManual.html:9674"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9680
msgid ""
"<hr>\n"
"<a name=\"DSR-Handling-Serialization\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#DSR-Persistent-Objects-"
"and-Slot-Access\">DSR Persistent Objects and Slot Access</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#DSR-Store-"
"Controllers\">DSR Store Controllers</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9682
msgctxt "in_ed/ElephantUserManual.html:9682"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9685
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h3 class=\"section\">8.8 Handling Serialization</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9694
msgid ""
"<p><a name=\"index-Serializer-273\"></a>\n"
"Data stores must initialize <a href=\"#Class-"
"elephant_003astore_002dcontroller\">Class elephant:store-controller</a> "
"with\n"
"internal serializer functions.  Packages <code>elephant-serializer1</code>\n"
"and <code>elephant-serializer2</code> contains serialize and deserialize\n"
"methods on buffer-streams as defined in <code>elephant-memutil</code>.  The\n"
"elephant functions <code>serialize</code> and <code>deserialize</code> "
"dispatch on\n"
"the appropriate slot values of the store-controller."
msgstr ""

#: in_ed/ElephantUserManual.html:9696
msgctxt "in_ed/ElephantUserManual.html:9696"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9702
msgid ""
"<pre class=\"verbatim\">NOTE: This should perhaps become entirely the job of "
"the data store to\n"
"decide how to serialize values and for a specific version, what\n"
"serializer to use.  The elphant main package can define serializers\n"
"for use by different data stores.\n"
"</pre>"
msgstr ""

#: in_ed/ElephantUserManual.html:9705
msgid "<p><a name=\"Function-elephant_002ddata_002dstore_003aserialize\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9707
msgctxt "in_ed/ElephantUserManual.html:9707"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9714
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:serialize</b><var> frob bs sc<a name="
"\"index-elephant_002ddata_002dstore_003aserialize-274\"></a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_002ddata_002dstore_003aserialize-275\"></"
"a>Generic interface to serialization that dispatches based on the\n"
"   current Elephant version\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9716
msgctxt "in_ed/ElephantUserManual.html:9716"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9719
msgid ""
"<p><a name=\"Function-elephant_002ddata_002dstore_003adeserialize\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9721
msgctxt "in_ed/ElephantUserManual.html:9721"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9728
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:deserialize</b><var> bs sc &amp;optional "
"oid-only<a name=\"index-elephant_002ddata_002dstore_003adeserialize-276\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-elephant_002ddata_002dstore_003adeserialize-277\"></"
"a>Generic interface to serialization that dispatches based on the\n"
"   current Elephant version\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9730
msgctxt "in_ed/ElephantUserManual.html:9730"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9735
msgid ""
"<p>These utility functions are useful if a data store does not have the\n"
"ability to store variable length binary data.  They are based on the\n"
"<code>cl-base64</code> library."
msgstr ""

#: in_ed/ElephantUserManual.html:9737
msgctxt "in_ed/ElephantUserManual.html:9737"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9740
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003aserialize_002dto_002dbase64_002dstring\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9742
msgctxt "in_ed/ElephantUserManual.html:9742"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9749
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:serialize-to-base64-string</b><var> x sc<a "
"name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002dto_002dbase64_002dstring-278\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003aserialize_002dto_002dbase64_002dstring-279\"></"
"a>Encode object using the store controller's serializer format,\n"
"   but encoded in a base64\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9751
msgctxt "in_ed/ElephantUserManual.html:9751"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9754
msgid ""
"<p><a name=\"Function-"
"elephant_002ddata_002dstore_003adeserialize_002dfrom_002dbase64_002dstring"
"\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9756
msgctxt "in_ed/ElephantUserManual.html:9756"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9762
msgid ""
"<div class=\"defun\">\n"
" Function: <b>elephant-data-store:deserialize-from-base64-string</b><var> x "
"sc<a name=\"index-"
"elephant_002ddata_002dstore_003adeserialize_002dfrom_002dbase64_002dstring-280\"></"
"a></var><br>\n"
"<blockquote>\n"
"<p><a name=\"index-"
"elephant_002ddata_002dstore_003adeserialize_002dfrom_002dbase64_002dstring-281\"></"
"a>Decode a base64-string using the store controller's deserialize method\n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9764
msgctxt "in_ed/ElephantUserManual.html:9764"
msgid "</blockquote></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9778
msgid ""
"<!-- @node DSR Memory Utilities -->\n"
"<!-- @comment node-name, next, previous, up -->\n"
"<!-- @section Memory utilities -->\n"
"<!-- @cindex Memory utilities -->\n"
"<!-- Details about memory utilities here. -->\n"
"<!-- @node DSR Foreign Libraries -->\n"
"<!-- @comment node-name, next, previous, up -->\n"
"<!-- @section Foreign libraries -->\n"
"<!-- @cindex Foreign libraries -->\n"
"<!-- How foreign libraries are built and used via UFFI.  What functions are "
"-->\n"
"<!-- in the .asd files or main lisp code to build & load libraries? -->\n"
"<!-- *-texinfo-*- -->\n"
"<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9780
msgctxt "in_ed/ElephantUserManual.html:9780"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9786
msgid ""
"<hr>\n"
"<a name=\"Copyright-and-License\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Concept-Index\">Concept "
"Index</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Data-Store-API-"
"Reference\">Data Store API Reference</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9788
msgctxt "in_ed/ElephantUserManual.html:9788"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9791
msgid ""
"<!-- node-name, next, previous, up -->\n"
"<h2 class=\"chapter\">9 Copyright and License</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:9794
msgid ""
"<p><a name=\"index-Copyright-and-License-282\"></a><a name=\"index-"
"License-283\"></a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9796
msgctxt "in_ed/ElephantUserManual.html:9796"
msgid "</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9798
msgid "<h3 class=\"section\">9.1 Elephant Licensing</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9803
msgid ""
"<p>Elephant is a persistent metaprotocol and object-oriented database for\n"
"Common Lisp.  Detailed information and distributions can be found at\n"
"<a href=\"http://www.common-lisp.net/project/elephant\">http://www.common-"
"lisp.net/project/elephant</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:9805
msgctxt "in_ed/ElephantUserManual.html:9805"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9808
msgid "<p>The program is released under the following license:"
msgstr ""

#: in_ed/ElephantUserManual.html:9810
msgctxt "in_ed/ElephantUserManual.html:9810"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9817
msgid ""
"<blockquote>\n"
"Elephant users are granted the rights to distribute and use this\n"
"software as governed by the terms of the Lisp Lesser GNU Public\n"
"License <a href=\"http://opensource.franz.com/preamble.html\">http://"
"opensource.franz.com/preamble.html</a>, also known\n"
"as the LLGPL. \n"
"</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:9820
msgctxt "in_ed/ElephantUserManual.html:9820"
msgid "<p>Copyrights include:"
msgstr ""

#: in_ed/ElephantUserManual.html:9822
msgctxt "in_ed/ElephantUserManual.html:9822"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9829
msgid ""
"<blockquote>\n"
"Original Version, Copyright © 2004 Ben Lee and Andrew Blumberg. <br>\n"
"Version 0.5, Copyright © 2006 Robert L. Read. <br>\n"
"Versions 0.6-0.9, Copyright © 2006-2007 Ian Eslick and Robert L. Read <br>\n"
"Portions copyright respective contributors (see <samp><span class=\"file"
"\">CREDITS</span></samp>). \n"
"</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:9833
msgid ""
"<p>Portions of the program (namely the C unicode string sorter) are\n"
"derived from IBM's ICU: <a href=\"http://oss.software.ibm.com/icu/\">ICU "
"Website</a> whose copyright and license follows below."
msgstr ""

#: in_ed/ElephantUserManual.html:9835
msgctxt "in_ed/ElephantUserManual.html:9835"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9839
msgid ""
"<blockquote>\n"
"ICU License - ICU 1.8.1 and later\n"
"COPYRIGHT AND PERMISSION NOTICE"
msgstr ""

#: in_ed/ElephantUserManual.html:9843
msgid ""
"<p>Copyright (c) 1995-2003 International Business Machines\n"
"Corporation and others All rights reserved."
msgstr ""

#: in_ed/ElephantUserManual.html:9845
msgctxt "in_ed/ElephantUserManual.html:9845"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9858
msgid ""
"<p>Permission is hereby granted, free of charge, to any person\n"
"obtaining a copy of this software and associated\n"
"documentation files (the \"Software\"), to deal in the\n"
"Software without restriction, including without limitation\n"
"the rights to use, copy, modify, merge, publish, distribute,\n"
"and/or sell copies of the Software, and to permit persons to\n"
"whom the Software is furnished to do so, provided that the\n"
"above copyright notice(s) and this permission notice appear\n"
"in all copies of the Software and that both the above\n"
"copyright notice(s) and this permission notice appear in\n"
"supporting documentation."
msgstr ""

#: in_ed/ElephantUserManual.html:9860
msgctxt "in_ed/ElephantUserManual.html:9860"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9873
msgid ""
"<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY\n"
"KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n"
"WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\n"
"PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO\n"
"EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS\n"
"NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR\n"
"CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\n"
"FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF\n"
"CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\n"
"OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\n"
"SOFTWARE."
msgstr ""

#: in_ed/ElephantUserManual.html:9875
msgctxt "in_ed/ElephantUserManual.html:9875"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9881
msgid ""
"<p>Except as contained in this notice, the name of a copyright\n"
"holder shall not be used in advertising or otherwise to\n"
"promote the sale, use or other dealings in this Software\n"
"without prior written authorization of the copyright holder."
msgstr ""

#: in_ed/ElephantUserManual.html:9883
msgctxt "in_ed/ElephantUserManual.html:9883"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9886
msgid "<p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9888
msgctxt "in_ed/ElephantUserManual.html:9888"
msgid "        </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9893
msgid ""
"<p>All trademarks and registered trademarks mentioned herein\n"
"are the property of their respective owners. \n"
"</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9895
msgctxt "in_ed/ElephantUserManual.html:9895"
msgid "</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:9897
msgid "<h3 class=\"section\">9.2 Elephant Manual Copyright and Licensing</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9902
msgid ""
"<blockquote>\n"
"Permission is granted to copy, distribute and/or modify this document\n"
"under the terms of the GNU Free Documentation License. \n"
"</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:9905
msgctxt "in_ed/ElephantUserManual.html:9905"
msgid "<p>Copyrights include:"
msgstr ""

#: in_ed/ElephantUserManual.html:9907
msgctxt "in_ed/ElephantUserManual.html:9907"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9913
msgid ""
"<blockquote>\n"
"Original Version, Copyright © 2004 Ben Lee. <br>\n"
"Versions 0.5-0.6, Copyright © 2006 Robert L. Read. <br>\n"
"Current Version, Copyright © 2006-2007 Ian Eslick and Robert L. Read <br>\n"
"</blockquote>"
msgstr ""

#: in_ed/ElephantUserManual.html:9915
msgid "<h3 class=\"section\">9.3 3rd Party Libraries</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9920
msgid ""
"<p>Elephant depends on 3rd party lisp libraries.  See their respective\n"
"distributions for detailed copyright and licensing information.  The\n"
"following is a brief summary."
msgstr ""

#: in_ed/ElephantUserManual.html:9922
msgctxt "in_ed/ElephantUserManual.html:9922"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9928
msgid ""
"<ul>\n"
"<li><b>uffi</b>: By Kevin Rosenberg, no significant restrictions\n"
"</li><li><b>cl-base64</b>: By Kevin Rosenberg, no significant restrictions\n"
"</li><li><b>rt</b>: By Richard Waters, MIT License\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9930
msgid "<h3 class=\"section\">9.4 Data Store Licensing Considerations</h3>"
msgstr ""

#: in_ed/ElephantUserManual.html:9939
msgid ""
"<p>The Berkeley DB data store is based on the Berkeley DB C library, now\n"
"owned by Oracle, but available as GPL'ed software.  It is important to\n"
"understand that applications using Berkeley DB must also be GPL'ed\n"
"unless you negotiate a commercial license from Oracle.  In most\n"
"interpretations of the license, this includes a requirement to make\n"
"code available for the entirety of any publicly visible website that\n"
"is based on Berkeley DB.  See"
msgstr ""

#: in_ed/ElephantUserManual.html:9941
msgctxt "in_ed/ElephantUserManual.html:9941"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9944
msgid ""
"<p><a href=\"http://www.oracle.com/technology/software/products/berkeley-db/"
"htdocs/bdboslicense.html\">http://www.oracle.com/technology/software/"
"products/berkeley-db/htdocs/bdboslicense.html</a>."
msgstr ""

#: in_ed/ElephantUserManual.html:9946
msgctxt "in_ed/ElephantUserManual.html:9946"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9954
msgid ""
"<p>The CL-SQL backend, depending on which SQL engine you use, may not\n"
"carry this restriction and you can easily migrate data between the\n"
"two.  Since the Berkeley DB store is 4-5x faster than SQL, it may make\n"
"sense to develop under BDB and transition to SQL after you've tuned\n"
"the performance of the application.  Licenses for various SQL engines\n"
"can be found at:"
msgstr ""

#: in_ed/ElephantUserManual.html:9956
msgctxt "in_ed/ElephantUserManual.html:9956"
msgid "     </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9962
msgid ""
"<ul>\n"
"<li>SQLite: Public Domain, see <a href=\"http://www.sqlite.org/copyright.html"
"\">the SQLite license page</a>\n"
"</li><li>Postgresql: BSD License, see <a href=\"http://www.postgresql.org/"
"about/licence\">the Postgresql license page</a>\n"
"</li><li>MySQL: Dual licensing (similar to BDB), see <a href=\"http://www."
"mysql.com/company/legal/licensing/\">the MySQL license page</a>\n"
"</li></ul>"
msgstr ""

#: in_ed/ElephantUserManual.html:9964
msgctxt "in_ed/ElephantUserManual.html:9964"
msgid "<div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:9966
msgctxt "in_ed/ElephantUserManual.html:9966"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:9972
msgid ""
"<hr>\n"
"<a name=\"Concept-Index\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Object-Index\">Object "
"Index</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Copyright-and-"
"License\">Copyright and License</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:9974
msgctxt "in_ed/ElephantUserManual.html:9974"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:9977
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"appendix\">Appendix A Concept Index</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:10020
msgid ""
"<ul class=\"index-cp\" compact=\"compact\">\n"
"<li><a href=\"#index-API-194\">API</a>: <a href=\"#Data-Store-API-Reference"
"\">Data Store API Reference</a></li>\n"
"<li><a href=\"#index-API-173\">API</a>: <a href=\"#Migration-and-Upgrading-"
"API\">Migration and Upgrading API</a></li>\n"
"<li><a href=\"#index-API-163\">API</a>: <a href=\"#Transaction-API"
"\">Transaction API</a></li>\n"
"<li><a href=\"#index-API-127\">API</a>: <a href=\"#Index-Cursor-API\">Index "
"Cursor API</a></li>\n"
"<li><a href=\"#index-API-93\">API</a>: <a href=\"#BTree-Cursor-API\">BTree "
"Cursor API</a></li>\n"
"<li><a href=\"#index-API-66\">API</a>: <a href=\"#BTree-API\">BTree API</a></"
"li>\n"
"<li><a href=\"#index-API-35\">API</a>: <a href=\"#Persistent-Object-Indexing-"
"API\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-API-29\">API</a>: <a href=\"#Persistent-Object-API"
"\">Persistent Object API</a></li>\n"
"<li><a href=\"#index-API-9\">API</a>: <a href=\"#Store-Controller-API"
"\">Store Controller API</a></li>\n"
"<li><a href=\"#index-API-Reference-7\">API Reference</a>: <a href=\"#User-"
"API-Reference\">User API Reference</a></li>\n"
"<li><a href=\"#index-BTree-65\">BTree</a>: <a href=\"#BTree-API\">BTree API</"
"a></li>\n"
"<li><a href=\"#index-Collections-237\">Collections</a>: <a href=\"#DSR-"
"Collections\">DSR Collections</a></li>\n"
"<li><a href=\"#index-Copyright-and-License-282\">Copyright and License</a>: "
"<a href=\"#Copyright-and-License\">Copyright and License</a></li>\n"
"<li><a href=\"#index-Cursor-124\">Cursor</a>: <a href=\"#Index-Cursor-API"
"\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-Cursors-250\">Cursors</a>: <a href=\"#DSR-Cursors\">DSR "
"Cursors</a></li>\n"
"<li><a href=\"#index-Cursors-92\">Cursors</a>: <a href=\"#BTree-Cursor-API"
"\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-Data-Store-193\">Data Store</a>: <a href=\"#Data-Store-"
"API-Reference\">Data Store API Reference</a></li>\n"
"<li><a href=\"#index-design-192\">design</a>: <a href=\"#Elephant-"
"Architecture\">Elephant Architecture</a></li>\n"
"<li><a href=\"#index-Design-Patterns-191\">Design Patterns</a>: <a href="
"\"#Design-Patterns\">Design Patterns</a></li>\n"
"<li><a href=\"#index-Goals-2\">Goals</a>: <a href=\"#Introduction"
"\">Introduction</a></li>\n"
"<li><a href=\"#index-History-1\">History</a>: <a href=\"#Introduction"
"\">Introduction</a></li>\n"
"<li><a href=\"#index-Index-125\">Index</a>: <a href=\"#Index-Cursor-API"
"\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-Indices-126\">Indices</a>: <a href=\"#Index-Cursor-API"
"\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-Installation-4\">Installation</a>: <a href="
"\"#Installation\">Installation</a></li>\n"
"<li><a href=\"#index-License-283\">License</a>: <a href=\"#Copyright-and-"
"License\">Copyright and License</a></li>\n"
"<li><a href=\"#index-Migration-and-Upgrading-172\">Migration and Upgrading</"
"a>: <a href=\"#Migration-and-Upgrading-API\">Migration and Upgrading API</"
"a></li>\n"
"<li><a href=\"#index-Multithreading-272\">Multithreading</a>: <a href=\"#DSR-"
"Multithreading-Considerations\">DSR Multithreading Considerations</a></li>\n"
"<li><a href=\"#index-Persistent-Object-Indexing-34\">Persistent Object "
"Indexing</a>: <a href=\"#Persistent-Object-Indexing-API\">Persistent Object "
"Indexing API</a></li>\n"
"<li><a href=\"#index-Persistent-Objects-28\">Persistent Objects</a>: <a href="
"\"#Persistent-Object-API\">Persistent Object API</a></li>\n"
"<li><a href=\"#index-Persistent-Objects-and-Slot-Access-218\">Persistent "
"Objects and Slot Access</a>: <a href=\"#DSR-Persistent-Objects-and-Slot-"
"Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-Persistent-Sets-50\">Persistent Sets</a>: <a href="
"\"#Persistent-Set-API\">Persistent Set API</a></li>\n"
"<li><a href=\"#index-Registration-and-Initialization-195\">Registration and "
"Initialization</a>: <a href=\"#DSR-Registration\">DSR Registration</a></li>\n"
"<li><a href=\"#index-Serializer-273\">Serializer</a>: <a href=\"#DSR-"
"Handling-Serialization\">DSR Handling Serialization</a></li>\n"
"<li><a href=\"#index-Store-Controller-8\">Store Controller</a>: <a href="
"\"#Store-Controller-API\">Store Controller API</a></li>\n"
"<li><a href=\"#index-Store-Controllers-200\">Store Controllers</a>: <a href="
"\"#DSR-Store-Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-Transaction-API-162\">Transaction API</a>: <a href="
"\"#Transaction-API\">Transaction API</a></li>\n"
"<li><a href=\"#index-Transactions-255\">Transactions</a>: <a href=\"#DSR-"
"Transactions\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-Tutorial-3\">Tutorial</a>: <a href=\"#Tutorial"
"\">Tutorial</a></li>\n"
"<li><a href=\"#index-User-API-Reference-6\">User API Reference</a>: <a href="
"\"#User-API-Reference\">User API Reference</a></li>\n"
"<li><a href=\"#index-User-Guide-5\">User Guide</a>: <a href=\"#User-Guide"
"\">User Guide</a></li>\n"
"   </ul><div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:10022
msgctxt "in_ed/ElephantUserManual.html:10022"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10028
msgid ""
"<hr>\n"
"<a name=\"Object-Index\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Function-_002f-Macro-Index"
"\">Function / Macro Index</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Concept-Index"
"\">Concept Index</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:10030
msgctxt "in_ed/ElephantUserManual.html:10030"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:10033
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"appendix\">Appendix B Object Index</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:10049
msgid ""
"<ul class=\"index-tp\" compact=\"compact\">\n"
"<li><a href=\"#index-elephant_003abtree-240\"><code>elephant:btree</code></"
"a>: <a href=\"#DSR-Collections\">DSR Collections</a></li>\n"
"<li><a href=\"#index-elephant_003abtree_002dindex-242\"><code>elephant:btree-"
"index</code></a>: <a href=\"#DSR-Collections\">DSR Collections</a></li>\n"
"<li><a href=\"#index-elephant_003acursor-251\"><code>elephant:cursor</code></"
"a>: <a href=\"#DSR-Cursors\">DSR Cursors</a></li>\n"
"<li><a href=\"#index-elephant_003aindexed_002dbtree-244\"><code>elephant:"
"indexed-btree</code></a>: <a href=\"#DSR-Collections\">DSR Collections</a></"
"li>\n"
"<li><a href=\"#index-elephant_003apersistent-221\"><code>elephant:"
"persistent</code></a>: <a href=\"#DSR-Persistent-Objects-and-Slot-Access"
"\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_003apersistent_002dcollection-238\"><code>elephant:persistent-"
"collection</code></a>: <a href=\"#DSR-Collections\">DSR Collections</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003apersistent_002dmetaclass-219\"><code>elephant:persistent-"
"metaclass</code></a>: <a href=\"#DSR-Persistent-Objects-and-Slot-Access"
"\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-elephant_003apersistent_002dobject-223\"><code>elephant:"
"persistent-object</code></a>: <a href=\"#DSR-Persistent-Objects-and-Slot-"
"Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-elephant_003apset-51\"><code>elephant:pset</code></a>: "
"<a href=\"#Persistent-Set-API\">Persistent Set API</a></li>\n"
"<li><a href=\"#index-elephant_003asecondary_002dcursor-253\"><code>elephant:"
"secondary-cursor</code></a>: <a href=\"#DSR-Cursors\">DSR Cursors</a></li>\n"
"<li><a href=\"#index-elephant_003astore_002dcontroller-201\"><code>elephant:"
"store-controller</code></a>: <a href=\"#DSR-Store-Controllers\">DSR Store "
"Controllers</a></li>\n"
"   </ul><div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:10051
msgctxt "in_ed/ElephantUserManual.html:10051"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10058
msgid ""
"<hr>\n"
"<a name=\"Function-/-Macro-Index\"></a>\n"
"<a name=\"Function-_002f-Macro-Index\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Variable-Index\">Variable "
"Index</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Object-Index"
"\">Object Index</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:10060
msgctxt "in_ed/ElephantUserManual.html:10060"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:10063
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"appendix\">Appendix C Function / Macro Index</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:10172
msgid ""
"<ul class=\"index-fn\" compact=\"compact\">\n"
"<li><a href=\"#index-after-187\"><code>after</code></a>: <a href="
"\"#Migration-and-Upgrading-API\">Migration and Upgrading API</a></li>\n"
"<li><a href=\"#index-around-211\"><code>around</code></a>: <a href=\"#DSR-"
"Store-Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-before-188\"><code>before</code></a>: <a href="
"\"#Migration-and-Upgrading-API\">Migration and Upgrading API</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003abuild_002dbtree-246\"><code>elephant-data-"
"store:build-btree</code></a>: <a href=\"#DSR-Collections\">DSR Collections</"
"a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aclose_002dcontroller-205\"><code>elephant-"
"data-store:close-controller</code></a>: <a href=\"#DSR-Store-Controllers"
"\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aconnection_002dis_002dindeed_002dopen-207\"><code>elephant-"
"data-store:connection-is-indeed-open</code></a>: <a href=\"#DSR-Store-"
"Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003acontroller_002dabort_002dtransaction-262\"><code>elephant-"
"data-store:controller-abort-transaction</code></a>: <a href=\"#DSR-"
"Transactions\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003acontroller_002dcommit_002dtransaction-260\"><code>elephant-"
"data-store:controller-commit-transaction</code></a>: <a href=\"#DSR-"
"Transactions\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003acontroller_002dstart_002dtransaction-258\"><code>elephant-"
"data-store:controller-start-transaction</code></a>: <a href=\"#DSR-"
"Transactions\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003adatabase_002dversion-209\"><code>elephant-"
"data-store:database-version</code></a>: <a href=\"#DSR-Store-Controllers"
"\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003adeserialize-276\"><code>elephant-data-store:"
"deserialize</code></a>: <a href=\"#DSR-Handling-Serialization\">DSR Handling "
"Serialization</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003adeserialize_002ddatabase_002dversion_002dvalue-216\"><code>elephant-"
"data-store:deserialize-database-version-value</code></a>: <a href=\"#DSR-"
"Store-Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003adeserialize_002dfrom_002dbase64_002dstring-280\"><code>elephant-"
"data-store:deserialize-from-base64-string</code></a>: <a href=\"#DSR-"
"Handling-Serialization\">DSR Handling Serialization</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aexecute_002dtransaction-256\"><code>elephant-"
"data-store:execute-transaction</code></a>: <a href=\"#DSR-Transactions\">DSR "
"Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aget_002dcon-225\"><code>elephant-data-store:"
"get-con</code></a>: <a href=\"#DSR-Persistent-Objects-and-Slot-Access\">DSR "
"Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aget_002duser_002dconfiguration_002dparameter-198\"><code>elephant-"
"data-store:get-user-configuration-parameter</code></a>: <a href=\"#DSR-"
"Registration\">DSR Registration</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003amake_002dtransaction_002drecord-266\"><code>elephant-"
"data-store:make-transaction-record</code></a>: <a href=\"#DSR-Transactions"
"\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003anext_002doid-227\"><code>elephant-data-store:"
"next-oid</code></a>: <a href=\"#DSR-Persistent-Objects-and-Slot-Access\">DSR "
"Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aopen_002dcontroller-203\"><code>elephant-"
"data-store:open-controller</code></a>: <a href=\"#DSR-Store-Controllers"
"\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dboundp-233\"><code>elephant-"
"data-store:persistent-slot-boundp</code></a>: <a href=\"#DSR-Persistent-"
"Objects-and-Slot-Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dmakunbound-235\"><code>elephant-"
"data-store:persistent-slot-makunbound</code></a>: <a href=\"#DSR-Persistent-"
"Objects-and-Slot-Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dreader-231\"><code>elephant-"
"data-store:persistent-slot-reader</code></a>: <a href=\"#DSR-Persistent-"
"Objects-and-Slot-Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003apersistent_002dslot_002dwriter-229\"><code>elephant-"
"data-store:persistent-slot-writer</code></a>: <a href=\"#DSR-Persistent-"
"Objects-and-Slot-Access\">DSR Persistent Objects and Slot Access</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aregister_002ddata_002dstore_002dcon_002dinit-196\"><code>elephant-"
"data-store:register-data-store-con-init</code></a>: <a href=\"#DSR-"
"Registration\">DSR Registration</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aserialize-274\"><code>elephant-data-store:"
"serialize</code></a>: <a href=\"#DSR-Handling-Serialization\">DSR Handling "
"Serialization</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dkey-212\"><code>elephant-"
"data-store:serialize-database-version-key</code></a>: <a href=\"#DSR-Store-"
"Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aserialize_002ddatabase_002dversion_002dvalue-214\"><code>elephant-"
"data-store:serialize-database-version-value</code></a>: <a href=\"#DSR-Store-"
"Controllers\">DSR Store Controllers</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003aserialize_002dto_002dbase64_002dstring-278\"><code>elephant-"
"data-store:serialize-to-base64-string</code></a>: <a href=\"#DSR-Handling-"
"Serialization\">DSR Handling Serialization</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003atransaction_002dobject-270\"><code>elephant-"
"data-store:transaction-object</code></a>: <a href=\"#DSR-Transactions\">DSR "
"Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003atransaction_002dstore-268\"><code>elephant-"
"data-store:transaction-store</code></a>: <a href=\"#DSR-Transactions\">DSR "
"Transactions</a></li>\n"
"<li><a href=\"#index-elephant_003aadd_002dindex-82\"><code>elephant:add-"
"index</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003aadd_002dto_002droot-20\"><code>elephant:"
"add-to-root</code></a>: <a href=\"#Store-Controller-API\">Store Controller "
"API</a></li>\n"
"<li><a href=\"#index-elephant_003aclose_002dstore-16\"><code>elephant:close-"
"store</code></a>: <a href=\"#Store-Controller-API\">Store Controller API</"
"a></li>\n"
"<li><a href=\"#index-"
"elephant_003acontroller_002dabort_002dtransaction-168\"><code>elephant:"
"controller-abort-transaction</code></a>: <a href=\"#Transaction-API"
"\">Transaction API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acontroller_002dcommit_002dtransaction-170\"><code>elephant:"
"controller-commit-transaction</code></a>: <a href=\"#Transaction-API"
"\">Transaction API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acontroller_002dstart_002dtransaction-166\"><code>elephant:"
"controller-start-transaction</code></a>: <a href=\"#Transaction-API"
"\">Transaction API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dclose-98\"><code>elephant:"
"cursor-close</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003acursor_002dcurrent-102\"><code>elephant:"
"cursor-current</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002ddelete-120\"><code>elephant:"
"cursor-delete</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dduplicate-100\"><code>elephant:"
"cursor-duplicate</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dfirst-104\"><code>elephant:"
"cursor-first</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dget_002dboth-116\"><code>elephant:cursor-get-both</"
"code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dget_002dboth_002drange-118\"><code>elephant:cursor-"
"get-both-range</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dlast-106\"><code>elephant:"
"cursor-last</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003acursor_002dnext-108\"><code>elephant:"
"cursor-next</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dnext_002ddup-148\"><code>elephant:cursor-next-dup</"
"code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dnext_002dnodup-146\"><code>elephant:cursor-next-"
"nodup</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dpcurrent-128\"><code>elephant:"
"cursor-pcurrent</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dpfirst-130\"><code>elephant:"
"cursor-pfirst</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</"
"a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpget_002dboth-142\"><code>elephant:cursor-pget-both</"
"code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpget_002dboth_002drange-144\"><code>elephant:cursor-"
"pget-both-range</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dplast-132\"><code>elephant:"
"cursor-plast</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003acursor_002dpnext-134\"><code>elephant:"
"cursor-pnext</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpnext_002ddup-152\"><code>elephant:cursor-pnext-dup</"
"code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpnext_002dnodup-150\"><code>elephant:cursor-pnext-"
"nodup</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dpprev-136\"><code>elephant:"
"cursor-pprev</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpprev_002ddup-160\"><code>elephant:cursor-pprev-dup</"
"code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpprev_002dnodup-158\"><code>elephant:cursor-pprev-"
"nodup</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dprev-110\"><code>elephant:"
"cursor-prev</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dprev_002ddup-156\"><code>elephant:cursor-prev-dup</"
"code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dprev_002dnodup-154\"><code>elephant:cursor-prev-"
"nodup</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dpset-138\"><code>elephant:"
"cursor-pset</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dpset_002drange-140\"><code>elephant:cursor-pset-"
"range</code></a>: <a href=\"#Index-Cursor-API\">Index Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dput-122\"><code>elephant:cursor-"
"put</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003acursor_002dset-112\"><code>elephant:cursor-"
"set</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003acursor_002dset_002drange-114\"><code>elephant:cursor-set-range</"
"code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-elephant_003adefpclass-30\"><code>elephant:defpclass</"
"code></a>: <a href=\"#Persistent-Object-API\">Persistent Object API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003adrop_002dbtree-76\"><code>elephant:drop-"
"btree</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003adrop_002dinstance-32\"><code>elephant:drop-"
"instance</code></a>: <a href=\"#Persistent-Object-API\">Persistent Object "
"API</a></li>\n"
"<li><a href=\"#index-elephant_003adrop_002dinstances-48\"><code>elephant:"
"drop-instances</code></a>: <a href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-elephant_003adrop_002dpset-63\"><code>elephant:drop-"
"pset</code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003aexistsp-74\"><code>elephant:existsp</"
"code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003afind_002ditem-57\"><code>elephant:find-"
"item</code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003aget_002dfrom_002droot-18\"><code>elephant:"
"get-from-root</code></a>: <a href=\"#Store-Controller-API\">Store Controller "
"API</a></li>\n"
"<li><a href=\"#index-elephant_003aget_002dindex-84\"><code>elephant:get-"
"index</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003aget_002dinstance_002dby_002dvalue-42\"><code>elephant:get-"
"instance-by-value</code></a>: <a href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003aget_002dinstances_002dby_002dclass-40\"><code>elephant:get-"
"instances-by-class</code></a>: <a href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003aget_002dinstances_002dby_002drange-46\"><code>elephant:get-"
"instances-by-range</code></a>: <a href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003aget_002dinstances_002dby_002dvalue-44\"><code>elephant:get-"
"instances-by-value</code></a>: <a href=\"#Persistent-Object-Indexing-API"
"\">Persistent Object Indexing API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003aget_002dprimary_002dkey-86\"><code>elephant:get-primary-key</"
"code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003aget_002dvalue-69\"><code>elephant:get-"
"value</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003ainsert_002ditem-53\"><code>elephant:insert-"
"item</code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003amake_002dbtree-67\"><code>elephant:make-"
"btree</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003amake_002dcursor-96\"><code>elephant:make-"
"cursor</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003amake_002dindexed_002dbtree-80\"><code>elephant:make-indexed-"
"btree</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002dbtree-78\"><code>elephant:map-"
"btree</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002dclass-36\"><code>elephant:map-"
"class</code></a>: <a href=\"#Persistent-Object-Indexing-API\">Persistent "
"Object Indexing API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002dindex-90\"><code>elephant:map-"
"index</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002dindices-248\"><code>elephant:map-"
"indices</code></a>: <a href=\"#DSR-Collections\">DSR Collections</a></li>\n"
"<li><a href=\"#index-"
"elephant_003amap_002dinverted_002dindex-38\"><code>elephant:map-inverted-"
"index</code></a>: <a href=\"#Persistent-Object-Indexing-API\">Persistent "
"Object Indexing API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002dpset-59\"><code>elephant:map-pset</"
"code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></li>\n"
"<li><a href=\"#index-elephant_003amap_002droot-26\"><code>elephant:map-root</"
"code></a>: <a href=\"#Store-Controller-API\">Store Controller API</a></li>\n"
"<li><a href=\"#index-elephant_003amigrate-176\"><code>elephant:migrate</"
"code></a>: <a href=\"#Migration-and-Upgrading-API\">Migration and Upgrading "
"API</a></li>\n"
"<li><a href=\"#index-elephant_003aopen_002dstore-14\"><code>elephant:open-"
"store</code></a>: <a href=\"#Store-Controller-API\">Store Controller API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003apset_002dlist-61\"><code>elephant:pset-"
"list</code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></"
"li>\n"
"<li><a href=\"#index-"
"elephant_003aremove_002dfrom_002droot-22\"><code>elephant:remove-from-root</"
"code></a>: <a href=\"#Store-Controller-API\">Store Controller API</a></li>\n"
"<li><a href=\"#index-elephant_003aremove_002dindex-88\"><code>elephant:"
"remove-index</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003aremove_002ditem-55\"><code>elephant:remove-"
"item</code></a>: <a href=\"#Persistent-Set-API\">Persistent Set API</a></"
"li>\n"
"<li><a href=\"#index-elephant_003aremove_002dkv-71\"><code>elephant:remove-"
"kv</code></a>: <a href=\"#BTree-API\">BTree API</a></li>\n"
"<li><a href=\"#index-elephant_003aroot_002dexistsp-24\"><code>elephant:root-"
"existsp</code></a>: <a href=\"#Store-Controller-API\">Store Controller API</"
"a></li>\n"
"<li><a href=\"#index-elephant_003aupgrade-174\"><code>elephant:upgrade</"
"code></a>: <a href=\"#Migration-and-Upgrading-API\">Migration and Upgrading "
"API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003awith_002dbtree_002dcursor-94\"><code>elephant:with-btree-"
"cursor</code></a>: <a href=\"#BTree-Cursor-API\">BTree Cursor API</a></li>\n"
"<li><a href=\"#index-"
"elephant_003awith_002dopen_002dstore-12\"><code>elephant:with-open-store</"
"code></a>: <a href=\"#Store-Controller-API\">Store Controller API</a></li>\n"
"<li><a href=\"#index-elephant_003awith_002dtransaction-164\"><code>elephant:"
"with-transaction</code></a>: <a href=\"#Transaction-API\">Transaction API</"
"a></li>\n"
"   </ul><div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:10174
msgctxt "in_ed/ElephantUserManual.html:10174"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10180
msgid ""
"<hr>\n"
"<a name=\"Variable-Index\"></a>\n"
"Next:&nbsp;<a rel=\"next\" accesskey=\"n\" href=\"#Colophon\">Colophon</a>,\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Function-_002f-"
"Macro-Index\">Function / Macro Index</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:10182
msgctxt "in_ed/ElephantUserManual.html:10182"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:10185
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"appendix\">Appendix D Variable Index</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:10192
msgid ""
"<ul class=\"index-vr\" compact=\"compact\">\n"
"<li><a href=\"#index-"
"elephant_002ddata_002dstore_003a_002acurrent_002dtransaction_002a-264\"><code>elephant-"
"data-store:*current-transaction*</code></a>: <a href=\"#DSR-Transactions"
"\">DSR Transactions</a></li>\n"
"<li><a href=\"#index-"
"elephant_003a_002astore_002dcontroller_002a-10\"><code>elephant:*store-"
"controller*</code></a>: <a href=\"#Store-Controller-API\">Store Controller "
"API</a></li>\n"
"   </ul><div class=\"node\">"
msgstr ""

#: in_ed/ElephantUserManual.html:10194
msgctxt "in_ed/ElephantUserManual.html:10194"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10199
msgid ""
"<hr>\n"
"<a name=\"Colophon\"></a>\n"
"Previous:&nbsp;<a rel=\"previous\" accesskey=\"p\" href=\"#Variable-Index"
"\">Variable Index</a>,\n"
"Up:&nbsp;<a rel=\"up\" accesskey=\"u\" href=\"#Top\">Top</a>"
msgstr ""

#: in_ed/ElephantUserManual.html:10201
msgctxt "in_ed/ElephantUserManual.html:10201"
msgid "</div>"
msgstr ""

#: in_ed/ElephantUserManual.html:10204
msgid ""
"<!-- node-name,  next,  previous,  up -->\n"
"<h2 class=\"unnumbered\">Colophon</h2>"
msgstr ""

#: in_ed/ElephantUserManual.html:10216
msgid ""
"<p>This manual is maintained in Texinfo, and automatically translated\n"
"into other forms (e.g. HTML or pdf). If you're <em>reading</em> this\n"
"manual in one of these non-Texinfo translated forms, that's fine, but\n"
"if you want to <em>modify</em> this manual, you are strongly advised to\n"
"seek out a Texinfo version and modify that instead of modifying a\n"
"translated version. Even better might be to seek out <em>the</em>\n"
"Texinfo version (maintained at the time of this writing as part of the\n"
"Elephant project at\n"
"<a href=\"http://www.common-lisp.net/project/elephant/\">http://www.common-"
"lisp.net/project/elephant/</a>) and submit a\n"
"patch."
msgstr ""

#: in_ed/ElephantUserManual.html:10218
msgctxt "in_ed/ElephantUserManual.html:10218"
msgid "   </p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10224
msgid ""
"<div class=\"footnote\">\n"
"<hr>\n"
"<a name=\"texinfo-footnotes-in-document\"></a><h4>Footnotes</h4><p class="
"\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\">1</a>]</small> If you "
"attempt to store an object\n"
"from one store into another, the system will issue an error condition\n"
"called <code>cross-reference-error</code></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10228
msgid ""
"   <p class=\"footnote\"><small>[<a name=\"fn-2\" href=\"#fnd-2\">2</a>]</"
"small> Example provided by Ian Eslick, April 2007</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10232
msgid ""
"   <p class=\"footnote\"><small>[<a name=\"fn-3\" href=\"#fnd-3\">3</a>]</"
"small> Example provided by Ian Eslick, April 2007</p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10237
msgctxt "in_ed/ElephantUserManual.html:10237"
msgid "<p></p>"
msgstr ""

#: in_ed/ElephantUserManual.html:10239
msgid "<hr></div>"
msgstr ""

#: in_ed/ElephantUserManual.html:10242
msgid "</body></html>"
msgstr ""
