#
# NuINu <don't@send.my>, 2021, 2022.
#
#. extracted from in_ed/lispweb3.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 10:15+0300\n"
"PO-Revision-Date: 2022-01-05 22:58+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lispweb3.html:37
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\"><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n"
"        <!-- Standard Meta -->\n"
"        <meta charset=\"utf-8\">\n"
"        <meta name=\"author\" content=\"Vito Van\">\n"
"        <meta name=\"theme-color\" content=\"#CC0000\">\n"
"        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
"        <meta name=\"viewport\" content=\"width=device-width, initial-"
"scale=1.0, maximum-scale=1.0\">\n"
"        <link rel=\"icon\" type=\"image/png\" href=\"https://vitovan.com/"
"favicon.png\">\n"
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"lispweb3_files/app."
"css\">\n"
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"lispweb3_files/"
"github-markdown.css\">\n"
"        <title>Lisp for The Modern Web</title>\n"
"        <script async=\"\" src=\"lispweb3_files/analytics.js\"></"
"script><script>\n"
"         (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||"
"function(){\n"
"             (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s."
"createElement(o),\n"
"                                  m=s.getElementsByTagName(o)[0];a.async=1;a."
"src=g;m.parentNode.insertBefore(a,m)\n"
"         })(window,document,'script','//www.google-analytics.com/analytics."
"js','ga');\n"
"         ga('create', 'UA-69347509-2', 'auto');\n"
"         ga('send', 'pageview');\n"
"        </script>\n"
"    </head>\n"
"    <body>\n"
"        <div class=\"panel\">\n"
"            <ul>\n"
"                <li><a href=\"https://vitovan.com/index.html\">Home</a></"
"li>\n"
"                <li class=\"current\"><a href=\"https://vitovan.com/list.html"
"\">List</a></li>\n"
"                <li><a href=\"https://vitovan.com/about.html\">About</a></"
"li>\n"
"                <li><a href=\"https://vitovan.com/rss.xml\">RSS</a></li>\n"
"            </ul>\n"
"        </div>\n"
"        <div class=\"container\">\n"
"            <div class=\"head\">\n"
"                <h1><a href=\"https://vitovan.com/index.html\">Vito Van</a></"
"h1>\n"
"            </div>\n"
"            <div class=\"content markdown-body\">"
msgstr ""
"<!DOCTYPE html>\n"
"<html lang=\"en\"><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n"
"        <!-- Standard Meta -->\n"
"        <meta charset=\"utf-8\">\n"
"        <meta name=\"author\" content=\"Vito Van\">\n"
"        <meta name=\"theme-color\" content=\"#CC0000\">\n"
"        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
"        <meta name=\"viewport\" content=\"width=device-width, initial-"
"scale=1.0, maximum-scale=1.0\">\n"
"        <link rel=\"icon\" type=\"image/png\" href=\"https://vitovan.com/"
"favicon.png\">\n"
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"lispweb3_files/app."
"css\">\n"
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"lispweb3_files/"
"github-markdown.css\">\n"
"        <title>Lisp для современного Веб</title>\n"
"        <script async=\"\" src=\"lispweb3_files/analytics.js\"></"
"script><script>\n"
"         (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||"
"function(){\n"
"             (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s."
"createElement(o),\n"
"                                  m=s.getElementsByTagName(o)[0];a.async=1;a."
"src=g;m.parentNode.insertBefore(a,m)\n"
"         })(window,document,'script','//www.google-analytics.com/analytics."
"js','ga');\n"
"         ga('create', 'UA-69347509-2', 'auto');\n"
"         ga('send', 'pageview');\n"
"        </script>\n"
"    </head>\n"
"    <body>\n"
"        <div class=\"panel\">\n"
"            <ul>\n"
"                <li><a href=\"https://vitovan.com/index.html\">Home</a></"
"li>\n"
"                <li class=\"current\"><a href=\"https://vitovan.com/list.html"
"\">List</a></li>\n"
"                <li><a href=\"https://vitovan.com/about.html\">About</a></"
"li>\n"
"                <li><a href=\"https://vitovan.com/rss.xml\">RSS</a></li>\n"
"            </ul>\n"
"        </div>\n"
"        <div class=\"container\">\n"
"            <div class=\"head\">\n"
"                <h1><a href=\"https://vitovan.com/index.html\">Vito Van</a></"
"h1>\n"
"            </div>\n"
"            <div class=\"content markdown-body\">"

#: in_ed/lispweb3.html:40
msgid ""
"<h1>\n"
"<a name=\"lisp-for-the-modern-web\" class=\"anchor\" href=\"#lisp-for-the-"
"modern-web\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon "
"octicon-link\"></span></a>Lisp for The Modern Web</h1>"
msgstr ""
"<h1>\n"
"<a name=\"lisp-for-the-modern-web\" class=\"anchor\" href=\"#lisp-for-the-"
"modern-web\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon "
"octicon-link\"></span></a>Lisp для современного Веб</h1>"

#: in_ed/lispweb3.html:42
msgid "<p>2015/08, revision: 2015/08, 2015/09, 2016/08</p>"
msgstr ""

#: in_ed/lispweb3.html:45
msgctxt "in_ed/lispweb3.html:45"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:47
msgid "<p>Lisp isn't a language, it's a building material.</p>"
msgstr "<p>Лисп - это не язык, это строительный материал.</p>"

#: in_ed/lispweb3.html:50
msgctxt "in_ed/lispweb3.html:50"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:52
msgid "<p>-  Alan Kay</p>"
msgstr ""

#: in_ed/lispweb3.html:56
msgid ""
"<h3>\n"
"<a name=\"what-to-expect\" class=\"anchor\" href=\"#what-to-expect\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>What to Expect</h3>"
msgstr ""
"<h3>\n"
"<a name=\"what-to-expect\" class=\"anchor\" href=\"#what-to-expect\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Чего ожидать</h3>"

#: in_ed/lispweb3.html:58
msgid ""
"<p>This piece is about how to build a modern web application with Common "
"Lisp in the backend, from scratch.</p>"
msgstr ""
"<p>В этой статье рассказывается, как с нуля создать современное веб-"
"приложение с использованием\n"
"Common Lisp в серверной части.</p>"

#: in_ed/lispweb3.html:62
msgid ""
"<p>You may need to have some knowledge about <a href=\"https://en.wikipedia."
"org/wiki/Front_end_development\" rel=\"nofollow\">Front End Development</a>, "
"cause we won't explain the steps for building the client.</p>"
msgstr ""
"<p>Возможно, вам потребуются некоторые знания о <a href=\"https://en."
"wikipedia.org/wiki/Front_end_development\" rel=\"nofollow\">Front End "
"Development</a>(разработки клиентской части),\n"
"потому что мы не будем объяснять шаги по созданию клиента. </p>"

#: in_ed/lispweb3.html:66
msgid ""
"<h3>\n"
"<a name=\"why-lisp-again\" class=\"anchor\" href=\"#why-lisp-again\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Why Lisp? Again</h3>"
msgstr ""
"<h3>\n"
"<a name=\"why-lisp-again\" class=\"anchor\" href=\"#why-lisp-again\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Почему Лисп? Снова</h3>"

#: in_ed/lispweb3.html:68
msgid "<p><strong>It is awesome</strong>.</p>"
msgstr "<p><strong>Он превосходен.</strong>.</p>"

#: in_ed/lispweb3.html:72
msgid ""
"<p>I don't think we need another reason for using Lisp, do we? Life is "
"short, let's be awesome!</p>"
msgstr ""
"<p>Я не думаю, что нам нужна другая причина для использования Lisp, не так "
"ли? \n"
"Жизнь коротка, давайте будем крутыми!</p>"

#: in_ed/lispweb3.html:76
msgid ""
"<p>It's been more than half a century since Lisp first appeared, she's like "
"the <a href=\"https://en.wikipedia.org/wiki/One_Ring\" rel=\"nofollow\">The "
"One Ring</a> in the Middle-earth. The one who mastered the spell of Lisp, "
"will rule the world, once again.</p>"
msgstr ""
"<p>Прошло более полувека с момента появления Лиспа, он как <a href=\"https://"
"en.wikipedia.org/wiki/One_Ring\" rel=\"nofollow\">Единое Кольцо</a> в "
"Средиземье. Тот, кто овладел чарами Лиспа, \n"
"снова будет править миром. </p>"

#: in_ed/lispweb3.html:80
msgid "<p><strong>Other reasons</strong>.</p>"
msgstr "<p><strong>Другие причины.</strong>.</p>"

#: in_ed/lispweb3.html:84
msgid ""
"<p>If you need some other reasons beside awesome, here is some <a href="
"\"http://www.paulgraham.com/quotes.html\" rel=\"nofollow\">quotes</a> and <a "
"href=\"http://www.paulgraham.com/lisp.html\" rel=\"nofollow\">articles</a> "
"about Lisp, enjoy them.</p>"
msgstr ""
"<p>Если вам нужны еще какие-то причины, помимо великолепия Лиспа, вот "
"несколько \n"
"<a href=\"http://www.paulgraham.com/quotes.html\" rel=\"nofollow\">цитат</a> "
"и \n"
"<a href=\"http://www.paulgraham.com/lisp.html\" rel=\"nofollow\">статей</a> "
"о Lisp, \n"
"наслаждайтесь ими.</p>"

#: in_ed/lispweb3.html:88
msgid ""
"<h3>\n"
"<a name=\"lets-do-it\" class=\"anchor\" href=\"#lets-do-it\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Let's Do It</h3>"
msgstr ""
"<h3>\n"
"<a name=\"lets-do-it\" class=\"anchor\" href=\"#lets-do-it\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Давай сделаем это</h3>"

#: in_ed/lispweb3.html:90
msgid "<p>Do what?</p>"
msgstr "<p>Что делать?</p>"

#: in_ed/lispweb3.html:94
msgid ""
"<p>We are going to \"build a modern web application with Common Lisp in the "
"backend\", as mentioned before.</p>"
msgstr ""
"<p>Мы собираемся «создать современное веб-приложение с Common Lisp в "
"бэкэнде», как упоминалось ранее.</p>"

#: in_ed/lispweb3.html:98
msgid ""
"<p>In recent days, many people build web applications with a "
"<strong><code>Server with JSON output</code></strong> and a "
"<strong><code>Client with HTML5 + JavaScript</code></strong>. And we will do "
"it the same way.</p>"
msgstr ""
"<p>В последнее время многие люди создают веб-приложения <strong><code>Сервер "
"с выводом \n"
"JSON</code></strong>  и <strong><code>Клиент с HTML5 + JavaScript</code></"
"strong>. \n"
"И мы поступим так же.</p>"

#: in_ed/lispweb3.html:104
msgid ""
"<p>As you have had some Front End Development skills, we'll focus on the\n"
" server part, and the client part will be provide as source code for \n"
"you.</p>"
msgstr ""
"<p>Поскольку у вас есть(наверное) некоторые навыки фронтенд-разработки, \n"
"мы сосредоточимся на серверной части, а клиентская часть будет "
"предоставлена \n"
"вам в качестве исходного кода.</p>"

#: in_ed/lispweb3.html:117
msgid ""
"<h3>\n"
"<a name=\"the-steps\" class=\"anchor\" href=\"#the-steps\" aria-hidden=\"true"
"\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>The "
"Steps</h3>\n"
"<ul>\n"
"<li><a href=\"#hello-lisp\">Hello Lisp!</a></li>\n"
"<li><a href=\"#hello-world\">Hello World!</a></li>\n"
"<li><a href=\"#lets-be-json\">Let's Be JSON</a></li>\n"
"<li><a href=\"#data-storage\">Data Storage</a></li>\n"
"<li><a href=\"#modern-client\">Modern Client</a></li>\n"
"</ul>\n"
"<h4>\n"
"<a name=\"hello-lisp\" class=\"anchor\" href=\"#hello-lisp\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Hello, Lisp!</h4>"
msgstr ""
"<h3>\n"
"<a name=\"the-steps\" class=\"anchor\" href=\"#the-steps\" aria-hidden=\"true"
"\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Шаги</h3>\n"
"<ul>\n"
"<li><a href=\"#hello-lisp\">Hello Lisp!</a></li>\n"
"<li><a href=\"#hello-world\">Hello World!</a></li>\n"
"<li><a href=\"#lets-be-json\">Давайте будем JSON</a></li>\n"
"<li><a href=\"#data-storage\">Хранилище данных</a></li>\n"
"<li><a href=\"#modern-client\">Современный клиент</a></li>\n"
"</ul>\n"
"<h4>\n"
"<a name=\"hello-lisp\" class=\"anchor\" href=\"#hello-lisp\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Hello, Lisp!</h4>"

#: in_ed/lispweb3.html:119
msgid ""
"<p>We assume that you have no knowledge about Lisp, so let's say hello:</p>"
msgstr ""
"<p>Мы предполагаем, что вы ничего не знаете о Lisp, так что давайте "
"поздороваемся:</p>"

#: in_ed/lispweb3.html:123
msgctxt "in_ed/lispweb3.html:123"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:125
msgid ""
"<p>Go to <a href=\"http://sbcl.org/\" rel=\"nofollow\">sbcl.org</a>, and "
"open the <a href=\"http://sbcl.org/platform-table.html\" rel=\"nofollow"
"\">Download</a> page, choose your platform and download your binary.</p>"
msgstr ""
"<p> Перейдите на  <a href=\"http://sbcl.org/\" rel=\"nofollow\">sbcl.org</"
"a>, и откройте страницу\n"
" <a href=\"http://sbcl.org/platform-table.html\" rel=\"nofollow\">Download</"
"a>,  \n"
"выберите свою платформу и загрузите двоичный файл.</p>"

#: in_ed/lispweb3.html:129
msgctxt "in_ed/lispweb3.html:129"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:131
msgid ""
"<p>Then follow <a href=\"http://sbcl.org/getting.html\" rel=\"nofollow"
"\">this instruction</a> to install and run it.</p>"
msgstr ""
"<p>Затем следуйте <a href=\"http://sbcl.org/getting.html\" rel=\"nofollow"
"\">этой инструкции</a>, \n"
"чтобы установить и запустить его.</p>"

#: in_ed/lispweb3.html:135
msgctxt "in_ed/lispweb3.html:135"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:137
msgid ""
"<p>OK, now you have a <a href=\"http://www.cliki.net/REPL\" rel=\"nofollow"
"\">REPL</a>!</p>"
msgstr ""
"<p> Хорошо, теперь у вас есть <a href=\"http://www.cliki.net/REPL\" rel="
"\"nofollow\">REPL</a>!</p>"

#: in_ed/lispweb3.html:142
msgctxt "in_ed/lispweb3.html:142"
msgid ""
"</li>\n"
"</ul>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:144
msgctxt "in_ed/lispweb3.html:144"
msgid "<p>This is SBCL 1.2.7, an implementation of ANSI Common Lisp.</p>"
msgstr "<p>Это SBCL 1.2.7, реализация ANSI Common Lisp.</p>"

#: in_ed/lispweb3.html:148
msgctxt "in_ed/lispweb3.html:148"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:150
msgctxt "in_ed/lispweb3.html:150"
msgid ""
"<p>More information about SBCL is available at <a href=\"http://www.sbcl.org/"
"\" rel=\"nofollow\">http://www.sbcl.org/</a>.</p>"
msgstr ""

#: in_ed/lispweb3.html:156
msgctxt "in_ed/lispweb3.html:156"
msgid ""
"</blockquote>\n"
"<blockquote>\n"
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:158
msgctxt "in_ed/lispweb3.html:158"
msgid ""
"<p>SBCL is free software, provided as is, with absolutely no warranty.</p>"
msgstr ""
"<p>SBCL is free software, provided as is, with absolutely no warranty.</p>"

#: in_ed/lispweb3.html:162
msgctxt "in_ed/lispweb3.html:162"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:164
msgctxt "in_ed/lispweb3.html:164"
msgid ""
"<p>It is mostly in the public domain; some portions are provided under</p>"
msgstr ""
"<p>It is mostly in the public domain; some portions are provided under</p>"

#: in_ed/lispweb3.html:168
msgctxt "in_ed/lispweb3.html:168"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:170
msgctxt "in_ed/lispweb3.html:170"
msgid "<p>BSD-style licenses.  See the CREDITS and COPYING files in the</p>"
msgstr ""

#: in_ed/lispweb3.html:174
msgctxt "in_ed/lispweb3.html:174"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:176
msgctxt "in_ed/lispweb3.html:176"
msgid "<p>distribution for more information.</p>"
msgstr ""

#: in_ed/lispweb3.html:180
msgctxt "in_ed/lispweb3.html:180"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:182
msgctxt "in_ed/lispweb3.html:182"
msgid "<p>*</p>"
msgstr ""

#: in_ed/lispweb3.html:185
msgctxt "in_ed/lispweb3.html:185"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:188
msgid ""
"<p>Before we start coding, let's talk about the basic grammar in Lisp. \n"
"Many people say \"It's weird!\", but it is also the charming part.</p>"
msgstr ""
"<p>Прежде чем мы начнем писать код, давайте поговорим об основах грамматики "
"Лиспа. \n"
"Многие говорят: «Это странно!», Но это тоже очаровательная часть.</p>"

#: in_ed/lispweb3.html:195
msgid ""
"<p>You can imagine Lisp grammar like <a href=\"http://www.webpacman.com/"
"pacman.php\" rel=\"nofollow\">Pac Man</a> eating the dots: <code>á§â¢â¢â¢â¢</"
"code>,\n"
" and there is no ghosts here. Pac Man is the function in Lisp, and the \n"
"dots are arguments. After Pac Man eat up all the dots (the function is \n"
"executed with all these arguments), it becames a dot: <code>â¢</code> . and "
"a dot is able to be eaten by another Pac Man.</p>"
msgstr ""
"<p>Вы можете представить себе грамматику Лиспа, как <a href=\"http://www."
"webpacman.com/pacman.php\" rel=\"nofollow\">Pac Man</a>, поедающий точки: "
"<code>ᗧ ••••</code>, и здесь нет никаких призраков. \n"
"Pac Man - это функция в Лиспе, а точки - аргументы. После того, как Pac Man "
"съел все точки \n"
"(функция выполняется со всеми этими аргументами), он превратился в точку: •. "
"и точка может \n"
"быть съедена другим Pac Man-ом.</p>"

#: in_ed/lispweb3.html:199
msgid "<p>So, you can imagine a Lisp program like this:</p>"
msgstr "<p>Итак, вы можете представить себе такую программу на Лиспе:</p>"

#: in_ed/lispweb3.html:217
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Day 1, we created Pac Men and dots</span>\n"
"(á§â¢ (á§â¢â¢â¢â¢\n"
" (á§â¢â¢\n"
" (á§â¢â¢â¢))))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 2, The innermost Pac "
"Man eat up all the dots in front of him/her</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;and, turns into a dot </"
"span>\n"
"(á§â¢ (á§â¢â¢â¢â¢\n"
" (á§â¢â¢\n"
" â¢)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 3, Eating is not "
"stopping</span>\n"
"(á§â¢ (á§â¢â¢â¢â¢\n"
"â¢))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 4, The last Pac Man</"
"span>\n"
"(á§â¢ â¢)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 5, Finally, Pac Man "
"is just another dot</span>\n"
"â¢</pre></div>"
msgstr ""
"<div class=\"highlight highlight-source-lisp\">\n"
"<pre><span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 1, we created "
"Pac Men and dots</span>\n"
"(ᗧ• (ᗧ••••\n"
" (ᗧ••\n"
" (ᗧ•••))))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 2, The innermost Pac "
"Man eat up all the dots in front of him/her</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;and, turns into a dot </"
"span>\n"
"(ᗧ• (ᗧ••••\n"
" (ᗧ••\n"
" •)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 3, Eating is not "
"stopping</span>\n"
"(ᗧ• (ᗧ••••\n"
"•))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 4, The last Pac Man</"
"span>\n"
"(ᗧ• •)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Day 5, Finally, Pac Man "
"is just another dot</span>\n"
"•</pre>\n"
"</div>"

#: in_ed/lispweb3.html:221
msgid ""
"<p>Yes, they are just Pac Man and dots! When there is multiple Pac Men \n"
"and dots, the innermost Pac Man will eat first, then it turns into a \n"
"dot, waiting to be eaten by other Pac Man. It's funny, isn't it?</p>"
msgstr ""
"<p>Да они же просто Pac Man и точки! Когда есть несколько Pac Men и точек, \n"
"сначала будет есть самый внутренний Pac Man, и затем превратится в точку, "
"ожидающую, \n"
"чтобы ее съел другой Pac Man. Забавно, правда?\n"
"</p>"

#: in_ed/lispweb3.html:225
msgid "<p>Now, let's get back to REPL:</p>"
msgstr "<p>Теперь вернемся к REPL:</p>"

#: in_ed/lispweb3.html:232
msgid ""
"<ul>\n"
"<li>Type <code>(format t \"Hello, Lisp!\")</code>, then hit <kbd>Enter</"
"kbd>\n"
"</li>\n"
"</ul>\n"
"<blockquote>"
msgstr ""
"<ul>\n"
"<li>Наберите <code>(format t \"Hello, Lisp!\")</code>, и нажмите <kbd>Enter</"
"kbd>\n"
"</li>\n"
"</ul>\n"
"<blockquote>"

#: in_ed/lispweb3.html:234
msgid "<p>* (format t \"Hello, Lisp!\")</p>"
msgstr ""

#: in_ed/lispweb3.html:238
msgctxt "in_ed/lispweb3.html:238"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:240
msgid "<p><strong>Hello, Lisp!</strong></p>"
msgstr ""

#: in_ed/lispweb3.html:244
msgctxt "in_ed/lispweb3.html:244"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:246
msgctxt "in_ed/lispweb3.html:246"
msgid "<p>NIL</p>"
msgstr ""

#: in_ed/lispweb3.html:250
msgctxt "in_ed/lispweb3.html:250"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:252
msgctxt "in_ed/lispweb3.html:252"
msgid "<p>*</p>"
msgstr ""

#: in_ed/lispweb3.html:258
msgid ""
"</blockquote>\n"
"<ul>\n"
"<li>Now, you have learned Lisp!</li>\n"
"</ul>"
msgstr ""
"</blockquote>\n"
"<ul>\n"
"<li>Теперь вы изучили Lisp!</li>\n"
"</ul>"

#: in_ed/lispweb3.html:260
msgid ""
"<p>\"YOU MUST BE KIDDING!!\", yes. Now let's do something more complicated:</"
"p>"
msgstr ""
"<p>\"ВЫ ДОЛЖНО БЫТЬ ДЕТИ !!\", да. А теперь давайте сделаем что-нибудь "
"посложнее:</p>"

#: in_ed/lispweb3.html:269
msgid ""
"<ul>\n"
"<li>Open a file, paste code below, then save it as <code>say-hello.lisp</"
"code>:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defun</span> <span class=\"pl-en\">say-hello</span> (to)\n"
" (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">t</span> <span "
"class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, ~a<span class=\"pl-pds"
"\">\"</span></span> to))</pre></div>\n"
"<ul>\n"
"<li>"
msgstr ""
"<ul>\n"
"<li>Откройте файл, вставьте код ниже и сохраните его как  <code>say-hello."
"lisp</code>:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defun</span> <span class=\"pl-en\">say-hello</span> (to)\n"
" (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">t</span> <span "
"class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, ~a<span class=\"pl-pds"
"\">\"</span></span> to))</pre></div>\n"
"<ul>\n"
"<li>"

#: in_ed/lispweb3.html:271
msgctxt "in_ed/lispweb3.html:271"
msgid "<p>Open a terminal, and change to current directory</p>"
msgstr "<p>Откройте терминал и перейдите в текущий каталог</p>"

#: in_ed/lispweb3.html:275
msgctxt "in_ed/lispweb3.html:275"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:277
msgid ""
"<p>Type <code>sbcl --load say-hello.lisp</code>, hit <kbd>Enter</kbd></p>"
msgstr ""
"<p>Наберите <code>sbcl --load say-hello.lisp</code>, и нажмите <kbd>Enter</"
"kbd></p>"

#: in_ed/lispweb3.html:282
msgctxt "in_ed/lispweb3.html:282"
msgid ""
"</li>\n"
"</ul>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:284
msgid "<p>[vito@laptop lispweb3]$ sbcl --load say-hello.lisp</p>"
msgstr ""

#: in_ed/lispweb3.html:288
msgctxt "in_ed/lispweb3.html:288"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:290
msgctxt "in_ed/lispweb3.html:290"
msgid "<p>This is SBCL 1.2.7, an implementation of ANSI Common Lisp.</p>"
msgstr ""

#: in_ed/lispweb3.html:294
msgctxt "in_ed/lispweb3.html:294"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:296
msgctxt "in_ed/lispweb3.html:296"
msgid ""
"<p>More information about SBCL is available at <a href=\"http://www.sbcl.org/"
"\" rel=\"nofollow\">http://www.sbcl.org/</a>.</p>"
msgstr ""

#: in_ed/lispweb3.html:302
msgctxt "in_ed/lispweb3.html:302"
msgid ""
"</blockquote>\n"
"<blockquote>\n"
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:304
msgctxt "in_ed/lispweb3.html:304"
msgid ""
"<p>SBCL is free software, provided as is, with absolutely no warranty.</p>"
msgstr ""

#: in_ed/lispweb3.html:308
msgctxt "in_ed/lispweb3.html:308"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:310
msgctxt "in_ed/lispweb3.html:310"
msgid ""
"<p>It is mostly in the public domain; some portions are provided under</p>"
msgstr ""
"<p>It is mostly in the public domain; some portions are provided under</p>"

#: in_ed/lispweb3.html:314
msgctxt "in_ed/lispweb3.html:314"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:316
msgctxt "in_ed/lispweb3.html:316"
msgid "<p>BSD-style licenses.  See the CREDITS and COPYING files in the</p>"
msgstr ""

#: in_ed/lispweb3.html:320
msgctxt "in_ed/lispweb3.html:320"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:322
msgctxt "in_ed/lispweb3.html:322"
msgid "<p>distribution for more information.</p>"
msgstr ""

#: in_ed/lispweb3.html:326
msgctxt "in_ed/lispweb3.html:326"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:328
msgctxt "in_ed/lispweb3.html:328"
msgid "<p>*</p>"
msgstr ""

#: in_ed/lispweb3.html:336
msgid ""
"</blockquote>\n"
"<ul>\n"
"<li>Then you'll get the REPL with the file loaded. Type <code>(say-hello "
"\"Vito\")</code>, hit <kbd>Enter</kbd>\n"
"</li>\n"
"</ul>\n"
"<blockquote>"
msgstr ""
"</blockquote>\n"
"<ul>\n"
"<li>Тогда вы получите REPL с загруженным файлом. Наберите <code>(say-hello "
"\"Vito\")</code>, \n"
"и нажмите <kbd>Enter</kbd>\n"
"</li>\n"
"</ul>\n"
"<blockquote>"

#: in_ed/lispweb3.html:338
msgid "<p>* (say-hello \"Vito\")</p>"
msgstr ""

#: in_ed/lispweb3.html:342
msgctxt "in_ed/lispweb3.html:342"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:344
msgid "<p>Hello, Vito</p>"
msgstr ""

#: in_ed/lispweb3.html:348
msgctxt "in_ed/lispweb3.html:348"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:350
msgctxt "in_ed/lispweb3.html:350"
msgid "<p>NIL</p>"
msgstr ""

#: in_ed/lispweb3.html:354
msgctxt "in_ed/lispweb3.html:354"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:356
msgctxt "in_ed/lispweb3.html:356"
msgid "<p>*</p>"
msgstr ""

#: in_ed/lispweb3.html:362
msgid ""
"</blockquote>\n"
"<ul>\n"
"<li>Now, you see, you are saying hello to me with Lisp!</li>\n"
"</ul>"
msgstr ""
"</blockquote>\n"
"<ul>\n"
"<li>Сейчас, вы увидели как здороваться со мной с помощью Лисп!</li>\n"
"</ul>"

#: in_ed/lispweb3.html:364
msgid "<p><strong>Ok, what we've done?</strong></p>"
msgstr "<p><strong>Хорошо, что мы сделали?</strong></p>"

#: in_ed/lispweb3.html:368
msgid ""
"<p>First, when we type <code>(format t \"Hello, Lisp!\")</code>, we called a "
"function which name is <code>format</code>, and passed with two arguments: "
"<code>t</code> and <code>\"Hello, Lisp!\"</code>. Well then, what is "
"function <code>format</code> about?</p>"
msgstr ""
"<p>Во-первых, когда мы набираем текст <code>(format t \"Hello, Lisp!\")</"
"code>, Мы вызываем \n"
"функцию с именем <code>format</code> и передаем ей два аргумента: <code>t</"
"code> и\n"
"<code>\"Hello, Lisp!\"</code>. Что же тогда такое функция <code>format</"
"code>?</p>"

#: in_ed/lispweb3.html:372
msgid ""
"<p>Here is the document: <a href=\"http://www.lispworks.com/documentation/"
"lw50/CLHS/Body/f_format.htm\" rel=\"nofollow\">CLHS: Function FORMAT</a>, "
"and here is <a href=\"http://www.gigamonkeys.com/book/a-few-format-recipes."
"html\" rel=\"nofollow\">A Few FORMAT Recipes</a>. Typically, we can google "
"it by these keywords: <a href=\"https://www.google.com/search?q=common+lisp"
"+format\" rel=\"nofollow\"><em>common lisp format</em></a>, thank google, "
"we'll always get the answer.</p>"
msgstr ""
"<p>Вот документ: <a href=\"http://www.lispworks.com/documentation/lw50/CLHS/"
"Body/f_format.htm\" rel=\"nofollow\">CLHS: Function FORMAT</a>, а вот <a "
"href=\"http://www.gigamonkeys.com/book/a-few-format-recipes.html\" rel="
"\"nofollow\">несколько рецептов FORMAT</a>. Обычно мы можем погуглить \n"
"по этим ключевым словам: <a href=\"https://www.google.com/search?q=common"
"+lisp+format\" rel=\"nofollow\"><em>common lisp format</em></a>, и спасибо "
"Google, мы всегда получим ответ. </p>"

#: in_ed/lispweb3.html:375
msgctxt "in_ed/lispweb3.html:375"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:377
msgctxt "in_ed/lispweb3.html:377"
msgid "<p>......</p>"
msgstr ""

#: in_ed/lispweb3.html:381
msgctxt "in_ed/lispweb3.html:381"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:383
msgid "<p>format destination control-string &amp;rest args =&gt; result</p>"
msgstr ""

#: in_ed/lispweb3.html:387
msgctxt "in_ed/lispweb3.html:387"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:389
msgid "<p>Arguments and Values:</p>"
msgstr ""

#: in_ed/lispweb3.html:393
msgctxt "in_ed/lispweb3.html:393"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:395
msgid ""
"<p><strong>destination---nil, t, a stream, or a string with a fill pointer.</"
"strong></p>"
msgstr ""

#: in_ed/lispweb3.html:399
msgctxt "in_ed/lispweb3.html:399"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:401
msgid "<p><strong>control-string---a format control.</strong></p>"
msgstr ""

#: in_ed/lispweb3.html:405
msgctxt "in_ed/lispweb3.html:405"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:407
msgid "<p>args---format arguments for control-string.</p>"
msgstr ""

#: in_ed/lispweb3.html:411
msgctxt "in_ed/lispweb3.html:411"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:413
msgid ""
"<p>result---if destination is non-nil, then nil; otherwise, a string.</p>"
msgstr ""

#: in_ed/lispweb3.html:417
msgctxt "in_ed/lispweb3.html:417"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:419
msgctxt "in_ed/lispweb3.html:419"
msgid "<p>......</p>"
msgstr ""

#: in_ed/lispweb3.html:422
msgctxt "in_ed/lispweb3.html:422"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:424
msgid ""
"<p>- <a href=\"http://www.lispworks.com/documentation/lw50/CLHS/Body/"
"f_format.htm\" rel=\"nofollow\">CLHS: Function FORMAT</a></p>"
msgstr ""

#: in_ed/lispweb3.html:427
msgctxt "in_ed/lispweb3.html:427"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:429
msgid ""
"<p>...... the destination for the output, can be T, NIL, a stream, or a "
"string with a fill pointer. <strong>T is shorthand for the stream "
"<em>STANDARD-OUTPUT</em></strong>, while NIL causes  ......</p>"
msgstr ""

#: in_ed/lispweb3.html:433
msgctxt "in_ed/lispweb3.html:433"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:437
msgid ""
"<p>...... The second argument, the control string, is, in essence, a \n"
"program in the FORMAT language. ...... Most of FORMAT's directives \n"
"......</p>"
msgstr ""

#: in_ed/lispweb3.html:441
msgctxt "in_ed/lispweb3.html:441"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:443
msgid "<p>FORMAT Directives</p>"
msgstr ""

#: in_ed/lispweb3.html:447
msgctxt "in_ed/lispweb3.html:447"
msgid ""
"</blockquote>\n"
"<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:449
msgctxt "in_ed/lispweb3.html:449"
msgid "<p>......</p>"
msgstr ""

#: in_ed/lispweb3.html:452
msgctxt "in_ed/lispweb3.html:452"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:454
msgid ""
"<p>- <a href=\"http://www.gigamonkeys.com/book/a-few-format-recipes.html\" "
"rel=\"nofollow\">A Few FORMAT Recipes</a></p>"
msgstr ""

#: in_ed/lispweb3.html:458
msgid ""
"<p>Now we know that the first argument of <code>(format t \"Hello, Lisp!\")</"
"code> is destination, when we pass it <code>t</code>, it means "
"<code>*STANDARD-OUTPUT*</code>. We also know that the second argument of "
"<code>(format t \"Hello, Lisp!\")</code> is control-string, which just like "
"a template, without directives, it is just a string.</p>"
msgstr ""
"<p>Теперь мы знаем, что первый аргумент <code>(format t \"Hello, Lisp!\")</"
"code> - это пункт\n"
"назначения, когда мы передаем его <code>t</code>, это означает "
"<code>*STANDARD-OUTPUT*</code>. \n"
"Мы также знаем, что второй аргумент <code>(format t \"Hello, Lisp!\")</code> "
"- это управляющая\n"
"строка, которая, как и шаблон, без директив, представляет собой просто "
"строку.</p>"

#: in_ed/lispweb3.html:462
msgid ""
"<p>So, <code>(format t \"Hello, Lisp!\")</code> means print string <code>"
"\"Hello, Lisp!\"</code> to the standard output, then return <code>nil</code> "
"(you can assume that <code>t</code> means <code>true</code> and <code>nil</"
"code> means <code>false</code> in Lisp, for now).</p>"
msgstr ""
"<p>Итак, <code>(format t \"Hello, Lisp!\")</code> Означает вывод строки "
"<code>\"Hello, Lisp!\"</code> \n"
"в стандартный вывод, затем вернёт <code>nil</code> (на данный момент вы "
"можете предположить, что \n"
"<code>t</code> означает <code>true</code>, а <code>nil</code> означает "
"<code>false</code> в Lisp).\n"
"</p>"

#: in_ed/lispweb3.html:466
msgid "<p>Second, we wrote a file with:</p>"
msgstr "<p>Во-вторых, мы написали файл с: </p>"

#: in_ed/lispweb3.html:470
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defun</span> <span class=\"pl-en\">say-hello</span> (to)\n"
" (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">t</span> <span "
"class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, ~a<span class=\"pl-pds"
"\">\"</span></span> to))</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:472
msgid ""
"<p>Well, we know that <code>(format t \"Hello, ~a\" to)</code> means replace "
"directive <code>~a</code> with the value of variable <code>to</code>, and "
"then print them out to the standard output. But, what does <code>(defun say-"
"hello (to)</code> mean?</p>"
msgstr ""
"<p>Что ж, мы знаем, что <code>(format t \"Hello, ~a\" to)</code> означает "
"замену директивы \n"
"<code>~a</code> значением переменной <code>to</code>, а затем вывод их на "
"стандартный вывод. \n"
"Но что означает <code>(defun say-hello (to)</code></p>"

#: in_ed/lispweb3.html:476
msgid ""
"<p>Let's try google: <a href=\"https://www.google.com/search?q=common+lisp"
"+defun\" rel=\"nofollow\"><em>common lisp defun</em></a>.</p>"
msgstr ""
"<p>Давайте попробуем google: <a href=\"https://www.google.com/search?q=common"
"+lisp+defun\" rel=\"nofollow\"><em>common lisp defun</em></a>.</p>"

#: in_ed/lispweb3.html:480
msgid ""
"<p>Well, we got this: <a href=\"http://www.lispworks.com/documentation/lw50/"
"CLHS/Body/m_defun.htm\" rel=\"nofollow\">CLHS: Macro DEFUN</a> and this: <a "
"href=\"http://www.gigamonkeys.com/book/functions.html\" rel=\"nofollow"
"\">Functions</a>.</p>"
msgstr ""
"<p>Итак, мы получили это: <a href=\"http://www.lispworks.com/documentation/"
"lw50/CLHS/Body/m_defun.htm\" rel=\"nofollow\">CLHS: Macro DEFUN</a> и это: "
"<a href=\"http://www.gigamonkeys.com/book/functions.html\" rel=\"nofollow"
"\">Функции</a>.</p>"

#: in_ed/lispweb3.html:484
msgid ""
"<p>After read them, we know that <code>defun</code> is a Macro which is used "
"to create funcion. The first argument of <code>defun</code> is the function "
"name, and the second argument of <code>defun</code> is the arguments of the "
"function, and typically, the rest will be the body of the function.</p>"
msgstr ""
"<p>Прочитав их, мы знаем, что <code>defun</code> - это макрос, который "
"используется для \n"
"создания функции. Первый аргумент <code>defun</code> - это имя функции, а "
"второй аргумент \n"
"<code>defun</code> - это аргументы функции, и, как правило, остальное будет "
"телом функции.</p>"

#: in_ed/lispweb3.html:488
msgid ""
"<p>So, it means we just created a function named by <code>say-hello</code> "
"and takes one argument <code>to</code>. When the function is called, it "
"concatenate the value of variable <code>to</code> with string <code>\"Hello, "
"\"</code>, then print them to the standard output. This could be the "
"JavaScript version:</p>"
msgstr ""
"<p>Итак, это означает, что мы только что создали функцию с именем <code>say-"
"hello</code> \n"
"и принимает один аргумент <code>to</code>. Когда функция вызывается, она "
"объединяет значение\n"
"переменной <code>to</code> со строкой <code>\"Hello, \"</code>, а затем "
"выводит их на стандартный\n"
"вывод. Это может быть версия JavaScript: </p>"

#: in_ed/lispweb3.html:496
msgid ""
"<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">//It "
"seems there is no string format function in JavaScript, so...</span>\n"
"<span class=\"pl-k\">function</span> <span class=\"pl-en\">sayHello</"
"span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">to</span><span "
"class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n"
"    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</"
"span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span "
"class=\"pl-s\">\"Hello, ~a\"</span><span class=\"pl-kos\">.</span><span "
"class=\"pl-en\">replace</span><span class=\"pl-kos\">(</span><span class="
"\"pl-s\">\"~a\"</span><span class=\"pl-kos\">,</span><span class=\"pl-"
"s1\">to</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</"
"span><span class=\"pl-kos\">;</span>\n"
"<span class=\"pl-kos\">}</span></pre></div>\n"
"<h4>\n"
"<a name=\"hello-world\" class=\"anchor\" href=\"#hello-world\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Hello World!</h4>"
msgstr ""

#: in_ed/lispweb3.html:498
msgid ""
"<p>Now, you have learned how to program in Common Lisp, but nobody knows "
"except you and me, it's not good.</p>"
msgstr ""
"<p>Теперь вы научились программировать на Common Lisp, но никто, кроме вас и "
"меня \n"
"про это не знает, и это плохо.</p>"

#: in_ed/lispweb3.html:502
msgid "<p>So, let's say hello to the world.</p>"
msgstr "<p>Итак, давайте поздороваемся с миром.</p>"

#: in_ed/lispweb3.html:505
msgctxt "in_ed/lispweb3.html:505"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:507
msgid ""
"<p>If I have seen further, it is by standing on the shoulders of giants.</p>"
msgstr ""
"<p>Если я и видел дальше, то это потому, что я стоял на плечах гигантов.</p>"

#: in_ed/lispweb3.html:510
msgctxt "in_ed/lispweb3.html:510"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:512
msgid "<p>- Isaac Newton</p>"
msgstr ""

#: in_ed/lispweb3.html:516
msgid "<p>Let's meet the giants:</p>"
msgstr "<p>Встречаем гигантов: </p>"

#: in_ed/lispweb3.html:520
msgctxt "in_ed/lispweb3.html:520"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:522
msgid ""
"<p>Go to <a href=\"http://quicklisp.org/\" rel=\"nofollow\">quicklisp.org</"
"a>, follow the <a href=\"https://www.quicklisp.org/beta/#installation\" rel="
"\"nofollow\">installation guide</a> (yes, the paragraph with the dark "
"background, copy and paste and execute all the bold lines in your terminal), "
"install it.</p>"
msgstr ""
"<p>Зайдите на <a href=\"http://quicklisp.org/\" rel=\"nofollow\">quicklisp."
"org</a>, следуйте\n"
"<a href=\"https://www.quicklisp.org/beta/#installation\" rel=\"nofollow"
"\">инструкциям по установке</a>\n"
"(да, абзац с темным фоном, скопируйте и вставьте и выполните все жирные "
"строки в вашем терминале),\n"
"установите его.</p>"

#: in_ed/lispweb3.html:526
msgctxt "in_ed/lispweb3.html:526"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:528
msgid ""
"<p>Open a file, paste code below, then save it as <code>server.lisp</code>:</"
"p>"
msgstr ""
"<p>  Откройте файл, вставьте код ниже и сохраните его как  <code>server."
"lisp</code>:</p>"

#: in_ed/lispweb3.html:536
msgid ""
"</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload :"
"hunchentoot)\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))</pre></div>\n"
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:538
msgctxt "in_ed/lispweb3.html:538"
msgid "<p>Open a terminal, and change to current directory</p>"
msgstr "<p>Откройте терминал и перейдите в текущий каталог</p>"

#: in_ed/lispweb3.html:542
msgctxt "in_ed/lispweb3.html:542"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:544
msgid "<p>Type <code>sbcl --load server.lisp</code>, hit <kbd>Enter</kbd></p>"
msgstr ""
"<p>Наберите <code>sbcl --load server.lisp</code>, и нажмите <kbd>Enter</"
"kbd></p>"

#: in_ed/lispweb3.html:548
msgctxt "in_ed/lispweb3.html:548"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:550
msgid ""
"<p>After loading, use your favourite browser to open this link: <a href="
"\"http://localhost:4242/\" rel=\"nofollow\">http://localhost:4242/</a></p>"
msgstr ""
"<p>После загрузки откройте эту ссылку в своем любимом браузере: <a href="
"\"http://localhost:4242/\" rel=\"nofollow\">http://localhost:4242/</a></p>"

#: in_ed/lispweb3.html:554
msgctxt "in_ed/lispweb3.html:554"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:556
msgid "<p>YOU JUST CREATED A WEBSITE WITH LISP!</p>"
msgstr "<p> ВЫ ПРОСТО СОЗДАЛИ САЙТ С ПОМОЩЬЮ LISP!</p>"

#: in_ed/lispweb3.html:560
msgctxt "in_ed/lispweb3.html:560"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:562
msgid "<p>YOU ARE AWESOME!!!</p>"
msgstr "<p>ВЫ ВЕЛИКОЛЕПНЫ!!!</p>"

#: in_ed/lispweb3.html:566
msgctxt "in_ed/lispweb3.html:566"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:568
msgid ""
"<p>Ok, calm down, let's do something to make people know that it's <em>YOU</"
"em> who created a website with Lisp. Add the code below to your <code>server."
"lisp</code> file:</p>"
msgstr ""
"<p>Хорошо, успокоимся, и давайте сделаем что-нибудь, чтобы люди знали, что "
"это \n"
"<em>ВЫ</em> создали веб-сайт с помощью Lisp. Добавьте приведенный ниже код в "
"свой файл \n"
"<code>server.lisp</code>: </p>"

#: in_ed/lispweb3.html:576
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre> <span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;remeber to change Vito to your name.</"
"span>\n"
"(hunchentoot:define-easy-handler (say-hello :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/hello<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
" (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>text/plain<span class=\"pl-pds\">"
"\"</span></span>)\n"
" (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</span> <span "
"class=\"pl-s\"><span class=\"pl-pds\">\"</span>Hello, ~a! I am Vito! ~%I "
"build a website with Lisp!!!<span class=\"pl-pds\">\"</span></span> name))</"
"pre></div>\n"
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:578
msgid ""
"<p>then click <kbd>Ctrl</kbd> + <kbd>d</kbd> or type <code>(quit)</code> "
"then hit <kbd>Enter</kbd> to quit current REPL.</p>"
msgstr ""
"<p>щелкните <kbd>Ctrl</kbd> + <kbd>d</kbd> или наберите <code>(quit)</code> "
"и нажмите\n"
"<kbd>Enter</kbd> для выхода из текущей REPL.</p>"

#: in_ed/lispweb3.html:582
msgctxt "in_ed/lispweb3.html:582"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:584
msgid ""
"<p>In the terminal, Type <code>sbcl --load server.lisp</code>, hit "
"<kbd>Enter</kbd> , again.</p>"
msgstr ""
"<p>В терминале введите <code>sbcl --load server.lisp</code>, \n"
" и снова нажмите  <kbd>Enter</kbd>.</p>"

#: in_ed/lispweb3.html:588
msgctxt "in_ed/lispweb3.html:588"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:590
msgid ""
"<p>After loading, check here: <a href=\"http://localhost:4242/hello?"
"name=World\" rel=\"nofollow\">http://localhost:4242/hello?name=World</a></p>"
msgstr ""
"<p>После загрузки проверьте здесь: <a href=\"http://localhost:4242/hello?"
"name=World\" rel=\"nofollow\">http://localhost:4242/hello?name=World</a></p>"

#: in_ed/lispweb3.html:594
msgctxt "in_ed/lispweb3.html:594"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:596
msgid ""
"<p>YES, <strong><em>YOU</em></strong> just said hello to the world! WITH "
"<strong><em>LISP</em></strong> !</p>"
msgstr ""
"<p>ДА, <strong><em>ВЫ</em></strong> только что поздоровались с миром! С "
"помощью <strong><em>LISP</em></strong> !</p>"

#: in_ed/lispweb3.html:600
msgctxt "in_ed/lispweb3.html:600"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:602
msgid "<p><strong>What we've done?</strong></p>"
msgstr "<p><strong>Что мы сделали?</strong></p>"

#: in_ed/lispweb3.html:606
msgid "<p>It's not so hard to understand, isn't it?</p>"
msgstr "<p>Это не так уж и сложно понять, не правда ли? </p>"

#: in_ed/lispweb3.html:610
msgid ""
"<p>First, we should thank Quicklisp, it is a library manager for Common "
"Lisp, and it has <a href=\"https://www.quicklisp.org/beta/releases.html\" "
"rel=\"nofollow\">over 1,200 libraries</a>, after install it, you can ride a "
"bike with NO HANDS!</p>"
msgstr ""
"<p>Во-первых, мы должны поблагодарить Quicklisp, это менеджер библиотек для "
"Common Lisp, \n"
"и он имеет  <a href=\"https://www.quicklisp.org/beta/releases.html\" rel="
"\"nofollow\">более 1,200 библиотек</a>, после его установки вы можете ездить "
"на велосипеде БЕЗ РУК!\n"
"</p>"

#: in_ed/lispweb3.html:618
msgid ""
"<p>Second, we should thank <a href=\"http://weitz.de/\" rel=\"nofollow\">Edi "
"Weitz</a>,\n"
" he/she is an extremely awesome and fascinating Lisper on this planet. \n"
"You will meet so many Lisp projects under Edi Weitz's magic hands after \n"
"surfing a while in the Lisp world, and then you will be subdued by the \n"
"charm of the code. Ok, after the words of praise, we just used <a href="
"\"http://weitz.de/hunchentoot/\" rel=\"nofollow\">Hunchentoot</a> <a href="
"\"#fn1\">[1]</a> as the server, it's well documented, you will love it.</p>"
msgstr ""
"<p>Во-вторых, мы должны поблагодарить Эди Вайца, он чрезвычайно крутой и "
"очаровательный \n"
"Лиспер на этой планете. Вы встретите так много проектов Lisp под волшебными "
"руками \n"
"Эди Вейца после того, как некоторое время будете серфить в мире Lisp, и "
"тогда вы будете \n"
"покорены очарованием кода. Хорошо, после слов похвалы, мы просто "
"использовали \n"
"<a href=\"http://weitz.de/hunchentoot/\" rel=\"nofollow\">Hunchentoot</a> <a "
"href=\"#fn1\">[1]</a> \n"
"в качестве сервера, он хорошо задокументирован, вам он понравится.</p>"

#: in_ed/lispweb3.html:622
msgid ""
"<p>We just load <a href=\"http://weitz.de/hunchentoot/\" rel=\"nofollow"
"\">Hunchentoot</a> with Quicklisp, like this: <code>(ql:quickload :"
"hunchentoot)</code>, and then start the Hunchentoot Server on port 4242: "
"<code>(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port "
"4242))</code>. At last, we defined a HTTP handler with Hunchentoot's <a href="
"\"http://weitz.de/hunchentoot/#define-easy-handler\" rel=\"nofollow\">define-"
"easy-handler</a>.</p>"
msgstr ""
"<p>Мы просто загружаем <a href=\"http://weitz.de/hunchentoot/\" rel="
"\"nofollow\">Hunchentoot</a> \n"
"с помощью Quicklisp, например: <code>(ql:quickload :hunchentoot)</code>, а "
"затем запускаем \n"
"сервер Hunchentoot на порту 4242: <code>(hunchentoot:start (make-instance "
"'hunchentoot:easy-acceptor :port 4242))</code>. Наконец, мы определили "
"обработчик HTTP с помощью Hunchentoot's \n"
"<a href=\"http://weitz.de/hunchentoot/#define-easy-handler\" rel=\"nofollow"
"\">define-easy-handler</a>.\n"
"</p>"

#: in_ed/lispweb3.html:626
msgid ""
"<p>For further usage about Hunchentoot, you'll find them in the <a href="
"\"http://weitz.de/hunchentoot\" rel=\"nofollow\">document</a>.</p>"
msgstr ""
"<p>Для дальнейшего использования информацию о Hunchentoot вы найдете в "
"этом \n"
"<a href=\"http://weitz.de/hunchentoot\" rel=\"nofollow\">документе</a>. </p>"

#: in_ed/lispweb3.html:630
msgid ""
"<h4>\n"
"<a name=\"lets-be-json\" class=\"anchor\" href=\"#lets-be-json\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Let's Be JSON</h4>"
msgstr ""
"<h4>\n"
"<a name=\"lets-be-json\" class=\"anchor\" href=\"#lets-be-json\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Давайте будем JSON</h4>"

#: in_ed/lispweb3.html:632
msgid ""
"<p>Yes yes, I know I know. The Front Team won't be happy if we give them "
"plain text response, they all like <a href=\"http://json.org/\" rel="
"\"nofollow\">JSON</a>.</p>"
msgstr ""
"<p>Да да, знаю, знаю. Команда Front Team не обрадуется, если мы дадим им "
"простой \n"
"текстовый ответ, им всем нравится <a href=\"http://json.org/\" rel=\"nofollow"
"\">JSON</a>.</p>"

#: in_ed/lispweb3.html:636
msgid "<p>So, how to do it in Common Lisp?</p>"
msgstr "<p>Итак, как это сделать в Common Lisp?</p>"

#: in_ed/lispweb3.html:675
msgid ""
"<ul>\n"
"<li>Open a file, paste code below, then save it as <code>json-server.lisp</"
"code>:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json))\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create a class called "
"people.</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;What? CLASS!!??</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Yes, it is a class. Lisp "
"is not just a Functional Programming Language.</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Remember? it's a building "
"material!!</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make a people.</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-en\">me</span>\n"
"  (make-instance 'people\n"
"                 :name <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>Vito Van<span class=\"pl-pds\">\"</span></span>\n"
"                 :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>Lisp<span class=\"pl-pds\">\"</span></span>\n"
"                 :bio <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I "
"have no job, I'm dying. Someone hire me, I can eat.<span class=\"pl-pds\">"
"\"</span></span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Send me to the world, in "
"JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-me :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/me<span class=\"pl-pds\">\"</span></span>) ()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string me))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-instance\n"
"    'people\n"
"    :name name\n"
"    :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"    :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name))))</pre></div>\n"
"<ul>\n"
"<li>"
msgstr ""
"<ul>\n"
"<li>Откройте файл, вставьте код ниже, затем сохраните его как  <code>json-"
"server.lisp</code>:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json))\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create a class called "
"people.</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;What? CLASS!!??</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Yes, it is a class. Lisp "
"is not just a Functional Programming Language.</span>\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Remember? it's a building "
"material!!</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make a people.</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-en\">me</span>\n"
"  (make-instance 'people\n"
"                 :name <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>Vito Van<span class=\"pl-pds\">\"</span></span>\n"
"                 :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>Lisp<span class=\"pl-pds\">\"</span></span>\n"
"                 :bio <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I "
"have no job, I'm dying. Someone hire me, I can eat.<span class=\"pl-pds\">"
"\"</span></span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Send me to the world, in "
"JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-me :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/me<span class=\"pl-pds\">\"</span></span>) ()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string me))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-instance\n"
"    'people\n"
"    :name name\n"
"    :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"    :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name))))</pre></div>\n"
"<ul>\n"
"<li>"

#: in_ed/lispweb3.html:677
msgid ""
"<p>Quit all the other REPLs, then load the file <code>sbcl --load json-"
"server.lisp</code>!</p>"
msgstr ""
"<p>Закройте все остальные REPL, затем загрузите файл <code>sbcl --load json-"
"server.lisp</code>!</p>"

#: in_ed/lispweb3.html:681
msgctxt "in_ed/lispweb3.html:681"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:683
msgid ""
"<p>Check here: <a href=\"http://localhost:4242/me\" rel=\"nofollow\">http://"
"localhost:4242/me</a>, and here: <a href=\"http://localhost:4242/you?"
"name=Jack\" rel=\"nofollow\">http://localhost:4242/you?name=Jack</a></p>"
msgstr ""
"<p>Проверьте здесь: <a href=\"http://localhost:4242/me\" rel=\"nofollow"
"\">http://localhost:4242/me</a>, and here: <a href=\"http://localhost:4242/"
"you?name=Jack\" rel=\"nofollow\">http://localhost:4242/you?name=Jack</a></p>"

#: in_ed/lispweb3.html:687
msgctxt "in_ed/lispweb3.html:687"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:689
msgid "<p>Yes, you have done it! Look ma, it's JSON!</p>"
msgstr "<p>Да, вы это сделали! Смотри, мама, это JSON!</p>"

#: in_ed/lispweb3.html:695
msgid ""
"<p>For now, I don't think you need explains in detail anymore. We just \n"
"created a class, made some instance of it, and encoded it to JSON, then \n"
"send back to the browser. Here are documents about <code>defclass</code> and "
"<code>cl-json</code>:</p>"
msgstr ""
"<p>На данный момент я не думаю, что вам больше нужно объяснять "
"подробности. \n"
"Мы просто создали класс, сделали его экземпляр и закодировали в JSON, а "
"затем \n"
"отправили обратно в браузер. Вот документы о  <code>defclass</code> и "
"<code>cl-json</code>:</p>"

#: in_ed/lispweb3.html:699
msgctxt "in_ed/lispweb3.html:699"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:701
msgid ""
"<p><a href=\"http://clhs.lisp.se/Body/m_defcla.htm\" rel=\"nofollow\">CLHS: "
"Macro DEFCLASS</a> and <a href=\"http://www.gigamonkeys.com/book/object-"
"reorientation-classes.html\" rel=\"nofollow\">Object Reorientation: Classes</"
"a></p>"
msgstr ""
"<p><a href=\"http://clhs.lisp.se/Body/m_defcla.htm\" rel=\"nofollow\">CLHS: "
"Macro DEFCLASS</a> и <a href=\"http://www.gigamonkeys.com/book/object-"
"reorientation-classes.html\" rel=\"nofollow\">Object Reorientation: Classes</"
"a></p>"

#: in_ed/lispweb3.html:705
msgctxt "in_ed/lispweb3.html:705"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:707
msgid ""
"<p><a href=\"https://common-lisp.net/project/cl-json/\" rel=\"nofollow\">CL-"
"JSON</a></p>"
msgstr ""

#: in_ed/lispweb3.html:713
msgid ""
"</li>\n"
"</ul>\n"
"<h4>\n"
"<a name=\"data-storage\" class=\"anchor\" href=\"#data-storage\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Data Storage</h4>"
msgstr ""
"</li>\n"
"</ul>\n"
"<h4>\n"
"<a name=\"data-storage\" class=\"anchor\" href=\"#data-storage\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Хранилище данных</h4>"

#: in_ed/lispweb3.html:715
msgid "<p>Where we are now?</p>"
msgstr ""
"<p>Где мы сейчас находимся?\n"
"</p>"

#: in_ed/lispweb3.html:719
msgid ""
"<p>We've made a <strong><code>Server with JSON output</code></strong>, it's "
"a big deal. But, we never store any data yet. So, let's give him/her a shot "
"who ever visit <a href=\"http://localhost:4242/you?name=Jack\" rel=\"nofollow"
"\">http://localhost:4242/you?name=Jack</a>.</p>"
msgstr ""
"<p>Мы сделали <strong><code>Сервер с выводом JSON</code></strong>, это "
"большое дело. \n"
"Но мы еще никогда не хранили никаких данных. Итак, давайте дадим ему шанс, "
"кто \n"
"когда-либо посещал  <a href=\"http://localhost:4242/you?name=Jack\" rel="
"\"nofollow\">http://localhost:4242/you?name=Jack</a>.</p>"

#: in_ed/lispweb3.html:723
msgid "<p>Here is the original code for that request:</p>"
msgstr "<p>Вот исходный код этого запроса: </p>"

#: in_ed/lispweb3.html:734
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Dynamic build a people, and response back "
"in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-instance\n"
"    'people\n"
"    :name name\n"
"    :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"    :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name))))</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:736
msgid "<p>We could let's make it better:</p>"
msgstr "<p>Мы могли бы сделать это лучше: </p>"

#: in_ed/lispweb3.html:755
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Store the people instance</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">store-people</span> "
"(people)\n"
"  (á§â¢ people â¢)\n"
"  people)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make a people instance by "
"name</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">make-people</span> "
"(name)\n"
"  (make-instance\n"
"   'people\n"
"   :name name\n"
"   :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"   :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (store-people\n"
"    (make-people name))))</pre></div>"
msgstr ""
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Store the people instance</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">store-people</span> "
"(people)\n"
"  ((ᗧ• people •))\n"
"  people)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make a people instance by "
"name</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">make-people</span> "
"(name)\n"
"  (make-instance\n"
"   'people\n"
"   :name name\n"
"   :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"   :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (store-people\n"
"    (make-people name))))</pre></div>"

#: in_ed/lispweb3.html:757
msgid ""
"<p>We just added a function <code>make-people</code>, it makes the code "
"concise. And we know that Pac Man in the code won't really work, let's fix "
"it.</p>"
msgstr ""
"<p>Мы просто добавили функцию <code>make-people</code>, она делает код "
"лаконичным. \n"
"И мы знаем, что Pac Man в коде толком не сработает, давайте исправим.</p>"

#: in_ed/lispweb3.html:761
msgid ""
"<p>What's the common sence for storing data? Database Products, yes. But we "
"won't use database today, because:</p>"
msgstr ""
"<p>Каков общий смысл хранения данных? Продукты баз данных, да. Но сегодня мы "
"не будем использовать\n"
"базу данных, потому что:</p>"

#: in_ed/lispweb3.html:765
msgctxt "in_ed/lispweb3.html:765"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:767
msgid "<p>It's not cool, everybody is using it.</p>"
msgstr "<p>Это не круто, все ими пользуются.</p>"

#: in_ed/lispweb3.html:771
msgctxt "in_ed/lispweb3.html:771"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:773
msgid ""
"<p>It's complicated, we have to learn how to use a Database Product.</p>"
msgstr ""
"<p>Это сложно, мы должны научиться использовать продукт базы данных.</p>"

#: in_ed/lispweb3.html:777
msgctxt "in_ed/lispweb3.html:777"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:779
msgid "<p>I have the data in the memory, why not just make it AS IS?</p>"
msgstr ""
"<p> У меня есть данные в памяти, почему бы просто не сделать их КАК ЕСТЬ?</p>"

#: in_ed/lispweb3.html:783
msgctxt "in_ed/lispweb3.html:783"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:785
msgid "<p>So, we could do it like this:</p>"
msgstr "<p>Итак, мы могли бы сделать это так: </p>"

#: in_ed/lispweb3.html:792
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defvar</span> <span class=\"pl-smi\">*people-list*</span> <span class="
"\"pl-c1\">nil</span>)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Store the people "
"instance</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">store-people</span> "
"(people)\n"
"  (push people <span class=\"pl-smi\">*people-list*</span>)\n"
"  people)</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:794
msgid ""
"<p>Yes! We just store the people in the variable <code>*people-list*</code>! "
"How to send the people list to browser?</p>"
msgstr ""
"<p>Да! Мы просто сохраняем людей в переменной <code>*people-list*</code>! "
"Как отправить список людей в браузер? </p>"

#: in_ed/lispweb3.html:800
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(hunchentoot:define-easy-"
"handler (people :uri <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>/"
"people<span class=\"pl-pds\">\"</span></span>) (name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   <span class=\"pl-smi\">*people-list*</span>))</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:802
msgid "<p>Here is the minimal part to test out memory storage:</p>"
msgstr "<p>Вот минимальная часть для проверки памяти: </p>"

#: in_ed/lispweb3.html:837
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json))\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create a class called "
"people.</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Define a list</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-smi\">*people-list*</"
"span> <span class=\"pl-c1\">nil</span>)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Store the people "
"instance</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">store-people</span> "
"(people)\n"
"  (push people <span class=\"pl-smi\">*people-list*</span>)\n"
"  people)\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make a people instance by "
"name</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">make-people</span> "
"(name)\n"
"  (make-instance\n"
"   'people\n"
"   :name name\n"
"   :language <span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>\n"
"   :bio (<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (store-people\n"
"    (make-people name))))\n"
"(hunchentoot:define-easy-handler (people :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/people<span class=\"pl-pds\">\"</span></span>) "
"()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   <span class=\"pl-smi\">*people-list*</span>))</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:839
msgid ""
"<p>You can save the code above to file <code>storage-server.lisp</code>, and "
"then loaded with <code>sbcl --load storage-server.lisp</code> (remember to "
"quit all the other REPLs to avoid port number conflicts).</p>"
msgstr ""
"<p>Вы можете сохранить приведенный выше код в файл <code>storage-server."
"lisp</code>, а \n"
"затем загрузить его с помощью <code>sbcl --load storage-server.lisp</code> "
"(не забудьте \n"
"закрыть все остальные REPL, чтобы избежать конфликтов номеров портов).</p>"

#: in_ed/lispweb3.html:843
msgid ""
"<p>Then click these links first: <a href=\"http://localhost:4242/you?"
"name=Jack\" rel=\"nofollow\">Jack</a>, <a href=\"http://localhost:4242/you?"
"name=Tyler\" rel=\"nofollow\">Tyler</a>, <a href=\"http://localhost:4242/you?"
"name=Marla\" rel=\"nofollow\">Marla</a>.</p>"
msgstr ""
"<p>Затем сначала щелкните эти ссылки: <a href=\"http://localhost:4242/you?"
"name=Jack\" rel=\"nofollow\">Jack</a>, <a href=\"http://localhost:4242/you?"
"name=Tyler\" rel=\"nofollow\">Tyler</a>, <a href=\"http://localhost:4242/you?"
"name=Marla\" rel=\"nofollow\">Marla</a>.</p>"

#: in_ed/lispweb3.html:847
msgctxt "in_ed/lispweb3.html:847"
msgid ""
"<p>And then check here to see if they are stored: <a href=\"http://"
"localhost:4242/people\" rel=\"nofollow\">http://localhost:4242/people</a>.</"
"p>"
msgstr ""
"<p>А затем проверьте здесь, сохранены ли они: <a href=\"http://"
"localhost:4242/people\" rel=\"nofollow\">http://localhost:4242/people</a>.</"
"p>"

#: in_ed/lispweb3.html:851
msgid "<p>What happend? It just works.</p>"
msgstr "<p>Что случилось? Это просто работает. </p>"

#: in_ed/lispweb3.html:855
msgid "<p><strong>What? You wanna store them into the disk?</strong></p>"
msgstr "<p><strong>Какие данные? Вы хотите сохранить их на диске?</strong></p>"

#: in_ed/lispweb3.html:859
msgid ""
"<p>Since we decide not to use a Database Product, then how to store the data "
"to the disk and restore them easily? Let's try <a href=\"http://hillside.net/"
"sugarloafplop/papers/5.pdf\" rel=\"nofollow\">OBJECT PREVALENCE</a>, it "
"means we are going to take a snapshot on current memory and save it as a "
"file, then restore them anytime.</p>"
msgstr ""
"<p>SЕсли мы решили не использовать продукт базы данных, то как сохранить "
"данные на диск \n"
"и легко их восстановить? Давайте попробуем <a href=\"http://hillside.net/"
"sugarloafplop/papers/5.pdf\" rel=\"nofollow\">OBJECT PREVALENCE</a>, это "
"означает, что мы собираемся сделать снимок \n"
"текущей памяти и сохранить его как файл, а затем восстановить их в любое "
"время.</p>"

#: in_ed/lispweb3.html:863
msgid ""
"<p>Of course we can build our own implementation, but thank to [Sven Van "
"Caekenberghe](<a href=\"http://www.cliki.net/Sven\" rel=\"nofollow\">http://"
"www.cliki.net/Sven</a> Van Caekenberghe), we can use <a href=\"https://"
"common-lisp.net/project/cl-prevalence/\" rel=\"nofollow\">CL-PREVALENCE</a>. "
"It's not very well documented as <a href=\"http://weitz.de/hunchentoot/\" "
"rel=\"nofollow\">Hunchentoot</a>, but we have the <a href=\"https://common-"
"lisp.net/project/cl-prevalence/CL-PREVALENCE.html\" rel=\"nofollow\">API</a> "
"and the source code, do we?</p>"
msgstr ""
"<p>Конечно, мы можем создать нашу собственную реализацию, но благодаря \n"
"[Sven Van Caekenberghe] (http://www.cliki.net/Sven Van Caekenberghe) мы "
"можем использовать \n"
"<a href=\"https://common-lisp.net/project/cl-prevalence/\" rel=\"nofollow"
"\">CL-PREVALENCE</a>. \n"
"Он не очень хорошо документирован как <a href=\"http://weitz.de/hunchentoot/"
"\" rel=\"nofollow\">Hunchentoot</a>, но у нас есть <a href=\"https://common-"
"lisp.net/project/cl-prevalence/CL-PREVALENCE.html\" rel=\"nofollow\">API</a> "
"и исходный код, не так ли?</p>"

#: in_ed/lispweb3.html:900
msgid ""
"<ul>\n"
"<li>First, add <code>cl-prevalence</code> to your quicklisp load list:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json cl-prevalence))</pre></div>\n"
"<ul>\n"
"<li>Then initialize your prevalence system (we should define the class first "
"for prevalence system to use):</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;We add \"id\" to the people class, the "
"prevalence system will need it.</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((id :reader id\n"
"       :initarg :id)\n"
"   (name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Init the system</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-smi\">*p-system*</span> "
"(cl-prevalence:make-prevalence-system <span class=\"pl-c1\">#p\"./p-system/"
"\"</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create counter if not "
"exists</span>\n"
"(<span class=\"pl-k\">or</span> (&gt; (length (cl-prevalence:find-all-"
"objects <span class=\"pl-smi\">*p-system*</span> 'people)) <span class=\"pl-"
"c1\">0</span>)\n"
"\t(cl-prevalence:tx-create-id-counter <span class=\"pl-smi\">*p-system*</"
"span>))</pre></div>\n"
"<ul>\n"
"<li>Modify the original function <code>make-people</code>\n"
"</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defun</span> <span class=\"pl-en\">make-people</span> (name)\n"
"  (cl-prevalence:tx-create-object\n"
"   <span class=\"pl-smi\">*p-system*</span>\n"
"   'people\n"
"   `((name ,name)\n"
"     (language ,<span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>)\n"
"     (bio ,(<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))))</pre></div>\n"
"<ul>\n"
"<li>"
msgstr ""
"<ul>\n"
"<li>Во-первых, добавьте <code>cl-prevalence</code> в список загрузки "
"quicklisp:</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json cl-prevalence))</pre></div>\n"
"<ul>\n"
"<li>Затем инициализируйте вашу систему prevalence(распространенности) (мы "
"должны сначала\n"
"определить класс, который будет использоваться системой "
"prevalence(распространенности)): </li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;We add \"id\" to the people class, the "
"prevalence system will need it.</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((id :reader id\n"
"       :initarg :id)\n"
"   (name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Init the system</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-smi\">*p-system*</span> "
"(cl-prevalence:make-prevalence-system <span class=\"pl-c1\">#p\"./p-system/"
"\"</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create counter if not "
"exists</span>\n"
"(<span class=\"pl-k\">or</span> (&gt; (length (cl-prevalence:find-all-"
"objects <span class=\"pl-smi\">*p-system*</span> 'people)) <span class=\"pl-"
"c1\">0</span>)\n"
"\t(cl-prevalence:tx-create-id-counter <span class=\"pl-smi\">*p-system*</"
"span>))</pre></div>\n"
"<ul>\n"
"<li>Измените исходную функцию <code>make-people</code>\n"
"</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(<span class=\"pl-k"
"\">defun</span> <span class=\"pl-en\">make-people</span> (name)\n"
"  (cl-prevalence:tx-create-object\n"
"   <span class=\"pl-smi\">*p-system*</span>\n"
"   'people\n"
"   `((name ,name)\n"
"     (language ,<span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>)\n"
"     (bio ,(<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))))</pre></div>\n"
"<ul>\n"
"<li>"

#: in_ed/lispweb3.html:902
msgid ""
"<p>Delete function <code>store-people</code> and varible <code>*people-"
"list*</code>, because the data is automatically stored into the prevalence "
"system when we call <code>make-people</code>.</p>"
msgstr ""
"<p>Удалите функцию <code>store-people</code> и переменную <code>*people-"
"list*</code>, \n"
"потому что данные автоматически сохраняются в системе prevalence, когда мы "
"вызываем \n"
"<code>make-people</code>.</p>"

#: in_ed/lispweb3.html:906
msgctxt "in_ed/lispweb3.html:906"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:908
msgid "<p>Modify our controllers</p>"
msgstr "<p>Измените наши контроллеры </p>"

#: in_ed/lispweb3.html:963
msgid ""
"</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Dynamic build a people, and response back "
"in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-people name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Get all the people in our "
"prevalence system</span>\n"
"(hunchentoot:define-easy-handler (people :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/people<span class=\"pl-pds\">\"</span></span>) "
"()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (cl-prevalence:find-all-objects <span class=\"pl-smi\">*p-system*</span> "
"'people)))</pre></div>\n"
"<ul>\n"
"<li>And finally, we got this</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json cl-prevalence))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create a class called "
"people.</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((id :reader id\n"
"       :initarg :id)\n"
"   (name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Init the system</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-smi\">*p-system*</span> "
"(cl-prevalence:make-prevalence-system <span class=\"pl-c1\">#p\"./p-system/"
"\"</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create counter if not "
"exists</span>\n"
"(<span class=\"pl-k\">or</span> (&gt; (length (cl-prevalence:find-all-"
"objects <span class=\"pl-smi\">*p-system*</span> 'people)) <span class=\"pl-"
"c1\">0</span>)\n"
"    (cl-prevalence:tx-create-id-counter <span class=\"pl-smi\">*p-system*</"
"span>))\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make and sotre a people "
"instance by name</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">make-people</span> "
"(name)\n"
"  (cl-prevalence:tx-create-object\n"
"   <span class=\"pl-smi\">*p-system*</span>\n"
"   'people\n"
"   `((name ,name)\n"
"     (language ,<span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>)\n"
"     (bio ,(<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-people name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Get all the people in our "
"prevalence system</span>\n"
"(hunchentoot:define-easy-handler (people :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/people<span class=\"pl-pds\">\"</span></span>) "
"()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (cl-prevalence:find-all-objects <span class=\"pl-smi\">*p-system*</span> "
"'people)))</pre></div>\n"
"<ul>\n"
"<li>Save the code above to file <code>p-storage-server.lisp</code>, and then "
"loaded with <code>sbcl --load p-storage-server.lisp</code> (remember to quit "
"all the other REPLs to avoid port number conflicts).</li>\n"
"</ul>"
msgstr ""
"</li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre><span class=\"pl-c"
"\"><span class=\"pl-c\">;</span>;Dynamic build a people, and response back "
"in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-people name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Get all the people in our "
"prevalence system</span>\n"
"(hunchentoot:define-easy-handler (people :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/people<span class=\"pl-pds\">\"</span></span>) "
"()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (cl-prevalence:find-all-objects <span class=\"pl-smi\">*p-system*</span> "
"'people)))</pre></div>\n"
"<ul>\n"
"<li>И наконец мы получили вот это </li>\n"
"</ul>\n"
"<div class=\"highlight highlight-source-lisp\"><pre>(ql:quickload "
"'(hunchentoot cl-json cl-prevalence))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create a class called "
"people.</span>\n"
"(<span class=\"pl-k\">defclass</span> <span class=\"pl-en\">people</span>()\n"
"  ((id :reader id\n"
"       :initarg :id)\n"
"   (name :accessor name\n"
"         :initarg :name)\n"
"   (language :accessor language\n"
"             :initarg :language)\n"
"   (bio :accessor bio\n"
"        :initarg :bio)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Init the system</span>\n"
"(<span class=\"pl-k\">defvar</span> <span class=\"pl-smi\">*p-system*</span> "
"(cl-prevalence:make-prevalence-system <span class=\"pl-c1\">#p\"./p-system/"
"\"</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Create counter if not "
"exists</span>\n"
"(<span class=\"pl-k\">or</span> (&gt; (length (cl-prevalence:find-all-"
"objects <span class=\"pl-smi\">*p-system*</span> 'people)) <span class=\"pl-"
"c1\">0</span>)\n"
"    (cl-prevalence:tx-create-id-counter <span class=\"pl-smi\">*p-system*</"
"span>))\n"
"(hunchentoot:start (make-instance 'hunchentoot:easy-acceptor :port <span "
"class=\"pl-c1\">4242</span>))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Make and sotre a people "
"instance by name</span>\n"
"(<span class=\"pl-k\">defun</span> <span class=\"pl-en\">make-people</span> "
"(name)\n"
"  (cl-prevalence:tx-create-object\n"
"   <span class=\"pl-smi\">*p-system*</span>\n"
"   'people\n"
"   `((name ,name)\n"
"     (language ,<span class=\"pl-s\"><span class=\"pl-pds\">\"</"
"span>English<span class=\"pl-pds\">\"</span></span>)\n"
"     (bio ,(<span class=\"pl-c1\">format</span> <span class=\"pl-c1\">nil</"
"span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>I am ~a's colon. "
"I get cancer, I kill ~a. <span class=\"pl-pds\">\"</span></span> name "
"name)))))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Dynamic build a people, "
"and response back in JSON.</span>\n"
"(hunchentoot:define-easy-handler (say-you :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/you<span class=\"pl-pds\">\"</span></span>) "
"(name)\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (make-people name)))\n"
"<span class=\"pl-c\"><span class=\"pl-c\">;</span>;Get all the people in our "
"prevalence system</span>\n"
"(hunchentoot:define-easy-handler (people :uri <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>/people<span class=\"pl-pds\">\"</span></span>) "
"()\n"
"  (<span class=\"pl-c1\">setf</span> (hunchentoot:content-type*) <span class="
"\"pl-s\"><span class=\"pl-pds\">\"</span>application/json<span class=\"pl-pds"
"\">\"</span></span>)\n"
"  (json:encode-json-to-string\n"
"   (cl-prevalence:find-all-objects <span class=\"pl-smi\">*p-system*</span> "
"'people)))</pre></div>\n"
"<ul>\n"
"<li>Save the code above to file <code>p-storage-server.lisp</code>, and then "
"loaded with <code>sbcl --load p-storage-server.lisp</code> (remember to quit "
"all the other REPLs to avoid port number conflicts).</li>\n"
"</ul>"

#: in_ed/lispweb3.html:965
msgid ""
"<p>Then click these links first: [Robert Paulson](<a href=\"http://"
"localhost:4242/you?name=Robert\" rel=\"nofollow\">http://localhost:4242/you?"
"name=Robert</a> Paulson), <a href=\"http://localhost:4242/you?name=Tyler\" "
"rel=\"nofollow\">Tyler</a>, <a href=\"http://localhost:4242/you?name=Jack\" "
"rel=\"nofollow\">Jack</a>, <a href=\"http://localhost:4242/you?name=Lou\" "
"rel=\"nofollow\">Lou</a>.</p>"
msgstr ""
"<p>Затем сначала щелкните эти ссылки: [Robert Paulson](<a href=\"http://"
"localhost:4242/you?name=Robert\" rel=\"nofollow\">http://localhost:4242/you?"
"name=Robert</a> Paulson), <a href=\"http://localhost:4242/you?name=Tyler\" "
"rel=\"nofollow\">Tyler</a>, <a href=\"http://localhost:4242/you?name=Jack\" "
"rel=\"nofollow\">Jack</a>, <a href=\"http://localhost:4242/you?name=Lou\" "
"rel=\"nofollow\">Lou</a>.</p>"

#: in_ed/lispweb3.html:969
msgctxt "in_ed/lispweb3.html:969"
msgid ""
"<p>And then check here to see if they are stored: <a href=\"http://"
"localhost:4242/people\" rel=\"nofollow\">http://localhost:4242/people</a>.</"
"p>"
msgstr ""
"<p>А затем проверьте здесь, сохранены ли они: <a href=\"http://"
"localhost:4242/people\" rel=\"nofollow\">http://localhost:4242/people</a>.</"
"p>"

#: in_ed/lispweb3.html:973
msgid "<p>What happend? It just works as the <code>*people-list*</code>.</p>"
msgstr ""
"<p>Что случилось? Он просто работает как  <code>*people-list*</code>.</p>"

#: in_ed/lispweb3.html:977
msgid "<p><strong>To witness the miracle</strong></p>"
msgstr "<p><strong>Чтобы стать свидетелем чуда</strong></p>"

#: in_ed/lispweb3.html:981
msgid ""
"<p>Now, type <code>(cl-prevalence:snapshot *p-system*)</code> in your REPL, "
"hit <kbd>Enter</kbd>.</p>"
msgstr ""
"<p>Сейчас, наберите <code>(cl-prevalence:snapshot *p-system*)</code> в вашем "
"REPL, и \n"
"нажмите <kbd>Enter</kbd>.</p>"

#: in_ed/lispweb3.html:985
msgid ""
"<p>Then, quit all your REPLs and close all the tabs in your browser (except "
"this one).</p>"
msgstr ""
"<p>Затем закройте все REPL и закройте все вкладки в браузере (кроме этой).</"
"p>"

#: in_ed/lispweb3.html:989
msgid ""
"<p>Reload your code: <code>sbcl --load p-storage-server.lisp</code>, then "
"review the page: <a href=\"http://localhost:4242/people\" rel=\"nofollow"
"\">http://localhost:4242/people</a>.</p>"
msgstr ""
"<p>Перезагрузите код: <code>sbcl --load p-storage-server.lisp</code>, затем "
"просмотрите страницу:\n"
"<a href=\"http://localhost:4242/people\" rel=\"nofollow\">http://"
"localhost:4242/people</a>.</p>"

#: in_ed/lispweb3.html:993
msgid ""
"<p>Do you see Tyler? The CL-PREVALENCE automatically loaded the snapshot for "
"us, we don't even noticed.</p>"
msgstr ""
"<p>Вы видите Тайлера? CL-PREVALENCE автоматически загрузил снимок для нас, "
"мы даже не заметили</p>"

#: in_ed/lispweb3.html:997
msgid ""
"<h4>\n"
"<a name=\"modern-client\" class=\"anchor\" href=\"#modern-client\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Modern Client</h4>"
msgstr ""
"<h4>\n"
"<a name=\"modern-client\" class=\"anchor\" href=\"#modern-client\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Современный клиент</h4>"

#: in_ed/lispweb3.html:999
msgid ""
"<p>I've create a single file as client, you can <a href=\"https://vitovan."
"com/lispweb3/lispweb3-client.htm\">download</a> and modify it, it's just the "
"mix of HTML / JavaScript and CSS.</p>"
msgstr ""
"<p>Я создал один файл в качестве клиента, вы можете <a href=\"https://"
"vitovan.com/lispweb3/lispweb3-client.htm\">загрузить</a> и изменить его, это "
"просто смесь HTML / JavaScript и CSS.\n"
"</p>"

#: in_ed/lispweb3.html:1003
msgid "<p><strong>Then what's left?</strong></p>"
msgstr "<p><strong>Тогда что осталось?</strong></p>"

#: in_ed/lispweb3.html:1007
msgid ""
"<p>We need to serve this file, let's check the <a href=\"http://weitz.de/"
"hunchentoot/#start\" rel=\"nofollow\">document of Hunchentoot</a>. Here we "
"can see:</p>"
msgstr ""
"<p>Нам нужно обслужить этот файл, давайте проверим <a href=\"http://weitz.de/"
"hunchentoot/#start\" rel=\"nofollow\">документ Hunchentoot</a>. Здесь мы "
"видим:</p>"

#: in_ed/lispweb3.html:1010
msgctxt "in_ed/lispweb3.html:1010"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:1014
msgid ""
"<p>...... The location of the document root directory can be specified \n"
"when creating a new ACCEPTOR instance by the way of the \n"
"ACCEPTOR-DOCUMENT-ROOT. . ......</p>"
msgstr ""

#: in_ed/lispweb3.html:1017
msgctxt "in_ed/lispweb3.html:1017"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:1019
msgid ""
"<p>- <a href=\"http://weitz.de/hunchentoot/\" rel=\"nofollow\">Hunchentoot</"
"a></p>"
msgstr ""

#: in_ed/lispweb3.html:1023
msgid ""
"<p>So what we should do is just create a directory called <code>www</code> "
"in the same level of <code>p-storage-server.lisp</code>, and then get the "
"HTM file into it:</p>"
msgstr ""
"<p>Итак, что нам нужно сделать, это просто создать каталог с именем "
"<code>www</code> на \n"
"том же уровне <code>p-storage-server.lisp</code>, а затем загрузить в него "
"файл HTM: </p>"

#: in_ed/lispweb3.html:1026
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>wget -P www https://"
"vitovan.com/lispweb3/lispweb3-client.htm</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:1028
msgid "<p>Then change:</p>"
msgstr "<p>Затем измените: </p>"

#: in_ed/lispweb3.html:1031
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(hunchentoot:start (make-"
"instance 'hunchentoot:easy-acceptor :port <span class=\"pl-c1\">4242</"
"span>))</pre></div>"
msgstr ""

#: in_ed/lispweb3.html:1033
msgid "<p>To this:</p>"
msgstr "<p>На это:</p>"

#: in_ed/lispweb3.html:1037
msgid ""
"<div class=\"highlight highlight-source-lisp\"><pre>(hunchentoot:start (make-"
"instance 'hunchentoot:easy-acceptor :port <span class=\"pl-c1\">4242</span>\n"
"                                  :document-root <span class=\"pl-s\"><span "
"class=\"pl-pds\">\"</span>www/<span class=\"pl-pds\">\"</span></span>))</"
"pre></div>"
msgstr ""

#: in_ed/lispweb3.html:1039
msgid ""
"<p>Then Hunchentoot will use the \"www/\" in current folder as root "
"directory, now try to reload our code.</p>"
msgstr ""
"<p>Тогда Hunchentoot будет использовать \"www/\" в текущей папке в качестве "
"корневого каталога,\n"
"теперь попробуйте перезагрузить наш код.</p>"

#: in_ed/lispweb3.html:1043
msgid ""
"<p>Then visit: <a href=\"http://localhost:4242/lispweb3-client.htm\" rel="
"\"nofollow\">http://localhost:4242/lispweb3-client.htm</a>, you got what you "
"want.</p>"
msgstr ""
"<p>Затем посетите: <a href=\"http://localhost:4242/lispweb3-client.htm\" rel="
"\"nofollow\">http://localhost:4242/lispweb3-client.htm</a>, вы получили то, "
"что хотите.</p>"

#: in_ed/lispweb3.html:1047
msgid ""
"<p>Suggestion: You do not really wanna use Hunchentoot to serve your static "
"files, do you? You should try <a href=\"https://www.nginx.com/\" rel="
"\"nofollow\">Nginx</a> as a <a href=\"https://www.nginx.com/resources/admin-"
"guide/reverse-proxy/\" rel=\"nofollow\">PROXY</a>, and make your Hunchentoot "
"as an application server only.</p>"
msgstr ""
"<p>Предложение: вы действительно не хотите использовать Hunchentoot для "
"обслуживания ваших\n"
"статических файлов, не так ли? Вам следует попробовать <a href=\"https://www."
"nginx.com/\" rel=\"nofollow\">Nginx</a> как <a href=\"https://www.nginx.com/"
"resources/admin-guide/reverse-proxy/\" rel=\"nofollow\">PROXY</a> и сделать "
"свой Hunchentoot только сервером приложений. </p>"

#: in_ed/lispweb3.html:1051
msgid ""
"<h3>\n"
"<a name=\"before-the-end\" class=\"anchor\" href=\"#before-the-end\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Before the End</h3>"
msgstr ""
"<h3>\n"
"<a name=\"before-the-end\" class=\"anchor\" href=\"#before-the-end\" aria-"
"hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></"
"span></a>Перед тем как закончить</h3>"

#: in_ed/lispweb3.html:1053
msgid ""
"<p>I have to say that I lied to you about the way we do when coding in "
"Common Lisp for convenience of explanation.</p>"
msgstr ""
"<p>Я должен сказать, что солгал вам о том, как мы делаем кодирование на "
"Common Lisp для \n"
"удобства объяснения.</p>"

#: in_ed/lispweb3.html:1057
msgctxt "in_ed/lispweb3.html:1057"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:1059
msgid ""
"<p>We do not usually load file like this <code>sbcl --load xxx.lisp</code>. "
"We directly type and eval in the REPL, that's the charming part of Lisp.</p>"
msgstr ""
"<p>Обычно мы не загружаем такой файл <code>sbcl --load xxx.lisp</code>. Мы "
"непосредственно \n"
"вводим и вычисляем в REPL, это очаровательная часть Lisp.</p>"

#: in_ed/lispweb3.html:1063
msgctxt "in_ed/lispweb3.html:1063"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:1065
msgid ""
"<p>We do not usually directly type and eval in the REPL created by "
"<code>sbcl</code>, it hurts. You should try <a href=\"https://www.common-"
"lisp.net/project/slime/\" rel=\"nofollow\">SLIME</a>, it makes life much "
"more easier.</p>"
msgstr ""
"<p>Обычно мы не набираем и не выполняем eval напрямую в REPL, созданном "
"<code>sbcl</code>, \n"
"это больно. Вы должны попробовать <a href=\"https://www.common-lisp.net/"
"project/slime/\" rel=\"nofollow\">SLIME</a>, это делает жизнь намного проще."
"</p>"

#: in_ed/lispweb3.html:1069
msgctxt "in_ed/lispweb3.html:1069"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:1071
msgid "<p>And, one more thing:</p>"
msgstr "<p>И вот еще:</p>"

#: in_ed/lispweb3.html:1075
msgid ""
"<p>If you wanna surfing in the Lisp world in Lisp-way, <a href=\"https://www."
"gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a> is your laser sword, my "
"young Jedi.</p>"
msgstr ""
"<p>Если вы хотите заниматься серфингом в мире Lisp в стиле Lisp, <a href="
"\"https://www.gnu.org/software/emacs/\" rel=\"nofollow\">Emacs</a> - ваш "
"лазерный меч, мой юный джедай. </p>"

#: in_ed/lispweb3.html:1079
msgid ""
"<h3>\n"
"<a name=\"references\" class=\"anchor\" href=\"#references\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>References</h3>"
msgstr ""
"<h3>\n"
"<a name=\"references\" class=\"anchor\" href=\"#references\" aria-hidden="
"\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></"
"a>Ссылки</h3>"

#: in_ed/lispweb3.html:1081
msgid "<p>Thanks to:</p>"
msgstr ""

#: in_ed/lispweb3.html:1085
msgctxt "in_ed/lispweb3.html:1085"
msgid ""
"<ul>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:1087
msgid ""
"<p><a href=\"http://www.adamtornhill.com/articles/lispweb.htm\" rel="
"\"nofollow\">Lisp for the Web</a> by Adam Tornhill, April 2008</p>"
msgstr ""

#: in_ed/lispweb3.html:1091
msgctxt "in_ed/lispweb3.html:1091"
msgid ""
"</li>\n"
"<li>"
msgstr ""

#: in_ed/lispweb3.html:1093
msgid ""
"<p><a href=\"http://msnyder.info/posts/2011/07/lisp-for-the-web-part-ii/\" "
"rel=\"nofollow\">Lisp for the Web, Part II</a> by Matthew Snyder, July 2011</"
"p>"
msgstr ""

#: in_ed/lispweb3.html:1097
msgctxt "in_ed/lispweb3.html:1097"
msgid ""
"</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:1099
msgid "<p>I wish this piece of work could be:</p>"
msgstr ""

#: in_ed/lispweb3.html:1105
msgid ""
"<ul>\n"
"<li>\n"
"<a href=\"https://vitovan.com/lispweb3.html\" rel=\"nofollow\">Lisp for the "
"Web, Part III</a> by Vito Van, August 2015</li>\n"
"</ul>"
msgstr ""

#: in_ed/lispweb3.html:1107
msgid "<p>That would be a great honor to me.</p>"
msgstr ""

#: in_ed/lispweb3.html:1111
msgid "<p>Thanks for reading.</p>"
msgstr ""

#: in_ed/lispweb3.html:1115
msgid "<p><strong>Footnotes:</strong></p>"
msgstr ""

#: in_ed/lispweb3.html:1119
msgid ""
"<p><a name=\"fn1\">[1]</a> Hunchentoot is <strong>NOT</strong> a good choice "
"for now:</p>"
msgstr ""

#: in_ed/lispweb3.html:1122
msgctxt "in_ed/lispweb3.html:1122"
msgid "<blockquote>"
msgstr ""

#: in_ed/lispweb3.html:1124
msgid ""
"<p><strong>Stop using Hunchentoot directly.</strong> Use Clack, or even "
"better, one of the frameworks built on it.</p>"
msgstr ""

#: in_ed/lispweb3.html:1127
msgctxt "in_ed/lispweb3.html:1127"
msgid "</blockquote>"
msgstr ""

#: in_ed/lispweb3.html:1129
msgid ""
"<p>- <a href=\"http://eudoxia.me/article/common-lisp-sotu-2015/\" rel="
"\"nofollow\">State of the Common Lisp Ecosystem, 2015 </a></p>"
msgstr ""

#: in_ed/lispweb3.html:1133
msgid ""
"<p><del>( 2015/09 revision: After playing around Clack, I do not like it, "
"check this <a href=\"https://gist.github.com/c41e1940ab0a3135dc6c\">https://"
"gist.github.com/c41e1940ab0a3135dc6c</a>)</del></p>"
msgstr ""

#: in_ed/lispweb3.html:1137
msgid ""
"<p>(2016/08 revision: Clack is not so bad, I was just being stupid last "
"year, and this article is... kind of stupid)</p>"
msgstr ""

#: in_ed/lispweb3.html:1140
msgid "<hr>"
msgstr ""

#: in_ed/lispweb3.html:1142
msgid "<p>License: GNU GPL v2.0</p>"
msgstr ""

#: in_ed/lispweb3.html:1146
msgid ""
"<p>Discuss on HN: <a href=\"https://news.ycombinator.com/item?id=10102549\" "
"rel=\"nofollow\">https://news.ycombinator.com/item?id=10102549</a></p>"
msgstr ""

#: in_ed/lispweb3.html:1150
msgid ""
"<p>This piece of work has been updated as the book <a href=\"https://www."
"gitbook.com/book/vitovan/lispweb3\" rel=\"nofollow\">Lisp for the Modern "
"Web</a>, you can buy it from <a href=\"https://www.gitbook.com/book/vitovan/"
"lispweb3/details\" rel=\"nofollow\">GitBook</a>.</p>"
msgstr ""

#: in_ed/lispweb3.html:1155
msgid ""
"            </div>\n"
"        </div>"
msgstr ""

#: in_ed/lispweb3.html:1157
msgid "</body></html>"
msgstr ""
