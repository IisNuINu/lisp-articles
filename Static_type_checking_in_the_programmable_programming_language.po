#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/Static_type_checking_in_the_programmable_programming_language.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-11 10:44+0300\n"
"PO-Revision-Date: 2021-08-12 12:18+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:23
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:04:45.365795332\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:06:30.016455458\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"5610\"></a>Static type checking in the\n"
"programmable programming language (Lisp)</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:04:45.365795332\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:06:30.016455458\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"5610\"></a>Статическая проверка типов на \n"
"программируемом языке программирования (Lisp) </h1>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:30
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?"
"source=post_page-----79bb79eb068a--------------------------------\">\n"
"  <font color=\"#000080\">\n"
"    <img src="
"\"Static_type_checking_in_the_programmable_programming_language_html_39aaac8f8c35ff7a."
"jpg\" name=\"Image1\" alt=\"Martin Cracauer\" align=\"bottom\" width=\"28\" "
"height=\"28\" border=\"1\"/>\n"
"  </font>\n"
"</a>\n"
"</p>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:35
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?"
"source=post_page-----79bb79eb068a--------------------------------\">Martin\n"
"Cracauer</a></p>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:40
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer/static-type-checking-in-the-"
"programmable-programming-language-lisp-79bb79eb068a?"
"source=post_page-----79bb79eb068a--------------------------------\">Mar\n"
"30, 2019Â·11 min read</a></p>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:45
msgid ""
"<p><img src="
"\"Static_type_checking_in_the_programmable_programming_language_html_c19f2ced434922."
"png\" name=\"Image2\" align=\"bottom\" width=\"500\" height=\"700\" border="
"\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:52
msgid ""
"<p><a name=\"6e78\"></a>There is a misconception that Lisp is a\n"
"dynamically typed language and doesnât offer compile-time type\n"
"checking. Lisp being the programmable programming language that is of\n"
"course not true.</p>"
msgstr ""
"<p><a name=\"6e78\"></a>Существует заблуждение, что Lisp - это язык \n"
"с динамической типизацией, который не предлагает проверку типов во \n"
"время компиляции. Lisp - это программируемый язык программирования, \n"
"что, конечно, не соответствует действительности. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:62
msgid ""
"<pre class=\"western\"><a name=\"ed04\"></a>(defun meh (p1)\n"
"  (declare (fixnum p1))\n"
"  (+ p1 3))\n"
"(defun meh2 (p1)\n"
"  (declare (fixnum p1))\n"
"  (+ p1 &quot;8&quot;))</pre>\n"
"<p>\n"
"<a name=\"c514\"></a>Gets you this:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"ed04\"></a>(defun meh (p1)\n"
"  (declare (fixnum p1))\n"
"  (+ p1 3))\n"
"(defun meh2 (p1)\n"
"  (declare (fixnum p1))\n"
"  (+ p1 &quot;8&quot;))</pre>\n"
"<p>\n"
"<a name=\"c514\"></a>Вы получите это: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:73
msgid ""
"<pre class=\"western\"><a name=\"8046\"></a><a name=\"d306\"></a>2 compiler "
"notes:typecheck-demo."
"lisp:7:3:                                                        \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;8&quot; conflicts with its asserted type "
"NUMBER.                       \n"
"    See "
"also:                                                                   \n"
"<a name=\"ab34\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"34ee\"></a>You can declare pretty much all the things that\n"
"you would in regular statically typed languages. Function interface:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"8046\"></a><a name=\"d306\"></a>2 compiler "
"notes:typecheck-demo."
"lisp:7:3:                                                        \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;8&quot; conflicts with its asserted type "
"NUMBER.                       \n"
"    See "
"also:                                                                   \n"
"<a name=\"ab34\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"34ee\"></a>Вы можете объявить почти все, что вы бы сделали \n"
"в обычных статически типизированных языках. Функциональный интерфейс: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:91
msgid ""
"<pre class=\"western\"><a name=\"6e15\"></a>(defun meh3a (p1)\n"
"  (+ p1 3))\n"
"(declaim (ftype (function (fixnum) t) meh3a))\n"
"(defun meh3b ()\n"
"  (meh3a &quot;moo&quot;))\n"
"==&gt;\n"
"<a name=\"04e6\"></a>2 compiler notes:typecheck-demo."
"lisp:13:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;moo&quot; conflicts with its asserted type "
"FIXNUM.                     \n"
"    See "
"also:                                                                   \n"
"<a name=\"e01d\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"6b03\"></a>Or you can pull the declaration in front so that\n"
"the definition of first function is already checked against the type\n"
"declaration when the function is defined:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"6e15\"></a>(defun meh3a (p1)\n"
"  (+ p1 3))\n"
"(declaim (ftype (function (fixnum) t) meh3a))\n"
"(defun meh3b ()\n"
"  (meh3a &quot;moo&quot;))\n"
"==&gt;\n"
"<a name=\"04e6\"></a>2 compiler notes:typecheck-demo."
"lisp:13:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;moo&quot; conflicts with its asserted type "
"FIXNUM.                     \n"
"    See "
"also:                                                                   \n"
"<a name=\"e01d\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"6b03\"></a>Или вы можете вытащить объявление впереди, \n"
"чтобы определение первой функции уже проверялось на объявление типа \n"
"при определении функции: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:113
msgid ""
"<pre class=\"western\"><a name=\"6b39\"></a>(declaim (ftype (function "
"(string) t) meh4a))\n"
"(defun meh4a (p1)\n"
"  (+ p1 3))\n"
"(defun meh4b ()\n"
"  (meh4a &quot;moo&quot;))\n"
"<a name=\"18e4\"></a>2 compiler notes:typecheck-demo."
"lisp:18:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Derived type of P1 "
"is                                                       \n"
"      (VALUES STRING &amp;"
"OPTIONAL),                                                \n"
"    conflicting with its asserted "
"type                                          \n"
"      NUMBER.                                                                   \n"
"    See "
"also:                                                                   \n"
"<a name=\"4973\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.\n"
";; note that this is the first function failing\n"
";; the second one compiles fine.</pre>\n"
"<p>\n"
"<a name=\"4efb\"></a><a name=\"rmm\"></a>Now, obviously this isnât the\n"
"most convenient syntax. But that is easy to fix in a programmable\n"
"programming language that has compile-time computing.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"6b39\"></a>(declaim (ftype (function "
"(string) t) meh4a))\n"
"(defun meh4a (p1)\n"
"  (+ p1 3))\n"
"(defun meh4b ()\n"
"  (meh4a &quot;moo&quot;))\n"
"<a name=\"18e4\"></a>2 compiler notes:typecheck-demo."
"lisp:18:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Derived type of P1 "
"is                                                       \n"
"      (VALUES STRING &amp;"
"OPTIONAL),                                                \n"
"    conflicting with its asserted "
"type                                          \n"
"      NUMBER.                                                                   \n"
"    See "
"also:                                                                   \n"
"<a name=\"4973\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.\n"
";; note that this is the first function failing\n"
";; the second one compiles fine.</pre>\n"
"<p>\n"
"<a name=\"4efb\"></a><a name=\"rmm\"></a>Очевидно, это не самый удобный "
"синтаксис. \n"
"Но это легко исправить с помощью программируемого языка программирования, \n"
"в котором есть вычисления во время компиляции.</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:119
msgid ""
"<p><a name=\"a041\"></a>So what we want for this demo is the ability to\n"
"put the types of the arguments directly into the argument list. A\n"
"function definition would look like this:</p>"
msgstr ""
"<p><a name=\"a041\"></a>Итак, что мы хотим для этой демонстрации, \n"
"так это возможность помещать типы аргументов непосредственно в список "
"аргументов. \n"
"Определение функции могло бы выглядеть так: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:129
msgid ""
"<pre class=\"western\"><a name=\"9c83\"></a>(defunt meh5c ((int p1) (int "
"p2))\n"
"    (+ p1 p2))\n"
"(meh5c 1 2) ; ==&gt; 3</pre>\n"
"<p>\n"
"<a name=\"f487\"></a>So we have a new name instead of defun and we want\n"
"to write one piece of compile time computation that takes care of\n"
"both the actual defun and declaring the types. After we write that\n"
"macro we just want to write functions in the new syntax.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"9c83\"></a>(defunt meh5c ((int p1) (int "
"p2))\n"
"    (+ p1 p2))\n"
"(meh5c 1 2) ; ==&gt; 3</pre>\n"
"<p>\n"
"<a name=\"f487\"></a>Итак, у нас есть новое имя вместо defun, и мы хотим "
"написать \n"
"один фрагмент вычисления времени компиляции, который позаботится как о \n"
"фактическом defun, так и об объявлении типов. После того, как мы напишем "
"этот макрос, \n"
"мы просто хотим писать функции в новом синтаксисе.\n"
"</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:133
msgid "<p><a name=\"790d\"></a>Here is a macro that does that:</p>"
msgstr "<p><a name=\"790d\"></a>Вот макрос, который это делает: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:161
msgid ""
"<pre class=\"western\"><a name=\"4db7\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype \n"
"               (function \n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push \n"
"                      (if (listp arg)\n"
"                          (if (equalp (string (first arg)) &quot;int&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"                t) ,name))\n"
"     (defun ,name\n"
"         ,(loop for arg in args\n"
"             collect\n"
"               (if (listp arg)\n"
"                   (second arg)\n"
"                   arg))\n"
"       ,<a href=\"http://twitter.com/body\">@body</a>)))</pre>\n"
"<p>\n"
"<a name=\"dbf9\"></a>Iâll explain a bit more in a bit, letâs just\n"
"test this thing:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"4db7\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  `(progn\n"
"     (declaim (ftype \n"
"               (function \n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push \n"
"                      (if (listp arg)\n"
"                          (if (equalp (string (first arg)) &quot;int&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   declares)\n"
"                t) ,name))\n"
"     (defun ,name\n"
"         ,(loop for arg in args\n"
"             collect\n"
"               (if (listp arg)\n"
"                   (second arg)\n"
"                   arg))\n"
"       ,<a href=\"http://twitter.com/body\">@body</a>)))</pre>\n"
"<p>\n"
"<a name=\"dbf9\"></a>Я объясню немного больше, давайте просто протестируем\n"
"вот это: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:173
msgid ""
"<pre class=\"western\"><a name=\"ae52\"></a>;; simple use with no type "
"declaration\n"
"(defunt meh5a (p1 p2)\n"
"<a name=\"b630\"></a>    (+ p1 p2));; one declared type, not the other\n"
"(defunt meh5b ((int p1) p2)\n"
"<a name=\"70a7\"></a>    (+ p1 p2));; make sure this works\n"
"(defun meh5btest (p1)\n"
"<a name=\"173e\"></a>  (+ p1 &quot;8&quot;))(defunt meh5c ((int p1) (int "
"p2))\n"
"    (+ p1 p2))</pre>\n"
"<p>\n"
"<a name=\"888f\"></a>Compiling meh5test results, as expected, in</p>"
msgstr ""
"<pre class=\"western\"><a name=\"ae52\"></a>;; simple use with no type "
"declaration\n"
"(defunt meh5a (p1 p2)\n"
"<a name=\"b630\"></a>    (+ p1 p2));; one declared type, not the other\n"
"(defunt meh5b ((int p1) p2)\n"
"<a name=\"70a7\"></a>    (+ p1 p2));; make sure this works\n"
"(defun meh5btest (p1)\n"
"<a name=\"173e\"></a>  (+ p1 &quot;8&quot;))(defunt meh5c ((int p1) (int "
"p2))\n"
"    (+ p1 p2))</pre>\n"
"<p>\n"
"<a name=\"888f\"></a>Компиляция результатов meh5test, как и ожидалось, в </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:187
msgid ""
"<pre class=\"western\"><a name=\"d72b\"></a>typecheck-demo."
"lisp:81:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;8&quot; conflicts with its asserted type "
"NUMBER.                       \n"
"    See "
"also:                                                                   \n"
"<a name=\"22bb\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"aa57\"></a>Okay, so you wrote that macro once and from then\n"
"on you can just use it. The macro looks a bit hard to read for\n"
"programmers who are not yet used to Lisp. I can tell you that I wrote\n"
"that macro, instead this entire post, while waiting on a flight going\n"
"from the AmberMD dev meeting to the European Lisp Symposium.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"d72b\"></a>typecheck-demo."
"lisp:81:3:                                                       \n"
"  note: deleting unreachable "
"code                                               \n"
"  warning:                                                                      \n"
"    Constant &quot;8&quot; conflicts with its asserted type "
"NUMBER.                       \n"
"    See "
"also:                                                                   \n"
"<a name=\"22bb\"></a>      SBCL Manual, Handling of Types [:node]Compilation "
"failed.</pre>\n"
"<p>\n"
"<a name=\"aa57\"></a>Итак, вы написали этот макрос один раз, \n"
"и с этого момента вы можете просто использовать его. Макрос кажется "
"немного \n"
"трудным для чтения программистам, которые еще не привыкли к Lisp. \n"
"Я могу сказать вам, что я написал этот макрос, а не весь этот пост, \n"
"когда ожидал полета, идущего со встречи разработчиков AmberMD на \n"
"European Lisp Symposium.</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:192
msgid ""
"<p><a name=\"b493\"></a>Itâs quick. And there are competent debugging\n"
"facilities. I will demonstrate the debugging later.</p>"
msgstr ""
"<p><a name=\"b493\"></a>Это быстро. И есть грамотные средства отладки.\n"
"Я продемонстрирую отладку позже. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:200
msgid ""
"<p><a name=\"9126\"></a>Being able to debug compile time computing is\n"
"critical. Can you imagine single-stepping through a C preprocessor\n"
"macro, or through C++ template evaluation? Or use debugging printf\n"
"(otherwise known as the only real debugger) in C or C++ at compile\n"
"time?</p>"
msgstr ""
"<p><a name=\"9126\"></a>Возможность отладки вычислений во время компиляции \n"
"имеет решающее значение. Можете ли вы представить себе пошаговое "
"выполнение \n"
"макроса препроцессора C или вычисление шаблона C++? Или использовать "
"отладку \n"
"printf (также известную как единственный настоящий отладчик) на C или C++ \n"
"во время компиляции?</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:204
msgid "<p><a name=\"1e29\"></a>Here is the same macro with some comments:</p>"
msgstr ""
"<p><a name=\"1e29\"></a>Вот тот же макрос с некоторыми комментариями: </p>"

# Notes:
# Add Note
#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:256
msgid ""
"<pre class=\"western\"><a name=\"bb5b\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  ;; backtick enters &quot;code echoing&quot;, do not\n"
"  ;; evalluate when macro is run\n"
"  `(progn\n"
"     ;; this macro emits two definitions to\n"
"     ;; the compiler:\n"
"     ;; 1 - the declaim type declarations\n"
"     ;; 2 - the defun\n"
"     (declaim (ftype\n"
"               (function\n"
"                ;; comma inside backtick means\n"
"                ;; &quot;execute when macro is run&quot;\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; also translate for C people, but case\n"
"                          ;; independent\n"
"                          (if (equalp (string (first arg)) &quot;int&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   ;; return this list, which is integrated\n"
"                   ;; into the code.  You see that is why we\n"
"                   ;; have so many parenthesis.  Because what\n"
"                   ;; is a passive data list here turns into\n"
"                   ;; code, without any reformatting.\n"
"                   ;; Read below for a step-by-step explanation\n"
"                   ;; of what is going on\n"
"                   declares)\n"
"                t) ,name))\n"
"     (defun ,name\n"
"         ;; use the loop macro here for the same purpose we\n"
"         ;; manually collected the args with dolist and\n"
"         ;; push above\n"
"         ,(loop for arg in args\n"
"             collect\n"
"               (if (listp arg)\n"
"                   (second arg)\n"
"                   arg))\n"
"       ,<a href=\"http://twitter.com/body\">@body</a>)))\n"
";; the result of the above macro is then fed into the compiler.\n"
";; So we use three levels of evaluation time here:\n"
";; 1 - when the macro is run\n"
";; 2 - the output of the macro call, which is fed into the compiler\n"
";; 3 - run time, when you actually call the resulting function</pre>\n"
"<p>\n"
"<a name=\"ba9c\"></a>The concept behind this is:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"bb5b\"></a>(defmacro defunt (name (&amp;"
"rest args) &amp;body body)\n"
"  &quot;defun with optional type declarations&quot;\n"
"  ;; обратная кавычка переходит в  &quot;режим эха для кода&quot;, не\n"
"  ;; вычислять при запуске макроса \n"
"  `(progn\n"
"     ;; этот макрос выпускает два определения для\n"
"     ;; компилятора:\n"
"     ;; 1 - декларацию типа декларации\n"
"     ;; 2 - определение функции - defun\n"
"     (declaim (ftype\n"
"               (function\n"
"                ;; запятая внутри обратной каавычки означает\n"
"                ;; &quot;выполнение при запуске макроса&quot;\n"
"                ,(let (declares)\n"
"                   (dolist (arg args)\n"
"                     (push\n"
"                      (if (listp arg)\n"
"                          ;; Так же переводим для людей C, но не зависимо\n"
"                          ;; от регистра\n"
"                          (if (equalp (string (first arg)) &quot;int&quot;)\n"
"                              'fixnum\n"
"                              (first arg))\n"
"                          t)\n"
"                      declares))\n"
"                   ;; вернуть этот список, который интегрирован в код. \n"
"                   ;; Видите ли, поэтому у нас так много скобок. Потому что "
"то, \n"
"                   ;; что здесь является пассивным списком данных, "
"превращается в \n"
"                   ;; код без какого-либо переформатирования.\n"
"                   ;; Прочтите ниже пошаговое объяснение того, что "
"происходит \n"
"                   declares)\n"
"                t) ,name))\n"
"     (defun ,name\n"
"         ;; используйте здесь макрос цикла для той же цели, \n"
"         ;; что мы вручную собрали аргументы с помощью dolist \n"
"         ;; и push выше \n"
"         ,(loop for arg in args\n"
"             collect\n"
"               (if (listp arg)\n"
"                   (second arg)\n"
"                   arg))\n"
"       ,<a href=\"http://twitter.com/body\">@body</a>)))\n"
";; результат вышеуказанного макроса затем передается в компилятор\n"
";; Итак, здесь мы используем три уровня времени выполнения:\n"
";; 1 - при запуске макроса\n"
";; 2 - вывод макроса, который подается в компилятор\n"
";; 3 - время выполнения, когда вы фактически вызываете результирующую "
"функцию </pre>\n"
"<p>\n"
"<a name=\"ba9c\"></a>За этим стоит следующая концепция:</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:263
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"cf79\"></a>a single\n"
"\tmacro call can issue several new statements. We use this to emit\n"
"\tboth the declare and the defun, from a single user-issued definition</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"cf79\"></a>один вызов макроса "
"может вызвать \n"
"\tнесколько новых операторов. Мы используем это, чтобы генерировать как "
"declare, \n"
"\tтак и defun из одного пользовательского определения. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:276
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"a782\"></a>inside the\n"
"\tmacro you can control which code runs at macro call time and what\n"
"\tgets emitted to the compiler. Keep in mind that you have the full\n"
"\tlanguage at your disposal at both times. One reason why these macros\n"
"\tcan be a bit hard to read is that you explicitly need to change\n"
"\tbetween the different evaluation times, and the code has the same\n"
"\tsyntax. A C preprocessor macro or a C++ template use different\n"
"\tlanguages at compile and run time, so it is a bit more clear what is\n"
"\tevaluated when. Of course you cannot use your usual library at\n"
"\tcompile time like you can in Lisp</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"a782\"></a>внутри макроса вы "
"можете контролировать, \n"
"\tкакой код запускается во время вызова макроса, а что передается "
"компилятору. \n"
"\tИмейте в виду, что в обоих случаях в вашем распоряжении полный язык. Одна "
"из причин, \n"
"\tпо которой эти макросы могут быть немного трудными для чтения, заключается "
"в том, \n"
"\tчто вам явно нужно переключаться между разными временами вычисления, а код "
"имеет \n"
"\tтот же синтаксис. Макрос препроцессора C или шаблон C++ используют разные "
"языки \n"
"\tво время компиляции и выполнения, поэтому немного более понятно, что и "
"когда \n"
"\tвычисляется. Конечно, вы не можете использовать свою обычную библиотеку во "
"время\n"
"\tкомпиляции, как в Lisp. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:287
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"f3a1\"></a>unless you do\n"
"\tsay otherwise the code inside the macro runs at macro expansion\n"
"\ttime. The return value is what is fed into the compiler. The return\n"
"\tvalue much be a list, a list of Lisp language statements. That is\n"
"\twhy in Lisp you have to use list syntax for code. Got that? It is\n"
"\timportant. You construct this nested-parenthesis thing that is a\n"
"\tlist at compile time, and you feed it into the compiler, so the list\n"
"\tbecomes code.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"f3a1\"></a>если вы не укажете "
"иное, \n"
"\tкод внутри макроса выполняется во время раскрытия макроса. Возвращаемое \n"
"\tзначение - это то, что передается в компилятор. Возвращаемое значение \n"
"\tскорее будет списком, списком операторов языка Лисп. Вот почему в Лиспе \n"
"\tвы должны использовать синтаксис списка для кода. Понятно? Это важно. \n"
"\tВы создаете эту вещь с вложенными круглыми скобками, которая "
"представляет \n"
"\tсобой список во время компиляции, и вы загружаете его в компилятор, так \n"
"\tчто список становится кодом. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:294
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"8be8\"></a>a tick (â)\n"
"\tor a backtick (`) leaves things as lists and does not evaluate it at\n"
"\tmacro call time. That is how you return a list (which is data, not\n"
"\tevaluated) from the macro (which is then fed into the compiler).</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"8be8\"></a>кавычка(‘) или обратная "
"кавычка (`) \n"
"\tоставляет такие вещи как списки и не вычисляет их во время вызова "
"макроса. \n"
"\tВот как вы возвращаете список (который является данными, а не "
"вычислением) \n"
"\tиз макроса (который затем передается в компилятор). </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:301
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"9b06\"></a>A comma (,)\n"
"\tcan be used inside a backticked (`) block to switch evaluation time\n"
"\tback to macro call time. Your comma block also returns lists, and\n"
"\tthey become integrated into the backticked block.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"9b06\"></a>Запятая (,) может "
"использоваться \n"
"\tвнутри блока с обратной кавычкой(`), чтобы переключить время вычисления \n"
"\tобратно на время вызова макроса. Ваш блок с запятыми также возвращает \n"
"\tсписки, и они интегрируются в блок с обратными кавычками. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:304
msgctxt ""
"in_ed/Static_type_checking_in_the_programmable_programming_language.html:304"
msgid "\t<li/>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:311
msgid ""
"<p><a name=\"6094\"></a>The ,@ construct removes one list\n"
"\tnesting, so it turns ((foo bar)) into (foo bar). You often need that\n"
"\twhen you return collections of items from the macroâs own\n"
"\tvariables or comma block. This is getting into the depths of macros\n"
"\tand some obscure syntax, but it is not particularly hard to get\n"
"\tright given the debug tools.</p>"
msgstr ""
"<p><a name=\"6094\"></a>Конструкция ,@ удаляет одну вложенность списка, \n"
"\tпоэтому она превращает ((foo bar)) в (foo bar). Это часто требуется, \n"
"\tкогда вы возвращаете коллекции элементов из собственных переменных \n"
"\tмакроса или блока с запятой. Это касается глубины макросов и некоторого \n"
"\tнеясного синтаксиса, но это не особенно сложно, учитывая инструменты "
"отладки. </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:314
msgid "</ul>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:316
msgid "<p><a name=\"8397\"></a>So, if you want to write such macros:</p>"
msgstr ""
"<p><a name=\"8397\"></a>Итак, если вы хотите написать такие макросы: </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:325
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"b218\"></a>get an editor\n"
"\tthat has auto-indentation for Lisp code. It also needs to show you\n"
"\tmatching open parenthesis when you type a closing parenthesis. No\n"
"\tLisp programmer positions those parenthesis by hand. This is\n"
"\timportant. Trying to count these things by hand is maddening.</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"b218\"></a>получите редактор с "
"автоматическим \n"
"\tотступом для кода Lisp. Он также должен показать вам совпадающую "
"открывающую \n"
"\tскобку, когда вы вводите закрывающую скобку. Ни один программист на Лиспе "
"не \n"
"\tразмещает эти скобки вручную. Это важно. Сосчитать эти вещи вручную сводит "
"с ума. \n"
"</p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:328
msgctxt ""
"in_ed/Static_type_checking_in_the_programmable_programming_language.html:328"
msgid "\t<li/>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:332
msgid ""
"<p><a name=\"ac4d\"></a>have some books ready. Paul Graphamâs\n"
"\tâOn Lispâ is a free book that explains Lisp macros really well.\n"
"\tGoing along with this blog post alone is probably tough</p>"
msgstr ""
"<p><a name=\"ac4d\"></a>приготовь несколько книг. «О Лиспе» Пола Грэма - \n"
"\tбесплатная книга, в которой очень хорошо объясняются макросы Лиспа. \n"
"\tПродолжать писать только на основе сообщения в блоге, вероятно, сложно </p>"

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:336
msgid ""
"</ul>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:338
msgid "</p>"
msgstr ""

#: in_ed/Static_type_checking_in_the_programmable_programming_language.html:341
msgid ""
"</body>\n"
"</html>"
msgstr ""
