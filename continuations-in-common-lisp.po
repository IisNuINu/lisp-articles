#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/continuations-in-common-lisp.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 10:15+0300\n"
"PO-Revision-Date: 2021-12-28 16:58+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/continuations-in-common-lisp.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-12-26T22:19:33.783167778\"/>\n"
"\t<meta name=\"changed\" content=\"2021-12-26T22:27:05.808209224\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"38de\"></a>Continuations in Common Lisp</"
"h1>\n"
"<h2 class=\"western\"><a name=\"4829\"></a>An introductory guide, using\n"
"the continuation-passing macros of Paul Grahamâs On Lisp</h2>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-12-26T22:19:33.783167778\"/>\n"
"\t<meta name=\"changed\" content=\"2021-12-26T22:27:05.808209224\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"38de\"></a>Продолжения в Common Lisp</h1>\n"
"<h2 class=\"western\"><a name=\"4829\"></a>Вводное руководство с "
"использованием макросов \n"
"передачи продолжения из книги Пола Грэма о Лиспе.</h2>"

#: in_ed/continuations-in-common-lisp.html:34
msgid ""
"<p><a href=\"https://ashok-khanna.medium.com/?"
"source=post_page-----1911cb413a03-----------------------------------\">\n"
"  <font color=\"#000080\">\n"
"    <img src=\"continuations-in-common-lisp_html_4b6b6a58fd97f750.jpg\" name="
"\"Image1\" alt=\"Ashok Khanna\" align=\"bottom\" width=\"28\" height=\"28\" "
"border=\"1\"/>\n"
"  </font>\n"
"</a>\n"
"</p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:39
msgid ""
"<p><a href=\"https://ashok-khanna.medium.com/?"
"source=post_page-----1911cb413a03-----------------------------------"
"\">Ashok\n"
"Khanna</a></p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:44
msgid ""
"<p><a href=\"https://ashok-khanna.medium.com/continuations-in-common-"
"lisp-1911cb413a03?"
"source=post_page-----1911cb413a03-----------------------------------\">Aug\n"
"17Â·7 min read</a></p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:54
msgid ""
"<p><a name=\"a5cb\"></a>Continuations are a difficult concept, but one\n"
"that has certain value in certain applications. In this guide, I will\n"
"try to explain the concepts and how to implement continuations within\n"
"Common Lisp, hopefully it helps in your understanding of this topic.\n"
"I suspect you will have to read a few different explanations from\n"
"different sources and hopefully one of them will click. Hopefully you\n"
"find the below guide useful.</p>"
msgstr ""
"<p><a name=\"a5cb\"></a>Продолжение - сложная концепция, но она имеет "
"определенную \n"
"ценность в определенных приложениях. В этом руководстве я попытаюсь "
"объяснить \n"
"концепции и то, как реализовать продолжения в Common Lisp, надеюсь, это "
"поможет \n"
"в вашем понимании этой темы. Я подозреваю, что вам придется прочитать "
"несколько \n"
"разных объяснений из разных источников, и, надеюсь, одно из них "
"понравится. \n"
"Надеюсь, вы найдете приведенное ниже руководство полезным.</p>"

#: in_ed/continuations-in-common-lisp.html:61
msgid ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"b61d\"></a>Part\n"
"1 (this page) will give a conceptual overview of Continuations, while\n"
"Part 2 (to come shortly) will detail a possible implementation in\n"
"Common Lisp (based on Paul Grahamâs continuation-passing macros in\n"
"On Lisp).</p>"
msgstr ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"b61d\"></a>В "
"Части 1 (эта страница) \n"
"дается концептуальный обзор продолжений, а в Части 2 (которая выйдет в "
"ближайшее время) \n"
"подробно описывается возможная реализация в Common Lisp (на основе "
"макросов \n"
"передачи продолжения Пола Грэма из On Lisp). </p>"

#: in_ed/continuations-in-common-lisp.html:64
msgid "<h1 class=\"western\"><a name=\"7e58\"></a>What are Continuations?</h1>"
msgstr "<h1 class=\"western\"><a name=\"7e58\"></a>Что такое продолжения?</h1>"

#: in_ed/continuations-in-common-lisp.html:69
msgid ""
"<p><a name=\"168b\"></a><a name=\"rmm\"></a>A continuation can be\n"
"considered a program that is frozen in action. You can save this\n"
"object for as long as you like, and when you call it, it will restart\n"
"the computation taking place when it was created.</p>"
msgstr ""
"<p><a name=\"168b\"></a><a name=\"rmm\"></a>Продолжением можно считать "
"программу, \n"
"замороженную в действии. Вы можете хранить этот объект столько, сколько "
"захотите, \n"
"и когда вы его вызовете, он перезапустит вычисления, происходившие при его "
"создании.</p>"

#: in_ed/continuations-in-common-lisp.html:74
msgid ""
"<p><a name=\"4cc0\"></a>I like to think of a continuation as a bookmark\n"
"within a program. Consider the following expression:</p>"
msgstr ""
"<p><a name=\"4cc0\"></a>Мне нравится думать о продолжении как о \n"
"книжной закладке(bookmark) в программе. Рассмотрим следующее выражение: </p>"

#: in_ed/continuations-in-common-lisp.html:83
msgid ""
"<pre class=\"western\"><a name=\"4eeb\"></a><a name=\"40bf\"></a>&gt; (+ 1 "
"(+ 2 (+ 3 (+ 4 5))))\n"
"<a name=\"4b0c\"></a>;; Which may be easier to read as follows:&gt; (+ 1\n"
"     (+ 2\n"
"        (+ 3\n"
"           (+ 4 5))))          </pre>\n"
"<p>\n"
"<a name=\"7eda\"></a>We could rewrite this program as:</p>"
msgstr ""
"<pre class=\"western\"><a name=\"4eeb\"></a><a name=\"40bf\"></a>&gt; (+ 1 "
"(+ 2 (+ 3 (+ 4 5))))\n"
"<a name=\"4b0c\"></a>;; Which may be easier to read as follows:&gt; (+ 1\n"
"     (+ 2\n"
"        (+ 3\n"
"           (+ 4 5))))          </pre>\n"
"<p>\n"
"<a name=\"7eda\"></a>Мы могли бы переписать эту программу как:</p>"

#: in_ed/continuations-in-common-lisp.html:89
msgid ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"e750\"></a>Add 4 and 5\n"
"\tto give 9</p>"
msgstr ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"e750\"></a> Складываем 4 и 5, "
"получаем 9\n"
"</p>"

#: in_ed/continuations-in-common-lisp.html:94
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"973b\"></a>Add 3 to the\n"
"\toutput of step 1 (9) to give 12</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"973b\"></a>Добавьте 3 к \n"
"\tрезультату шага 1 (9), чтобы получить 12</p>"

#: in_ed/continuations-in-common-lisp.html:99
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"936d\"></a>Add 2 to the\n"
"\toutput of step 2 (12) to give 14</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"936d\"></a>Добавьте 2 к \n"
"\tрезультату шага 2 (12), чтобы получить 14</p>"

#: in_ed/continuations-in-common-lisp.html:102
msgctxt "in_ed/continuations-in-common-lisp.html:102"
msgid "\t<li/>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:105
msgid ""
"<p><a name=\"0c2f\"></a>Add 1 to the output of step 3 (14) to\n"
"\tgive 15</p>"
msgstr ""
"<p><a name=\"0c2f\"></a> Добавьте 1 к результату \n"
"\tшага 3 (14), чтобы получить 15</p>"

#: in_ed/continuations-in-common-lisp.html:108
msgid "</ol>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:113
msgid ""
"<p><a name=\"d01c\"></a>Say we took a continuation after step 2, and\n"
"saved this within an object called <code class=\"western\">*cont*</code>.\n"
"This continuation would represent the remainder of the above program,\n"
"namely steps 3 and 4.</p>"
msgstr ""
"<p><a name=\"d01c\"></a>Скажем, мы взяли продолжение после шага 2 и \n"
"сохранили его в объекте с именем <code class=\"western\">*cont*</code>. \n"
"Это продолжение будет представлять собой оставшуюся часть вышеуказанной "
"программы, \n"
"а именно шаги 3 и 4. </p>"

#: in_ed/continuations-in-common-lisp.html:119
msgid ""
"<p><a name=\"1c07\"></a>Letâs work with <strong><em>pseudocode</em></"
"strong>\n"
"for a bit. Assume we can call this continuation and pass in a value,\n"
"say 7, with the following:</p>"
msgstr ""
"<p><a name=\"1c07\"></a>Давайте немного поработаем с "
"<strong><em>псевдокодом</em></strong>.\n"
"Предположим, мы можем вызвать это продолжение и передать значение, скажем "
"7, \n"
"следующим образом: </p>"

#: in_ed/continuations-in-common-lisp.html:128
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"71c9\"></"
"a>&gt; (*cont* 7)</pre>\n"
"<p>\n"
"<a name=\"f9ad\"></a>The continuation <code class=\"western\">*cont*</code>\n"
"is a functional object and here will restart the remainder of the\n"
"program (steps 3 and 4 in the above), but using the value supplied\n"
"(7) and not the original value at the end of step 2 (12). Thus the\n"
"above expression will return 10:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"71c9\"></"
"a>&gt; (*cont* 7)</pre>\n"
"<p>\n"
"<a name=\"f9ad\"></a>Продолжение <code class=\"western\">*cont*</code> "
"является \n"
"функциональным объектом, и здесь будет перезапущена оставшаяся часть "
"программы \n"
"(шаги 3 и 4 выше), но с использованием предоставленного значения (7), а не "
"исходного \n"
"значения в конце шага 2 (12). Таким образом, приведенное выше выражение "
"вернет 10: </p>"

#: in_ed/continuations-in-common-lisp.html:132
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"0758\"></"
"a><a name=\"dde2\"></a><a name=\"4fae\"></a>&gt; (*cont* 7)10;; The above is "
"equivalent to (+ 1 (+ 2 <strong>7</strong>)), where the 7 is the value "
"supplied to the continuation</pre><h2 class=\"western\">\n"
"<a name=\"d537\"></a>Continuations from another perspective</h2>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"0758\"></"
"a><a name=\"dde2\"></a><a name=\"4fae\"></a>&gt; (*cont* 7)10;; "
"Вышеупомянутое эквивалентно (+ 1 (+ 2 <strong>7</strong>)), \n"
"где 7 - это значение, передаваемое в продолжение.</pre>\n"
"<h2 class=\"western\">\n"
"<a name=\"d537\"></a>Продолжение с другой точки зрения</h2>"

#: in_ed/continuations-in-common-lisp.html:140
msgid ""
"<p><a name=\"f233\"></a>Letâs revisit the above, but from a different\n"
"perspective. When our Common Lisp interpreter evaluates the earlier\n"
"expression, it evaluates each term from left to right. This has an\n"
"effect of going down the call stack (in theory â I donât am not\n"
"sure if call stacks are actually created for the simple example\n"
"below, but you can imagine the same process for functions calling\n"
"other functions and so on).</p>"
msgstr ""
"<p><a name=\"f233\"></a>Давайте вернемся к вышесказанному, но с другой точки "
"зрения. \n"
"Когда наш интерпретатор Common Lisp оценивает(вычисляет) предыдущее "
"выражение, \n"
"он вычисляет каждый член слева направо. Это имеет эффект опускания стека "
"вызовов \n"
"(теоретически - я не уверен, действительно ли стеки вызовов создаются для "
"простого \n"
"примера ниже, но вы можете представить себе тот же процесс для функций, "
"вызывающих \n"
"другие функции, и так далее). </p>"

#: in_ed/continuations-in-common-lisp.html:143
msgctxt "in_ed/continuations-in-common-lisp.html:143"
msgid "<p style=\"margin-bottom: 0cm\"><br/>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:145
msgctxt "in_ed/continuations-in-common-lisp.html:145"
msgid "</p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:150
msgid ""
"<p><img src=\"continuations-in-common-lisp_html_2e749d048ab637c7.png\" name="
"\"Image3\" align=\"bottom\" width=\"700\" height=\"368\" border=\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:158
msgid ""
"<p><a name=\"a8a4\"></a>Once the evaluator reaches the bottom of the\n"
"stack, it starts returning the values upwards to the top. The above\n"
"four steps capture this return process. Thus, Lisp will evaluate the\n"
"forms from left to right and downwards, and then once all the forms\n"
"are evaluated, it will return values upwards.</p>"
msgstr ""
"<p><a name=\"a8a4\"></a>Как только вычислитель достигает дна стека, он \n"
"начинает возвращать значения  наверх. Вышеупомянутые четыре шага отражают \n"
"этот процесс возврата. Таким образом, Lisp будет вычислять формы слева "
"направо \n"
"и вниз, а затем, когда все формы вычслены, он вернет значения навверх.\n"
"</p>"

#: in_ed/continuations-in-common-lisp.html:163
msgid ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"adba\"></a>To\n"
"help understand continuations, it helps to visualise that Lisp\n"
"evaluates forms downwards and returns forms upwards.</p>"
msgstr ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"adba\"></a>Чтобы "
"помочь \n"
"понять продолжения, эта вызуализация помогает, увидеть как Lisp вычисляет "
"формы \n"
"вниз и возвраты результатов форм наверх.</p>"

#: in_ed/continuations-in-common-lisp.html:175
msgid ""
"<p><a name=\"f448\"></a>Let us know visualise our continuation from\n"
"above with the below. If you carefully step through our example, you\n"
"will hopefully see that the continuation refers actually to the top\n"
"part of the expression and not the bottom part. Thus, while a\n"
"continuation refers to the remainder of a program, once we realise\n"
"that returns values are returned upwards, we realise the remainder of\n"
"the program is all the forms above the point we take a continuation,\n"
"and not below it. For me this was a pretty important point, so\n"
"hopefully you appreciate it too.</p>"
msgstr ""
"<p><a name=\"f448\"></a>Дайте нам знать, визуализируйте наше продолжение \n"
"сверху с помощью нижеследующего. Если вы внимательно пройдетесь по нашему "
"примеру, \n"
"вы, надеюсь, увидите, что продолжение относится на самом деле к верхней "
"части выражения, \n"
"а не к нижней части. Таким образом, хотя продолжение относится к оставшейся "
"части программы, \n"
"как только мы понимаем, что возвращаемые значения возвращаются вверх, мы "
"понимаем, что \n"
"оставшаяся часть программы - это все формы выше точки, в которой мы берем "
"продолжение, \n"
"а не ниже ее. Для меня это был очень важный момент, так что, надеюсь, вы "
"тоже его оцените. </p>"

#: in_ed/continuations-in-common-lisp.html:178
msgctxt "in_ed/continuations-in-common-lisp.html:178"
msgid "<p style=\"margin-bottom: 0cm\"><br/>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:180
msgctxt "in_ed/continuations-in-common-lisp.html:180"
msgid "</p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:185
msgid ""
"<p><img src=\"continuations-in-common-lisp_html_1de0df2c0d1316f6.png\" name="
"\"Image5\" align=\"bottom\" width=\"700\" height=\"392\" border=\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:191
msgid ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"11d9\"></a>So\n"
"again, for repetition, evaluate downwards, but return upwards. The\n"
"last parts of a program are the ones at the top, i.e. last in first\n"
"out, or alternatively, first in last out :)</p>"
msgstr ""
"<p style=\"margin-left: 1cm; margin-right: 1cm\"><a name=\"11d9\"></a>Итак, "
"снова, \n"
"для повторения, вычисляете вниз, но возвращайтесь вверх. Последними частями "
"программы \n"
"являются те, что находятся наверху, т. е. Последнее пришло - первое вышло, "
"или, \n"
"альтернативно, первое пришло последним :)</p>"

#: in_ed/continuations-in-common-lisp.html:196
msgid ""
"<p><a name=\"89d8\"></a>A natural question then would be, what is the\n"
"bottom part of the above program, namely</p>"
msgstr ""
"<p><a name=\"89d8\"></a>Тогда возникает естественный вопрос: что является "
"нижней \n"
"частью приведенной выше программы, а именно: </p>"

#: in_ed/continuations-in-common-lisp.html:205
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"4c29\"></"
"a>&gt; (+ 3 (+ 4 5))</pre>\n"
"<p>\n"
"<a name=\"91b9\"></a>This is just a normal function call. We donât\n"
"need any special mechanisms to âsaveâ it or re-run it â its\n"
"just a simple form that we need to run. One could very easily store\n"
"these function calls in a variable and recall them later, with\n"
"something like the following:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><a name=\"4c29\"></"
"a>&gt; (+ 3 (+ 4 5))</pre>\n"
"<p>\n"
"<a name=\"91b9\"></a>Это просто нормальный вызов функции. Нам не нужны какие-"
"либо \n"
"специальные механизмы для его «сохранения» или повторного запуска - это "
"просто \n"
"простая форма, которую нам нужно запустить. Можно очень легко сохранить "
"эти \n"
"вызовы функций в переменной и вызывать их позже, примерно так: </p>"

#: in_ed/continuations-in-common-lisp.html:212
msgid ""
"<pre class=\"western\"><a name=\"4277\"></a><a name=\"9b05\"></a>&gt; "
"(defvar *saved-form*)&gt; (let ((next-steps (lambda (a)\n"
"                      (+ 3 (+ 4 a)))))\n"
"    (setf *saved-form* next-steps)\n"
"<a name=\"28df\"></a><a name=\"5f04\"></a><a name=\"01b8\"></a><a name=\"6ace"
"\"></a><a name=\"3495\"></a>    (funcall next-steps 5))12&gt; *saved-"
"form*#&lt;FUNCTION (LAMBDA (A)) {52C670EB}&gt;&gt; (funcall *saved-form* "
"5)12</pre><h2 class=\"western\">\n"
"<a name=\"ec6a\"></a>So whatâs your point?</h2>"
msgstr ""
"<pre class=\"western\"><a name=\"4277\"></a><a name=\"9b05\"></a>&gt; "
"(defvar *saved-form*)&gt; (let ((next-steps (lambda (a)\n"
"                      (+ 3 (+ 4 a)))))\n"
"    (setf *saved-form* next-steps)\n"
"<a name=\"28df\"></a><a name=\"5f04\"></a><a name=\"01b8\"></a><a name=\"6ace"
"\"></a><a name=\"3495\"></a>    (funcall next-steps 5))12&gt; *saved-"
"form*#&lt;FUNCTION (LAMBDA (A)) {52C670EB}&gt;&gt; (funcall *saved-form* "
"5)12</pre><h2 class=\"western\">\n"
"<a name=\"ec6a\"></a>Так к чему ты клонишь?</h2>"

#: in_ed/continuations-in-common-lisp.html:221
msgid ""
"<p><a name=\"8743\"></a>To cut a long story short, it is very easy to\n"
"know <strong><em>what is happening next</em></strong>, i.e. the forms\n"
"we are about to evaluate (such as within the <code class=\"western\">let</"
"code>\n"
"above). It is a lot harder to know <strong><em>whatâs happened\n"
"before</em></strong>, because that would require going back up the\n"
"call stack all the way up to the top level, something that can be\n"
"done, but something that is not readily apparent from the code block\n"
"that you are currently looking at.</p>"
msgstr ""
"<p><a name=\"8743\"></a>Короче говоря, очень легко узнать, <strong><em>что "
"происходит \n"
"дальше</em></strong>, то есть формы, которые мы собираемся вычислить "
"(например, в \n"
"<code class=\"western\">let</code> выше). \n"
"Намного сложнее узнать, <strong><em>что произошло раньше</em></strong>, "
"потому что для \n"
"этого потребуется вернуться вверх по стеку вызовов до самого верхнего "
"уровня, что-то, \n"
"что можно сделать, но что-то, что не всегда очевидно из блока кода, который "
"вы сейчас \n"
"просматриваете.</p>"

#: in_ed/continuations-in-common-lisp.html:226
msgid ""
"<p><a name=\"f555\"></a>For example, how could we represent the above\n"
"continuation? Perhaps we could do</p>"
msgstr ""
"<p><a name=\"f555\"></a>Например, как бы мы могли изобразить вышеупомянутое "
"продолжение? \n"
"Возможно, мы могли бы сделать </p>"

#: in_ed/continuations-in-common-lisp.html:234
msgid ""
"<pre class=\"western\"><a name=\"46bf\"></a>&gt; (defun *cont* (a)\n"
"    (+ 1 (+ 2 a)))</pre>\n"
"<p>\n"
"<a name=\"6ab7\"></a>This doesnât seem too bad. But imagine if we had\n"
"many levels to our call stack, with recursions as well. As I\n"
"understand, it is not an easy task.</p>"
msgstr ""
"<pre class=\"western\"><a name=\"46bf\"></a>&gt; (defun *cont* (a)\n"
"    (+ 1 (+ 2 a)))</pre>\n"
"<p>\n"
"<a name=\"6ab7\"></a>Это не так уж плохо. Но представьте, если бы у нас "
"было \n"
"много уровней в нашем стеке вызовов, в том числе с рекурсиями. Насколько я "
"понимаю, \n"
"это непростая задача.</p>"

#: in_ed/continuations-in-common-lisp.html:241
msgid ""
"<p><a name=\"c726\"></a>Conceptually, in functional programming, we\n"
"write downwards (as per the above diagrams). So it is relatively easy\n"
"to keep track of what is next, but we tend to lose track of what\n"
"happened before.</p>"
msgstr ""
"<p><a name=\"c726\"></a>Концептуально в функциональном программировании \n"
"мы пишем сверху вниз (согласно схемам выше). Так что относительно легко "
"следить за тем, \n"
"что будет дальше, но мы склонны терять из виду то, что происходило раньше. </"
"p>"

#: in_ed/continuations-in-common-lisp.html:245
msgid ""
"<h2 class=\"western\"><a name=\"dba6\"></a>Imperative vs. Declarative\n"
"Programming</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"dba6\"></a>Императивное и декларативное "
"программирование</h2>"

#: in_ed/continuations-in-common-lisp.html:250
msgid ""
"<p><a name=\"56ad\"></a>I guess the central concept in all of this is\n"
"the differences between imperative &amp; declarative programming.\n"
"<a href=\"https://stackoverflow.com/questions/17826380/what-is-difference-"
"between-functional-and-imperative-programming-languages\" target=\"_blank"
"\">Courtesy\n"
"of Stack Overflow</a>:</p>"
msgstr ""
"<p><a name=\"56ad\"></a>Я предполагаю, что центральная концепция во всем "
"этом - \n"
"разница между императивным и декларативным программированием.\n"
"<a href=\"https://stackoverflow.com/questions/17826380/what-is-difference-"
"between-functional-and-imperative-programming-languages\" target=\"_blank"
"\">Любезно предоставлено Stack Overflow</a>:</p>"

#: in_ed/continuations-in-common-lisp.html:258
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"ba0b\"></a>An imperative\n"
"\tlanguage uses a <strong>sequence of statements</strong> to determine\n"
"\thow to reach a certain goal. These statements are said to change the\n"
"\tstate of the program as each one is executed in turn.</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"ba0b\"></a>Императивный язык "
"использует \n"
"\tпоследовательность утверждений(<strong>sequence of statements</strong>), "
"чтобы определить, \n"
"\tкак достичь определенной цели. Считается, что эти операторы изменяют "
"состояние программы, \n"
"\tпоскольку каждый из них выполняется по очереди.</p>"

#: in_ed/continuations-in-common-lisp.html:261
msgctxt "in_ed/continuations-in-common-lisp.html:261"
msgid "\t<li/>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:267
msgid ""
"<p><a name=\"bdf2\"></a>On the other hand, functional\n"
"\tprogramming is a form of declarative programming. Declarative\n"
"\tprogramming is a non-imperative style of programming in <strong>which\n"
"\tprograms describe their desired results without explicitly listing\n"
"\tcommands or steps that must be performed</strong>.</p>"
msgstr ""
"<p><a name=\"bdf2\"></a> С другой стороны, функциональное программирование "
"- \n"
"\tэто форма декларативного программирования. Декларативное программирование "
"- \n"
"\tэто не императивный стиль программирования, при котором "
"<strong>программы \n"
"\tописывают желаемые результаты без явного перечисления команд или шагов, \n"
"\tкоторые должны быть выполнены</strong>.</p>"

#: in_ed/continuations-in-common-lisp.html:270
msgctxt "in_ed/continuations-in-common-lisp.html:270"
msgid "</ul>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:276
msgid ""
"<p><a name=\"5a2c\"></a>In our example, imperative programming would be\n"
"the four steps we outlined at the start, step by step commands on how\n"
"to execute a program from start to finish. In such styles of\n"
"programming, it is relatively easy to keep track of the next steps,\n"
"after all it is a step by step process.</p>"
msgstr ""
"<p><a name=\"5a2c\"></a>В нашем примере императивное программирование - \n"
"это четыре шага, которые мы обозначили в начале, пошаговые команды о том, \n"
"как выполнить программу от начала до конца. В таких стилях "
"программирования \n"
"относительно легко отслеживать следующие шаги, в конце концов, это \n"
"пошаговый процесс.</p>"

#: in_ed/continuations-in-common-lisp.html:285
msgid ""
"<p><a name=\"fc53\"></a>On the other hand, the functional example we\n"
"gave you was declarative. At the first step we said, give us the sum\n"
"of 1 and (+ 2 â¦). The latter object was not yet calculated, we just\n"
"said we want it. It is only in subsequent steps that we worked\n"
"downwards and evaluated each part of this form and calculated the\n"
"value to be added to 1.</p>"
msgstr ""
"<p><a name=\"fc53\"></a>С другой стороны, функциональный пример, который \n"
"мы вам дали, был декларативным. На первом этапе мы сказали, дайте нам \n"
"сумму 1 и (+ 2…). Последний объект еще не был рассчитан, мы просто "
"сказали, \n"
"что хотим. Только на последующих этапах мы работали в направлении вниз и \n"
"вычисляли каждую часть этой формы и вычисляли значение, которое нужно \n"
"добавить к 1.</p>"

#: in_ed/continuations-in-common-lisp.html:291
msgid ""
"<p><a name=\"7059\"></a>One may think the return of values upwards as\n"
"the imperative calculation done by the interpreter to calculate the\n"
"final outcome, after evaluating each part, i.e.:</p>"
msgstr ""
"<p><a name=\"7059\"></a>Можно подумать, что возврат значений наверх "
"является \n"
"императивным вычислением, выполняемым интерпретатором для вычисления \n"
"окончательного результата после вычисления каждой части, то есть: </p>"

#: in_ed/continuations-in-common-lisp.html:297
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"7f22\"></a>A form is an\n"
"\texpression of what we want</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"7f22\"></a>Форма - это выражение "
"того, \n"
"\tчто мы хотим</p>"

#: in_ed/continuations-in-common-lisp.html:302
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"039a\"></a>Evaluating\n"
"\tthe elements of the form â Determining what we want</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"039a\"></a>Вычисление(оценка) "
"элементов формы → \n"
"\tОпределение того, чего мы хотим</p>"

#: in_ed/continuations-in-common-lisp.html:305
msgctxt "in_ed/continuations-in-common-lisp.html:305"
msgid "\t<li/>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:308
msgid ""
"<p><a name=\"e872\"></a>Returning the values â Giving us what\n"
"\twe want</p>"
msgstr ""
"<p><a name=\"e872\"></a>Возврат значений → \n"
"\tДает нам то, что мы хотим</p>"

#: in_ed/continuations-in-common-lisp.html:311
msgctxt "in_ed/continuations-in-common-lisp.html:311"
msgid "</ul>"
msgstr ""

#: in_ed/continuations-in-common-lisp.html:319
msgid ""
"<p><a name=\"e516\"></a>In functional programming, it is easy to ask\n"
"for what we want (i.e. a form is an expression of what we want), but\n"
"it is harder to express the steps to get it. For this reason,\n"
"continuations, which are the remainder of steps in a program at a\n"
"particular point in the program, are harder to express manually in\n"
"functional programming, as the style of the functional paradigm\n"
"obscures this part (the âhowâ) in favour for the âwhatâ.</p>"
msgstr ""
"<p><a name=\"e516\"></a>В функциональном программировании легко спросить, \n"
"чего мы хотим (т. е. Форма - это выражение того, что мы хотим), но сложнее \n"
"выразить шаги, чтобы получить это. По этой причине продолжения, которые \n"
"представляют собой остаток шагов программы в определенной точке программы, \n"
"сложнее выразить вручную в функциональном программировании, поскольку "
"стиль \n"
"функциональной парадигмы затемняет эту часть («как») в пользу  «что». </p>"

#: in_ed/continuations-in-common-lisp.html:329
msgid ""
"<p><a name=\"e381\"></a>Returning back to our earlier discussion, it is\n"
"relatively easy to ask for the bottom part <code class=\"western\">(+ 3\n"
"(+ 4 5))</code> as that is simply asking for what we want; its a bit\n"
"harder to ask for the top part, because that is remainder of steps in\n"
"a calculation, and our language style explicitly obscures the steps\n"
"of calculation (the âhowâ) from the steps of evaluation (asking\n"
"for âwhatâ we want).</p>"
msgstr ""
"<p><a name=\"e381\"></a>Возвращаясь к нашему предыдущему обсуждению, \n"
"относительно легко попросить нижнюю часть <code class=\"western\">(+ 3\n"
"(+ 4 5))</code>, поскольку это просто запрос того, что мы хотим; \n"
"немного сложнее запросить верхнюю часть, потому что это остаток шагов \n"
"в вычислении, а наш языковой стиль явно скрывает шаги вычисления («как») \n"
"от шагов вычисления(оценки) (спрашивая «что» мы хотим ).</p>"

#: in_ed/continuations-in-common-lisp.html:338
msgid ""
"<p><a name=\"d2a4\"></a>Continuations are thus an important mechanism\n"
"to bridge this gap, to make it easier to get the remaining steps of a\n"
"program. I am no expert, but based on the above, I would assume\n"
"continuations hold far less importance in imperative languages\n"
"because the remaining steps of a program are very obvious in those\n"
"languages.</p>"
msgstr ""
"<p><a name=\"d2a4\"></a>Таким образом, продолжения являются важным "
"механизмом \n"
"для преодоления этого пробела, чтобы упростить выполнение оставшихся шагов "
"программы. \n"
"Я не эксперт, но, основываясь на вышеизложенном, я бы предположил, что "
"продолжения \n"
"имеют гораздо меньшее значение в императивных языках, потому что оставшиеся "
"шаги \n"
"программы очень очевидны на этих языках.</p>"

#: in_ed/continuations-in-common-lisp.html:348
msgid ""
"<p><a name=\"2bf5\"></a>And as a final concluding thought to Part 1 of\n"
"this guide, I hope the above elaboration highlights the importance of\n"
"understanding and using continuations in functional programming, as\n"
"they represent a key facet of the limitations of the language itself\n"
"(limitations may not be the best word, but rather this deficiency is\n"
"simply an outcome of functional programming focusing on what we want\n"
"and not how).</p>"
msgstr ""
"<p><a name=\"2bf5\"></a>И в качестве заключительной мысли к Части 1 этого \n"
"руководства, я надеюсь, что приведенное выше уточнение подчеркивает \n"
"важность понимания и использования продолжений в функциональном "
"программировании, \n"
"поскольку они представляют собой ключевой аспект ограничений самого \n"
"языка (ограничения может быть не лучшим словом, но этот недостаток - \n"
"просто результат функционального программирования, сосредоточенного на "
"том, \n"
"что мы хотим, а не на том, как этого достичь). </p>"

#: in_ed/continuations-in-common-lisp.html:352
msgid ""
"<h1 class=\"western\"><a name=\"a3a0\"></a>Continuations in Common Lisp\n"
"(Part 2) â Sneak Peak</h1>"
msgstr ""
"<h1 class=\"western\"><a name=\"a3a0\"></a>Продолжения в Common Lisp (Часть "
"2) — Пик скрытности</h1>"

#: in_ed/continuations-in-common-lisp.html:356
msgid ""
"<p><a name=\"6cae\"></a>Letâs now move on and learn how to implement\n"
"continuations in Common Lisp. Below are the macros we need. Yikes! We\n"
"will cover these in Part 2 of the guide, to come out shortly.</p>"
msgstr ""
"<p><a name=\"6cae\"></a>Давайте теперь продолжим и узнаем, как реализовать \n"
"продолжения в Common Lisp. Ниже приведены необходимые нам макросы. Ой! \n"
"Мы рассмотрим их во второй части руководства, которая вскоре выйдет. </p>"

#: in_ed/continuations-in-common-lisp.html:375
msgid ""
"<pre class=\"western\"><a name=\"2a10\"></a><a name=\"d20d\"></a><a name="
"\"7a61\"></a>(defvar *actual-cont* #'identity)(define-symbol-macro *cont* "
"*actual-cont*)(defmacro =defun (name parameters &amp;body body)\n"
"  (let ((f (intern (concatenate 'string\n"
"                                &quot;=&quot;\n"
"                                (symbol-name name)))))\n"
"    `(progn\n"
"       (defmacro ,name ,parameters\n"
"         `(,',f *cont* ,,@parameters))\n"
"       (defun ,f (*cont* ,@parameters)\n"
"<a name=\"92c3\"></a>         ,@body))))(defmacro =bind (parameters "
"expression &amp;body body)\n"
"  `(let ((*cont* #'(lambda ,parameters ,@body)))\n"
"<a name=\"432c\"></a>     ,expression))(defmacro =values (&amp;rest return-"
"values)\n"
"<a name=\"c5d0\"></a>  `(funcall *cont* ,@return-values))(defmacro =funcall "
"(fn &amp;rest arguments)\n"
"<a name=\"8ed6\"></a>  `(funcall ,fn *cont* ,@arguments))(defmacro =apply "
"(fn &amp;rest arguments)\n"
"<a name=\"ab35\"></a>  `(apply ,fn *cont* ,@arguments))(defmacro =lambda "
"(parameters &amp;body body)\n"
"  `#'(lambda (*cont* ,@parameters)\n"
"       ,@body))</pre>\n"
"</body>\n"
"</html>"
msgstr ""
