#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-15 15:14+0300\n"
"PO-Revision-Date: 2021-08-24 11:06+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:29
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:42:05.003508762\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T12:46:35.719071997\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ttd p { margin-bottom: 0cm }\n"
"\t\tth p { margin-bottom: 0cm }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Common Lisp Macros By Example Tutorial</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:42:05.003508762\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T12:46:35.719071997\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ttd p { margin-bottom: 0cm }\n"
"\t\tth p { margin-bottom: 0cm }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Макросы Common Lisp учебник на примерах</h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:34
msgid ""
"<p>I have recently edited and somewhat expanded the macros page on\n"
"the Common Lisp Cookbook. I find it may more legible and reader\n"
"friendly, so I reproduce it below (however, I cut two parts so than\n"
"you get the essential).</p>"
msgstr ""
"<p>Я недавно отредактировал и несколько расширил страницу макросов в \n"
"Common Lisp Cookbook. Я считаю, что она может быть более разборчивой \n"
"и удобной для читателя, поэтому воспроизведу её ниже (однако я вырезал две "
"части, \n"
"чтобы вы поняли основное).</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:39
msgid ""
"<p>Youâd better read it on the Cookbook:\n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/macros.html\">https://"
"lispcookbook.github.io/cl-cookbook/macros.html</a></p>"
msgstr ""
"<p>Вам лучше прочитать это в Поваренной книге:\n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/macros.html\">https://"
"lispcookbook.github.io/cl-cookbook/macros.html</a></p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:42
msgid "<hr/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:56
msgid ""
"<p>The word <em>macro</em> is used generally in computer science to\n"
"mean a syntactic extension to a programming language. (Note: The name\n"
"comes from the word âmacro-instruction,â which was a useful\n"
"feature of many second-generation assembly languages. A\n"
"macro-instruction looked like a single instruction, but expanded into\n"
"a sequence of actual instructions. The basic idea has since been used\n"
"many times, notably in the C preprocessor. The name âmacroâ is\n"
"perhaps not ideal, since it connotes nothing relevant to what it\n"
"names, but weâre stuck with it.) Although many languages have a\n"
"macro facility, none of them are as powerful as Lispâs. The basic\n"
"mechanism of Lisp macros is simple, but has subtle complexities, so\n"
"learning your way around it takes a bit of practice.</p>"
msgstr ""
"<p>Слово <em>макрос</em> обычно используется в информатике для обозначения \n"
"синтаксического расширения языка программирования. (Примечание. Название \n"
"происходит от слова «макро-инструкция», которое было полезной функцией \n"
"многих языков ассемблера второго поколения. Макро-инструкция выглядела \n"
"как отдельная инструкция, но была расширяема до последовательности \n"
"реальных инструкций. Основная идея с тех пор использовалась много раз, \n"
"особенно в препроцессоре C. Название «макрос», возможно, не идеально, \n"
"поскольку оно не означает ничего, имеющего отношение к тому, что он "
"называет, \n"
"но мы застряли на нем.) Хотя многие языки имеют возможность макроса, ни один "
"из них \n"
"не является таким мощным, как Lisp. Базовый механизм макросов Lisp прост, \n"
"но имеет тонкую сложность, поэтому изучение его работы требует некоторой "
"практики. </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:59
msgid ""
"<h1 class=\"western\"><a name=\"how-macros-work\"></a>How Macros Work</h1>"
msgstr ""
"<h1 class=\"western\"><a name=\"how-macros-work\"></a>Как работают макросы</"
"h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:65
msgid ""
"<p>A macro is an ordinary piece of Lisp code that operates on <em>another\n"
"piece of putative Lisp code,</em> translating it into (a version\n"
"closer to) executable Lisp. That may sound a bit complicated, so\n"
"letâs give a simple example. Suppose you want a version of <code class="
"\"western\"><a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/"
"s_setq.htm\">setq</a></code>\n"
"that sets two variables to the same value. So if you write</p>"
msgstr ""
"<p>Макрос - это обычный фрагмент кода Лиспа, который оперирует\n"
"с <em>другим фрагментом предполагаемого кода Лиспа</em>, переводя \n"
"его в (более близкую к) версию исполняемого Лиспа. Это может показаться \n"
"немного сложным, поэтому приведем простой пример. Предположим, вам нужна \n"
"версия code class=\"western\"><a href=\"http://www.lispworks.com/"
"documentation/HyperSpec/Body/s_setq.htm\">setq</a></code>, которая "
"устанавливает для двух переменных \n"
"одно и то же значение. Итак, если вы напишете </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:72
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setq2 x y (+ z 3))</code></pre>\n"
"<p>\n"
"when <code class=\"western\">z</code>=8 then both <code class=\"western\">x</"
"code>\n"
"and <code class=\"western\">y</code> are set to 11. (I canât think of\n"
"any use for this, but itâs just an example.)</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setq2 x y (+ z 3))</code></pre>\n"
"<p>\n"
"когда <code class=\"western\">z</code>=8, то и <code class=\"western\">x</"
"code>, \n"
"и <code class=\"western\">y</code> равны 11. (я не могу придумать, как это "
"можно \n"
"использовать, но это всего лишь пример). </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:80
msgid ""
"<p>It should be obvious that we canât define <code class=\"western\">setq2</"
"code>\n"
"as a function. If <code class=\"western\">x</code>=50 and <code class="
"\"western\">y</code>=<em>-5</em>,\n"
"this function would receive the values 50, <em>-5</em>, and 11; it\n"
"would have no knowledge of what variables were supposed to be set.\n"
"What we really want to say is, When you (the Lisp system) see:</p>"
msgstr ""
"<p>Должно быть очевидно, что мы не можем определить <code class=\"western"
"\">setq2</code> \n"
"как функцию. Если <code class=\"western\">x</code>=50 и\n"
"<code class=\"western\">y</code>=<em>-5</em>, эта функция получит значения "
"50, <em>-5</em> и 11; \n"
"она не знала бы, какие переменные должны были быть установлены. Мы "
"действительно \n"
"хотим сказать, когда вы (система Lisp) видите: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:85
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setq2 v1 v2 e)</code></pre>\n"
"<p>\n"
"then treat it as equivalent to:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setq2 v1 v2 e)</code></pre>\n"
"<p>\n"
"затем трактуете это как к эквивалент:</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:97
msgid ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq v1 e)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq v2 e))</"
"code></pre>\n"
"<p>\n"
"Actually, this isnât quite right, but it will do for now. A macro\n"
"allows us to do precisely this, by specifying a program for\n"
"transforming the input pattern <code class=\"western\">(setq2 </code><code "
"class=\"western\"><i>v</i></code><code class=\"western\"><sub><i>1</i></"
"sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>v</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western\">)</"
"code>\n"
"into the output pattern <code class=\"western\">(progn ...)</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq v1 e)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq v2 e))</"
"code></pre>\n"
"<p>\n"
"Вообще-то, это не совсем так, но пока подойдет. Макрос позволяет нам "
"сделать \n"
"именно это, указав программу для преобразования входного шаблона \n"
"<code class=\"western\">(setq2 </code><code class=\"western\"><i>v</i></"
"code><code class=\"western\"><sub><i>1</i></sub></code><code class=\"western"
"\">\n"
"</code><code class=\"western\"><i>v</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western\">)</"
"code> в выходной шаблон <code class=\"western\">(progn ...)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:100
msgid "<h2 class=\"western\"><a name=\"quote\"></a>Quote</h2>"
msgstr "<h2 class=\"western\"><a name=\"quote\"></a>Quote(цитата/кавычка)</h2>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:103
msgid ""
"<p>Hereâs how we could define the <code class=\"western\">setq2</code>\n"
"macro:</p>"
msgstr ""
"<p>Вот как мы можем определить макрос  <code class=\"western\">setq2</code>:"
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:109
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(list 'progn (list "
"'setq v1 e) (list 'setq v2 e)))</code></pre>\n"
"<p>\n"
"It takes as parameters two variables and one expression.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(list 'progn (list "
"'setq v1 e) (list 'setq v2 e)))</code></pre>\n"
"<p>\n"
"Он принимает в качестве параметров две переменные и одно выражение.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:115
msgid ""
"<p>Then it returns a piece of code. In Lisp, because code is\n"
"represented as lists, we can simply return a list that represents\n"
"code.</p>"
msgstr ""
"<p>Затем он возвращает фрагмент кода. В Лиспе, поскольку код представлен \n"
"в виде списков, мы можем просто вернуть список, представляющий код.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:120
msgid ""
"<p>We also use the <em>quote</em>: each <em>quoted</em> symbol\n"
"evaluates to itself, aka it is returned as is:</p>"
msgstr ""
"<p>Мы также используем <em>quote</em>(кавычку/цитату): каждый <em>quoted</"
"em>\n"
"(цитируемый)  символ вычисляет сам себя, иначе говоря, он возвращается как "
"есть: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:127
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">(quote foo\n"
"\tbar baz)</code> returns <code class=\"western\">(foo bar baz)</code> \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">(quote foo\n"
"\tbar baz)</code> вернет <code class=\"western\">(foo bar baz)</code> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:135
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the quote character, <code class=\"western"
"\">'</code>,\n"
"\tis a shortcut for <code class=\"western\">quote</code>, a <em>special\n"
"\toperator</em> (not a function nor a macro, but one of a few special\n"
"\toperators forming the core of Lisp). \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">символный знак кавычки, <code class=\"western"
"\">'</code>, \n"
"\tявляется сокращением для <code class=\"western\">quote</code>, \n"
"\t<em>специального оператора</em> (не функции или макроса, а одного из \n"
"\tнескольких специальных операторов, составляющих ядро Lisp).. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:138
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:141
msgid ""
"<p>so, <code class=\"western\">'foo</code> evaluates to <code class=\"western"
"\">foo</code>.\n"
"\t\t</p>"
msgstr ""
"<p>итак, <code class=\"western\">'foo</code> вычисляется в <code class="
"\"western\">foo</code>.\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:144
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:144"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:146
msgid "<p>So, our macro retourns the following bits:</p>"
msgstr "<p>Итак, наш макрос возвращает следующие биты: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:152
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the symbol <code class=\"western\">progn</"
"code>,\n"
"\t\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">символ <code class=\"western\">progn</"
"code>,\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:157
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">a second list, that contains \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">второй список, содержащий\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:163
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the symbol <code class=\"western\">setq</"
"code>\n"
"\t\t\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">символ <code class=\"western\">setq</code>\n"
"\t\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:169
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the variable <code class=\"western\">v1</"
"code>:\n"
"\t\tnote that the variable is not evaluated inside the macro! \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">переменную <code class=\"western\">v1</"
"code>: обратите внимание, \n"
"\tчто переменная не вычисляется внутри макроса!\n"
"\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:175
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the expression <code class=\"western\">e</"
"code>:\n"
"\t\tit is not evaluated either! \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">выражение <code class=\"western\">e</"
"code>: \n"
"\tоно тоже не вычисляется! \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:179
msgid ""
"\t</ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:182
msgid ""
"<p>a second list, with <code class=\"western\">v2</code>. \n"
"\t</p>"
msgstr ""
"<p>второй список с  <code class=\"western\">v2</code>. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:185
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:185"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:187
msgid "<p>We can use it like this:</p>"
msgstr "<p>Мы можем использовать это так: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:196
msgid ""
"<pre class=\"western\"><code class=\"western\">(defparameter v1 1)</code>\n"
"<code class=\"western\">(defparameter v2 2)</code>\n"
"<code class=\"western\">(setq2 v1 v2 3)</code>\n"
"<code class=\"western\">;; 3</code></pre>\n"
"<p>\n"
"We can check, <code class=\"western\">v1</code> and <code class=\"western"
"\">v2</code>\n"
"were set to <code class=\"western\">3</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defparameter v1 1)</code>\n"
"<code class=\"western\">(defparameter v2 2)</code>\n"
"<code class=\"western\">(setq2 v1 v2 3)</code>\n"
"<code class=\"western\">;; 3</code></pre>\n"
"<p>\n"
"Мы можем проверить, <code class=\"western\">v1</code> и <code class=\"western"
"\">v2</code> \n"
"были установлены в <code class=\"western\">3</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:199
msgid "<h2 class=\"western\"><a name=\"macroexpand\"></a>Macroexpand</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"macroexpand\"></"
"a>Macroexpand(Макрорасширение/расширение макроса)</h2>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:206
msgid ""
"<p>We must start writing a macro when we know what code we want to\n"
"generate. Once weâve begun writing one, it becomes very useful to\n"
"check effectively what code does the macro generate. The function for\n"
"that is <code class=\"western\">macroexpand</code>. It is a function,\n"
"and we give it some code, as a list (so, we quote the code snippet we\n"
"give it):</p>"
msgstr ""
"<p>Мы должны начать писать макрос, когда знаем, какой код хотим "
"сгенерировать. \n"
"Как только мы начнем его писать, становится очень полезным эффективно "
"проверять, \n"
"какой код генерирует макрос. Для этого используется функция \n"
"<code class=\"western\">macroexpand</code>. Это функция, и мы даем ей "
"некоторый код \n"
"в виде списка (для этого, цитируем фрагмент кода, который мы ей даем): </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:213
msgid ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 v1 v2 "
"3))</code>\n"
"<code class=\"western\">;; (PROGN (SETQ V1 3) (SETQ V2 3))</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Yay, our macro expands to the code we wanted!</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 v1 v2 "
"3))</code>\n"
"<code class=\"western\">;; (PROGN (SETQ V1 3) (SETQ V2 3))</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Ура, наш макрос расширяется до кода, который мы хотели!\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:217
msgid "<p>More interestingly:</p>"
msgstr "<p>Еще Интереснее:</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:226
msgid ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 v1 v2 (+ "
"z 3)))</code>\n"
"<code class=\"western\">;; (PROGN (SETQ V1 (+ z 3)) (SETQ V2 (+ z 3)))</"
"code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"We can confirm that our expression <code class=\"western\">e</code>,\n"
"here <code class=\"western\">(+ z 3)</code>, was not evaluated. We will\n"
"see how to control the evaluation of arguments with the comma: <code class="
"\"western\">,</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 v1 v2 (+ "
"z 3)))</code>\n"
"<code class=\"western\">;; (PROGN (SETQ V1 (+ z 3)) (SETQ V2 (+ z 3)))</"
"code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Мы можем подтвердить, что наше выражение <code class=\"western\">e</code>, "
"здесь \n"
"<code class=\"western\">(+ z 3)</code>, не было вычислено. Мы увидим, \n"
"как управлять вычислением аргументов с помощью запятой: \n"
"<code class=\"western\">,</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:233
msgid ""
"<p>Note: with Slime, you can call macroexpand by putting the cursor\n"
"at the left of the parenthesis of the s-expr to expand and call the\n"
"function<code class=\"western\">M-x slime-macroexpand-[1,all]</code>,\n"
"or <code class=\"western\">C-c M-m</code>:</p>"
msgstr ""
"<p>Примечание: с помощью Slime вы можете вызвать macroexpand, поместив "
"курсор \n"
"слева от скобки s-expr, чтобы развернуть и вызвать функцию \n"
" <code class=\"western\">M-x slime-macroexpand-[1,all]</code>,\n"
"или <code class=\"western\">C-c M-m</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:241
msgid ""
"<pre class=\"western\"><code class=\"western\">[|](setq2 v1 v2 3)</code>\n"
"<code class=\"western\">;^ cursor</code>\n"
"<code class=\"western\">; C-c M-m</code>\n"
"<code class=\"western\">; =&gt;</code>\n"
"<code class=\"western\">; (PROGN (SETQ V1 3) (SETQ V2 3))</code></pre><h2 "
"class=\"western\">\n"
"<a name=\"macros-vs-functions\"></a>Macros VS functions</h2>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">[|](setq2 v1 v2 3)</code>\n"
"<code class=\"western\">;^ cursor</code>\n"
"<code class=\"western\">; C-c M-m</code>\n"
"<code class=\"western\">; =&gt;</code>\n"
"<code class=\"western\">; (PROGN (SETQ V1 3) (SETQ V2 3))</code></pre><h2 "
"class=\"western\">\n"
"<a name=\"macros-vs-functions\"></a>Макросы против функций</h2>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:243
msgid "<p>Our macro is very close to the following function definition:</p>"
msgstr "<p>Наш макрос очень близок к следующему определению функции: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:251
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun setq2-function (v1 v2 "
"e)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(list 'progn (list "
"'setq v1 e) (list 'setq v2 e)))</code></pre>\n"
"<p>\n"
"If we evaluated <code class=\"western\">(setq2-function 'x 'y '(+ z 3))</"
"code>\n"
"(note that each argument is <em>quoted</em>, so it isnât evaluated\n"
"when we call the function), we would get</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun setq2-function (v1 v2 "
"e)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(list 'progn (list "
"'setq v1 e) (list 'setq v2 e)))</code></pre>\n"
"<p>\n"
"Если бы мы вычислили <code class=\"western\">(setq2-function 'x 'y '(+ z "
"3))</code> \n"
"(обратите внимание, что каждый аргумент заключен в кавычки, поэтому он \n"
"не вычисляется, когда мы вызываем функцию), мы получили бы </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:267
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(progn (setq x (+ z 3)) (setq y (+ z 3)))</code></pre>\n"
"<p>\n"
"This is a perfectly ordinary Lisp computation, whose sole point of\n"
"interest is that its output is a piece of executable Lisp code. What\n"
"<code class=\"western\">defmacro</code> does is create this function\n"
"implicitly and make sure that whenever an expression of the form\n"
"<code class=\"western\">(setq2 x y (+ z 3))</code> is seen,\n"
"<code class=\"western\">setq2-function</code> is called with the pieces\n"
"of the form as arguments, namely <code class=\"western\">x</code>, <code "
"class=\"western\">y</code>,\n"
"and <code class=\"western\">(+ z 3)</code>. The resulting piece of code\n"
"then replaces the call to <code class=\"western\">setq2</code>, and\n"
"execution resumes as if the new piece of code had occurred in the\n"
"first place. The macro form is said to <em>expand</em> into the new\n"
"piece of code.</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(progn (setq x (+ z 3)) (setq y (+ z 3)))</code></pre>\n"
"<p>\n"
"Это совершенно обычное вычисление на Лиспе, единственное, что \n"
"в нем интересного - это то, что его вывод представляет собой фрагмент \n"
"исполняемого кода на Лиспе. Что делает <code class=\"western\">defmacro</"
"code>, \n"
"так это неявно создает эту функцию и гарантирует, что всякий раз, когда \n"
"отображается выражение формы <code class=\"western\">(setq2 x y (+ z 3))</"
"code>, \n"
"вызывается <code class=\"western\">setq2-function</code> с частями формы \n"
"в качестве аргументов, а именно <code class=\"western\">x</code>, \n"
"<code class=\"western\">y</code> и <code class=\"western\">(+ z 3)</code>. \n"
"Полученный фрагмент кода затем заменяет вызов <code class=\"western\">setq2</"
"code>, \n"
"и выполнение возобновляется, как если бы новый фрагмент кода возник "
"изначально. \n"
"Говорят, что форма макроса <em>expand</em>(расширяется) в новый фрагмент "
"кода.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:271
msgid ""
"<h2 class=\"western\"><a name=\"evaluation-context\"></a>Evaluation\n"
"context</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"evaluation-context\"></a>Контекст "
"вычисления</h2>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:287
msgid ""
"<p>This is all there is to it, except, of course, for the myriad\n"
"subtle consequences. The main consequence is that <em>run time for\n"
"the </em><em><code class=\"western\">setq2</code></em><em> macro</em>\n"
"is <em>compile time for its context.</em> That is, suppose the Lisp\n"
"system is compiling a function, and midway through it finds the\n"
"expression <code class=\"western\">(setq2 x y (+ z 3))</code>. The job\n"
"of the compiler is, of course, to translate source code into\n"
"something executable, such as machine language or perhaps byte code.\n"
"Hence it doesnât execute the source code, but operates on it in\n"
"various mysterious ways. However, once the compiler sees the <code class="
"\"western\">setq2</code>\n"
"expression, it must suddenly switch to executing the body of the\n"
"<code class=\"western\">setq2</code> macro. As I said, this is an\n"
"ordinary piece of Lisp code, which can in principle do anything any\n"
"other piece of Lisp code can do. That means that when the compiler is\n"
"running, the entire Lisp (run-time) system must be present.</p>"
msgstr ""
"<p>Вот и все, за исключением, конечно, множества тонких последствий. \n"
"Основным следствием этого является то, что <em>время выполнения</em> \n"
"<em>макроса</em> <em><code class=\"western\">setq2</code></em> - это "
"<em>время \n"
"компиляции его контекста</em>. То есть предположим, что система Lisp "
"компилирует \n"
"функцию и на полпути находит выражение <code class=\"western\">(setq2 x y (+ "
"z 3))</code>. \n"
"Работа компилятора, конечно, состоит в том, чтобы преобразовать исходный "
"код \n"
"во что-то исполняемое, например, машинный язык или, возможно, байтовый "
"код. \n"
"Следовательно, он не выполняет исходный код, а работает с ним различными \n"
"загадочными способами. Однако, как только компилятор видит выражение \n"
"<code class=\"western\">setq2</code>, он должен внезапно переключиться на \n"
"выполнение тела макроса <code class=\"western\">setq2</code>. Как я уже "
"сказал, \n"
"это обычный фрагмент кода на Лиспе, который в принципе может делать все, \n"
"что может делать любой другой фрагмент кода на Лиспе. Это означает, что \n"
"когда компилятор работает, должна присутствовать вся система Lisp (времени "
"выполнения). </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:292
msgid ""
"<p>Weâll stress this once more: at compile-time, you have the full\n"
"language at your disposal.</p>"
msgstr ""
"<p>Подчеркнем еще раз: во время компиляции в вашем распоряжении полный язык."
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:301
msgid ""
"<p>Novices often make the following sort of mistake. Suppose that the\n"
"<code class=\"western\">setq2</code> macro needs to do some complex\n"
"transformation on its <code class=\"western\">e</code> argument before\n"
"plugging it into the result. Suppose this transformation can be\n"
"written as a Lisp procedure <code class=\"western\">some-computation</"
"code>.\n"
"The novice will often write:</p>"
msgstr ""
"<p>Новички часто совершают следующие ошибки. Предположим, что макросу \n"
"<code class=\"western\">setq2</code> необходимо выполнить сложное \n"
"преобразование своего аргумента <code class=\"western\">e</code> перед "
"тем, \n"
"как вставить его в результат. Предположим, что это преобразование можно \n"
"записать как процедуру Лиспа <code class=\"western\">some-computation</"
"code>. \n"
"Новичок будет часто писать: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:306
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:306"
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(let ((e1 (some-"
"computation e)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(list 'progn "
"(list 'setq v1 e1) (list 'setq v2 e1))))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:316
msgid ""
"<code class=\"western\">(defmacro some-computation (exp) ...) ;; _Wrong!_</"
"code></pre>\n"
"<p>\n"
"The mistake is to suppose that once a macro is called, the Lisp\n"
"system enters a âmacro world,â so naturally everything in that\n"
"world must be defined using <code class=\"western\">defmacro</code>.\n"
"This is the wrong picture. The right picture is that <code class=\"western"
"\">defmacro</code>\n"
"enables a step into the <em>ordinary Lisp world</em>, but in which\n"
"the principal object of manipulation is Lisp code. Once that step is\n"
"taken, one uses ordinary Lisp function definitions:</p>"
msgstr ""
"<code class=\"western\">(defmacro some-computation (exp) ...) ;; _Wrong!_</"
"code></pre>\n"
"<p>\n"
"Ошибка состоит в том, чтобы предполагать, что после вызова макроса система "
"Lisp \n"
"входит в «макро-мир», поэтому, естественно, все в этом мире должно быть "
"определено \n"
"с помощью <code class=\"western\">defmacro</code>. Это неправильная "
"картина. \n"
"Правильная картина - это то, что <code class=\"western\">defmacro</code> "
"позволяет шагнуть \n"
"в <em>обычный мир Лиспа</em>, но в котором основным объектом манипуляции "
"является \n"
"код Лиспа. После того, как этот шаг сделан, можно использовать обычные "
"определения \n"
"функций Лиспа: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:321
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:321"
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(let ((e1 (some-"
"computation e)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(list 'progn "
"(list 'setq v1 e1) (list 'setq v2 e1))))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:329
msgid ""
"<code class=\"western\">(defun some-computation (exp) ...) ;; _Right!_</"
"code></pre>\n"
"<p>\n"
"One possible explanation for this mistake may be that in other\n"
"languages, such as C, invoking a preprocessor macro <em>does</em> get\n"
"you into a different world; you canât run an arbitrary C program.\n"
"It might be worth pausing to think about what it might mean to be\n"
"able to.</p>"
msgstr ""
"<code class=\"western\">(defun some-computation (exp) ...) ;; _Right!_</"
"code></pre>\n"
"<p>\n"
"Одним из возможных объяснений этой ошибки может быть то, что в других "
"языках, \n"
"таких как C, вызов макроса препроцессора действительно переносит вас в "
"другой мир; \n"
"вы не можете запустить произвольную программу на C. Возможно, стоит "
"остановиться и \n"
"подумать о том, что это может означать - иметь возможность.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:342
msgid ""
"<p>Another subtle consequence is that we must spell out how the\n"
"arguments to the macro get distributed to the hypothetical\n"
"behind-the-scenes function (called <code class=\"western\">setq2-function</"
"code>\n"
"in my example). In most cases, it is easy to do so: In defining a\n"
"macro, we use all the usual <code class=\"western\">lambda</code>-list\n"
"syntax, such as <code class=\"western\">&amp;optional</code>, <code class="
"\"western\">&amp;rest</code>,\n"
"<code class=\"western\">&amp;key</code>, but what gets bound to the\n"
"formal parameters are pieces of the macro form, not their values\n"
"(which are mostly unknown, this being compile time for the macro\n"
"form). So if we defined a macro thus:</p>"
msgstr ""
"<p>Еще одно неуловимое следствие состоит в том, что мы должны разъяснить, \n"
"как аргументы макроса распределяются между гипотетической скрытой функцией \n"
"(в моем примере она называется <code class=\"western\">setq2-function</"
"code>). \n"
"В большинстве случаев это легко сделать: при определении макроса мы "
"используем \n"
"весь обычный синтаксис <code class=\"western\">lambda</code>-списков, такой "
"как \n"
" <code class=\"western\">&amp;optional</code>, <code class=\"western\">&amp;"
"rest</code>,\n"
"<code class=\"western\">&amp;key</code>, но то, что связано с формальными "
"параметрами, \n"
"- это части формы макроса, а не их значения (которые в основном "
"неизвестны, \n"
"во время компиляции макроформы). Итак, если мы определили макрос так: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:347
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defmacro foo (x &amp;optional y &amp;key (cxt 'null)) ...)</code></pre>\n"
"<p>\n"
"then</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defmacro foo (x &amp;optional y &amp;key (cxt 'null)) ...)</code></pre>\n"
"<p>\n"
"тогда</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:353
msgid ""
"<table cellpadding=\"2\" cellspacing=\"2\">\n"
"\t<thead>\n"
"\t\t<tr>\n"
"\t\t\t<th style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:355
msgid "<p><em>If we call it thus â¦</em></p>"
msgstr "<p><em>Если мы вызовем это так …</em></p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:359
msgid ""
"\t\t\t</th>\n"
"\t\t\t<th style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:361
msgid "<p><em>The parametersâ values are â¦</em></p>"
msgstr "<p><em>Значения параметров …</em></p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:365
msgid ""
"\t\t\t</th>\n"
"\t\t</tr>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:370
msgid ""
"\t</thead>\n"
"\t<tbody>\n"
"\t\t<tr>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:372
msgid "<p><code class=\"western\">(foo a)</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:376
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:376"
msgid ""
"\t\t\t</td>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:379
msgid ""
"<p><code class=\"western\">x=a</code>, <code class=\"western\">y=nil</"
"code>,\n"
"\t\t\t\t<code class=\"western\">cxt=null</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:383
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:383"
msgid ""
"\t\t\t</td>\n"
"\t\t</tr>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:386
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:386"
msgid ""
"\t\t<tr>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:388
msgid "<p><code class=\"western\">(foo (+ a 1) (- y 1))</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:392
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:392"
msgid ""
"\t\t\t</td>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:395
msgid ""
"<p><code class=\"western\">x=(+ a 1)</code>, <code class=\"western\">y=(-\n"
"\t\t\t\ty 1)</code>, <code class=\"western\">cxt=null</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:399
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:399"
msgid ""
"\t\t\t</td>\n"
"\t\t</tr>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:402
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:402"
msgid ""
"\t\t<tr>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:404
msgid "<p><code class=\"western\">(foo a b :cxt (zap zip))</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:408
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:408"
msgid ""
"\t\t\t</td>\n"
"\t\t\t<td style=\"border: none; padding: 0cm\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:411
msgid ""
"<p><code class=\"western\">x=a</code>, <code class=\"western\">y=b</code>,\n"
"\t\t\t\t<code class=\"western\">cxt=(zap zip)</code></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:415
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:415"
msgid ""
"\t\t\t</td>\n"
"\t\t</tr>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:418
msgid ""
"\t</tbody>\n"
"</table>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:421
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:423
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:423"
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:442
msgid ""
"<p>Note that the values of the variables are the actual expressions\n"
"<code class=\"western\">(+ a 1)</code> and <code class=\"western\">(zap\n"
"zip)</code>. There is no requirement that these expressionsâ values\n"
"be known, or even that they have values. The macro can do anything it\n"
"likes with them. For instance, hereâs an even more useless variant\n"
"of <code class=\"western\">setq</code>: <code class=\"western\">(setq-"
"reversible\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>1</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>d</i></code><code class=\"western\">)</"
"code>\n"
"behaves like <code class=\"western\">(setq </code><code class=\"western"
"\"><i>e</i></code><code class=\"western\"><sub><i>1</i></sub></code><code "
"class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">)</code>\n"
"if <i>d=</i><code class=\"western\">:normal</code>, and behaves like\n"
"<code class=\"western\">(setq </code><code class=\"western\"><i>e</i></"
"code><code class=\"western\"><sub><i>2</i></sub></code><code class=\"western"
"\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>1</i></sub></code><code class=\"western\">)</code>\n"
"if <em>d=</em><code class=\"western\">:backward</code>. It could be\n"
"defined thus:</p>"
msgstr ""
"<p>Обратите внимание, что значения переменных являются фактически\n"
"выражениями <code class=\"western\">(+ a 1)</code> и\n"
" <code class=\"western\">(zap zip)</code>. Не требуется, чтобы значения \n"
"этих выражений были известны или даже имели значения. Макрос может делать \n"
"с ними все, что угодно. Например, вот еще более бесполезный вариант \n"
"<code class=\"western\">setq</code>: <code class=\"western\">(setq-"
"reversible\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>1</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">\n"
"</code><code class=\"western\"><i>d</i></code><code class=\"western\">)</"
"code> \n"
"ведет себя как <code class=\"western\">(setq </code><code class=\"western"
"\"><i>e</i></code><code class=\"western\"><sub><i>1</i></sub></code><code "
"class=\"western\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>2</i></sub></code><code class=\"western\">)</code>\n"
"если <i>d=</i><code class=\"western\">:normal</code>, и ведет себя как \n"
"<code class=\"western\">(setq </code><code class=\"western\"><i>e</i></"
"code><code class=\"western\"><sub><i>2</i></sub></code><code class=\"western"
"\">\n"
"</code><code class=\"western\"><i>e</i></code><code class=\"western"
"\"><sub><i>1</i></sub></code><code class=\"western\">)</code>\n"
"если <em>d=</em><code class=\"western\">:backward</code>. \n"
"Его можно было бы определить так: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:451
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq-reversible (e1 "
"e2 direction)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(case direction</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:normal (list "
"'setq e1 e2))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:backward (list "
"'setq e2 e1))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(t (error &quot;"
"Unknown direction: ~a&quot; direction))))</code></pre>\n"
"<p>\n"
"Hereâs how it expands:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq-reversible (e1 "
"e2 direction)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(case direction</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:normal (list "
"'setq e1 e2))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:backward (list "
"'setq e2 e1))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(t (error &quot;"
"Unknown direction: ~a&quot; direction))))</code></pre>\n"
"<p>\n"
"Вот как он расширяется: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:461
msgid ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq-"
"reversible x y :normal))</code>\n"
"<code class=\"western\">(SETQ X Y)</code>\n"
"<code class=\"western\">T</code>\n"
"<code class=\"western\">(macroexpand '(setq-reversible x y :backward))</"
"code>\n"
"<code class=\"western\">(SETQ Y X)</code>\n"
"<code class=\"western\">T</code></pre>\n"
"<p>\n"
"And with a wrong direction:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq-"
"reversible x y :normal))</code>\n"
"<code class=\"western\">(SETQ X Y)</code>\n"
"<code class=\"western\">T</code>\n"
"<code class=\"western\">(macroexpand '(setq-reversible x y :backward))</"
"code>\n"
"<code class=\"western\">(SETQ Y X)</code>\n"
"<code class=\"western\">T</code></pre>\n"
"<p>\n"
"И с неверным направлением(direction):</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:466
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(macroexpand '(setq-reversible x y :other-way-around))</code></pre>\n"
"<p>\n"
"We get an error and are prompted into the debugger!</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(macroexpand '(setq-reversible x y :other-way-around))</code></pre>\n"
"<p>\n"
"Получаем ошибку и запрашиваем в отладчике!\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:471
msgid ""
"<p>Weâll see the backquote and comma mechanism in the next section,\n"
"but hereâs a fix:</p>"
msgstr ""
"<p>Мы увидим механизм обратной кавычки(backquote) и запятой(comma) \n"
"в следующем разделе, но вот исправление: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:479
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq-reversible (v1 "
"v2 direction)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(case direction</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:normal (list "
"'setq v1 v2))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:backward (list "
"'setq v2 v1))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(t `(error &quot;"
"Unknown direction: ~a&quot; ,direction))))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">;; ^^ "
"backquote                    ^^ comma: get the value inside the backquote.</"
"code>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq-reversible (v1 "
"v2 direction)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(case direction</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:normal (list "
"'setq v1 v2))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(:backward (list "
"'setq v2 v1))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(t `(error &quot;"
"Unknown direction: ~a&quot; ,direction))))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">;; ^^ обратная "
"кавычка             ^^ запятая:получает значение внутри обратной кавычки.</"
"code>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:487
msgid ""
"<code class=\"western\">(macroexpand '(SETQ-REVERSIBLE v1 v2 :other-way-"
"around))</code>\n"
"<code class=\"western\">;; (ERROR &quot;Unknown direction: ~a&quot; :OTHER-"
"WAY-AROUND)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Now when we call <code class=\"western\">(setq-reversible v1 v2\n"
":other-way-around)</code> we still get the error and the debugger,\n"
"but at least not when using <code class=\"western\">macroexpand</code>.</p>"
msgstr ""
"<code class=\"western\">(macroexpand '(SETQ-REVERSIBLE v1 v2 :other-way-"
"around))</code>\n"
"<code class=\"western\">;; (ERROR &quot;Unknown direction: ~a&quot; :OTHER-"
"WAY-AROUND)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Теперь, когда мы вызываем <code class=\"western\">(setq-reversible v1 v2\n"
":other-way-around)</code>, мы по-прежнему получаем ошибку и отладчик, \n"
"но, по крайней мере, не при использовании  <code class=\"western"
"\">macroexpand</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:491
msgid ""
"<h1 class=\"western\"><a name=\"2-backquote\"></a><a name=\"backquote-and-"
"comma\"></a>\n"
"Backquote and comma</h1>"
msgstr ""
"<h1 class=\"western\"><a name=\"2-backquote\"></a><a name=\"backquote-and-"
"comma\"></a>\n"
"Обратная кавычка(Backquote) и запятая(comma)</h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:504
msgid ""
"<p>Before taking another step, we need to introduce a piece of Lisp\n"
"notation that is indispensable to defining macros, even though\n"
"technically it is quite independent of macros. This is the <em>backquote\n"
"facility</em>. As we saw above, the main job of a macro, when all is\n"
"said and done, is to define a piece of Lisp code, and that means\n"
"evaluating expressions such as <code class=\"western\">(list 'prog\n"
"(list 'setq ...) ...)</code>. As these expressions grow in\n"
"complexity, it becomes hard to read them and write them. What we find\n"
"ourselves wanting is a notation that provides the skeleton of an\n"
"expression, with some of the pieces filled in with new expressions.\n"
"Thatâs what backquote provides. Instead of the the <code class=\"western"
"\">list</code>\n"
"expression given above, one writes</p>"
msgstr ""
"<p>Прежде чем сделать следующий шаг, нам нужно ввести часть нотации Lisp, \n"
"которая необходима для определения макросов, хотя технически она "
"совершенно \n"
"не зависит от макросов. Это средство обратного цитирования(<em>backquote "
"facility</em>). \n"
"Как мы видели выше, основная задача макроса, когда все сказано и сделано, \n"
"состоит в том, чтобы определить фрагмент кода Lisp, а это означает "
"вычисление \n"
"таких выражений, как <code class=\"western\">(list 'prog (list "
"'setq ...) ...)</code>. \n"
"По мере того, как эти выражения становятся сложнее, их становится трудно "
"читать и писать. \n"
"Нам нужна нотация, обеспечивающая скелет выражения, с некоторыми частями, \n"
"заполняемыми новыми выражениями. Это то, что дает обратная кавычка. Вместо \n"
"приведенного выше выражения <code class=\"western\">list</code> пишут </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:513
msgid ""
"<pre class=\"western\"><code class=\"western\">  </code><code class=\"western"
"\">`(progn (setq ,v1 ,e) (setq ,v2 ,e))</code>\n"
"<code class=\"western\">;;^ backquote   ^   ^         ^   ^ commas</code></"
"pre>\n"
"<p>\n"
"The backquote (`) character signals that in the expression that\n"
"follows, every subexpression <em>not</em> preceded by a comma is to\n"
"be quoted, and every subexpression preceded by a comma is to be\n"
"evaluated.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">  </code><code class=\"western"
"\">`(progn (setq ,v1 ,e) (setq ,v2 ,e))</code>\n"
"<code class=\"western\">;;^ backquote   ^   ^         ^   ^ commas</code></"
"pre>\n"
"<p>\n"
"Символьный знак обратной кавычки (`) указывает на то, что в последующем "
"выражении \n"
"каждое подвыражение <em>без</em> запятой должно быть заключено в кавычки, \n"
"а каждое подвыражение, которому предшествует запятая, должно быть "
"вычислено.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:517
msgid "<p>You can think of it, and use it, as data interpolation:</p>"
msgstr ""
"<p>Вы можете думать об этом и использовать его как интерполяцию данных: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:523
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">`(v1 = ,v1) ;; =&gt; (V1 = 3)</code></pre>\n"
"<p>\n"
"Thatâs mostly all there is to backquote. There are just two extra\n"
"items to point out.</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">`(v1 = ,v1) ;; =&gt; (V1 = 3)</code></pre>\n"
"<p>\n"
"Это в основном все, что нужно для обратной кавычки. Следует отметить всего "
"два дополнительных момента. </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:526
msgid "<h3 class=\"western\"><a name=\"comma-splice\"></a>Comma-splice ,@</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"comma-splice\"></a>Соединяющая/сращивающая "
"запятая(Comma-splice) ,@</h3>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:532
msgid ""
"<p>First, if you write â<code class=\"western\">,@e</code>â instead\n"
"of â<code class=\"western\">,e</code>â then the value of <em>e</em>\n"
"is <em>spliced</em> (or âjoinedâ, âcombinedâ, âinterleavedâ)\n"
"into the result. So if <code class=\"western\">v</code> equals <code class="
"\"western\">(oh\n"
"boy)</code>, then</p>"
msgstr ""
"<p>Во-первых, если вы напишете «<code class=\"western\">,@e</code>» вместо \n"
"«<code class=\"western\">,e</code>», тогда значение <em>e</em> будет "
"объединено(<em>spliced</em>) \n"
"(или «соединено», «объединено», «встроено») в результат. \n"
"Итак, если <code class=\"western\">v</code> равно <code class=\"western"
"\">(oh boy)</code>, \n"
"тогда </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:537
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(zap ,@v ,v)</code></pre>\n"
"<p>\n"
"evaluates to</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(zap ,@v ,v)</code></pre>\n"
"<p>\n"
"вычисляпется в</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:549
msgid ""
"<pre class=\"western\"><code class=\"western\">(zap oh boy (oh boy))</code>\n"
"<code class=\"western\">;;   ^^^^^ elements of v (two elements), spliced.</"
"code>\n"
"<code class=\"western\">;;          ^^ v itself (a list)</code></pre>\n"
"<p>\n"
"The second occurrence of <code class=\"western\">v</code> is replaced\n"
"by its value. The first is replaced by the elements of its value. If\n"
"<code class=\"western\">v</code> had had value <code class=\"western\">()</"
"code>,\n"
"it would have disappeared entirely: the value of <code class=\"western"
"\">(zap\n"
",@v ,v)</code> would have been <code class=\"western\">(zap ())</code>,\n"
"which is the same as <code class=\"western\">(zap nil)</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(zap oh boy (oh boy))</code>\n"
"<code class=\"western\">;;   ^^^^^ элементы v (два элемента), встроены.</"
"code>\n"
"<code class=\"western\">;;          ^^ сам v(список)</code></pre>\n"
"<p>\n"
"Второе вхождение  <code class=\"western\">v</code> заменяется его "
"значением. \n"
"Первое заменяется элементами его значения. Если бы <code class=\"western"
"\">v</code> \n"
"имел значение <code class=\"western\">()</code>, он бы полностью исчез: \n"
"значение <code class=\"western\">(zap ,@v ,v)</code> было бы \n"
"<code class=\"western\">(zap ())</code>, что совпадает с  \n"
"<code class=\"western\">(zap nil)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:552
msgid "<h3 class=\"western\"><a name=\"quote-comma\"></a>Quote-comma â,</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"quote-comma\"></a>Кавычка-запятая ',</h3>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:556
msgid ""
"<p>When we are inside a backquote context and we want to print an\n"
"expression literally, we have no choice but to use the combination of\n"
"quote and comma:</p>"
msgstr ""
"<p>Когда мы находимся внутри контекста обратной кавычки и хотим буквально \n"
"вывести/напечатать выражение, у нас нет другого выбора, кроме как "
"использовать \n"
"комбинацию кавычки и запятой: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:561
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro explain-exp (exp)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(format t &quot;~S "
"= ~S&quot; ',exp ,exp))</code>\n"
"<code class=\"western\">  </code><code class=\"western"
"\">;;                   ^^</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:566
msgid ""
"<code class=\"western\">(explain-exp (+ 2 3))</code>\n"
"<code class=\"western\">;; (+ 2 3) = 5</code></pre>\n"
"<p>\n"
"See by yourself:</p>"
msgstr ""
"<code class=\"western\">(explain-exp (+ 2 3))</code>\n"
"<code class=\"western\">;; (+ 2 3) = 5</code></pre>\n"
"<p>\n"
"Смотрите сами:</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:573
msgid ""
"<pre class=\"western\"><code class=\"western\">;; Defmacro with no quote at "
"all:</code>\n"
"<code class=\"western\">(defmacro explain-exp (exp)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;~a "
"= ~a&quot; exp exp))</code>\n"
"<code class=\"western\">(explain-exp v1)</code>\n"
"<code class=\"western\">;; V1 = V1</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:580
msgid ""
"<code class=\"western\">;; OK, with a backquote and a comma to get the value "
"of exp:</code>\n"
"<code class=\"western\">(defmacro explain-exp (exp)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">;; WRONG example</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(format t &quot;~a "
"= ~a&quot; exp ,exp))</code>\n"
"<code class=\"western\">(explain-exp v1)</code>\n"
"<code class=\"western\">;; =&gt; error: The variable EXP is unbound.</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:587
msgid ""
"<code class=\"western\">;; We then must use quote-comma:</code>\n"
"<code class=\"western\">(defmacro explain-exp (exp)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(format t &quot;~a "
"= ~a&quot; ',exp ,exp))</code>\n"
"<code class=\"western\">(explain-exp (+ 1 2))</code>\n"
"<code class=\"western\">;; (+ 1 2) = 3</code></pre><h3 class=\"western\">\n"
"<a name=\"nested-backquotes\"></a>Nested backquotes</h3>"
msgstr ""
"<code class=\"western\">;; We then must use quote-comma:</code>\n"
"<code class=\"western\">(defmacro explain-exp (exp)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(format t &quot;~a "
"= ~a&quot; ',exp ,exp))</code>\n"
"<code class=\"western\">(explain-exp (+ 1 2))</code>\n"
"<code class=\"western\">;; (+ 1 2) = 3</code></pre><h3 class=\"western\">\n"
"<a name=\"nested-backquotes\"></a>Вложенные обратные кавычки</h3>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:597
msgid ""
"<p>Second, one might wonder what happens if a backquote expression\n"
"occurs inside another backquote. The answer is that the backquote\n"
"becomes essentially unreadable and unwriteable; using nested\n"
"backquote is usually a tedious debugging exercise. The reason, in my\n"
"not-so-humble opinion, is that backquote is defined wrong. A comma\n"
"pairs up with the innermost backquote when the default should be that\n"
"it pairs up with the outermost. But this is not the place for a rant;\n"
"consult your favorite Lisp reference for the exact behavior of nested\n"
"backquote plus some examples.</p>"
msgstr ""
"<p>Во-вторых, можно задаться вопросом, что происходит, если выражение \n"
"обратной кавычки встречается внутри другой обратной кавычки. Ответ "
"заключается в том, \n"
"что обратная кавычка становится по существу нечитаемой и незаписываемой; \n"
"использование вложенных обратных кавычек обычно является утомительным "
"занятием отладки. \n"
"Причина, по моему не столь скромному мнению, в том, что обратная цитата "
"определена \n"
"неправильно. Запятая соединяется с самой внутренней обратной кавычкой, \n"
"тогда как по умолчанию она должна быть соединена с самой внешней кавычкой. \n"
"Но здесь не место для разглагольствования; обратитесь к вашему любимому "
"справочнику Lisp, \n"
"чтобы узнать точное поведение вложенных обратных кавычек, а также "
"посмотрите \n"
"некоторые примеры.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:601
msgid ""
"<h3 class=\"western\"><a name=\"building-lists-with-backquote\"></"
"a>Building\n"
"lists with backquote</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"building-lists-with-backquote\"></a>Создание "
"списков с обратной кавычкой </h3>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:603
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:603"
msgid "<p>[â¦]</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:607
msgid ""
"<h1 class=\"western\"><a name=\"getting-macros-right\"></a>Getting Macros\n"
"Right</h1>"
msgstr ""
"<h1 class=\"western\"><a name=\"getting-macros-right\"></a>Получение "
"правильных макросов</h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:610
msgid ""
"<p>I said in the first section that my definition of <code class=\"western"
"\">setq2</code>\n"
"wasnât quite right, and now itâs time to fix it.</p>"
msgstr ""
"<p>В первом разделе я сказал, что мое определение <code class=\"western"
"\">setq2</code> \n"
"было неправильным, и теперь пришло время исправить это.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:616
msgid ""
"<p>Suppose we write <code class=\"western\">(setq2 x y (+ x 2))</code>,\n"
"when <code class=\"western\">x</code><em>=8</em>. Then according to the\n"
"definition given above, this form will expand into</p>"
msgstr ""
"<p>Предположим, мы напишем <code class=\"western\">(setq2 x y (+ x 2))</"
"code>, \n"
"когда <code class=\"western\">x</code><em>=8</em>. Затем, согласно "
"приведенному \n"
"выше определению, эта форма расширится до </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:624
msgid ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq x (+ x 2))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq y (+ x 2)))</"
"code></pre>\n"
"<p>\n"
"so that <code class=\"western\">x</code> will have value 10 and <code class="
"\"western\">y</code>\n"
"will have value 12. Indeed, hereâs its macroexpansion:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq x (+ x 2))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(setq y (+ x 2)))</"
"code></pre>\n"
"<p>\n"
"так что <code class=\"western\">x</code> будет иметь значение 10, а \n"
"<code class=\"western\">y</code> будет иметь значение 12. \n"
"В самом деле, вот его макрорасширение: </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:633
msgid ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 x y (+ x "
"2)))</code>\n"
"<code class=\"western\">;;(PROGN (SETQ X (+ X 2)) (SETQ Y (+ X 2)))</code></"
"pre>\n"
"<p>\n"
"Chances are that isnât what the macro is expected to do (although\n"
"you never know). Another problematic case is <code class=\"western\">(setq2\n"
"x y (pop l))</code>, which causes <code class=\"western\">l</code> to\n"
"be popped twice; again, probably not right.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(macroexpand '(setq2 x y (+ x "
"2)))</code>\n"
"<code class=\"western\">;;(PROGN (SETQ X (+ X 2)) (SETQ Y (+ X 2)))</code></"
"pre>\n"
"<p>\n"
"Скорее всего, это не то, что ожидается от макроса (хотя вы никогда этогомне "
"знаете). \n"
"Другой проблемный случай - <code class=\"western\">(setq2 x y (pop l))</"
"code>, \n"
"в котором <code class=\"western\">l</code> появляется дважды; опять же, "
"наверное, \n"
"не правильно.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:639
msgid ""
"<p>The solution is to evaluate the expression <code class=\"western\">e</"
"code>\n"
"just once, save it in a temporary variable, and then set <code class="
"\"western\">v1</code>\n"
"and <code class=\"western\">v2</code> to it.</p>"
msgstr ""
"<p>Решение состоит в том, чтобы вычислить выражение <code class=\"western"
"\">e</code> \n"
"только один раз, сохранить его во временной переменной, а затем установить \n"
"её для  <code class=\"western\">v1</code> и <code class=\"western\">v2</"
"code> </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:642
msgid "<h2 class=\"western\"><a name=\"gensym\"></a>Gensym</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"gensym\"></a>Gensym(генератор имени "
"символа)</h2>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:646
msgid ""
"<p>To make temporary variables, we use the <code class=\"western\">gensym</"
"code>\n"
"function, which returns a fresh variable guaranteed to appear nowhere\n"
"else. Here is what the macro should look like:</p>"
msgstr ""
"<p>Чтобы создать временные переменные, мы используем функцию \n"
"<code class=\"western\">gensym</code>, которая возвращает новую "
"переменную, \n"
"которая гарантированно больше нигде не появится. \n"
"Вот как должен выглядеть макрос:  </p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:655
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(let ((tempvar "
"(gensym)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">`(let ((,tempvar ,"
"e))</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(progn (setq ,"
"v1 ,tempvar)</code>\n"
"<code class=\"western\">              </code><code class=\"western\">(setq ,"
"v2 ,tempvar)))))</code></pre>\n"
"<p>\n"
"Now <code class=\"western\">(setq2 x y (+ x 2))</code> expands to</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmacro setq2 (v1 v2 e)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(let ((tempvar "
"(gensym)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">`(let ((,tempvar ,"
"e))</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(progn (setq ,"
"v1 ,tempvar)</code>\n"
"<code class=\"western\">              </code><code class=\"western\">(setq ,"
"v2 ,tempvar)))))</code></pre>\n"
"<p>\n"
"Сейчас <code class=\"western\">(setq2 x y (+ x 2))</code> расширяется в</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:665
msgid ""
"<pre class=\"western\"><code class=\"western\">(let ((#:g2003 (+ x 2)))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(progn (setq x #:"
"g2003) (setq y #:g2003)))</code></pre>\n"
"<p>\n"
"Here <code class=\"western\">gensym</code> has returned the symbol\n"
"<code class=\"western\">#:g2003</code>, which prints in this funny way\n"
"because it wonât be recognized by the reader. (Nor is there any\n"
"need for the reader to recognize it, since it exists only long enough\n"
"for the code that contains it to be compiled.)</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(let ((#:g2003 (+ x 2)))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(progn (setq x #:"
"g2003) (setq y #:g2003)))</code></pre>\n"
"<p>\n"
"Здесь <code class=\"western\">gensym</code> вернул символ <code class="
"\"western\">#:g2003</code>,\n"
"который печатается таким забавным образом, потому что лисп считыватель не "
"распознает его. \n"
"(Считывателю также не нужно его узнавать, поскольку он существует достаточно "
"долго, \n"
"чтобы код, содержащий его, был скомпилирован.)</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:670
msgid ""
"<p>Exercise: Verify that this new version works correctly for the\n"
"case <code class=\"western\">(setq2 x y (pop l1))</code>.</p>"
msgstr ""
"<p>Упражнение: убедитесь, что эта новая версия работает правильно \n"
"для случая <code class=\"western\">(setq2 x y (pop l1))</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:676
msgid ""
"<p>Exercise: Try writing the new version of the macro without using\n"
"backquote. If you canât do it, you have done the exercise\n"
"correctly, and learned what backquote is for!</p>"
msgstr ""
"<p>Упражнение: попробуйте написать новую версию макроса без использования \n"
"обратной кавычки. Если вы не можете этого сделать, значит, вы выполнили \n"
"упражнение правильно и узнали, для чего нужна обратная кавычка!</p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:687
msgid ""
"<p><a name=\"LtohTOCentry-4\"></a>The moral of this section is to think\n"
"carefully about which expressions in a macro get evaluated and when.\n"
"Be on the lookout for situations where the same expression gets\n"
"plugged into the output twice (as <code class=\"western\">e</code> was\n"
"in my original macro design). For complex macros, watch out for cases\n"
"where the order that expressions are evaluated differs from the order\n"
"in which they are written. This is sure to trip up some user of the\n"
"macro - even if you are the only user.</p>"
msgstr ""
"<p><a name=\"LtohTOCentry-4\"></a>Мораль этого раздела - тщательно "
"продумать, \n"
"какие выражения в макросе будут вычисляться и когда. Следите за "
"ситуациями, \n"
"когда одно и то же выражение дважды вставляется в вывод (как было с\n"
" <code class=\"western\">e</code> в моем первоначальном макете). Для "
"сложных \n"
"макросов обратите внимание на случаи, когда порядок вычисления выражений \n"
"отличается от порядка их написания. Это обязательно сбивает с толку \n"
"некоторых пользователей макроса - даже если вы единственный пользователь. </"
"p>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:691
msgid ""
"<h1 class=\"western\"><a name=\"what-macros-are-for\"></a>What Macros are\n"
"For</h1>"
msgstr ""
"<h1 class=\"western\"><a name=\"what-macros-are-for\"></a>Для чего нужны "
"макросы </h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:693
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:693"
msgid "<p>[â¦]</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:696
msgid "<h1 class=\"western\"><a name=\"see-also\"></a>See also</h1>"
msgstr "<h1 class=\"western\"><a name=\"see-also\"></a>См. также</h1>"

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:699
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer/a-gentle-introduction-to-"
"compile-time-computing-part-1-d4d96099cea0\">A\n"
"gentle introduction to Compile-Time Computing â Part 1</a></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:705
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer/a-gentle-introduction-to-"
"compile-time-computing-part-3-scientific-units-8e41d8a727ca\">Safely\n"
"dealing with scientific units of variables at compile time (a gentle\n"
"introduction to Compile-Time Computing â part 3)</a></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:715
msgid ""
"<p>The following video, from the series <a href=\"https://www.youtube.com/"
"user/CBaggers/playlists\">âLittle\n"
"bits of Lispâ</a> by <a href=\"https://github.com/cbaggers/\">cbaggers</a>,\n"
"is a two hours long talk on macros, showing simple to advanced\n"
"concepts such as compiler macros:\n"
"<a href=\"https://www.youtube.com/watch?v=ygKXeLKhiTI\">https://www.youtube."
"com/watch?v=ygKXeLKhiTI</a>\n"
"It also shows how to manipulate macros (and their expansion) in\n"
"Emacs.</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:718
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:720
msgctxt ""
"in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:720"
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/common-lisp-macros-by-example-tutorial.html:723
msgid ""
"</body>\n"
"</html>"
msgstr ""
