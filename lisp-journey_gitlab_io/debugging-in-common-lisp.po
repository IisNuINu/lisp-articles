#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html
#: in_ed/lisp-journey_gitlab_io/remote-debug.html:127
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-15 15:14+0300\n"
"PO-Revision-Date: 2021-08-22 21:53+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T13:11:23.892448350\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:13:31.498115735\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Debugging in Common Lisp</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T13:11:23.892448350\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:13:31.498115735\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Отладка в Common Lisp</h1>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:32
msgid ""
"<p>You entered this new world of Lisp and now wonder: how can we\n"
"debug whatâs going on ? How is it more interactive than in other\n"
"platforms ? What does bring the interactive debugger appart from\n"
"stacktraces ?</p>"
msgstr ""
"<p>Вы вошли в этот новый мир Лиспа и теперь задаетесь вопросом: \n"
"как мы можем отладить то, что происходит? Насколько он более интерактивен, \n"
"чем на других платформах? Что приносит интерактивный отладчик из "
"трассировки \n"
"стека?</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:37
msgid ""
"<p><em>note</em>: this tutorial is available on the <a href=\"https://"
"lispcookbook.github.io/cl-cookbook/debugging.html\">Common\n"
"Lisp Cookbook</a> and it will receive updates there.</p>"
msgstr ""
"<p><em>примечание</em>: это руководство доступно в \n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/debugging.html"
"\">Поваренной книге \n"
"Common Lisp</a> и будет получать обновления там.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:43
msgid ""
"<p>If you want step-by-step examples of interactive debugging with\n"
"nice screenshots and gifs, see the blog posts in the References\n"
"section below.</p>"
msgstr ""
"<p>Если вам нужны пошаговые примеры интерактивной отладки с красивыми "
"снимками \n"
"экрана и гифками, см. Сообщения блога в разделе «Ссылки» ниже. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:47
msgid "<p><strong>Table of Contents</strong></p>"
msgstr "<p><strong>Оглавление</strong></p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:54
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#print-debugging\">Print\n"
"\tdebugging</a> \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#print-debugging\"> Отладка с "
"помощью печати</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:59
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#logging\">Logging</a>\n"
"\t\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#logging\"> логирование</a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:65
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#using-the-powerful-repl\">Using\n"
"\tthe powerful REPL</a> \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#using-the-powerful-repl\"> "
"Использование мощного REPL</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:71
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#inspect-and-describe\">Inspect\n"
"\tand describe</a> \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#inspect-and-describe"
"\">Inspect(Осмотр) и describe(описание)</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:77
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#the-interactive-debugger\">The\n"
"\tinteractive debugger</a> \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#the-interactive-debugger\"> "
"Интерактивный отладчик</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:82
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#trace\">Trace</a>\n"
"\t\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#trace\">Трассировка(Trace/След)</"
"a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:89
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#tracing-method-invocation\">Tracing\n"
"\t\tmethod invocation</a> \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#tracing-method-invocation\">Вызов "
"метода трассировки </a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:95
msgid ""
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#step\">Step</a>\n"
"\t\t</p>"
msgstr ""
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#step\">Шаг(step)</a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:100
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#break\">Break</a>\n"
"\t\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#break\">Перерыв(Break)</a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:107
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#breakpoints-in-slime\">Breakpoints\n"
"\t\tin Slime</a> \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#breakpoints-in-slime\">Точки "
"останова в  Slime</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:114
msgid ""
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#advise-and-watch\">Advise\n"
"\tand watch</a> \n"
"\t</p>"
msgstr ""
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#advise-and-watch"
"\">Консультация(Advise) и наблюдение/слежка(watch)</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:120
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/debugging-in-common-lisp/#unit-tests\">Unit\n"
"\ttests</a> \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"#unit-tests\">Модульные тесты</"
"a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:123
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:123"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:126
msgid ""
"<p><a href=\"https://lisp-journey.gitlab.io/blog/debugging-in-common-lisp/"
"#references\">References</a>\n"
"\t\t</p>"
msgstr ""
"<p><a href=\"#references\">Ссылки</a>\n"
"\t\t</p>\n"
"<p><a href=\"#remote-debugging\">Удаленная отладка</a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:130
msgid ""
"</ul>\n"
"<h2 class=\"western\"><a name=\"print-debugging\"></a>Print debugging</h2>"
msgstr ""
"</ul>\n"
"<h2 class=\"western\"><a name=\"print-debugging\"></a>Отладка с помощью "
"печати</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:133
msgid ""
"<p>Well of course we can use the famous technique of âprint\n"
"debuggingâ. Letâs just recap a few print functions.</p>"
msgstr ""
"<p>Конечно, мы можем использовать знаменитую технику «отладки печатью». \n"
"Давайте просто вспомним несколько функций печати.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:139
msgid ""
"<p><code class=\"western\">print</code> works, it prints a READable\n"
"representation of its argument, which means what is <code class=\"western"
"\">print</code>ed\n"
"can be <code class=\"western\">read</code> back in by the Lisp reader.</p>"
msgstr ""
"<p><code class=\"western\">print</code> работает, он печатает READable \n"
"представление своего аргумента, что означает, что то, \n"
"что напечатано(<code class=\"western\">print</code>ed), может быть "
"прочитано\n"
"(<code class=\"western\">read</code>) обратно, считывателем Lisp.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:144
msgid ""
"<p><code class=\"western\">princ</code> focuses on an <em>aesthetic</em>\n"
"representation.</p>"
msgstr ""
"<p><code class=\"western\">princ</code> фокусируется на <em>эстетическом</"
"em> \n"
"представлении.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:152
msgid ""
"<p><code class=\"western\">format t &quot;~a&quot; â¦)</code>, with\n"
"the <em>aesthetic</em> directive, prints a string (in <code class=\"western"
"\">t</code>,\n"
"the standard output stream) and returns nil, whereas <code class=\"western"
"\">format\n"
"nil â¦</code> doesnât print anything and returns a string. With\n"
"many format controls we can print several variables at once.</p>"
msgstr ""
"<p><code class=\"western\">format t &quot;~a&quot; …)</code>, с "
"<em>эстетической</em> \n"
"директивой печатает строку (в <code class=\"western\">t</code>, стандартный "
"поток вывода) \n"
"и возвращает nil, тогда как <code class=\"western\">format nil …</code> "
"ничего не печатает \n"
"и возвращает строку. С помощью множества элементов управления форматом мы "
"можем \n"
"распечатать сразу несколько переменных. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:155
msgid "<h2 class=\"western\"><a name=\"logging\"></a>Logging</h2>"
msgstr "<h2 class=\"western\"><a name=\"logging\"></a>Логирование</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:157
msgid "<p>Logging is a good evolution from print debugging ;)</p>"
msgstr ""
"<p>Логгирование(Ведение журнала) - хорошая эволюция от отладки печатью ;)</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:163
msgid ""
"<p><a href=\"https://github.com/sharplispers/log4cl/\">log4cl</a> is\n"
"the popular, de-facto logging library but it isnât the only one.\n"
"Download it:</p>"
msgstr ""
"<p><a href=\"https://github.com/sharplispers/log4cl/\">log4cl</a>  \n"
"это популярная де-факто библиотека для ведения журналов, \n"
"но не единственная. Загрузить:</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:168
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload :log4cl)</code></pre>\n"
"<p>\n"
"and letâs have a dummy variable:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload :log4cl)</code></pre>\n"
"<p>\n"
"и у нас есть фиктивная переменная: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:174
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defvar *foo* '(:a :b :c))</code></pre>\n"
"<p>\n"
"We can use log4cl with its <code class=\"western\">log</code> nickname,\n"
"then it is as simple to use as:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defvar *foo* '(:a :b :c))</code></pre>\n"
"<p>\n"
"Мы можем использовать log4cl с его nickname(псевдонимом) <code class="
"\"western\">log</code>, \n"
"тогда его так же просто использовать, как: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:181
msgid ""
"<pre class=\"western\"><code class=\"western\">(log:info *foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:36:49] cl-user () - *FOO*: (:A :"
"B :C)</code></pre>\n"
"<p>\n"
"We can interleave strings and expressions, with or without <code class="
"\"western\">format</code>\n"
"control strings:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(log:info *foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:36:49] cl-user () - *FOO*: (:A :"
"B :C)</code></pre>\n"
"<p>\n"
"Мы можем чередовать строки и выражения со строками управления \n"
"<code class=\"western\">format</code>(форматом) или без них: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:190
msgid ""
"<pre class=\"western\"><code class=\"western\">(log:info &quot;foo is &quot; "
"*foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:37:22] cl-user () - foo is "
"*FOO*: (:A :B :C)</code>\n"
"<code class=\"western\">(log:info &quot;foo is ~{~a~}&quot; *foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:39:05] cl-user () - foo is ABC</"
"code></pre>\n"
"<p>\n"
"With its companion library <code class=\"western\">log4slime</code>, we\n"
"can interactively change the log level:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(log:info &quot;foo is &quot; "
"*foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:37:22] cl-user () - foo is "
"*FOO*: (:A :B :C)</code>\n"
"<code class=\"western\">(log:info &quot;foo is ~{~a~}&quot; *foo*)</code>\n"
"<code class=\"western\">;; &lt;INFO&gt; [13:39:05] cl-user () - foo is ABC</"
"code></pre>\n"
"<p>\n"
"С помощью сопутствующей библиотеки <code class=\"western\">log4slime</code> "
"мы можем \n"
"интерактивно изменять уровень логгирования(записи журнала):</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:196
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">globally, \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> глобальный, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:201
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">per package, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">на пакет, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:206
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">per function, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">на функцию, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:209
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:209"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:213
msgid ""
"<p>and by CLOS methods and CLOS hierarchy (before and after\n"
"\tmethods). \n"
"\t</p>"
msgstr ""
"<p>  а также методами CLOS и иерархией CLOS (методы до и после). \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:216
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:216"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:221
msgid ""
"<p>It is very handy, when we have a lot of output, to turn off the\n"
"logging of functions or packages we know to work, and thus narrowing\n"
"our search to the right area. We can even save this configuration and\n"
"re-use it in another image, be it on another machine.</p>"
msgstr ""
"<p>Когда у нас много выходных данных, очень удобно отключать ведение "
"журнала \n"
"функций или пакетов, которые, как мы предполагаем, работают, и, таким "
"образом, \n"
"сужать наш поиск до нужной области. Мы даже можем сохранить эту конфигурацию "
"и \n"
"повторно использовать ее в другом образе, или даже на другой машине.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:226
msgid ""
"<p>We can do all this through commands, keyboard shortcuts and also\n"
"through a menu or mouse clicks.</p>"
msgstr ""
"<p>Все это можно сделать с помощью команд, сочетаний клавиш, а также с "
"помощью меню \n"
"или щелчков мышью. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:231
msgid ""
"<p><img src=\"debugging-in-common-lisp_html_bb19b470f2fefdfa.png\" name="
"\"Image1\" alt=\"\"changing the log level with log4slime\"\" align=\"bottom"
"\" width=\"670\" height=\"361\" border=\"0\"/>\n"
"</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:235
msgid "<p>We invite you to read log4clâs readme.</p>"
msgstr "<p>Приглашаем вас прочитать файл readme для log4cl. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:239
msgid ""
"<h2 class=\"western\"><a name=\"using-the-powerful-repl\"></a>Using the\n"
"powerful REPL</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"using-the-powerful-repl\"></a>Использование "
"мощного REPL</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:243
msgid ""
"<p>Part of the joy of Lisp is the excellent REPL. Its existence\n"
"usually delays the need to use other debugging tools, if it doesnât\n"
"annihilate them for the usual routine.</p>"
msgstr ""
"<p>Частью удовольствия использования Lisp является превосходный REPL. \n"
"Его существование обычно откладывает необходимость использования других \n"
"инструментов отладки, если совсем не отменяет их для обычной процедуры.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:252
msgid ""
"<p>As soon as we define a function, we can try it in the REPL. In\n"
"Slime, compile a function with <code class=\"western\">C-c C-c</code>\n"
"(the whole buffer with <code class=\"western\">C-c C-k</code>), switch\n"
"to the REPL with <code class=\"western\">C-c C-z</code> and try it.\n"
"Eventually enter the package you are working on with <code class=\"western"
"\">(in-package\n"
":your-package)</code>.</p>"
msgstr ""
"<p>Как только мы определим функцию, мы можем попробовать ее в REPL. \n"
"В Slime скомпилируйте функцию с помощью <code class=\"western\">C-c C-c</"
"code> \n"
"(или весь буфер с <code class=\"western\">C-c C-k</code>), переключитесь в "
"REPL \n"
"с помощью <code class=\"western\">C-c C-z</code> и попробуйте. \n"
"В конце концов войдите в пакет, над которым вы работаете \n"
" <code class=\"western\">(in-package :your-package)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:259
msgid ""
"<p>The feedback is immediate. There is no need to recompile\n"
"everything, nor to restart any process, nor to create a main function\n"
"and define command line arguments for use in the shell (we can do\n"
"this later on when needed).</p>"
msgstr ""
"<p>Обратная связь мгновенная. Нет необходимости ни перекомпилировать все, \n"
"ни перезапускать какой-либо процесс, ни создавать основную функцию и \n"
"определять аргументы командной строки для использования в оболочке \n"
"(мы можем сделать это позже, когда потребуется).</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:267
msgid ""
"<p>We usually need to create some data to test our function(s). This\n"
"is a subsequent art of the REPL existence and it may be a new\n"
"discipline for newcomers. A trick is to write the test data alongside\n"
"your functions but inside a <code class=\"western\">#+nil</code>\n"
"declaration so that only you can manually compile them:</p>"
msgstr ""
"<p>Обычно нам нужно создать некоторые данные для тестирования наших "
"функций. \n"
"Это последующее искусство существования REPL и, возможно, новая дисциплина "
"для новичков. \n"
"Уловка состоит в том, чтобы записать тестовые данные вместе с вашими "
"функциями, \n"
"но внутри объявления <code class=\"western\">#+nil</code>, чтобы только вы "
"могли \n"
"вручную скомпилировать их: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:277
msgid ""
"<pre class=\"western\"><code class=\"western\">    </code><code class="
"\"western\">#+nil</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(progn</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(defvar *test-"
"data* nil)</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(setf *test-"
"data* (make-instance 'foo â¦)))</code></pre>\n"
"<p>\n"
"When you load this file, <code class=\"western\">*test-data*</code>\n"
"wonât exist, but you can manually create it with a <code class=\"western\">C-"
"c\n"
"C-c</code> away.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">    </code><code class="
"\"western\">#+nil</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(progn</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(defvar *test-"
"data* nil)</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(setf *test-"
"data* (make-instance 'foo â¦)))</code></pre>\n"
"<p>\n"
"Когда вы загружаете этот файл, <code class=\"western\">*test-data*</code> \n"
"не будет существовать, но вы можете создать его вручную с помощью \n"
"<code class=\"western\">C-c C-c</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:281
msgid "<p>We can define tests functions like this.</p>"
msgstr "<p>Мы можем определить функции тестирования здесь.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:286
msgid ""
"<p>Some do similarly inside <code class=\"western\">#| â¦ |#</code>\n"
"comments.</p>"
msgstr ""
"<p>Некоторые делают то же самое внутри <code class=\"western\">#| … |#</"
"code> Комментариев.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:291
msgid ""
"<p>All that being said, keep in mind to write unit tests when time\n"
"comes ;)</p>"
msgstr ""
"<p>При этом не забывайте писать модульные тесты, когда придет время ;) </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:295
msgid ""
"<h2 class=\"western\"><a name=\"inspect-and-describe\"></a>Inspect and\n"
"describe</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"inspect-and-describe\"></a>Inspect(Осмотр) и "
"describe(описание)</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:299
msgid ""
"<p>These two commands share the same goal, printing a description of\n"
"an object, <code class=\"western\">inspect</code> being the interactive\n"
"one.</p>"
msgstr ""
"<p>Эти две команды преследуют одну и ту же цель: распечатать "
"описание(description) \n"
"объекта, а <code class=\"western\">inspect</code> - интерактивный.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:302
msgid "<pre class=\"western\"><code class=\"western\">(inspect *foo*)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:306
msgid ""
"<code class=\"western\">The object is a proper list of length 3.</code>\n"
"<code class=\"western\">0. 0: :A</code>\n"
"<code class=\"western\">1. 1: :B</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:314
msgid ""
"<code class=\"western\">2. 2: :C</code>\n"
"<code class=\"western\">&gt; q</code></pre>\n"
"<p>\n"
"We can also, in editors that support it, right-click on any object in\n"
"the REPL and <code class=\"western\">inspect</code> them. We are\n"
"presented a screen where we can dive deep inside the data structure\n"
"and even change it.</p>"
msgstr ""
"<code class=\"western\">2. 2: :C</code>\n"
"<code class=\"western\">&gt; q</code></pre>\n"
"<p>\n"
"Мы также можем в редакторах, которые его поддерживают, щелкнуть правой "
"кнопкой мыши \n"
"любой объект в REPL и проверить(проинспектировать/<code class=\"western"
"\">inspect</code>) его. \n"
"Нам представлен экран, на котором мы можем глубоко погрузиться в структуру "
"данных и \n"
"даже изменить ее.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:319
msgid ""
"<p>Letâs have a quick look with a more interesting structure, an\n"
"object:</p>"
msgstr "<p>Давайте быстро рассмотрим более интересную структуру, объект: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:331
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass foo ()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((a :accessor foo-"
"a :initform '(:a :b :c))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(b :accessor foo-"
"b :initform :b)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS FOO&gt;</code>\n"
"<code class=\"western\">(make-instance 'foo)</code>\n"
"<code class=\"western\">;; #&lt;FOO {100F2B6183}&gt;</code></pre>\n"
"<p>\n"
"We right-click on the <code class=\"western\">#&lt;FOO</code> object\n"
"and choose âinspectâ. We are presented an interactive pane (in\n"
"Slime):</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass foo ()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((a :accessor foo-"
"a :initform '(:a :b :c))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(b :accessor foo-"
"b :initform :b)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS FOO&gt;</code>\n"
"<code class=\"western\">(make-instance 'foo)</code>\n"
"<code class=\"western\">;; #&lt;FOO {100F2B6183}&gt;</code></pre>\n"
"<p>\n"
"Щелкаем правой кнопкой мыши по объекту <code class=\"western\">#&lt;FOO</"
"code> и \n"
"выбираем «inspect/проверить». Нам представлена интерактивная панель (в "
"Slime): </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:339
msgid ""
"<pre class=\"western\"><code class=\"western\">#&lt;FOO {100F2B6183}&gt;</"
"code>\n"
"<code class=\"western\">--------------------</code>\n"
"<code class=\"western\">Class: #&lt;STANDARD-CLASS FOO&gt;</code>\n"
"<code class=\"western\">--------------------</code>\n"
"<code class=\"western\"> </code><code class=\"western\">Group slots by "
"inheritance [ ]</code>\n"
"<code class=\"western\"> </code><code class=\"western\">Sort slots "
"alphabetically  [X]</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:343
msgid ""
"<code class=\"western\">All Slots:</code>\n"
"<code class=\"western\">[ ]  A = (:A :B :C)</code>\n"
"<code class=\"western\">[ ]  B = :B</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:348
msgid ""
"<code class=\"western\">[set value]  [make unbound]</code></pre>\n"
"<p>\n"
"When we click or press enter on the line of slot A, we inspect it\n"
"further:</p>"
msgstr ""
"<code class=\"western\">[set value]  [make unbound]</code></pre>\n"
"<p>\n"
"Когда мы щелкаем или нажимаем Enter на строке слота A, мы исследуем его \n"
"дальше: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:357
msgid ""
"<pre class=\"western\"><code class=\"western\">#&lt;CONS {100F5E2A07}&gt;</"
"code>\n"
"<code class=\"western\">--------------------</code>\n"
"<code class=\"western\">A proper list:</code>\n"
"<code class=\"western\">0: :A</code>\n"
"<code class=\"western\">1: :B</code>\n"
"<code class=\"western\">2: :C</code></pre><h2 class=\"western\">\n"
"<a name=\"the-interactive-debugger\"></a>The interactive debugger</h2>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">#&lt;CONS {100F5E2A07}&gt;</"
"code>\n"
"<code class=\"western\">--------------------</code>\n"
"<code class=\"western\">A proper list:</code>\n"
"<code class=\"western\">0: :A</code>\n"
"<code class=\"western\">1: :B</code>\n"
"<code class=\"western\">2: :C</code></pre><h2 class=\"western\">\n"
"<a name=\"the-interactive-debugger\"></a>Интерактивный отладчик</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:360
msgid ""
"<p>Whenever an exceptional situation happens (see <a href=\"https://"
"lispcookbook.github.io/cl-cookbook/error_handling.html\">error\n"
"handling</a>), the interactive debugger pops up.</p>"
msgstr ""
"<p>Всякий раз, когда возникает исключительная ситуация (см. \n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/error_handling.html"
"\">Обработку ошибок(error\n"
"handling)</a>), появляется интерактивный отладчик.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:365
msgid ""
"<p>It presents the error message, available actions (<em>restarts</em>),\n"
"and the backtrace. A few remarks:</p>"
msgstr ""
"<p>Он представляет сообщение об ошибке, доступные действия "
"(<em>перезапуски)</em> \n"
"и обратную трассировку. Несколько замечаний:</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:372
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the restarts are programmable,\n"
"\twe can create our owns, \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">перезапуски программируются, и мы можем "
"создавать собственные, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:379
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">in Slime, press <code class=\"western\">v</"
"code>\n"
"\ton a stacktrace to be redirected to the source file at the right\n"
"\tline, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> в Slime нажмите <code class=\"western\">v</"
"code> \n"
"\tна трассировке стека, чтобы перейти к исходному файлу в правой строке, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:385
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">hit enter on a frame for more\n"
"\tdetails, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">нажмите Enter на фрейме, чтобы получить \n"
"\tболее подробную информацию,\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:388
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:388"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:393
msgid ""
"<p>we can explore the functionnality with the menu that should\n"
"\tappear in our editor. See below in âbreakâ section for a few\n"
"\tmore commands (eval in frame, etc). \n"
"\t</p>"
msgstr ""
"<p>мы можем изучить функциональность с помощью меню, которое должно \n"
"\tпоявиться в нашем редакторе. См. Ниже в разделе «break» еще \n"
"\tнесколько команд (eval во фрейме и т. Д.).  \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:396
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:396"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:403
msgid ""
"<p>Usually your compiler will optimize things out and this will\n"
"reduce the amount of information available to the debugger. For\n"
"example sometimes we canât see intermediate variables of\n"
"computations. You might want to print a function argument (with <code class="
"\"western\">e</code>\n"
"to âeval in frameâ, see below), but you keep getting a <code class=\"western"
"\">Variable\n"
"XYZ is unbound</code> error.</p>"
msgstr ""
"<p>Обычно ваш компилятор оптимизирует работу, и это сокращает объем "
"информации, \n"
"доступной отладчику. Например, иногда мы не видим промежуточных переменных "
"вычислений. \n"
"Возможно, вы захотите напечатать аргумент функции (с  <code class=\"western"
"\">e</code> \n"
"для «eval в фрейме», см. Ниже), но вы продолжаете получать ошибку \n"
"<code class=\"western\">Variable XYZ is unbound</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:408
msgid ""
"<p>To fix this, we have to change the optimization choices with\n"
"<code class=\"western\">declaim</code>, at the beginning of the file:</p>"
msgstr ""
"<p>Чтобы исправить это, мы должны изменить варианты оптимизации с помощью \n"
"<code class=\"western\">declaim</code> в начале файла: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:413
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (optimize (speed 0) (space 0) (debug 3)))</code></pre>\n"
"<p>\n"
"or with <code class=\"western\">declare</code>, inside a <code class="
"\"western\">defun</code>:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (optimize (speed 0) (space 0) (debug 3)))</code></pre>\n"
"<p>\n"
"или с <code class=\"western\">declare</code>, внутри <code class=\"western"
"\">defun</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:421
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun my-fun (xyz)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(declare (optimize "
"(debug 3)))</code>\n"
"<code class=\"western\">  â¦</code><code class=\"western\">)</code></pre>\n"
"<p>\n"
"and recompile the code. Now you should be able to see local variables\n"
"such as<code class=\"western\">xyz</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun my-fun (xyz)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(declare (optimize "
"(debug 3)))</code>\n"
"<code class=\"western\">  â¦</code><code class=\"western\">)</code></pre>\n"
"<p>\n"
"и перекомпилировать код. Теперь вы должны увидеть локальные переменные, "
"такие как \n"
"<code class=\"western\">xyz</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:424
msgid "<h2 class=\"western\"><a name=\"trace\"></a>Trace</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"trace\"></a>Трассировка/Отслеживание вызовов/"
"Trace</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:428
msgid ""
"<p><a href=\"http://www.xach.com/clhs?q=trace\">trace</a> allows us to\n"
"see when a function was called, what arguments it received, and the\n"
"value it returned.</p>"
msgstr ""
"<p><a href=\"http://www.xach.com/clhs?q=trace\">trace</a>  позволяет нам "
"видеть, \n"
"когда была вызвана функция, какие аргументы она получила \n"
"и какое значение вернула. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:435
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun factorial (n)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(if (plusp n)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(* n (factorial "
"(1- n)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">1))</code>\n"
"<code class=\"western\">(trace factorial)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:446
msgid ""
"<code class=\"western\">(factorial 2)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: (FACTORIAL 3)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: (FACTORIAL 2)</"
"code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (FACTORIAL "
"1)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: (FACTORIAL "
"0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: FACTORIAL "
"returned 1</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: FACTORIAL "
"returned 1</code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: FACTORIAL "
"returned 2</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: FACTORIAL "
"returned 6</code>\n"
"<code class=\"western\">6</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:450
msgid ""
"<code class=\"western\">(untrace factorial)</code></pre>\n"
"<p>\n"
"To untrace all functions, just evaluate <code class=\"western\">(untrace)</"
"code>.</p>"
msgstr ""
"<code class=\"western\">(untrace factorial)</code></pre>\n"
"<p>\n"
"Чтобы отменить трассировку всех функций, просто вычислите\n"
"<code class=\"western\">(untrace)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:455
msgid ""
"<p>In Slime we also have the shortcut <code class=\"western\">C-c M-t</"
"code>\n"
"to trace or untrace a function.</p>"
msgstr ""
"<p>В Slime у нас также есть ярлык <code class=\"western\">C-c M-t</code> для "
"трассировки \n"
"или отмены трассировки функции.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:461
msgid ""
"<p>If you donât see recursive calls, that may be because of the\n"
"compilerâs optimizations. Try this before defining the function to\n"
"be traced:</p>"
msgstr ""
"<p>Если вы не видите рекурсивных вызовов, это может быть связано с "
"оптимизацией \n"
"компилятора. Попробуйте это перед определением отслеживаемой/трассируемой "
"функции: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:467
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (optimize (debug 3)))</code></pre>\n"
"<p>\n"
"The output is printed to <code class=\"western\">*trace-output*</code>\n"
"(see the CLHS).</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (optimize (debug 3)))</code></pre>\n"
"<p>\n"
"Вывод печатается в <code class=\"western\">*trace-output*</code> \n"
"(см. CLHS).</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:472
msgid ""
"<p>In Slime, we also have an interactive trace dialog with <code class="
"\"western\">M-x\n"
"slime-trace-dialog</code> bound to <code class=\"western\">C-c T</code>.</p>"
msgstr ""
"<p>В Slime у нас также есть интерактивный диалог трассировки с code class="
"\"western\">M-x\n"
"slime-trace-dialog</code>, привязанным к <code class=\"western\">C-c T</"
"code>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:476
msgid ""
"<h3 class=\"western\"><a name=\"tracing-method-invocation\"></a>Tracing\n"
"method invocation</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"tracing-method-invocation\"></a>Вызов метода "
"трассировки</h3>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:480
msgid ""
"<p>In SBCL, we can use <code class=\"western\">(trace foo :methods t)</"
"code>\n"
"to trace the execution order of method combination (before, after,\n"
"around methods). For example:</p>"
msgstr ""
"<p>В SBCL мы можем использовать <code class=\"western\">(trace foo :methods "
"t)</code> \n"
"для отслеживания порядка выполнения комбинации методов (методов до, после, "
"вокруг). \n"
"Например: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:483
msgid ""
"<pre class=\"western\"><code class=\"western\">(trace foo :methods t)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:499
msgid ""
"<code class=\"western\">(foo 2.0d0)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: (FOO 2.0d0)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: ((SB-PCL::"
"COMBINED-METHOD FOO) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD FOO "
"(FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: ((METHOD "
"FOO (T)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: (METHOD "
"FOO (T)) returned 3</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO "
"(FLOAT)) returned 9</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD "
"FOO :AFTER (DOUBLE-FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO :"
"AFTER (DOUBLE-FLOAT)) returned DOUBLE</code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: (SB-PCL::"
"COMBINED-METHOD FOO) returned 9</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: FOO returned 9</"
"code>\n"
"<code class=\"western\">9</code></pre>\n"
"<p>\n"
"See the <a href=\"https://lispcookbook.github.io/cl-cookbook/clos.html"
"\">CLOS</a>\n"
"section for a tad more information.</p>"
msgstr ""
"<code class=\"western\">(foo 2.0d0)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: (FOO 2.0d0)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: ((SB-PCL::"
"COMBINED-METHOD FOO) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD FOO "
"(FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: ((METHOD "
"FOO (T)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: (METHOD "
"FOO (T)) returned 3</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO "
"(FLOAT)) returned 9</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD "
"FOO :AFTER (DOUBLE-FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO :"
"AFTER (DOUBLE-FLOAT)) returned DOUBLE</code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: (SB-PCL::"
"COMBINED-METHOD FOO) returned 9</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: FOO returned 9</"
"code>\n"
"<code class=\"western\">9</code></pre>\n"
"<p>\n"
"См. Раздел <a href=\"https://lispcookbook.github.io/cl-cookbook/clos.html"
"\">CLOS</a> \n"
"для получения более подробной информации. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:502
msgid "<h2 class=\"western\"><a name=\"step\"></a>Step</h2>"
msgstr "<h2 class=\"western\"><a name=\"step\"></a>Step(Шаг)</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:506
msgid ""
"<p><a href=\"http://www.xach.com/clhs?q=step\">step</a> is an\n"
"interactive command with similar scope than <code class=\"western\">trace</"
"code>.\n"
"This:</p>"
msgstr ""
"<p><a href=\"http://www.xach.com/clhs?q=step\">step</a> это интерактивная "
"команда \n"
"с той же областью действия, что и   <code class=\"western\">trace</code>.\n"
"Этот:</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:511
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(step (factorial 2))</code></pre>\n"
"<p>\n"
"gives an interactive pane with the available restarts:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(step (factorial 2))</code></pre>\n"
"<p>\n"
"дает интерактивную панель с доступными перезагрузками: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:518
msgid ""
"<pre class=\"western\"><code class=\"western\">Evaluating call:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(FACTORIAL 2)</"
"code>\n"
"<code class=\"western\">With arguments:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">2</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SB-EXT:STEP-FORM-CONDITION]</code>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">Evaluating call:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(FACTORIAL 2)</"
"code>\n"
"<code class=\"western\">с аргументами:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">2</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SB-EXT:STEP-FORM-CONDITION]</code>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:527
msgid ""
"<code class=\"western\">Restarts:</code>\n"
"<code class=\"western\"> </code><code class=\"western\">0: [STEP-CONTINUE] "
"Resume normal execution</code>\n"
"<code class=\"western\"> </code><code class=\"western\">1: [STEP-OUT] Resume "
"stepping after returning from this function</code>\n"
"<code class=\"western\"> </code><code class=\"western\">2: [STEP-NEXT] Step "
"over call</code>\n"
"<code class=\"western\"> </code><code class=\"western\">3: [STEP-INTO] Step "
"into call</code>\n"
"<code class=\"western\"> </code><code class=\"western\">4: [RETRY] Retry "
"SLIME REPL evaluation request.</code>\n"
"<code class=\"western\"> </code><code class=\"western\">5: [*ABORT] Return "
"to SLIME's top level.</code>\n"
"<code class=\"western\"> </code><code class=\"western\">--more--</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:536
msgid ""
"<code class=\"western\">Backtrace:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: ((LAMBDA ()))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">1: (SB-INT:SIMPLE-"
"EVAL-IN-LEXENV (LET ((SB-IMPL::*STEP-OUT* :MAYBE)) (UNWIND-PROTECT (SB-IMPL::"
"WITH-STEPPING-ENABLED #))) #S(SB-KERNEL:LEXENV :FUNS NIL :VARS NIL :BLOCKS "
"NIL :TAGS NIL :TYPE-RESTRICTIONS ..</code>\n"
"<code class=\"western\">  </code><code class=\"western\">2: (SB-INT:SIMPLE-"
"EVAL-IN-LEXENV (STEP (FACTORIAL 2)) #&lt;NULL-LEXENV&gt;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">3: (EVAL (STEP "
"(FACTORIAL 2)))</code></pre>\n"
"<p>\n"
"Stepping is useful, however it may be a sign that you need to\n"
"simplify your function.</p>"
msgstr ""
"<code class=\"western\">Backtrace:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: ((LAMBDA ()))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">1: (SB-INT:SIMPLE-"
"EVAL-IN-LEXENV (LET ((SB-IMPL::*STEP-OUT* :MAYBE)) (UNWIND-PROTECT (SB-IMPL::"
"WITH-STEPPING-ENABLED #))) #S(SB-KERNEL:LEXENV :FUNS NIL :VARS NIL :BLOCKS "
"NIL :TAGS NIL :TYPE-RESTRICTIONS ..</code>\n"
"<code class=\"western\">  </code><code class=\"western\">2: (SB-INT:SIMPLE-"
"EVAL-IN-LEXENV (STEP (FACTORIAL 2)) #&lt;NULL-LEXENV&gt;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">3: (EVAL (STEP "
"(FACTORIAL 2)))</code></pre>\n"
"<p>\n"
"Пошаговый режим полезен, но может быть признаком того, что вам нужно \n"
"упростить свою функцию. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:539
msgid "<h2 class=\"western\"><a name=\"break\"></a>Break</h2>"
msgstr "<h2 class=\"western\"><a name=\"break\"></a>Break(Перерыв)</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:543
msgid ""
"<p>A call to <a href=\"http://www.xach.com/clhs?q=break\">break</a>\n"
"makes the program enter the debugger, from which we can inspect the\n"
"call stack.</p>"
msgstr ""
"<p>Вызов <a href=\"http://www.xach.com/clhs?q=break\">break</a> заставляет "
"программу \n"
"войти в отладчик, из которого мы можем проверить стек вызовов</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:547
msgid ""
"<h3 class=\"western\"><a name=\"breakpoints-in-slime\"></a>Breakpoints in\n"
"Slime</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"breakpoints-in-slime\"></a>Точки останова в\n"
"Slime</h3>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:550
msgid ""
"<p>Look at the <code class=\"western\">SLDB</code> menu, it shows\n"
"navigation keys and available actions. Of which:</p>"
msgstr ""
"<p>Посмотрите на меню <code class=\"western\">SLDB</code>, оно показывает "
"клавиши \n"
"навигации и доступные действия. Из которых: </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:559
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">e</code>\n"
"\t(<em>sldb-eval-in-frame</em>) prompts for an expression and\n"
"\tevaluates it in the selected frame. This is how we can explore our\n"
"\tintermediate variables. \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">e</code>\n"
"\t(<em>sldb-eval-in-frame</em>) запрашивает выражение и вычисляет его \n"
"\tв выбранном кадре. Вот как мы можем исследовать наши промежуточные "
"переменные. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:562
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:562"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:566
msgid ""
"<p><code class=\"western\">d</code> is similar with the addition\n"
"\tof pretty printing the result. \n"
"\t</p>"
msgstr ""
"<p><code class=\"western\">d</code> аналогичен с добавлением \n"
"\tкрасивой печати результата.\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:569
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:569"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:574
msgid ""
"<p>Once we are in a frame and detect a suspicious behavior, we can\n"
"even re-compile a function at runtime and resume the program\n"
"execution from where it stopped (using the âstep-continueâ\n"
"restart).</p>"
msgstr ""
"<p>Как только мы находимся в кадре и обнаруживаем подозрительное "
"поведение, \n"
"мы можем даже повторно скомпилировать функцию во время выполнения и \n"
"возобновить выполнение программы с того места, где оно было остановлено \n"
"(с помощью перезапуска «step-continue/пошаговое продолжение»). </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:577
msgid ""
"<h2 class=\"western\"><a name=\"advise-and-watch\"></a>Advise and watch</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"advise-and-watch\"></a>Консультация(Advise) "
"и наблюдение/слежка(watch)</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:584
msgid ""
"<p><a href=\"http://www.xach.com/clhs?q=break\">advise</a> and <a href="
"\"http://www.xach.com/clhs?q=watch\">watch</a>\n"
"are available in some vendor implementations, like LispWorks. They\n"
"are not available in SBCL. <code class=\"western\">advise</code> allows\n"
"to modify a function without changing its source, or to do something\n"
"before or after its execution, like CLOSâ method combination\n"
"(befor, after around methods).</p>"
msgstr ""
"<p><a href=\"http://www.xach.com/clhs?q=break\">advise</a> и <a href="
"\"http://www.xach.com/clhs?q=watch\">watch</a> доступны в реализациях "
"некоторых поставщиков, таких как LispWorks. \n"
"Они недоступны в SBCL. <code class=\"western\">advise</code> позволяет "
"изменять функцию \n"
"без изменения ее исходного кода или делать что-то до или после ее "
"выполнения, например, \n"
"комбинацию методов CLOS (до, после методов).</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:589
msgid ""
"<p><code class=\"western\">watch</code> allows to specify variables to\n"
"be displayed in some GUI during the program execution.</p>"
msgstr ""
"<p><code class=\"western\">watch</code>  позволяет указать переменные, \n"
"которые будут отображаться в каком-либо графическом интерфейсе во время \n"
"выполнения программы. </p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:592
msgid "<h2 class=\"western\"><a name=\"unit-tests\"></a>Unit tests</h2>"
msgstr "<h2 class=\"western\"><a name=\"unit-tests\"></a>Модульные тесты</h2>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:597
msgid ""
"<p>Last but not least, automatic testing of functions in isolation\n"
"might be what youâre looking for ! See the <a href=\"https://lispcookbook."
"github.io/cl-cookbook/testing.html\">testing</a>\n"
"section and a list of <a href=\"https://github.com/CodyReichert/awesome-"
"cl#unit-testing\">test\n"
"frameworks and libraries</a>.</p>"
msgstr ""
"<p>И последнее, но не менее важное: возможно, вы ищете автоматическое "
"тестирование \n"
"отдельных функций! См. Раздел <a href=\"https://lispcookbook.github.io/cl-"
"cookbook/testing.html\">тестирования/testing</a> и список <a href=\"https://"
"github.com/CodyReichert/awesome-cl#unit-testing\">test\n"
"frameworks(фреймворков для тестирования) и библиотек</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:606
msgid ""
"<h2 class=\"western\"><a name=\"references\"></a>References</h2>\n"
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://successful-lisp.blogspot."
"com/p/httpsdrive.html\">âHow\n"
"\tto understand and use Common Lispâ</a>, chap. 30, David Lamkins\n"
"\t(book download from authorâs site) \n"
"\t</p>"
msgstr ""
"<h2 class=\"western\"><a name=\"references\"></a>Ссылки</h2>\n"
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://successful-lisp.blogspot."
"com/p/httpsdrive.html\">âHow\n"
"\tto understand and use Common Lispâ</a>, chap. 30, David Lamkins\n"
"\t(book download from authorâs site) \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:612
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://malisper.me/debugging-lisp-"
"part-1-recompilation/\">Malisper:\n"
"\tdebugging Lisp series</a> \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:615
msgctxt "in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:615"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:619
msgid ""
"<p><a href=\"https://two-wrongs.com/debugging-common-lisp-in-slime.html"
"\">Two\n"
"\tWrongs: debugging Common Lisp in Slime</a> \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:623
msgid ""
"</ul>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:625
#: in_ed/lisp-journey_gitlab_io/remote-debug.html:124
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:20
msgid ""
"<h2 class=\"western\"><a name=\"remote-debugging\"></a>Remote debugging</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"remote-debugging\"></a>Удаленная отладка</h2>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:24
msgid ""
"<p>You can have your software running on a machine over the network,\n"
"connect to it and debug it from home, from your development\n"
"environment.</p>"
msgstr ""
"<p>Вы можете запустить свое программное обеспечение на машине в сети, \n"
"подключиться к нему и отлаживать его из дома, из вашей среды разработки.</p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:32
msgid ""
"<p>The steps involved are to start a <strong>Swank server</strong> on\n"
"the remote machine (Swank is the backend companion of Slime), create\n"
"an ssh tunnel and connect to the Swank server from our editor. Then\n"
"we can browse and evaluate code on the running instance\n"
"transparently.</p>"
msgstr ""
"<p>При этом необходимо запустить <strong>сервер Swank</strong> на \n"
"удаленном компьютере (Swank является внутренним(backend) партнером Slime), \n"
"создать туннель ssh и подключиться к серверу Swank из нашего редактора. \n"
"Затем мы можем прозрачно просматривать и вычислять код в запущенном \n"
"экземпляре.</p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:36
msgid "<p>To test this, letâs define a function that prints forever.</p>"
msgstr ""
"<p>Чтобы проверить это, давайте определим функцию, которая печатает вечно.</"
"p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:40
msgid "<p>If needed, import the dependencies first:</p>"
msgstr "<p>При необходимости сначала импортируйте зависимости: </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:46
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload '(&quot;swank&quot; &quot;bordeaux-threads&quot;))</code>\n"
"<code class=\"western\">;; a little common lisp swank demo</code>\n"
"<code class=\"western\">;; while this program is running, you can connect to "
"it from another terminal or machine</code>\n"
"<code class=\"western\">;; and change the definition of doprint to print "
"something else out!</code>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload '(&quot;swank&quot; &quot;bordeaux-threads&quot;))</code>\n"
"<code class=\"western\">;; a little common lisp swank demo</code>\n"
"<code class=\"western\">;; while this program is running, you can connect to "
"it from another terminal or machine</code>\n"
"<code class=\"western\">;; and change the definition of doprint to print "
"something else out!</code>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:49
msgid ""
"<code class=\"western\">(require :swank)</code>\n"
"<code class=\"western\">(require :bordeaux-threads)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:51
msgid "<code class=\"western\">(defparameter *counter* 0)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:54
msgid ""
"<code class=\"western\">(defun dostuff ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"hello world ~a!~%&quot; *counter*))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:64
msgid ""
"<code class=\"western\">(defun runner ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(swank:create-"
"server :port 4006)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;we "
"are past go!~%&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(bt:make-thread "
"(lambda ()</code>\n"
"<code class=\"western\">                    </code><code class=\"western"
"\">(loop repeat 5 do</code>\n"
"<code class=\"western\">                          </code><code class="
"\"western\">(sleep 5)</code>\n"
"<code class=\"western\">                          </code><code class="
"\"western\">(dostuff)</code>\n"
"<code class=\"western\">                          </code><code class="
"\"western\">(incf *counter*)))</code>\n"
"<code class=\"western\">                  </code><code class=\"western\">:"
"name &quot;do-stuff&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:68
msgid ""
"<code class=\"western\">(runner)</code></pre>\n"
"<p>\n"
"On the server, we can run this code with</p>"
msgstr ""
"<code class=\"western\">(runner)</code></pre>\n"
"<p>\n"
"На сервере мы можем запустить этот код с помощью </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:75
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">sbcl --load demo.lisp</code></pre>\n"
"<p>\n"
"If you check with <code class=\"western\">(bt:all-threads)</code>,\n"
"youâll see your Swank server running on port 4006, as well as the\n"
"other thread ready to do stuff:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">sbcl --load demo.lisp</code></pre>\n"
"<p>\n"
"Если вы проверите с помощью <code class=\"western\">(bt:all-threads)</"
"code>, \n"
"вы увидите, что ваш сервер Swank работает на порту 4006, а также другой "
"поток, \n"
"готовый делать что-то: </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:85
msgid ""
"<pre class=\"western\"><code class=\"western\">(#&lt;SB-THREAD:THREAD &quot;"
"do-stuff&quot; RUNNING {10027CEDC3}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;Swank Sentinel&quot; waiting on:</code>\n"
"<code class=\"western\">      </code><code class=\"western\">#&lt;WAITQUEUE  "
"{10027D0003}&gt;</code>\n"
"<code class=\"western\">    </code><code class=\"western\">{10027CE8B3}&gt;</"
"code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;Swank 4006&quot; RUNNING {10027CEB63}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;main thread&quot; RUNNING {1007C40393}&gt;)</code></pre>\n"
"<p>\n"
"We do port forwarding on our development machine:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(#&lt;SB-THREAD:THREAD &quot;"
"do-stuff&quot; RUNNING {10027CEDC3}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;Swank Sentinel&quot; waiting on:</code>\n"
"<code class=\"western\">      </code><code class=\"western\">#&lt;WAITQUEUE  "
"{10027D0003}&gt;</code>\n"
"<code class=\"western\">    </code><code class=\"western\">{10027CE8B3}&gt;</"
"code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;Swank 4006&quot; RUNNING {10027CEB63}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;SB-THREAD:"
"THREAD &quot;main thread&quot; RUNNING {1007C40393}&gt;)</code></pre>\n"
"<p>\n"
"Мы делаем переадресацию портов на нашей машине разработки: </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:92
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">ssh -L4006:127.0.0.1:4006 username@example.com</code></pre>\n"
"<p>\n"
"this will securely forward port 4006 on the server at example.com to\n"
"our local computerâs port 4006 (Swank only accepts connections from\n"
"localhost).</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">ssh -L4006:127.0.0.1:4006 username@example.com</code></pre>\n"
"<p>\n"
"это безопасно перенаправит порт 4006 на сервере example.com на порт 4006 "
"нашего локального компьютера (Swank принимает соединения только от "
"localhost).</p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:97
msgid ""
"<p>We connect to the running Swank with <code class=\"western\">M-x\n"
"slime-connect</code>, choosing localhost for the host and port 4006.</p>"
msgstr ""
"<p>Подключаемся к работающему Swank с помощью \n"
"<code class=\"western\">M-x slime-connect</code>, выбирая localhost \n"
"для хоста и порт 4006.</p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:101
msgid "<p>We can write new code:</p>"
msgstr "<p>Мы можем написать новый код: </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:109
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun dostuff ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"goodbye world ~a!~%&quot; *counter*))</code>\n"
"<code class=\"western\">(setf *counter* 0)</code></pre>\n"
"<p>\n"
"and eval it as usual with <code class=\"western\">C-c C-c</code> or <code "
"class=\"western\">M-x\n"
"slime-eval-region</code> for instance. The output should change.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun dostuff ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"goodbye world ~a!~%&quot; *counter*))</code>\n"
"<code class=\"western\">(setf *counter* 0)</code></pre>\n"
"<p>\n"
"и вычислить его как обычно, например, с помощью <code class=\"western\">C-c "
"C-c</code> или\n"
" <code class=\"western\">M-x slime-eval-region</code>. \n"
"Результат должен измениться. </p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:114
msgid ""
"<p>Thatâs how Ron Garret debugged the Deep Space 1 spacecraft from\n"
"the earth in 1999:</p>"
msgstr ""
"<p>Вот как Рон Гаррет отлаживал космический корабль Deep Space 1 с Земли \n"
"в 1999 году:</p>"

#: in_ed/lisp-journey_gitlab_io/remote-debug.html:122
msgid ""
"<blockquote>We were able to debug and fix a race condition that had\n"
"not shown up during ground testing. (Debugging a program running on a\n"
"$100M piece of hardware that is 100 million miles away is an\n"
"interesting experience. Having a read-eval-print loop running on the\n"
"spacecraft proved invaluable in finding and fixing the problem.</"
"blockquote>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""
"<blockquote>Мы смогли отладить и исправить состояние гонки, которое \n"
"не обнаружилось во время наземного тестирования. (Отладка программы,\n"
"работающей на аппаратном обеспечении стоимостью 100 миллионов долларов, \n"
"которое находится на расстоянии 100 миллионов миль, представляет собой "
"интересный опыт. \n"
"Выполнение цикла чтения-оценки-печати( )на космическом корабле оказалось "
"бесценным для поиска и устранения проблемы. </blockquote>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"

#: in_ed/lisp-journey_gitlab_io/debugging-in-common-lisp.html:628
msgid ""
"</body>\n"
"</html>"
msgstr ""
