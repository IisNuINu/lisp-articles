#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-15 15:14+0300\n"
"PO-Revision-Date: 2021-08-22 07:05+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:46:50.172634533\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T12:48:54.899705481\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Compile Time Type Checking in Common Lisp</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:46:50.172634533\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T12:48:54.899705481\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Проверка типа во время компиляции в Common Lisp</h1>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:37
msgid ""
"<p>We often hear that Common Lisp is dynamically typed, which is not\n"
"wrong, but that leads to the belief that Lisp is as bad as Python\n"
"concerning types, which is plainly wrong. We donât hear enough that\n"
"CL is a compiled language, that we can add type annotations, and that\n"
"SBCL does thorough type checking. Hence, what we have at hand is\n"
"awesome: we can compile a whole program or <em>compile a single\n"
"function</em> and get type warnings. Once again, the feedback is\n"
"immediate. We can define our own types and get compile-time type\n"
"warnings.</p>"
msgstr ""
"<p>Мы часто слышим, что Common Lisp динамически типизируется, что не "
"является \n"
"неправильным, но это приводит к убеждению, что Lisp так же плох в отношении "
"типов, \n"
"как Python, что явно неверно. Мы недостаточно слышим о том, что CL - \n"
"это компилируемый язык, что мы можем добавлять аннотации типов и что SBCL "
"выполняет \n"
"тщательную проверку типов. Следовательно, то, что у нас есть под рукой, \n"
"просто великолепно: мы можем скомпилировать целую программу или "
"скомпилировать \n"
"одну функцию и получить предупреждения о типах. Еще раз, обратная связь "
"мгновенная. \n"
"Мы можем определять наши собственные типы и получать предупреждения о "
"типах \n"
"во время компиляции.</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:42
msgid ""
"<p>You use a paramater that must be a list of list of strings of\n"
"length 3 ? Ok, define the type:</p>"
msgstr ""
"<p>Вы используете параметр, который должен быть списком строк длиной 3? \n"
"Хорошо, определите тип: </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:52
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun list-of-3tuples-"
"strings-p (list)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Return t if "
"LIST is a list composed of 3-tuples, made only of strings.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(and (consp list)</"
"code>\n"
"<code class=\"western\">       </code><code class=\"western\">(every (lambda "
"(it)</code>\n"
"<code class=\"western\">                </code><code class=\"western\">(and</"
"code>\n"
"<code class=\"western\">                 </code><code class=\"western\">(= 3 "
"(length it))</code>\n"
"<code class=\"western\">                 </code><code class=\"western"
"\">(every #'stringp it)))</code>\n"
"<code class=\"western\">              </code><code class=\"western"
"\">list)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:57
msgid ""
"<code class=\"western\">(deftype alist-of-3tuples-strings ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(satisfies list-"
"of-3tuples-strings-p))</code></pre>\n"
"<p>\n"
"and type the variable as explained below.</p>"
msgstr ""
"<code class=\"western\">(deftype alist-of-3tuples-strings ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(satisfies list-"
"of-3tuples-strings-p))</code></pre>\n"
"<p>\n"
"и введите переменную, как описано ниже.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:64
msgid ""
"<p>Itâs useful for development, itâs also great to catch errors\n"
"in a userâs configuration file. Checks are done when we <code class=\"western"
"\">load</code>\n"
"a file, and error messages are explicit. We use this now in the Next\n"
"browser.</p>"
msgstr ""
"<p>Это полезно для разработки, а также для обнаружения ошибок в файле \n"
"конфигурации пользователя. Проверки выполняются, когда мы загружаем файл, \n"
"и сообщения об ошибках явные. Мы используем это сейчас в браузере Next. </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:72
msgid ""
"<p>We donât hear a lot about all that, maybe because the\n"
"information was hard to find, maybe because SBCL was not there at the\n"
"time Lisp books were written. The following was published to the\n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/type.html\">Common\n"
"Lisp Cookbook /type.html</a>, so hopefully the issue is solved!</p>"
msgstr ""
"<p>Мы мало что слышим обо всем этом, может быть, потому, что информацию \n"
"было трудно найти, может быть, потому, что SBCL не существовало в то "
"время, \n"
"когда писались книги по Lisp. Вот что было опубликовано в \n"
"<a href=\"https://lispcookbook.github.io/cl-cookbook/type.html\">Common\n"
"Lisp Cookbook /type.html</a> так что, надеюсь, проблема решена!</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:76
msgid "<p>On the topic, donât miss these:</p>"
msgstr "<p>По этой теме не пропустите:</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:83
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the article <a href=\"https://medium.com/"
"@MartinCracauer/static-type-checking-in-the-programmable-programming-"
"language-lisp-79bb79eb068a\">Static\n"
"\ttype checking in SBCL</a>, by Martin Cracauer \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">статья Мартина Кракауэра  <a href=\"https://"
"medium.com/@MartinCracauer/static-type-checking-in-the-programmable-"
"programming-language-lisp-79bb79eb068a\">«Статическая проверка типов в "
"SBCL»</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:90
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the article <a href=\"https://alhassy.github."
"io/TypedLisp/\">Typed\n"
"\tList, a Primer</a> - letâs explore Lispâs fine-grained type\n"
"\thierarchy! with a shallow comparison to Haskell. \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">статья <a href=\"https://alhassy.github.io/"
"TypedLisp/\">Typed\n"
"\tList, a Primer</a> - давайте исследуем детальную иерархию типов Lisp! с "
"поверхностным сравнением с Haskell.\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:93
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:101
msgid ""
"<p>the <a href=\"https://github.com/stylewarning/coalton\">Coalton</a>\n"
"\tlibrary (pre-alpha): adding Hindley-Milner type checking to Common\n"
"\tLisp which allows for gradual adoption, in the same way Typed Racket\n"
"\tor Hack allows for. It is as an embedded DSL in Lisp that resembles\n"
"\tStandard ML or OCaml, but lets you seamlessly interoperate with\n"
"\tnon-statically-typed Lisp code (and vice versa). \n"
"\t</p>"
msgstr ""
"<p> библиотека  <a href=\"https://github.com/stylewarning/coalton\">Coalton</"
"a>\n"
"\t(пре-альфа): добавление проверки типов Хиндли-Милнера в Common Lisp, \n"
"\tчто позволяет постепенно внедрять такие же методы, как Typed Racket \n"
"\tили Hack. Это как встроенный DSL в Lisp, который напоминает Standard ML \n"
"\tили OCaml, но позволяет вам беспрепятственно взаимодействовать с \n"
"\tнестатически типизированным кодом Lisp (и наоборот).  \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:106
msgid ""
"</ul>\n"
"<h2 class=\"western\"><a name=\"compile-time-type-checking\"></a>Compile-"
"time\n"
"type checking</h2>"
msgstr ""
"</ul>\n"
"<h2 class=\"western\"><a name=\"compile-time-type-checking\"></a>Проверка "
"типов во время компиляции</h2>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:115
msgid ""
"<p>You may provide type information for variables, function arguments\n"
"etc via the macros <code class=\"western\"><a href=\"http://www.lispworks."
"com/documentation/HyperSpec/Body/s_declar.htm\">declare</a></code>\n"
"and <code class=\"western\"><a href=\"https://www.xach.com/clhs?q=declaim"
"\">declaim</a></code>.\n"
"However, similar to the <code class=\"western\">:type</code> slot\n"
"introduced in <a href=\"https://lisp-journey.gitlab.io/blog/compile-time-"
"type-checking-in-common-lisp/clos.html\">CLOS\n"
"section</a>, the effects of type declarations are undefined in Lisp\n"
"standard and are implementation specific. So there is no guarantee\n"
"that the Lisp compiler will perform compile-time type checking.</p>"
msgstr ""
"<p>Вы можете предоставить информацию о типе переменных, аргументов функций \n"
"и т. Д. С помощью макроса <code class=\"western\"><a href=\"http://www."
"lispworks.com/documentation/HyperSpec/Body/s_declar.htm\">declare</a></code> "
"и <code class=\"western\"><a href=\"https://www.xach.com/clhs?q=declaim"
"\">declaim</a></code>. Однако, подобно \n"
"<code class=\"western\">:type</code> для слота, представленному в <a href="
"\"https://lisp-journey.gitlab.io/blog/compile-time-type-checking-in-common-"
"lisp/clos.html\">разделе CLOS</a>, эффекты объявления типов не определены в "
"стандарте Lisp и зависят от реализации. \n"
"Таким образом, нет гарантии, что компилятор Lisp выполнит проверку типов "
"во \n"
"время компиляции.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:120
msgid ""
"<p>However, it is possible, and SBCL is an implementation that does\n"
"thorough type checking.</p>"
msgstr ""
"<p>Однако это возможно, и SBCL - это реализация, которая выполняет "
"тщательную\n"
"проверку типов.</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:126
msgid ""
"<p>Letâs recall first that Lisp already warns about simple type\n"
"warnings. The following function wrongly wants to concatenate a\n"
"string and a number. When we compile it, we get a type warning.</p>"
msgstr ""
"<p>Напомним сначала, что Lisp уже предупреждает о предупреждениях простых "
"типов. \n"
"Следующая функция ошибочно хочет объединить строку и число. Когда мы её "
"компилируем, \n"
"мы получаем предупреждение о типе. </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:139
msgid ""
"<pre class=\"western\"><code class=\"western\">(defconstant +foo+ 3)</code>\n"
"<code class=\"western\">(defun bar ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(concatenate "
"'string &quot;+&quot; +foo+))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Constant 3 conflicts with its asserted type "
"SEQUENCE.</code>\n"
"<code class=\"western\">;   See also:</code>\n"
"<code class=\"western\">;     The SBCL Manual, Node &quot;Handling of "
"Types&quot;</code></pre>\n"
"<p>\n"
"The example is simple, but it already shows a capacity some other\n"
"languages donât have, and it is actually useful during development\n"
";) Now, weâll do better.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defconstant +foo+ 3)</code>\n"
"<code class=\"western\">(defun bar ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(concatenate "
"'string &quot;+&quot; +foo+))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Constant 3 conflicts with its asserted type "
"SEQUENCE.</code>\n"
"<code class=\"western\">;   See also:</code>\n"
"<code class=\"western\">;     The SBCL Manual, Node &quot;Handling of "
"Types&quot;</code></pre>\n"
"<p>\n"
"Этот пример прост, но он уже показывает возможности, которых нет у "
"некоторых \n"
"других языков, и это действительно полезно во время разработки;) Теперь мы \n"
"сделаем лучше.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:143
msgid ""
"<h3 class=\"western\"><a name=\"declaring-the-type-of-variables\"></"
"a>Declaring\n"
"the type of variables</h3>"
msgstr ""
"<h3 class=\"western\"><a name=\"declaring-the-type-of-variables\"></"
"a>Объявление типа переменных</h3>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:145
msgid ""
"<p>Use the macro <code class=\"western\"><a href=\"https://www.xach.com/clhs?"
"q=declaim\">declaim</a></code>.</p>"
msgstr ""
"<p>Используйте макрос <code class=\"western\"><a href=\"https://www.xach.com/"
"clhs?q=declaim\">declaim</a></code>.</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:150
msgid ""
"<p>Letâs declare that our global variable <code class=\"western\">*name*</"
"code>\n"
"is a string (you can type the following in any order in the REPL):</p>"
msgstr ""
"<p>Давайте объявим, что наша глобальная переменная <code class=\"western"
"\">*name*</code>\n"
"является строкой (вы можете ввести следующее в REPL в любом порядке): </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:156
msgid ""
"<pre class=\"western\"><code class=\"western\">(declaim (type (string) "
"*name*))</code>\n"
"<code class=\"western\">(defparameter *name* &quot;book&quot;)</code></pre>\n"
"<p>\n"
"Now if we try to set it with a bad type, we get a <code class=\"western"
"\">simple-type-error</code>:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(declaim (type (string) "
"*name*))</code>\n"
"<code class=\"western\">(defparameter *name* &quot;book&quot;)</code></pre>\n"
"<p>\n"
"Теперь, если мы попытаемся установить её с плохим типом, мы получим ошибку "
"простого типа -\n"
" <code class=\"western\">simple-type-error</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:164
msgid ""
"<pre class=\"western\"><code class=\"western\">(setf *name* :me)</code>\n"
"<code class=\"western\">Value of :ME in (THE STRING :ME) is :ME, not a "
"STRING.</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SIMPLE-TYPE-ERROR]</code></pre>\n"
"<p>\n"
"We can do the same with our custom types. Letâs quickly declare the\n"
"type <code class=\"western\">list-of-strings</code>:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(setf *name* :me)</code>\n"
"<code class=\"western\">Value of :ME in (THE STRING :ME) is :ME, not a "
"STRING.</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SIMPLE-TYPE-ERROR]</code></pre>\n"
"<p>\n"
"Мы можем сделать то же самое с нашими пользовательскими типами. \n"
"Давайте быстро объявим тип  <code class=\"western\">list-of-strings</code>:</"
"p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:170
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun list-of-strings-p "
"(list)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Return t if "
"LIST is non nil and contains only strings.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(and (consp list)</"
"code>\n"
"<code class=\"western\">       </code><code class=\"western\">(every "
"#'stringp list)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:176
msgid ""
"<code class=\"western\">(deftype list-of-strings ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(satisfies list-of-"
"strings-p))</code></pre>\n"
"<p>\n"
"Now letâs declare that our <code class=\"western\">*all-names*</code>\n"
"variables is a list of strings:</p>"
msgstr ""
"<code class=\"western\">(deftype list-of-strings ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(satisfies list-of-"
"strings-p))</code></pre>\n"
"<p>\n"
"Теперь давайте объявим, что наша переменная <code class=\"western\">*all-"
"names*</code> \n"
"представляет собой список строк:</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:182
msgid ""
"<pre class=\"western\"><code class=\"western\">(declaim (type (list-of-"
"strings) *all-names*))</code>\n"
"<code class=\"western\">(defparameter *all-names* &quot;&quot;)</code></"
"pre>\n"
"<p>\n"
"We can compose types:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(declaim (type (list-of-"
"strings) *all-names*))</code>\n"
"<code class=\"western\">(defparameter *all-names* &quot;&quot;)</code></"
"pre>\n"
"<p>\n"
"Мы можем составлять типы:</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:187
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (type (or null list-of-strings) *all-names*))</code></pre><h3 "
"class=\"western\">\n"
"<a name=\"declaring-the-input-and-output-types-of-functions\"></a>Declaring\n"
"the input and output types of functions</h3>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(declaim (type (or null list-of-strings) *all-names*))</code></pre><h3 "
"class=\"western\">\n"
"<a name=\"declaring-the-input-and-output-types-of-functions\"></a>Объявление "
"входных и выходных типов функций</h3>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:191
msgid ""
"<p>We use again the <code class=\"western\">declaim</code> macro, with\n"
"<code class=\"western\">ftype (function â¦)</code> instead of just\n"
"<code class=\"western\">type</code>:</p>"
msgstr ""
"<p>Мы снова используем макрос <code class=\"western\">declaim</code> с \n"
"<code class=\"western\">ftype (function …)</code> вместо простого \n"
"<code class=\"western\">type</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:199
msgid ""
"<pre class=\"western\"><code class=\"western\">(declaim (ftype (function "
"(fixnum) fixnum) add))</code>\n"
"<code class=\"western\">;;                         ^^input ^^output "
"[optional]</code>\n"
"<code class=\"western\">(defun add (n)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(+ n  1))</"
"code></pre>\n"
"<p>\n"
"With this we get nice type warnings at compile time.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(declaim (ftype (function "
"(fixnum) fixnum) add))</code>\n"
"<code class=\"western\">;;                         ^^input ^^output "
"[optional]</code>\n"
"<code class=\"western\">(defun add (n)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(+ n  1))</"
"code></pre>\n"
"<p>\n"
"Благодаря этому мы получаем приятные предупреждения о типах во время "
"компиляции.</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:204
msgid ""
"<p>If we change the function to erroneously return a string instead\n"
"of a fixnum, we get a warning:</p>"
msgstr ""
"<p>Если мы изменим функцию, чтобы она ошибочно возвращала строку вместо \n"
"фиксированного числа, мы получим предупреждение: </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:216
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun add (n)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(format nil "
"&quot;~a&quot; (+ n  1)))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of ((GET-OUTPUT-STREAM-STRING "
"STREAM)) is</code>\n"
"<code class=\"western\">;     (VALUES SIMPLE-STRING &amp;OPTIONAL),</code>\n"
"<code class=\"western\">;   conflicting with the declared function return "
"type</code>\n"
"<code class=\"western\">;     (VALUES FIXNUM &amp;REST T).</code></pre>\n"
"<p>\n"
"If we use <code class=\"western\">add</code> inside another function,\n"
"to a place that expects a string, we get a warning:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun add (n)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(format nil "
"&quot;~a&quot; (+ n  1)))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of ((GET-OUTPUT-STREAM-STRING "
"STREAM)) is</code>\n"
"<code class=\"western\">;     (VALUES SIMPLE-STRING &amp;OPTIONAL),</code>\n"
"<code class=\"western\">;   conflicting with the declared function return "
"type</code>\n"
"<code class=\"western\">;     (VALUES FIXNUM &amp;REST T).</code></pre>\n"
"<p>\n"
"Если мы используем <code class=\"western\">add</code> внутри другой функции "
"в месте, \n"
"которое ожидает строку, мы получим предупреждение: </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:230
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun bad-concat (n)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(concatenate "
"'string (add n)))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of (ADD N) is</code>\n"
"<code class=\"western\">;     (VALUES FIXNUM &amp;REST T),</code>\n"
"<code class=\"western\">;   conflicting with its asserted type</code>\n"
"<code class=\"western\">;     SEQUENCE.</code></pre>\n"
"<p>\n"
"If we use <code class=\"western\">add</code> inside another function,\n"
"and that function declares its argument types which appear to be\n"
"incompatible with those of <code class=\"western\">add</code>, we get a\n"
"warning:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun bad-concat (n)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(concatenate "
"'string (add n)))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of (ADD N) is</code>\n"
"<code class=\"western\">;     (VALUES FIXNUM &amp;REST T),</code>\n"
"<code class=\"western\">;   conflicting with its asserted type</code>\n"
"<code class=\"western\">;     SEQUENCE.</code></pre>\n"
"<p>\n"
"Если мы используем <code class=\"western\">add</code> внутри другой "
"функции, \n"
"и эта функция объявляет свои типы аргументов, которые кажутся "
"несовместимыми \n"
"с типами <code class=\"western\">add</code>, мы получаем предупреждение: </p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:244
msgid ""
"<pre class=\"western\"><code class=\"western\">(declaim (ftype (function "
"(string)) bad-arg))</code>\n"
"<code class=\"western\">(defun bad-arg (n)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(add n))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of N is</code>\n"
"<code class=\"western\">;     (VALUES STRING &amp;OPTIONAL),</code>\n"
"<code class=\"western\">;   conflicting with its asserted type</code>\n"
"<code class=\"western\">;     FIXNUM.</code></pre>\n"
"<p>\n"
"This all happens indeed <em>at compile time</em>, either in the REPL,\n"
"either with a simple <code class=\"western\">C-c C-c</code> in Slime,\n"
"or when we <code class=\"western\">load</code> a file.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(declaim (ftype (function "
"(string)) bad-arg))</code>\n"
"<code class=\"western\">(defun bad-arg (n)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(add n))</code>\n"
"<code class=\"western\">; caught WARNING:</code>\n"
"<code class=\"western\">;   Derived type of N is</code>\n"
"<code class=\"western\">;     (VALUES STRING &amp;OPTIONAL),</code>\n"
"<code class=\"western\">;   conflicting with its asserted type</code>\n"
"<code class=\"western\">;     FIXNUM.</code></pre>\n"
"<p>\n"
"Все это действительно происходит <em>во время компиляции</em>, либо в "
"REPL, \n"
"либо с помощью простого <code class=\"western\">C-c C-c</code> в Slime, \n"
"либо когда мы загружаем файл с помощью <code class=\"western\">load</code>. "
"</p>"

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:247
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:249
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/compile-time-type-checking-in-common-lisp.html:252
msgid ""
"</body>\n"
"</html>"
msgstr ""
