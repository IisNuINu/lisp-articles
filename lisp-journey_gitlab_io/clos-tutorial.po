#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lisp-journey_gitlab_io/clos-tutorial.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-15 15:14+0300\n"
"PO-Revision-Date: 2021-08-24 10:58+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:54:15.807147575\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:09:42.297885361\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">CLOS Tutorial</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T12:54:15.807147575\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:09:42.297885361\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Учебник по CLOS</h1>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:31
msgid ""
"<p><em>We just updated the <a href=\"https://lispcookbook.github.io/cl-"
"cookbook/clos.html\">CLOS\n"
"page on the Common Lisp Cookbook</a>. You should refer to it for\n"
"updates.</em></p>"
msgstr ""
"<p><em>Мы только что обновили страницу <a href=\"https://lispcookbook.github."
"io/cl-cookbook/clos.html\">CLOS в Поваренной книге Common Lisp</a>. Вам "
"следует обращаться к ней за обновлениями.\n"
"</em></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:36
msgid ""
"<p>CLOS is the âCommon Lisp Object Systemâ, arguably one of the\n"
"most powerful object systems available in any language.</p>"
msgstr ""
"<p>CLOS - это «объектная система Common Lisp», возможно, одна из самых "
"мощных объектных систем, доступных на любом языке.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:40
msgid "<p>Some of its features include:</p>"
msgstr "<p>Некоторые из её функций включают: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:49
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">it is <strong>dynamic</strong>,\n"
"\tmaking it a joy to work with in a Lisp REPL. For example, changing a\n"
"\tclass definition will update the existing objects, given certain\n"
"\trules which we have control upon. \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">она <strong>динамична</strong>, поэтому "
"работать \n"
"\tс ней в Lisp REPL очень приятно. Например, изменение определения класса "
"обновит \n"
"\tсуществующие объекты с учетом определенных правил, которые мы "
"контролируем. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:55
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">it supports <strong>multiple\n"
"\tdispatch</strong> and <strong>multiple inheritance</strong>, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">поддерживает \n"
"\t<strong>множественную отправку(multiple dispatch)</strong> и \n"
"\t<strong>множественное наследование</strong>, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:61
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">it is different from most object\n"
"\tsystems in that class and method definitions are not tied together, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">она отличается от большинства объектных "
"систем тем, \n"
"\tчто определения классов и методов не связаны друг с другом, \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:67
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">it has excellent <strong>introspection</"
"strong>\n"
"\tcapabilities, \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> обладает отличными способностями к \n"
"\t<strong>introspection</strong>(самоанализу), \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:70
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:70"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:75
msgid ""
"<p>it is provided by a <strong>meta-object protocol</strong>,\n"
"\twhich provides a standard interface to the CLOS, and can be used to\n"
"\tcreate new object systems. \n"
"\t</p>"
msgstr ""
"<p> она предоставляется <strong>метаобъектным протоколом</strong>, который \n"
"\tобеспечивает стандартный интерфейс для CLOS и может использоваться \n"
"\tдля создания новых объектных систем. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:78
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:78"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:83
msgid ""
"<p>The functionality belonging to this name was added to the Common\n"
"Lisp language between the publication of Steeleâs first edition of\n"
"âCommon Lisp, the Languageâ in 1984 and the formalization of the\n"
"language as an ANSI standard ten years later.</p>"
msgstr ""
"<p>Функциональность, принадлежащая этому названию, была добавлена к \n"
"языку Common Lisp в период между публикацией первого издания Стила \n"
"«Common Lisp, the Language» в 1984 году и формализацией языка в качестве \n"
"стандарта ANSI десять лет спустя.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:88
msgid ""
"<p>This page aims to give a good understanding of how to use CLOS,\n"
"but only a brief introduction to the MOP.</p>"
msgstr ""
"<p>Эта страница призвана дать хорошее представление о том, как использовать "
"CLOS, \n"
"но только краткое введение в MOP.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:92
msgid "<p>To learn the subjects in depth, you will need two books:</p>"
msgstr "<p>Для углубленного изучения предметов вам понадобятся две книги: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:100
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"http://www.communitypicks.com/r/"
"lisp/s/17592186046723-object-oriented-programming-in-common-lisp-a-programmer"
"\">Object-Oriented\n"
"\tProgramming in Common Lisp: a Programmerâs Guide to CLOS</a>, by\n"
"\tSonya Keene, \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:103
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:103"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:108
msgid ""
"<p><a href=\"http://www.communitypicks.com/r/lisp/s/17592186045709-the-art-"
"of-the-metaobject-protocol\">the\n"
"\tArt of the Metaobject Protocol</a>, by Gregor Kiczales, Jim des\n"
"\tRiviÃ¨res et al. \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:111
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:111"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:113
msgid "<p>But see also</p>"
msgstr "<p>Но Также смотрите</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:120
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the introduction in <a href=\"http://www."
"gigamonkeys.com/book/object-reorientation-generic-functions.html"
"\">Practical\n"
"\tCommon Lisp</a> (online), by Peter Seibel. \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">введение в <a href=\"http://www.gigamonkeys."
"com/book/object-reorientation-generic-functions.html\">Practical\n"
"\tCommon Lisp</a> (online), by Peter Seibel. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:126
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://www.cs.cmu.edu/Groups/AI/"
"html/cltl/clm/node260.html#SECTION003200000000000000000\">Common\n"
"\tLisp, the Language</a> \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:129
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:129"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:133
msgid ""
"<p>and for reference, the complete <a href=\"https://clos-mop.hexstreamsoft."
"com/\">CLOS-MOP\n"
"\tspecifications</a>. \n"
"\t</p>"
msgstr ""
"<p> и для справки, полные  <a href=\"https://clos-mop.hexstreamsoft.com/"
"\">CLOS-MOP\n"
"\tспецификации</a>. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:136
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:136"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:138
msgid "<p><strong>Table of Contents</strong></p>"
msgstr "<p><strong>Оглавление</strong></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:145
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#classes-and-instances\">Classes\n"
"\tand instances</a> \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#classes-and-instances\"> Классы и экземпляры</a> \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:152
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:152"
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#diving-in\">Diving\n"
"\t\tin</a> \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#diving-in\">Погружение в</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:158
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#creating-objects-make-instance\">Creating\n"
"\t\tobjects (make-instance)</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#creating-objects-make-instance\">Создание объектов (make-"
"instance)</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:163
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slots\">Slots</a>\n"
"\t\t\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slots\"> Слоты</a>\n"
"\t\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:170
msgid ""
"\t\t<ul>\n"
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#a-function-that-always-works-slot-value\">A\n"
"\t\t\tfunction that always works (slot-value)</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t<ul>\n"
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#a-function-that-always-works-slot-value\"> Функция, "
"которая всегда работает (slot-value)</a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:176
msgid ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#initial-and-default-values-initarg-initform\">Initial\n"
"\t\t\tand default values (initarg, initform)</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#initial-and-default-values-initarg-initform\">Начальные "
"значения и значения по умолчанию (initarg, initform)</a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:182
msgid ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#getters-and-setters-accessor-reader-writer\">Getters\n"
"\t\t\tand setters (accessor, reader, writer)</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#getters-and-setters-accessor-reader-writer\"> "
"Геттеры(Getters) и сеттеры(setters) \n"
"\t(аксессор(accessor), считыватель(reader), писатель(writer))</a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:188
msgid ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#class-vs-instance-slots\">Class\n"
"\t\t\tVS instance slots</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#class-vs-instance-slots\">Класс против слотов "
"экземпляра</a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:194
msgid ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slot-documentation\">Slot\n"
"\t\t\tdocumentation</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slot-documentation\"> Документация по слоту</a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:200
msgid ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slot-type\">Slot\n"
"\t\t\ttype</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#slot-type\">Тип слота </a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:207
msgid ""
"\t\t</ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#find-class-class-name-class-of\">find-class,\n"
"\t\tclass-name, class-of</a> \n"
"\t\t</p>"
msgstr ""
"\t\t</ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#find-class-class-name-class-of\">find-class,\n"
"\t\tclass-name, class-of</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:213
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#subclasses-and-inheritance\">Subclasses\n"
"\t\tand inheritance</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#subclasses-and-inheritance\">Подклассы и наследование</"
"a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:219
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#multiple-inheritance\">Multiple\n"
"\t\tinheritance</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#multiple-inheritance\">Множественное наследование</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:225
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#redefining-and-changing-a-class\">Redefining\n"
"\t\tand changing a class</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#redefining-and-changing-a-class\">Переопределение и "
"изменение класса</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:231
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#pretty-printing\">Pretty\n"
"\t\tprinting</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#pretty-printing\">Красивая печать</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:237
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#classes-of-traditional-lisp-types\">Classes\n"
"\t\tof traditional lisp types</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#classes-of-traditional-lisp-types\">Классы традиционных "
"типов lisp</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:242
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#introspection\">Introspection</a>\n"
"\t\t\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#introspection\">Самоанализ(Introspection)</a>\n"
"\t\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:248
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#see-also\">See\n"
"\t\talso</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#see-also\">Смотрите также</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:255
msgid ""
"\t\t<ul>\n"
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#defclassstd-write-shorter-classes\">defclass/std:\n"
"\t\t\twrite shorter classes</a> \n"
"\t\t\t</p>"
msgstr ""
"\t\t<ul>\n"
"\t\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#defclassstd-write-shorter-classes\">defclass/std: писать "
"более короткие классы </a> \n"
"\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:262
msgid ""
"\t\t</ul>\n"
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#methods\">Methods</a>\n"
"\t\t</p>"
msgstr ""
"\t\t</ul>\n"
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#methods\">Методы</a>\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:269
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:269"
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#diving-in\">Diving\n"
"\t\tin</a> \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#diving-in\">Погружение в</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:275
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#generic-functions-defgeneric-defmethod\">Generic\n"
"\t\tfunctions (defgeneric, defmethod)</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#generic-functions-defgeneric-defmethod\"> Обобщенные "
"функции (defgeneric, defmethod)</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:280
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#multimethods\">Multimethods</a>\n"
"\t\t\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#multimethods\"> Мультиметоды</a>\n"
"\t\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:286
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#controlling-setters-setf-ing-methods\">Controlling\n"
"\t\tsetters (setf-ing methods)</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#controlling-setters-setf-ing-methods\">Управление "
"сеттерами (методы setf)</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:292
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#dispatch-mechanism-and-next-methods\">Dispatch\n"
"\t\tmechanism and next methods</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#dispatch-mechanism-and-next-methods\">Механизм отправки "
"и методы next(следующий)\n"
"</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:298
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#method-qualifiers-before-after-around\">Method\n"
"\t\tqualifiers (before, after, around)</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#method-qualifiers-before-after-around\">Квалификаторы "
"метода (before(до), after(после), around(вокруг))</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:304
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#other-method-combinations\">Other\n"
"\t\tmethod combinations</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#other-method-combinations\">Другие комбинации методов</"
"a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:310
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#debugging-tracing-method-combination\">Debugging:\n"
"\t\ttracing method combination</a> \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#debugging-tracing-method-combination\">Отладка: "
"трассировка комбинации методов </a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:316
msgid ""
"\t</ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#mop\">MOP</a>\n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:322
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#metaclasses\">Metaclasses</a>\n"
"\t\t\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://lisp-journey.gitlab.io/"
"blog/clos-tutorial/#metaclasses\">Метаклассы</a>\n"
"\t\t\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:325
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:329
msgid ""
"<p><a href=\"https://lisp-journey.gitlab.io/blog/clos-tutorial/#controlling-"
"the-initialization-of-instances-initialize-instance\">Controlling\n"
"\t\tthe initialization of instances (initialize-instance)</a> \n"
"\t\t</p>"
msgstr ""
"<p><a href=\"https://lisp-journey.gitlab.io/blog/clos-tutorial/#controlling-"
"the-initialization-of-instances-initialize-instance\">  Управление "
"инициализацией экземпляров (initialize-instance)</a> \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:336
msgid ""
"\t</ul>\n"
"</ul>\n"
"<h1 class=\"western\"><a name=\"classes-and-instances\"></a>Classes and\n"
"instances</h1>\n"
"<h2 class=\"western\"><a name=\"diving-in\"></a>Diving in</h2>"
msgstr ""
"\t</ul>\n"
"</ul>\n"
"<h1 class=\"western\"><a name=\"classes-and-instances\"></a>Классы и "
"экземпляры</h1>\n"
"<h2 class=\"western\"><a name=\"diving-in\"></a>Погружение в</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:340
msgid ""
"<p>Letâs dive in with an example showing class definition, creation\n"
"of objects, slot access, methods specialized for a given class, and\n"
"inheritance.</p>"
msgstr ""
"<p>Давайте рассмотрим пример, показывающий определение класса, создание "
"объектов, доступ к слотам, методы специализированные для данного класса, и "
"наследование.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:349
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:349"
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:351
msgid "<code class=\"western\">;; =&gt; #&lt;STANDARD-CLASS PERSON&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:355
msgid ""
"<code class=\"western\">(defvar p1 (make-instance 'person :name &quot;"
"me&quot; ))</code>\n"
"<code class=\"western\">;;                                 ^^^^ initarg</"
"code>\n"
"<code class=\"western\">;; =&gt; #&lt;PERSON {1006234593}&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:359
msgid ""
"<code class=\"western\">(name p1)</code>\n"
"<code class=\"western\">;;^^^ accessor</code>\n"
"<code class=\"western\">;; =&gt; &quot;me&quot;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:363
msgid ""
"<code class=\"western\">(lisper p1)</code>\n"
"<code class=\"western\">;; =&gt; nil</code>\n"
"<code class=\"western\">;;    ^^ initform (slot unbound by default)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:365
msgid "<code class=\"western\">(setf (lisper p1) t)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:369
msgid ""
"<code class=\"western\">(defclass child (person)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">())</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:375
msgid ""
"<code class=\"western\">(defclass child (person)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((can-walk-p</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:accessor can-"
"walk-p</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initform t)))</"
"code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS CHILD&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:379
msgid ""
"<code class=\"western\">(can-walk-p (make-instance 'child))</code>\n"
"<code class=\"western\">;; T</code></pre><h2 class=\"western\">\n"
"<a name=\"defining-classes-defclass\"></a>Defining classes (defclass)</h2>"
msgstr ""
"<code class=\"western\">(can-walk-p (make-instance 'child))</code>\n"
"<code class=\"western\">;; T</code></pre><h2 class=\"western\">\n"
"<a name=\"defining-classes-defclass\"></a>Определение классов (defclass)</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:381
msgid ""
"<p>The macro used for defining new data types in CLOS is <code class="
"\"western\">defclass</code>.</p>"
msgstr ""
"<p>Макрос, используемый для определения новых типов данных в CLOS, - это \n"
" <code class=\"western\">defclass</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:385
msgid "<p>We used it like this:</p>"
msgstr "<p>Мы использовали его так: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:397
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)))</code></pre>\n"
"<p>\n"
"This gives us a CLOS type (or class) called <code class=\"western\">person</"
"code>\n"
"and two slots, named <code class=\"western\">name</code> and <code class="
"\"western\">lisper</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)))</code></pre>\n"
"<p>\n"
"Это дает нам тип (или класс) CLOS с именем <code class=\"western\">person</"
"code> и два слота с именами  <code class=\"western\">name</code> и <code "
"class=\"western\">lisper</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:401
msgid ""
"<pre class=\"western\"><code class=\"western\">(class-of p1)</code>\n"
"<code class=\"western\">#&lt;STANDARD-CLASS PERSON&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:406
msgid ""
"<code class=\"western\">(type-of p1)</code>\n"
"<code class=\"western\">PERSON</code></pre>\n"
"<p>\n"
"The general form of <code class=\"western\">defclass</code> is:</p>"
msgstr ""
"<code class=\"western\">(type-of p1)</code>\n"
"<code class=\"western\">PERSON</code></pre>\n"
"<p>\n"
"Общая форма  <code class=\"western\">defclass</code> это:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:421
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass &lt;class-name&gt; "
"(list of super classes)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot-1</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:slot-option "
"slot-argument)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot-2, etc))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:optional-class-"
"option</code>\n"
"<code class=\"western\">   </code><code class=\"western\">:another-optional-"
"class-option))</code></pre>\n"
"<p>\n"
"So, our <code class=\"western\">person</code> class doesnât\n"
"explicitely inherit from another class (it gets the empty parentheses\n"
"<code class=\"western\">()</code>). However it still inherits by\n"
"default from the class <code class=\"western\">t</code> and from\n"
"<code class=\"western\">standard-object</code>. See below under\n"
"âinheritanceâ.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass &lt;class-name&gt; "
"(list of super classes)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot-1</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:slot-option "
"slot-argument)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot-2, etc))</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:optional-class-"
"option</code>\n"
"<code class=\"western\">   </code><code class=\"western\">:another-optional-"
"class-option))</code></pre>\n"
"<p>\n"
"Итак, наш класс <code class=\"western\">person</code> не наследуется явно от "
"другого класса \n"
"(это видно по пустым круглым скобкам <code class=\"western\">()</code>). "
"Однако он \n"
"по-прежнему наследуется по умолчанию от класса <code class=\"western\">t</"
"code> и от \n"
"<code class=\"western\">standard-object</code> См. Ниже в разделе "
"«наследование».</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:426
msgid ""
"<p>We could write a minimal class definition without slots options\n"
"like this:</p>"
msgstr ""
"<p>Мы могли бы написать минимальное определение класса без таких опций "
"слотов,\n"
"как здесь: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:433
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass point ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(x y z))</code></"
"pre>\n"
"<p>\n"
"or even without slots specificiers: <code class=\"western\">(defclass\n"
"point () ())</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass point ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(x y z))</code></"
"pre>\n"
"<p>\n"
"или даже без спецификаторов слотов: <code class=\"western\">(defclass\n"
"point () ())</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:437
msgid ""
"<h2 class=\"western\"><a name=\"creating-objects-make-instance\"></"
"a>Creating\n"
"objects (make-instance)</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"creating-objects-make-instance\"></"
"a>Создение Объектов (make-instance)</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:439
msgid ""
"<p>We create instances of a class with <code class=\"western\">make-"
"instance</code>:</p>"
msgstr ""
"<p>Мы создаем экземпляры класса с помощью  <code class=\"western\">make-"
"instance</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:444
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defvar p1 (make-instance 'person :name &quot;me&quot; ))</code></pre>\n"
"<p>\n"
"It is generally good practice to define a constructor:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(defvar p1 (make-instance 'person :name &quot;me&quot; ))</code></pre>\n"
"<p>\n"
"Обычно рекомендуется определять конструктор: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:452
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun make-person (name &amp;"
"key lisper)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'person :name name :lisper lisper))</code></pre>\n"
"<p>\n"
"This has the direct advantage that you can control the required\n"
"arguments. You should now export the constructor from your package\n"
"and not the class itself.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun make-person (name &amp;"
"key lisper)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'person :name name :lisper lisper))</code></pre>\n"
"<p>\n"
"Это дает прямое преимущество в том, что вы можете контролировать требуемые "
"аргументы. \n"
"Теперь вы должны экспортировать конструктор из вашего пакета, а не сам "
"класс. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:457
msgid ""
"<h2 class=\"western\"><a name=\"slots\"></a>Slots</h2>\n"
"<h3 class=\"western\"><a name=\"a-function-that-always-works-slot-value\"></"
"a>\n"
"A function that always works (slot-value)</h3>"
msgstr ""
"<h2 class=\"western\"><a name=\"slots\"></a>Слоты</h2>\n"
"<h3 class=\"western\"><a name=\"a-function-that-always-works-slot-value\"></"
"a>\n"
"Функция, которая всегда работает (slot-value)</h3>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:460
msgid ""
"<p>The function to access any slot anytime is <code class=\"western\">(slot-"
"value\n"
"&lt;object&gt; &lt;slot-name&gt;)</code>.</p>"
msgstr ""
"<p>Функция для доступа к любому слоту в любое время:  <code class=\"western"
"\">(slot-value\n"
"&lt;object&gt; &lt;slot-name&gt;)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:465
msgid ""
"<p>Given our <code class=\"western\">point</code> class above, which\n"
"didnât define any slot accessors:</p>"
msgstr ""
"<p>Учитывая наш вышеупомянутый класс <code class=\"western\">point</code>, "
"который не \n"
"определял никаких способов доступа к слотам(акцессоров/accessors): </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:468
msgid ""
"<pre class=\"western\"><code class=\"western\">(defvar pt (make-instance "
"'point))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:478
msgid ""
"<code class=\"western\">(inspect pt)</code>\n"
"<code class=\"western\">The object is a STANDARD-OBJECT of type POINT.</"
"code>\n"
"<code class=\"western\">0. X: &quot;unbound&quot;</code>\n"
"<code class=\"western\">1. Y: &quot;unbound&quot;</code>\n"
"<code class=\"western\">2. Z: &quot;unbound&quot;</code></pre>\n"
"<p>\n"
"We got an object of type <code class=\"western\">POINT</code>, but\n"
"<strong>slots are unbound by default</strong>: trying to access them\n"
"will raise an <code class=\"western\">UNBOUND-SLOT</code> condition:</p>"
msgstr ""
"<code class=\"western\">(inspect pt)</code>\n"
"<code class=\"western\">The object is a STANDARD-OBJECT of type POINT.</"
"code>\n"
"<code class=\"western\">0. X: &quot;unbound&quot;</code>\n"
"<code class=\"western\">1. Y: &quot;unbound&quot;</code>\n"
"<code class=\"western\">2. Z: &quot;unbound&quot;</code></pre>\n"
"<p>\n"
"У нас есть объект типа <code class=\"western\">POINT</code>, но  <strong>по "
"умолчанию \n"
"слоты не связаны</strong>(не имеют связаного значения): попытка доступа к "
"ним вызовет \n"
"условие <code class=\"western\">UNBOUND-SLOT</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:483
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(slot-value pt 'x) ;; =&gt; condition: the slot is unbound</code></pre>\n"
"<p>\n"
"<code class=\"western\">slot-value</code> is <code class=\"western\">setf</"
"code>-able:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(slot-value pt 'x) ;; =&gt; condition: the slot is unbound</code></pre>\n"
"<p>\n"
"<code class=\"western\">slot-value</code>  является доступной для <code "
"class=\"western\">setf</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:491
msgid ""
"<pre class=\"western\"><code class=\"western\">(setf (slot-value pt 'x) 1)</"
"code>\n"
"<code class=\"western\">(slot-value pt 'x) ;; =&gt; 1</code></pre><h3 class="
"\"western\">\n"
"<a name=\"initial-and-default-values-initarg-initform\"></a>Initial and\n"
"default values (initarg, initform)</h3>\n"
"<ul>\n"
"\t<li/>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(setf (slot-value pt 'x) 1)</"
"code>\n"
"<code class=\"western\">(slot-value pt 'x) ;; =&gt; 1</code></pre><h3 class="
"\"western\">\n"
"<a name=\"initial-and-default-values-initarg-initform\"></a>Начальные "
"значения и\n"
"значения по умолчанию (initarg, initform)</h3>\n"
"<ul>\n"
"\t<li/>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:496
msgid ""
"<p><code class=\"western\">:initarg :foo</code> is the keyword\n"
"\twe can pass to <code class=\"western\">make-instance</code> to give a\n"
"\tvalue to this slot: \n"
"\t</p>"
msgstr ""
"<p><code class=\"western\">:initarg :foo</code>  - ключевое слово, которое "
"мы \n"
"\tможем передать <code class=\"western\">make-instance</code>, чтобы "
"присвоить \n"
"\tзначение этому слоту:  \n"
"\t</p> "

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:502
msgid ""
"</ul>\n"
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(make-instance 'person :name &quot;me&quot;)</code></pre>\n"
"<p>\n"
"(again: slots are unbound by default)</p>"
msgstr ""
"</ul>\n"
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(make-instance 'person :name &quot;me&quot;)</code></pre>\n"
"<p>\n"
"(еще раз: слоты по умолчанию не связаны)</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:506
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:506"
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:512
msgid ""
"<p><code class=\"western\">:initform &lt;val&gt;</code> is the\n"
"\t<em>default value</em> in case we didnât specify an initarg. This\n"
"\tform is evaluated each time itâs needed, in the lexical\n"
"\tenvironment of the <code class=\"western\">defclass</code>. \n"
"\t</p>"
msgstr ""
"<p><code class=\"western\">:initform &lt;val&gt;</code> - <em>значение по "
"умолчанию</em>, \n"
"\tесли мы не указали initarg. Эта форма вычисляется каждый раз, когда это "
"необходимо, \n"
"\tв лексической окружении <code class=\"western\">defclass</code>. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:515
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:515"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:517
msgid "<p>Sometimes we see the following trick to clearly require a slot:</p>"
msgstr "<p>Иногда мы видим следующий трюк, чтобы явно потребовать слот: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:524
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass foo ()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((a</code>\n"
"<code class=\"western\">      </code><code class=\"western\">:initarg :a</"
"code>\n"
"<code class=\"western\">      </code><code class=\"western\">:initform "
"(error &quot;you didn't supply an initial value for slot a&quot;))))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS FOO&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:530
msgid ""
"<code class=\"western\">(make-instance 'foo) ;; =&gt; enters the debugger.</"
"code></pre><h3 class=\"western\">\n"
"<a name=\"getters-and-setters-accessor-reader-writer\"></a>Getters and\n"
"setters (accessor, reader, writer)</h3>\n"
"<ul>\n"
"\t<li/>"
msgstr ""
"<code class=\"western\">(make-instance 'foo) ;; =&gt; enters the debugger.</"
"code></pre><h3 class=\"western\">\n"
"<a name=\"getters-and-setters-accessor-reader-writer\"></a>Геттеры-функции "
"выдающие значение\n"
"слота(Getters) и сеттеры-функции устанавливающи(привязывающие) значения "
"слотов(setters) \n"
"(аксессор(accessor), считыватель(reader), писатель(writer))</h3>\n"
"<ul>\n"
"\t<li/>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:535
msgid ""
"<p><code class=\"western\">:accessor foo</code>: an accessor is\n"
"\tboth a <strong>getter</strong> and a <strong>setter</strong>. Its\n"
"\targument is a name that will become a <strong>generic function</strong>.\n"
"\t\t</p>"
msgstr ""
"<p><code class=\"western\">:accessor foo</code>: Аксессор является "
"одновременно \n"
"\t<strong>геттером/getter</strong> и <strong>setter/сеттером</strong>. \n"
"\tЕго аргумент - это имя, которое станет <strong>обобщенной функцией/generic "
"function</strong>.\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:539
msgid ""
"</ul>\n"
"<pre class=\"western\"><code class=\"western\">(name p1) ;; =&gt; &quot;"
"me&quot;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:544
msgid ""
"<code class=\"western\">(type-of #'name)</code>\n"
"<code class=\"western\">STANDARD-GENERIC-FUNCTION</code></pre>\n"
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:549
msgid ""
"<p><code class=\"western\">:reader</code> and <code class=\"western\">:"
"writer</code>\n"
"\tdo what you expect. Only the <code class=\"western\">:writer</code> is\n"
"\t<code class=\"western\">setf</code>-able. \n"
"\t</p>"
msgstr ""
"<p><code class=\"western\">:reader</code> и <code class=\"western\">:writer</"
"code>\n"
"\tделают то, что вы ожидаете. Только <code class=\"western\">:writer</"
"code> \n"
"\tможет быть использован в <code class=\"western\">:writer</code>\n"
"\t<code class=\"western\">setf</code>. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:552
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:552"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:554
msgid ""
"<p>If you donât specify any of these, you can still use <code class=\"western"
"\">slot-value</code>.</p>"
msgstr ""
"<p>Если вы не укажете ни один из них, вы все равно можете использовать "
"значение  \n"
"<code class=\"western\">slot-value</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:559
msgid ""
"<p>You can give a slot more than one <code class=\"western\">:accessor</"
"code>,\n"
"<code class=\"western\">:reader</code> or <code class=\"western\">:initarg</"
"code>.</p>"
msgstr ""
"<p>Вы можете назначить слоту более одного <code class=\"western\">:accessor</"
"code>,\n"
"<code class=\"western\">:reader</code> или <code class=\"western\">:initarg</"
"code>.\n"
".</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:564
msgid ""
"<p>We introduce two macros to make the access to slots shorter in\n"
"some situations:</p>"
msgstr ""
"<p>Мы вводим два макроса, чтобы в некоторых ситуациях сделать доступ к "
"слотам короче: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:574
msgid ""
"<p>1- <code class=\"western\">with-slots</code> allows to abbreviate\n"
"several calls to slot-value. The first argument is a list of slot\n"
"names. The second argument evaluates to a CLOS instance. This is\n"
"followed by optional declarations and an implicit <code class=\"western"
"\">progn</code>.\n"
"Lexically during the evaluation of the body, an access to any of\n"
"these names as a variable is equivalent to accessing the\n"
"corresponding slot of the instance with <code class=\"western\">slot-value</"
"code>.</p>"
msgstr ""
"<p>1- <code class=\"western\">with-slots</code> позволяет сокращать "
"несколько \n"
"обращений к slot-value. Первый аргумент - это список имён слотов. Второй "
"аргумент \n"
"вычисляется как экземпляр CLOS. За этим следуют необязательные объявления и "
"неявный  progn.\n"
"Лексически во время вычисления тела доступ к любому из этих имен в качестве "
"переменной \n"
"эквивалентен доступу к соответствующему слоту экземпляра с помощью \n"
"<code class=\"western\">slot-value</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:581
msgid ""
"<pre class=\"western\"><code class=\"western\">(with-slots (name lisper)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">c1</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;got "
"~a, ~a~&amp;&quot; name lisper))</code></pre>\n"
"<p>\n"
"or</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(with-slots (name lisper)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">c1</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;got "
"~a, ~a~&amp;&quot; name lisper))</code></pre>\n"
"<p>\n"
"или</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:592
msgid ""
"<pre class=\"western\"><code class=\"western\">(with-slots ((n name)</code>\n"
"<code class=\"western\">             </code><code class=\"western\">(l "
"lisper))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">c1</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;got "
"~a, ~a~&amp;&quot; n l))</code></pre>\n"
"<p>\n"
"2- <code class=\"western\">with-accessors</code> is equivalent, but\n"
"instead of a list of slots it takes a list of accessor functions. Any\n"
"reference to the variable inside the macro is equivalent to a call to\n"
"the accessor function.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(with-slots ((n name)</code>\n"
"<code class=\"western\">             </code><code class=\"western\">(l "
"lisper))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">c1</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;got "
"~a, ~a~&amp;&quot; n l))</code></pre>\n"
"<p>\n"
"2- <code class=\"western\">with-accessors</code> эквивалентен, но вместо "
"списка слотов \n"
"он принимает список функций доступа. Любая ссылка на переменную внутри "
"макроса эквивалентна \n"
"вызову функции доступа. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:600
msgid ""
"<pre class=\"western\"><code class=\"western\">(with-accessors ((name        "
"name)</code>\n"
"<code class=\"western\">                  </code><code class=\"western"
"\">^^variable  ^^accessor</code>\n"
"<code class=\"western\">                 </code><code class=\"western"
"\">(lisper lisper))</code>\n"
"<code class=\"western\">            </code><code class=\"western\">p1</"
"code>\n"
"<code class=\"western\">          </code><code class=\"western\">(format t "
"&quot;name: ~a, lisper: ~a&quot; name lisper))</code></pre><h3 class="
"\"western\">\n"
"<a name=\"class-vs-instance-slots\"></a>Class VS instance slots</h3>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(with-accessors ((name        "
"name)</code>\n"
"<code class=\"western\">                  </code><code class=\"western"
"\">^^variable  ^^accessor</code>\n"
"<code class=\"western\">                 </code><code class=\"western"
"\">(lisper lisper))</code>\n"
"<code class=\"western\">            </code><code class=\"western\">p1</"
"code>\n"
"<code class=\"western\">          </code><code class=\"western\">(format t "
"&quot;name: ~a, lisper: ~a&quot; name lisper))</code></pre><h3 class="
"\"western\">\n"
"<a name=\"class-vs-instance-slots\"></a>Слоты класса и слоты экземпляра</h3>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:603
msgid ""
"<p><code class=\"western\">:allocation</code> specifies whether this\n"
"slot is <em>local</em> or <em>shared</em>.</p>"
msgstr ""
"<p><code class=\"western\">:allocation</code> указывает, является ли этот "
"слот <em>local</em>(локальным) или <em>shared</em>(общим).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:607
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:607"
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:611
msgid ""
"<p>a slot is <em>local</em> by default, that means it can be\n"
"\tdifferent for each instance of the class. In that case <code class="
"\"western\">:allocation</code>\n"
"\tequals <code class=\"western\">:instance</code>.</p>"
msgstr ""
"<p>по умолчанию слот является <em>local</em>(локальным), это означает, \n"
"что он может быть индивидуальным для каждого экземпляра класса. В этом "
"случае \n"
"<code class=\"western\">:allocation</code> равно <code class=\"western\">:"
"instance</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:614
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:614"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:618
msgid ""
"<p>a <em>shared</em> slot will always be equal for all\n"
"\tinstances of the class. We set it with <code class=\"western\">:"
"allocation\n"
"\t:class</code>.</p>"
msgstr ""
"<p> общий слот(<em>shared</em>) всегда будет одинаковым для всех экземпляров "
"класса. \n"
"Мы устанавливаем его с помощью  <code class=\"western\">:allocation\n"
"\t:class</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:621
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:621"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:626
msgid ""
"<p>In the following example, note how changing the value of the class\n"
"slot <code class=\"western\">species</code> of <code class=\"western\">p2</"
"code>\n"
"affects all instances of the class (whether or not those instances\n"
"exist yet).</p>"
msgstr ""
"<p>В следующем примере обратите внимание, как изменение значения \n"
"<code class=\"western\">p2</code> указанного как слот класса влияет \n"
"на все экземпляры класса (независимо от того, существуют ли эти экземпляры). "
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:634
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :initarg :"
"name :accessor name)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(species</code>\n"
"<code class=\"western\">      </code><code class=\"western\">:initform 'homo-"
"sapiens</code>\n"
"<code class=\"western\">      </code><code class=\"western\">:accessor "
"species</code>\n"
"<code class=\"western\">      </code><code class=\"western\">:allocation :"
"class)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:641
msgid ""
"<code class=\"western\">;; Note that the slot &quot;lisper&quot; was removed "
"in existing instances.</code>\n"
"<code class=\"western\">(inspect p1)</code>\n"
"<code class=\"western\">;; The object is a STANDARD-OBJECT of type PERSON.</"
"code>\n"
"<code class=\"western\">;; 0. NAME: &quot;me&quot;</code>\n"
"<code class=\"western\">;; 1. SPECIES: HOMO-SAPIENS</code>\n"
"<code class=\"western\">;; &gt; q</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:643
msgid "<code class=\"western\">(defvar p2 (make-instance 'person))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:647
msgid ""
"<code class=\"western\">(species p1)</code>\n"
"<code class=\"western\">(species p2)</code>\n"
"<code class=\"western\">;; HOMO-SAPIENS</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:650
msgid ""
"<code class=\"western\">(setf (species p2) 'homo-numericus)</code>\n"
"<code class=\"western\">;; HOMO-NUMERICUS</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:653
msgid ""
"<code class=\"western\">(species p1)</code>\n"
"<code class=\"western\">;; HOMO-NUMERICUS</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:656
msgid ""
"<code class=\"western\">(species (make-instance 'person))</code>\n"
"<code class=\"western\">;; HOMO-NUMERICUS</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:663
msgid ""
"<code class=\"western\">(let ((temp (make-instance 'person)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(setf (species "
"temp) 'homo-lisper))</code>\n"
"<code class=\"western\">;; HOMO-LISPER</code>\n"
"<code class=\"western\">(species (make-instance 'person))</code>\n"
"<code class=\"western\">;; HOMO-LISPER</code></pre><h3 class=\"western\">\n"
"<a name=\"slot-documentation\"></a>Slot documentation</h3>"
msgstr ""
"<code class=\"western\">(let ((temp (make-instance 'person)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(setf (species "
"temp) 'homo-lisper))</code>\n"
"<code class=\"western\">;; HOMO-LISPER</code>\n"
"<code class=\"western\">(species (make-instance 'person))</code>\n"
"<code class=\"western\">;; HOMO-LISPER</code></pre><h3 class=\"western\">\n"
"<a name=\"slot-documentation\"></a>Документация по слоту</h3>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:666
msgid ""
"<p>Each slot accepts one <code class=\"western\">:documentation</code>\n"
"option.</p>"
msgstr ""
"<p>Каждый слот принимает одну опцию  <code class=\"western\">:documentation</"
"code>.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:669
msgid "<h3 class=\"western\"><a name=\"slot-type\"></a>Slot type</h3>"
msgstr "<h3 class=\"western\"><a name=\"slot-type\"></a>Тип Слота</h3>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:674
msgid ""
"<p>The <code class=\"western\">:type</code> slot option may not do the\n"
"job you expect it does. If you are new to the CLOS, we suggest you\n"
"skip this section and use your own constructors to manually check\n"
"slot types.</p>"
msgstr ""
"<p>Параметр слота <code class=\"western\">:type</code> может не работать "
"так, как вы ожидаете. \n"
"Если вы новичок в CLOS, мы предлагаем вам пропустить этот раздел и "
"использовать свои \n"
"собственные конструкторы для проверки типов слотов вручную.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:679
msgid ""
"<p>Indeed, whether slot types are being checked or not is undefined.\n"
"See the <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/"
"m_defcla.htm#defclass\">Hyperspec</a>.</p>"
msgstr ""
"<p>Действительно, проверяются ли типы слотов или нет, не определено. \n"
"См. <a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/m_defcla."
"htm#defclass\">Hyperspec</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:685
msgid ""
"<p>Few implementations will do it. Clozure CL does it, SBCL does it\n"
"when safety is high (<code class=\"western\">(declaim (optimize\n"
"safety))</code>).</p>"
msgstr ""
"<p>Несколько реализаций будут делать это. Clozure CL делает это, \n"
"SBCL делает это, когда безопасность высока \n"
" (<code class=\"western\">(declaim (optimize safety))</code>).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:691
msgid ""
"<p>To do it otherwise, see <a href=\"https://stackoverflow.com/"
"questions/51723992/how-to-force-slots-type-to-be-checked-during-make-instance"
"\">this\n"
"Stack-Overflow answer</a>, and see also <a href=\"https://github.com/sellout/"
"quid-pro-quo\">quid-pro-quo</a>,\n"
"a contract programming library.</p>"
msgstr ""
"<p>Чтобы сделать это в противном случае, см.  \n"
"<a href=\"https://stackoverflow.com/questions/51723992/how-to-force-slots-"
"type-to-be-checked-during-make-instance\">Этот ответ на Stack-Overflow</a>, "
"а также см. библиотеку программирования контрактов - <a href=\"https://"
"github.com/sellout/quid-pro-quo\">quid-pro-quo</a>. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:697
msgid ""
"<h2 class=\"western\"><a name=\"find-class-class-name-class-of\"></a>find-"
"class,\n"
"class-name, class-of</h2>\n"
"<pre class=\"western\"><code class=\"western\">(find-class 'point)</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS POINT 275B78DC&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:700
msgid ""
"<code class=\"western\">(class-name (find-class 'point))</code>\n"
"<code class=\"western\">;; POINT</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:703
msgid ""
"<code class=\"western\">(class-of my-point)</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS POINT 275B78DC&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:709
msgid ""
"<code class=\"western\">(typep my-point (class-of my-point))</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"CLOS classes are also instances of a CLOS class, and we can find out\n"
"what that class is, as in the example below:</p>"
msgstr ""
"<code class=\"western\">(typep my-point (class-of my-point))</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Классы CLOS также являются экземплярами  CLOS class, и мы можем узнать, \n"
"что это за класс, как в примере ниже: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:716
msgid ""
"<pre class=\"western\"><code class=\"western\">(class-of (class-of my-"
"point))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS STANDARD-CLASS 20306534&gt;</"
"code></pre>\n"
"<p>\n"
"<u>Note</u>: this is your first introduction to the MOP. You donât\n"
"need that to get started !</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(class-of (class-of my-"
"point))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS STANDARD-CLASS 20306534&gt;</"
"code></pre>\n"
"<p>\n"
"<u>Примечание</u>: это ваше первое знакомство с MOP. Для начала работы с ООП "
"оно не обязательно!</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:726
msgid ""
"<p>The object <code class=\"western\">my-point</code> is an instance of\n"
"the class named <code class=\"western\">point</code>, and the class\n"
"named <code class=\"western\">point</code> is itself an instance of the\n"
"class named <code class=\"western\">standard-class</code>. We say that\n"
"the class named <code class=\"western\">standard-class</code> is the\n"
"<em>metaclass</em> (i.e. the class of the class) of <code class=\"western"
"\">my-point</code>.\n"
"We can make good uses of metaclasses, as weâll see later.</p>"
msgstr ""
"<p>Объект <code class=\"western\">my-point</code> является экземпляром "
"класса \n"
"с именем <code class=\"western\">point</code>, и класс с именем <code class="
"\"western\">point</code>\n"
"сам является экземпляром класса с именем <code class=\"western\">standard-"
"class</code>. \n"
"Мы говорим, что класс с именем <code class=\"western\">standard-class</code> "
"является \n"
"метаклассом (т. е. Классом класса) <code class=\"western\">my-point</"
"code>. \n"
"Мы можем эффективно использовать метаклассы, как мы увидим позже. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:730
msgid ""
"<h2 class=\"western\"><a name=\"subclasses-and-inheritance\"></a>Subclasses\n"
"and inheritance</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"subclasses-and-inheritance\"></a>Подклассы и "
"наследование</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:733
msgid ""
"<p>As illustrated above, <code class=\"western\">child</code> is a\n"
"subclass of <code class=\"western\">person</code>.</p>"
msgstr ""
"<p>Как показано выше,  <code class=\"western\">child</code>- это подкласс\n"
"<code class=\"western\">person</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:738
msgid ""
"<p>All objects inherit from the class <code class=\"western\">standard-"
"object</code>\n"
"and <code class=\"western\">t</code>.</p>"
msgstr ""
"<p>Все объекты наследуются от класса  <code class=\"western\">standard-"
"object</code> и\n"
"<code class=\"western\">t</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:742
msgid ""
"<p>Every child instance is also an instance of <code class=\"western"
"\">person</code>.</p>"
msgstr ""
"<p>Каждый дочерний экземпляр также является экземпляром\n"
" <code class=\"western\">person</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:746
msgid ""
"<pre class=\"western\"><code class=\"western\">(type-of c1)</code>\n"
"<code class=\"western\">;; CHILD</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:749
msgid ""
"<code class=\"western\">(subtypep (type-of c1) 'person)</code>\n"
"<code class=\"western\">;; T</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:752
msgid ""
"<code class=\"western\">(ql:quickload &quot;closer-mop&quot;)</code>\n"
"<code class=\"western\">;; ...</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:758
msgid ""
"<code class=\"western\">(closer-mop:subclassp (class-of c1) 'person)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"The <a href=\"https://github.com/pcostanza/closer-mop\">closer-mop</a>\n"
"library is <em>the</em> portable way to do CLOS/MOP operations.</p>"
msgstr ""
"<code class=\"western\">(closer-mop:subclassp (class-of c1) 'person)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"Библиотека <a href=\"https://github.com/pcostanza/closer-mop\">closer-mop</"
"a> - \n"
"это портативный способ выполнения операций CLOS/MOP.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:765
msgid ""
"<p>A subclass inherits all of its parents slots, and it can override\n"
"any of their slot options. Common Lisp makes this process dynamic,\n"
"great for REPL session, and we can even control parts of it (like, do\n"
"something when a given slot is removed/updated/added, etc).</p>"
msgstr ""
"<p>Подкласс наследует все свои родительские слоты и может переопределить \n"
"любые параметры их слотов. Common Lisp делает этот процесс динамичным, \n"
"отлично подходит для сеанса REPL, и мы даже можем контролировать его части \n"
"(например, делать что-то, когда данный слот удаляется/обновляется/"
"добавляется и т. Д.).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:770
msgid ""
"<p>The <strong>class precedence list</strong> of a <code class=\"western"
"\">child</code>\n"
"is thus:</p>"
msgstr ""
"<p>Таким образом, <strong>class precedence list</strong>(список "
"предшествования класса) для\n"
"<code class=\"western\">child</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:775
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">child &lt;- person &lt;-- standard-object &lt;- t</code></pre>\n"
"<p>\n"
"Which we can get with:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">child &lt;- person &lt;-- standard-object &lt;- t</code></pre>\n"
"<p>\n"
"Который мы можем получить с помощью: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:786
msgid ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:class-precedence-"
"list (class-of c1))</code>\n"
"<code class=\"western\">;; (#&lt;standard-class child&gt;</code>\n"
"<code class=\"western\">;;  #&lt;standard-class person&gt;</code>\n"
"<code class=\"western\">;;  #&lt;standard-class standard-object&gt;</code>\n"
"<code class=\"western\">;;  #&lt;sb-pcl::slot-class sb-pcl::slot-object&gt;</"
"code>\n"
"<code class=\"western\">;;  #&lt;sb-pcl:system-class t&gt;)</code></pre>\n"
"<p>\n"
"However, the <strong>direct superclass</strong> of a <code class=\"western"
"\">child</code>\n"
"is only:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:class-precedence-"
"list (class-of c1))</code>\n"
"<code class=\"western\">;; (#&lt;standard-class child&gt;</code>\n"
"<code class=\"western\">;;  #&lt;standard-class person&gt;</code>\n"
"<code class=\"western\">;;  #&lt;standard-class standard-object&gt;</code>\n"
"<code class=\"western\">;;  #&lt;sb-pcl::slot-class sb-pcl::slot-object&gt;</"
"code>\n"
"<code class=\"western\">;;  #&lt;sb-pcl:system-class t&gt;)</code></pre>\n"
"<p>\n"
"Однако <strong>direct superclass</strong>(непосредственным/прямым "
"суперклассом) для\n"
" <code class=\"western\">child</code> является только: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:793
msgid ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:class-direct-"
"superclasses (class-of c1))</code>\n"
"<code class=\"western\">;; (#&lt;standard-class person&gt;)</code></pre>\n"
"<p>\n"
"We can further inspect our classes with <code class=\"western\">class-direct-"
"[subclasses,\n"
"slots, default-initargs]</code> and many more functions.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:class-direct-"
"superclasses (class-of c1))</code>\n"
"<code class=\"western\">;; (#&lt;standard-class person&gt;)</code></pre>\n"
"<p>\n"
"Мы можем дополнительно проверить наши классы с помощью \n"
"<code class=\"western\">class-direct-[subclasses, slots, default-initargs]</"
"code> и \n"
"многих других функций.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:797
msgid "<p>How slots are combined follows some rules:</p>"
msgstr "<p>Слоты комбинируются по следующим некоторым правилам: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:801
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:801"
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:805
msgid ""
"<p><code class=\"western\">:accessor</code> and <code class=\"western\">:"
"reader</code>\n"
"\tare combined by the <strong>union</strong> of accessors and readers\n"
"\tfrom all the inherited slots.</p>"
msgstr ""
"<p><code class=\"western\">:accessor</code> и <code class=\"western\">:"
"reader</code>\n"
"\tкомбинируются путем <strong>union</strong>(объединения) средств "
"доступа(accessor) \n"
"\tи чтения(readers) из всех унаследованных слотов.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:808
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:808"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:811
msgid ""
"<p><code class=\"western\">:initarg</code>: the <strong>union</strong>\n"
"\tof initialization arguments from all the inherited slots.</p>"
msgstr ""
"<p><code class=\"western\">:initarg</code>:  объединяются(<strong>union</"
"strong>)\n"
"\tаргументы инициализации от всех унаследованных слотов.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:814
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:814"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:819
msgid ""
"<p><code class=\"western\">:initform</code>: we get <strong>the\n"
"\tmost specific</strong> default initial value form, i.e. the first\n"
"\t<code class=\"western\">:initform</code> for that slot in the\n"
"\tprecedence list.</p>"
msgstr ""
"<p><code class=\"western\">:initform</code>: мы получаем <strong>наиболее "
"конкретную форму</strong>\n"
"\tначального значения по умолчанию, то есть первую форму \n"
"\t<code class=\"western\">:initform</code> для этого слота в списке "
"предшествования.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:822
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:822"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:826
msgid ""
"<p><code class=\"western\">:allocation</code> is not inherited.\n"
"\tIt is controlled solely by the class being defined and defaults to\n"
"\t<code class=\"western\">:instance</code>.</p>"
msgstr ""
"<p><code class=\"western\">:allocation</code>  не наследуется. Она "
"контролируется \n"
"\tисключительно определяемым классом и по умолчанию\n"
"\t<code class=\"western\">:instance</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:829
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:829"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:840
msgid ""
"<p>Last but not least, be warned that inheritance is fairly easy to\n"
"misuse, and multiple inheritance is multiply so, so please take a\n"
"little care. Ask yourself whether <code class=\"western\">foo</code>\n"
"really wants to inherit from <code class=\"western\">bar</code>, or\n"
"whether instances of <code class=\"western\">foo</code> want a slot\n"
"containing a <code class=\"western\">bar</code>. A good general guide\n"
"is that if <code class=\"western\">foo</code> and <code class=\"western"
"\">bar</code>\n"
"are âsame sort of thingâ then itâs correct to mix them together\n"
"by inheritance, but if theyâre really separate concepts then you\n"
"should use slots to keep them apart.</p>"
msgstr ""
"<p>И последнее, но не менее важное: имейте в виду, что наследованием \n"
"довольно легко злоупотребить, а множественное наследование умножает(это "
"злоупотребление), \n"
"поэтому, пожалуйста, будьте осторожны. Спросите себя, действительно ли \n"
"<code class=\"western\">foo</code> хочет наследовать от <code class=\"western"
"\">bar</code> \n"
"или экземплярам <code class=\"western\">foo</code> нужен слот, содержащий \n"
"<code class=\"western\">bar</code>. Хорошее общее руководство состоит в "
"том, \n"
"что если  <code class=\"western\">foo</code> и <code class=\"western\">bar</"
"code> - \n"
"это «вещи одного типа», то правильно смешивать их вместе посредством "
"наследования, \n"
"но если это действительно отдельные концепции, то вы должны использовать "
"слоты, \n"
"чтобы разделять их. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:844
msgid ""
"<h2 class=\"western\"><a name=\"multiple-inheritance\"></a>Multiple\n"
"inheritance</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"multiple-inheritance\"></a>Множественное "
"наследование</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:846
msgid "<p>CLOS supports multiple inheritance.</p>"
msgstr "<p>CLOS поддерживает множественное наследование.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:854
msgid ""
"<pre class=\"western\"><code class=\"western\">(defun baby (child person)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">())</code></pre>\n"
"<p>\n"
"The first class on the list of parent classes is the most specific\n"
"one, <code class=\"western\">child</code>âs slots will take\n"
"precedence over the <code class=\"western\">person</code>âs</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defun baby (child person)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">())</code></pre>\n"
"<p>\n"
"Первый класс в списке родительских классов является наиболее конкретным, \n"
"<code class=\"western\">child</code>(дочерние) слоты будут иметь приоритет \n"
"<code class=\"western\">person</code></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:858
msgid "<p>TODO (but remember how slots are merged).</p>"
msgstr "<p>TODO (но помните, как объединяются слоты).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:862
msgid ""
"<h2 class=\"western\"><a name=\"redefining-and-changing-a-class\"></"
"a>Redefining\n"
"and changing a class</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"redefining-and-changing-a-class\"></"
"a>Переопределение и изменение класса</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:864
msgid "<p>This section briefly covers two topics:</p>"
msgstr "<p>В этом разделе кратко рассматриваются две темы:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:872
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">redefinition of an existing\n"
"\tclass, which you might already have done by following our code\n"
"\tsnippets, and what we do naturally during development, and \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">переопределение существующего класса, \n"
"\tкоторое вы, возможно, уже сделали, следуя нашим фрагментам кода, \n"
"\tи то, что мы делаем естественным образом во время разработки, и \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:875
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:875"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:880
msgid ""
"<p>changing an instance of one class into an instance of\n"
"\tanother, a powerful feature of CLOS that youâll probably wonât\n"
"\tuse very often. \n"
"\t</p>"
msgstr ""
"<p>преобразование экземпляра одного класса в экземпляр другого - \n"
"\tмощная функция CLOS, которую вы, вероятно, не будете использовать очень "
"часто.  \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:883
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:883"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:887
msgid ""
"<p>Weâll gloss over the details. Suffice it to say that\n"
"everythingâs configurable by implementing methods exposed by the\n"
"MOP.</p>"
msgstr ""
"<p>Мы не будем останавливаться на достигнутом. Достаточно сказать, \n"
"что все настраивается путем реализации методов, предоставляемых MOP.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:898
msgid ""
"<p>To redefine a class, simply evaluate a new <code class=\"western"
"\">defclass</code>\n"
"form. This then takes the place of the old definition, the existing\n"
"class object is updated, and <strong>all instances of the class</strong>\n"
"(and, recursively, its subclasses) <strong>are lazily updated to\n"
"reflect the new definition</strong>. You donât have to recompile\n"
"anything other than the new <code class=\"western\">defclass</code>,\n"
"nor to invalidate any of your objects. Think about it for a second:\n"
"this is awesome !</p>"
msgstr ""
"<p>Чтобы переопределить класс, просто вычислите новую форму \n"
"<code class=\"western\">defclass</code>. Затем она заменяет старое "
"определение, \n"
"существующий объект класса обновляется, и <strong>все экземпляры класса</"
"strong> \n"
"(и, рекурсивно, его подклассы) <strong>лениво обновляются, чтобы отразить \n"
"новое определение</strong>. Вам не нужно перекомпилировать что-либо, \n"
"кроме нового <code class=\"western\">defclass</code>, или делать \n"
"недействительными какие-либо из ваших объектов. Задумайтесь на секунду: \n"
"это круто!</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:902
msgid ""
"<p>For example, with our <code class=\"western\">person</code> class:</p>"
msgstr ""
"<p>Например, с нашим классом <code class=\"western\">person</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:911
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:911"
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:915
msgid ""
"<code class=\"western\">(setf p1 (make-instance 'person :name &quot;"
"me&quot; ))</code></pre>\n"
"<p>\n"
"Changing, adding, removing slots,â¦</p>"
msgstr ""
"<code class=\"western\">(setf p1 (make-instance 'person :name &quot;"
"me&quot; ))</code></pre>\n"
"<p>\n"
"Изменение, добавление, удаление слотов, …</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:919
msgid ""
"<pre class=\"western\"><code class=\"western\">(lisper p1)</code>\n"
"<code class=\"western\">;; NIL</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:927
msgid ""
"<code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform "
"t        ;; &lt;-- from nil to t</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:930
msgid ""
"<code class=\"western\">(lisper p1)</code>\n"
"<code class=\"western\">;; NIL (of course!)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:933
msgid ""
"<code class=\"western\">(lisper (make-instance 'person :name &quot;"
"You&quot;))</code>\n"
"<code class=\"western\">;; T</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:945
msgid ""
"<code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(lisper</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"lisper)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(age</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :arg</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform 18</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor age)))</"
"code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:948
msgid ""
"<code class=\"western\">(age p1)</code>\n"
"<code class=\"western\">;; =&gt; slot unbound error. This is different from "
"&quot;slot missing&quot;:</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:951
msgid ""
"<code class=\"western\">(slot-value p1 'bwarf)</code>\n"
"<code class=\"western\">;; =&gt; &quot;the slot bwarf is missing from the "
"object #&lt;personâ¦&gt;&quot;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:954
msgid ""
"<code class=\"western\">(setf (age p1) 30)</code>\n"
"<code class=\"western\">(age p1) ;; =&gt; 30</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:959
msgid ""
"<code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"name)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:964
msgid ""
"<code class=\"western\">(slot-value p1 'lisper) ;; =&gt; slot lisper is "
"missing.</code>\n"
"<code class=\"western\">(lisper p1) ;; =&gt; there is no applicable method "
"for the generic function lisper when called with arguments #(lisper).</"
"code></pre>\n"
"<p>\n"
"To change the class of an instance, use <code class=\"western\">change-"
"class</code>:</p>"
msgstr ""
"<code class=\"western\">(slot-value p1 'lisper) ;; =&gt; slot lisper is "
"missing.</code>\n"
"<code class=\"western\">(lisper p1) ;; =&gt; there is no applicable method "
"for the generic function lisper when called with arguments #(lisper).</"
"code></pre>\n"
"<p>\n"
"Чтобы изменить класс экземпляра, используйте <code class=\"western\">change-"
"class</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:969
msgid ""
"<pre class=\"western\"><code class=\"western\">(change-class p1 'child)</"
"code>\n"
"<code class=\"western\">;; we can also set slots of the new class:</code>\n"
"<code class=\"western\">(change-class p1 'child :can-walk-p nil)</code>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(change-class p1 'child)</"
"code>\n"
"<code class=\"western\">;; we can also set slots of the new class:</code>\n"
"<code class=\"western\">(change-class p1 'child :can-walk-p nil)</code>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:972
msgid ""
"<code class=\"western\">(class-of p1)</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS CHILD&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:979
msgid ""
"<code class=\"western\">(can-walk-p p1)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"In the above example, I became a <code class=\"western\">child</code>,\n"
"and I inherited the <code class=\"western\">can-walk-p</code> slot,\n"
"which is true by default.</p>"
msgstr ""
"<code class=\"western\">(can-walk-p p1)</code>\n"
"<code class=\"western\">;; T</code></pre>\n"
"<p>\n"
"В приведенном выше примере p1 стал <code class=\"western\">child</code> и \n"
"унаследовал слот <code class=\"western\">can-walk-p</code>, который\n"
"по умолчанию true. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:982
msgid ""
"<h2 class=\"western\"><a name=\"pretty-printing\"></a>Pretty printing</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"pretty-printing\"></a>Красивая печать</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:984
msgid "<p>Everytime we printed an object so far we got an output like</p>"
msgstr ""
"<p>Каждый раз, когда мы печатали объект, мы получали такой результат, как </"
"p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:989
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">#&lt;PERSON {1006234593}&gt;</code></pre>\n"
"<p>\n"
"which doesnât say much.</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">#&lt;PERSON {1006234593}&gt;</code></pre>\n"
"<p>\n"
"что мало что говорит.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:993
msgid "<p>What if we want to show more information ? Something like</p>"
msgstr "<p>Что, если мы захотим показать больше информации? Что-то типа </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:999
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">#&lt;PERSON me lisper: t&gt;</code></pre>\n"
"<p>\n"
"Pretty printing is done by specializing the generic <code class=\"western"
"\">print-object</code>\n"
"method for this class:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">#&lt;PERSON me lisper: t&gt;</code></pre>\n"
"<p>\n"
"Красивая печать выполняется путем специализации обобщенного метода печати "
"объекта -\n"
"<code class=\"western\">print-object</code> для этого класса: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1009
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">(print-"
"unreadable-object (obj stream :type t)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(with-"
"accessors ((name name)</code>\n"
"<code class=\"western\">                         </code><code class=\"western"
"\">(lisper lisper))</code>\n"
"<code class=\"western\">            </code><code class=\"western\">obj</"
"code>\n"
"<code class=\"western\">          </code><code class=\"western\">(format "
"stream &quot;~a, lisper: ~a&quot; name lisper))))</code></pre>\n"
"<p>\n"
"It gives:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">(print-"
"unreadable-object (obj stream :type t)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">(with-"
"accessors ((name name)</code>\n"
"<code class=\"western\">                         </code><code class=\"western"
"\">(lisper lisper))</code>\n"
"<code class=\"western\">            </code><code class=\"western\">obj</"
"code>\n"
"<code class=\"western\">          </code><code class=\"western\">(format "
"stream &quot;~a, lisper: ~a&quot; name lisper))))</code></pre>\n"
"<p>\n"
"Это дает: :</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1020
msgid ""
"<pre class=\"western\"><code class=\"western\">p1</code>\n"
"<code class=\"western\">;; #&lt;PERSON me, lisper: T&gt;</code></pre>\n"
"<p>\n"
"<code class=\"western\">print-unreadable-object</code> prints the\n"
"<code class=\"western\">#&lt;...&gt;</code>, that says to the reader\n"
"that this object can not be read back in. Its <code class=\"western\">:type\n"
"t</code> argument asks to print the object-type prefix, that is,\n"
"<code class=\"western\">PERSON</code>. Without it, we get <code class="
"\"western\">#&lt;me,\n"
"lisper: T&gt;</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">p1</code>\n"
"<code class=\"western\">;; #&lt;PERSON me, lisper: T&gt;</code></pre>\n"
"<p>\n"
"<code class=\"western\">print-unreadable-object</code>  печатает\n"
"<code class=\"western\">#&lt;...&gt;</code>, который сообщает читателю, что "
"этот \n"
"объект не может быть прочитан обратно. Его аргумент <code class=\"western\">:"
"type\n"
"t</code> просит напечатать префикс типа объекта, то есть <code class="
"\"western\">PERSON</code>.\n"
"Без него мы получим <code class=\"western\">#&lt;me,lisper: T&gt;</code></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1025
msgid ""
"<p>We used the <code class=\"western\">with-accessors</code> macro, but\n"
"of course for simple cases this is enough:</p>"
msgstr ""
"<p>Мы использовали макрос <code class=\"western\">with-accessors</code>, но, "
"конечно, \n"
"для простых случаев этого достаточно: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1033
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(print-unreadable-"
"object (obj stream :type t)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format stream "
"&quot;~a, lisper: ~a&quot; (name obj) (lisper obj))))</code></pre>\n"
"<p>\n"
"Caution: trying to access a slot that is not bound by default will\n"
"lead to an error. Use <code class=\"western\">slot-boundp</code>.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(print-unreadable-"
"object (obj stream :type t)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format stream "
"&quot;~a, lisper: ~a&quot; (name obj) (lisper obj))))</code></pre>\n"
"<p>\n"
"Внимание: попытка доступа к слоту, который не связан по умолчанию, приведет "
"к ошибке. \n"
"Используйте  <code class=\"western\">slot-boundp</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1037
msgid "<p>For reference, the following reproduces the default behaviour:</p>"
msgstr ""
"<p>Для справки, следующий код воспроизводит поведение по умолчанию: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1044
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(print-unreadable-"
"object (obj stream :type t :identity t)))</code></pre>\n"
"<p>\n"
"Here, <code class=\"western\">:identity</code> to <code class=\"western\">t</"
"code>\n"
"prints the <code class=\"western\">{1006234593}</code> address.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod print-object ((obj "
"person) stream)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(print-unreadable-"
"object (obj stream :type t :identity t)))</code></pre>\n"
"<p>\n"
"Здесь <code class=\"western\">:identity</code> для <code class=\"western"
"\">t</code>\n"
"печатает его адрес <code class=\"western\">{1006234593}</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1048
msgid ""
"<h2 class=\"western\"><a name=\"classes-of-traditional-lisp-types\"></"
"a>Classes\n"
"of traditional lisp types</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"classes-of-traditional-lisp-types\"></"
"a>Классы традиционных типов lisp\n"
"</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1050
msgid "<p>Where we approach that we donât need CLOS objects to use CLOS.</p>"
msgstr ""
"<p>В тех случаях, когда мы приближаемся к тому, что нам не нужны объекты \n"
"CLOS для использования CLOS.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1055
msgid ""
"<p>Generously, the functions introduced in the last section also work\n"
"on lisp objects which are <u>not</u> CLOS instances:</p>"
msgstr ""
"<p>В общем, функции, представленные в последнем разделе, также работают с "
"объектами lisp, \n"
"которые <u>не являются</u> экземплярами CLOS: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1075
msgid ""
"<pre class=\"western\"><code class=\"western\">(find-class 'symbol)</code>\n"
"<code class=\"western\">;; #&lt;BUILT-IN-CLASS SYMBOL&gt;</code>\n"
"<code class=\"western\">(class-name *)</code>\n"
"<code class=\"western\">;; SYMBOL</code>\n"
"<code class=\"western\">(eq ** (class-of 'symbol))</code>\n"
"<code class=\"western\">;; T</code>\n"
"<code class=\"western\">(class-of ***)</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS BUILT-IN-CLASS&gt;</code></"
"pre>\n"
"<p>\n"
"We see here that symbols are instances of the system class <code class="
"\"western\">symbol</code>.\n"
"This is one of 75 cases in which the language requires a class to\n"
"exist with the same name as the corresponding lisp type. Many of\n"
"these cases are concerned with CLOS itself (for example, the\n"
"correspondence between the type <code class=\"western\">standard-class</"
"code>\n"
"and the CLOS class of that name) or with the condition system (which\n"
"might or might not be built using CLOS classes in any given\n"
"implementation). However, 33 correspondences remain relating to\n"
"âtraditionalâ lisp types:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(find-class 'symbol)</code>\n"
"<code class=\"western\">;; #&lt;BUILT-IN-CLASS SYMBOL&gt;</code>\n"
"<code class=\"western\">(class-name *)</code>\n"
"<code class=\"western\">;; SYMBOL</code>\n"
"<code class=\"western\">(eq ** (class-of 'symbol))</code>\n"
"<code class=\"western\">;; T</code>\n"
"<code class=\"western\">(class-of ***)</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS BUILT-IN-CLASS&gt;</code></"
"pre>\n"
"<p>\n"
"Здесь мы видим, что символы являются экземплярами системного класса \n"
"<code class=\"western\">symbol</code>. Это один из 75 случаев, когда язык "
"требует \n"
"существования класса с тем же именем, что и соответствующий тип lisp. \n"
"Многие из этих случаев связаны с самим CLOS (например, соответствием между \n"
"типом <code class=\"western\">standard-class</code>(стандартного класса) и \n"
"классом CLOS с этим именем) или с системой условий (которая может быть \n"
"построена или не построена с использованием классов CLOS в любой \n"
"данной реализации) . Тем не менее, 33 соответствия остаются относящимися к \n"
"«традиционным» типам lisp: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1089
msgid ""
"<p>|<code class=\"western\">array</code>|<code class=\"western\">hash-table</"
"code>|<code class=\"western\">readtable</code>|\n"
"|<code class=\"western\">bit-vector</code>|<code class=\"western\">integer</"
"code>|<code class=\"western\">real</code>|\n"
"|<code class=\"western\">broadcast-stream</code>|<code class=\"western"
"\">list</code>|<code class=\"western\">sequence</code>|\n"
"|<code class=\"western\">character</code>|<code class=\"western\">logical-"
"pathname</code>|<code class=\"western\">stream</code>|\n"
"|<code class=\"western\">complex</code>|<code class=\"western\">null</code>|"
"<code class=\"western\">string</code>|\n"
"|<code class=\"western\">concatenated-stream</code>|<code class=\"western"
"\">number</code>|<code class=\"western\">string-stream</code>|\n"
"|<code class=\"western\">cons</code>|<code class=\"western\">package</code>|"
"<code class=\"western\">symbol</code>|\n"
"|<code class=\"western\">echo-stream</code>|<code class=\"western"
"\">pathname</code>|<code class=\"western\">synonym-stream</code>|\n"
"|<code class=\"western\">file-stream</code>|<code class=\"western\">random-"
"state</code>|<code class=\"western\">t</code>|\n"
"|<code class=\"western\">float</code>|<code class=\"western\">ratio</code>|"
"<code class=\"western\">two-way-stream</code>|\n"
"|<code class=\"western\">function</code>|<code class=\"western\">rational</"
"code>|<code class=\"western\">vector</code>|</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1096
msgid ""
"<p>Note that not all âtraditionalâ lisp types are included in\n"
"this list. (Consider: <code class=\"western\">atom</code>, <code class="
"\"western\">fixnum</code>,\n"
"<code class=\"western\">short-float</code>, and any type not denoted by\n"
"a symbol.)</p>"
msgstr ""
"<p>Обратите внимание, что не все «традиционные» типы lisp включены в этот "
"список. \n"
"(Рассмотрим: <code class=\"western\">atom</code>, <code class=\"western"
"\">fixnum</code>,\n"
"<code class=\"western\">short-float</code> и любой тип, не обозначенный "
"символом.)</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1105
msgid ""
"<p>The presence of <code class=\"western\">t</code> is interesting.\n"
"Just as every lisp object is of type <code class=\"western\">t</code>,\n"
"every lisp object is also a member of the class named <code class=\"western"
"\">t</code>.\n"
"This is a simple example of membership of more then one class at a\n"
"time, and it brings into question the issue of <em>inheritance</em>,\n"
"which we will consider in some detail later.</p>"
msgstr ""
"<p>Наличие <code class=\"western\">t</code> интересно. Так же, как каждый "
"объект \n"
"lisp имеет тип <code class=\"western\">t</code>, каждый объект lisp также "
"является \n"
"членом класса с именем <code class=\"western\">t</code>. Это простой пример "
"членства \n"
"более чем в одном классе одновременно, и он ставит под сомнение проблему "
"<em>наследования</em>,\n"
"которую мы более подробно рассмотрим позже. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1112
msgid ""
"<pre class=\"western\"><code class=\"western\">(find-class t)</code>\n"
"<code class=\"western\">;; #&lt;BUILT-IN-CLASS T 20305AEC&gt;</code></pre>\n"
"<p>\n"
"In addition to classes corresponding to lisp types, there is also a\n"
"CLOS class for every structure type you define:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(find-class t)</code>\n"
"<code class=\"western\">;; #&lt;BUILT-IN-CLASS T 20305AEC&gt;</code></pre>\n"
"<p>\n"
"В дополнение к классам, соответствующим типам lisp, существует также \n"
"класс CLOS для каждого определяемого вами структурного типа: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1116
msgid ""
"<pre class=\"western\"><code class=\"western\">(defstruct foo)</code>\n"
"<code class=\"western\">FOO</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1126
msgid ""
"<code class=\"western\">(class-of (make-foo))</code>\n"
"<code class=\"western\">;; #&lt;STRUCTURE-CLASS FOO 21DE8714&gt;</code></"
"pre>\n"
"<p>\n"
"The metaclass of a <code class=\"western\">structure-object</code> is\n"
"the class <code class=\"western\">structure-class</code>. It is\n"
"implementation-dependent whether the metaclass of a âtraditionalâ\n"
"lisp object is <code class=\"western\">standard-class</code>,\n"
"<code class=\"western\">structure-class</code>, or <code class=\"western"
"\">built-in-class</code>.\n"
"Restrictions:</p>"
msgstr ""
"<code class=\"western\">(class-of (make-foo))</code>\n"
"<code class=\"western\">;; #&lt;STRUCTURE-CLASS FOO 21DE8714&gt;</code></"
"pre>\n"
"<p>\n"
"Метаклассом <code class=\"western\">structure-object</code> является класс\n"
"<code class=\"western\">structure-class</code>. Это зависит от реализации, \n"
"является ли метакласс «традиционного» объекта Lisp \n"
"<code class=\"western\">standard-class</code>(стандартным классом),\n"
"<code class=\"western\">structure-class</code>(классом структуры) или \n"
"<code class=\"western\">built-in-class</code>(встроенным классом). "
"Ограничения:\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1140
msgid ""
"<p>|<code class=\"western\">built-in-class</code>| May not use\n"
"<code class=\"western\">make-instance</code>, may not use <code class="
"\"western\">slot-value</code>,\n"
"may not use <code class=\"western\">defclass</code> to modify, may not\n"
"create subclasses.| |<code class=\"western\">structure-class</code>|\n"
"May not use <code class=\"western\">make-instance</code>, might work\n"
"with <code class=\"western\">slot-value</code>\n"
"(implementation-dependent). Use <code class=\"western\">defstruct</code>\n"
"to subclass application structure types. Consequences of modifying an\n"
"existing <code class=\"western\">structure-class</code> are undefined:\n"
"full recompilation may be necessary.| |<code class=\"western\">standard-"
"class</code>|None\n"
"of these restrictions.|</p>"
msgstr ""
"<p>|<code class=\"western\">built-in-class</code>| Не может использовать \n"
"<code class=\"western\">make-instance</code>, не может использовать \n"
"<code class=\"western\">slot-value</code>, не может использовать <code class="
"\"western\">defclass</code> для модификации, не может создавать подклассы. \n"
"|<code class=\"western\">structure-class</code>(структурный класс) | Может "
"не использовать \n"
"<code class=\"western\">make-instance</code>, может работать с \n"
"<code class=\"western\">slot-value</code> (зависит от реализации). \n"
"Используйте <code class=\"western\">defstruct</code> для создания "
"подклассов \n"
"структрных типов приложения. Последствия изменения существующего \n"
"<code class=\"western\">structure-class</code> структурного класса \n"
"не определены: может потребоваться полная перекомпиляция. \n"
"| <code class=\"western\">standard-class</code>(стандартный класс) | Ни одно "
"из этих ограничений. \n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1143
msgid "<h2 class=\"western\"><a name=\"introspection\"></a>Introspection</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"introspection\"></"
"a>Самоанализ(Introspection)</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1145
msgid "<p>we already saw some introspection functions.</p>"
msgstr "<p>мы уже видели некоторые функции самоанализа</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1151
msgid ""
"<p>Your best option is to discover the <a href=\"https://github.com/"
"pcostanza/closer-mop\">closer-mop</a>\n"
"libray and to keep the <a href=\"https://clos-mop.hexstreamsoft.com/\">CLOS\n"
"&amp; MOP specifications</a> at hand.</p>"
msgstr ""
"<p>Лучший вариант - открыть для себя библиотеку \n"
"<a href=\"https://github.com/pcostanza/closer-mop\">closer-mop</a> и держать "
"под рукой \n"
"<a href=\"https://clos-mop.hexstreamsoft.com/\">CLOS &amp; MOP "
"specifications</a>\n"
"(спецификации CLOS & MOP).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1155
msgid "<p>More functions:</p>"
msgstr "<p>Дополнительные функции: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1195
msgid ""
"<pre class=\"western\"><code class=\"western\">closer-mop:class-default-"
"initargs</code>\n"
"<code class=\"western\">closer-mop:class-direct-default-initargs</code>\n"
"<code class=\"western\">closer-mop:class-direct-slots</code>\n"
"<code class=\"western\">closer-mop:class-direct-subclasses</code>\n"
"<code class=\"western\">closer-mop:class-direct-superclasses</code>\n"
"<code class=\"western\">closer-mop:class-precedence-list</code>\n"
"<code class=\"western\">closer-mop:class-slots</code>\n"
"<code class=\"western\">closer-mop:classp</code>\n"
"<code class=\"western\">closer-mop:extract-lambda-list</code>\n"
"<code class=\"western\">closer-mop:extract-specializer-names</code>\n"
"<code class=\"western\">closer-mop:generic-function-argument-precedence-"
"order</code>\n"
"<code class=\"western\">closer-mop:generic-function-declarations</code>\n"
"<code class=\"western\">closer-mop:generic-function-lambda-list</code>\n"
"<code class=\"western\">closer-mop:generic-function-method-class</code>\n"
"<code class=\"western\">closer-mop:generic-function-method-combination</"
"code>\n"
"<code class=\"western\">closer-mop:generic-function-methods</code>\n"
"<code class=\"western\">closer-mop:generic-function-name</code>\n"
"<code class=\"western\">closer-mop:method-combination</code>\n"
"<code class=\"western\">closer-mop:method-function</code>\n"
"<code class=\"western\">closer-mop:method-generic-function</code>\n"
"<code class=\"western\">closer-mop:method-lambda-list</code>\n"
"<code class=\"western\">closer-mop:method-specializers</code>\n"
"<code class=\"western\">closer-mop:slot-definition</code>\n"
"<code class=\"western\">closer-mop:slot-definition-allocation</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initargs</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initform</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initfunction</code>\n"
"<code class=\"western\">closer-mop:slot-definition-location</code>\n"
"<code class=\"western\">closer-mop:slot-definition-name</code>\n"
"<code class=\"western\">closer-mop:slot-definition-readers</code>\n"
"<code class=\"western\">closer-mop:slot-definition-type</code>\n"
"<code class=\"western\">closer-mop:slot-definition-writers</code>\n"
"<code class=\"western\">closer-mop:specializer-direct-generic-functions</"
"code>\n"
"<code class=\"western\">closer-mop:specializer-direct-methods</code>\n"
"<code class=\"western\">closer-mop:standard-accessor-method</code></pre><h2 "
"class=\"western\">\n"
"<a name=\"see-also\"></a>See also</h2>\n"
"<h3 class=\"western\"><a name=\"defclass-std-write-shorter-classes\"></"
"a>defclass/std:\n"
"write shorter classes</h3>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">closer-mop:class-default-"
"initargs</code>\n"
"<code class=\"western\">closer-mop:class-direct-default-initargs</code>\n"
"<code class=\"western\">closer-mop:class-direct-slots</code>\n"
"<code class=\"western\">closer-mop:class-direct-subclasses</code>\n"
"<code class=\"western\">closer-mop:class-direct-superclasses</code>\n"
"<code class=\"western\">closer-mop:class-precedence-list</code>\n"
"<code class=\"western\">closer-mop:class-slots</code>\n"
"<code class=\"western\">closer-mop:classp</code>\n"
"<code class=\"western\">closer-mop:extract-lambda-list</code>\n"
"<code class=\"western\">closer-mop:extract-specializer-names</code>\n"
"<code class=\"western\">closer-mop:generic-function-argument-precedence-"
"order</code>\n"
"<code class=\"western\">closer-mop:generic-function-declarations</code>\n"
"<code class=\"western\">closer-mop:generic-function-lambda-list</code>\n"
"<code class=\"western\">closer-mop:generic-function-method-class</code>\n"
"<code class=\"western\">closer-mop:generic-function-method-combination</"
"code>\n"
"<code class=\"western\">closer-mop:generic-function-methods</code>\n"
"<code class=\"western\">closer-mop:generic-function-name</code>\n"
"<code class=\"western\">closer-mop:method-combination</code>\n"
"<code class=\"western\">closer-mop:method-function</code>\n"
"<code class=\"western\">closer-mop:method-generic-function</code>\n"
"<code class=\"western\">closer-mop:method-lambda-list</code>\n"
"<code class=\"western\">closer-mop:method-specializers</code>\n"
"<code class=\"western\">closer-mop:slot-definition</code>\n"
"<code class=\"western\">closer-mop:slot-definition-allocation</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initargs</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initform</code>\n"
"<code class=\"western\">closer-mop:slot-definition-initfunction</code>\n"
"<code class=\"western\">closer-mop:slot-definition-location</code>\n"
"<code class=\"western\">closer-mop:slot-definition-name</code>\n"
"<code class=\"western\">closer-mop:slot-definition-readers</code>\n"
"<code class=\"western\">closer-mop:slot-definition-type</code>\n"
"<code class=\"western\">closer-mop:slot-definition-writers</code>\n"
"<code class=\"western\">closer-mop:specializer-direct-generic-functions</"
"code>\n"
"<code class=\"western\">closer-mop:specializer-direct-methods</code>\n"
"<code class=\"western\">closer-mop:standard-accessor-method</code></pre><h2 "
"class=\"western\">\n"
"<a name=\"see-also\"></a>See also</h2>\n"
"<h3 class=\"western\"><a name=\"defclass-std-write-shorter-classes\"></"
"a>defclass/std:\n"
"короткая запись классов</h3>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1199
msgid ""
"<p>The library <a href=\"https://github.com/EuAndreh/defclass-std\">defclass/"
"std</a>\n"
"provides a macro to write shorter <code class=\"western\">defclass</code>\n"
"forms.</p>"
msgstr ""
"<p>Библиотека <a href=\"https://github.com/EuAndreh/defclass-std\">defclass/"
"std</a> \n"
"предоставляет макрос для написания более коротких форм <code class=\"western"
"\">defclass</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1204
msgid ""
"<p>By default, it adds an accessor, an initarg and an initform to <code "
"class=\"western\">nil</code>\n"
"to your slots definition:</p>"
msgstr ""
"<p>По умолчанию она добавляет accessor(средство доступа), initarg и initform "
"в \n"
"<code class=\"western\">nil</code> к определению вашего слота:\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1208
msgid "<p>This:</p>"
msgstr "<p>Здесь:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1214
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass/std example ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot1 slot2 "
"slot3)))</code></pre>\n"
"<p>\n"
"expands to:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass/std example ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot1 slot2 "
"slot3)))</code></pre>\n"
"<p>\n"
"расширяется в:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1232
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass example ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot1</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor slot1</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :slot1</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot2</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:accessor slot2</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initarg :slot2</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initform nil)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot3</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:accessor slot3</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initarg :slot3</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initform "
"nil)))</code></pre>\n"
"<p>\n"
"It does much more and it is very flexible, however it is seldom used\n"
"by the Common Lisp community: use at your own risksÂ©.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defclass example ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((slot1</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor slot1</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :slot1</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initform nil)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot2</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:accessor slot2</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initarg :slot2</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initform nil)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(slot3</code>\n"
"<code class=\"western\">     </code><code class=\"western\">:accessor slot3</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initarg :slot3</"
"code>\n"
"<code class=\"western\">     </code><code class=\"western\">:initform "
"nil)))</code></pre>\n"
"<p>\n"
"Она делает гораздо больше и очень гибока, однако она редко используется \n"
"сообществом Common Lisp: используйте её на свой страх и риск ©.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1236
msgid ""
"<h1 class=\"western\"><a name=\"methods\"></a>Methods</h1>\n"
"<h2 class=\"western\"><a name=\"diving-in-1\"></a>Diving in</h2>"
msgstr ""
"<h1 class=\"western\"><a name=\"methods\"></a>Методы</h1>\n"
"<h2 class=\"western\"><a name=\"diving-in-1\"></a>Погружение в</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1239
msgid ""
"<p>Recalling our <code class=\"western\">person</code> and <code class="
"\"western\">child</code>\n"
"classes from the beginning:</p>"
msgstr ""
"<p>Вспомним наши классы <code class=\"western\">person</code> и\n"
"<code class=\"western\">child</code> с самого начала: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1246
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor "
"name)))</code>\n"
"<code class=\"western\">;; =&gt; #&lt;STANDARD-CLASS PERSON&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1250
msgid ""
"<code class=\"western\">(defclass child (person)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">())</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-CLASS CHILD&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1256
msgid ""
"<code class=\"western\">(setf p1 (make-instance 'person :name &quot;"
"me&quot;))</code>\n"
"<code class=\"western\">(setf c1 (make-instance 'child :name &quot;"
"Alice&quot;))</code></pre>\n"
"<p>\n"
"Below we create methods, we specialize them, we use method\n"
"combination (before, after, around), and qualifiers.</p>"
msgstr ""
"<code class=\"western\">(setf p1 (make-instance 'person :name &quot;"
"me&quot;))</code>\n"
"<code class=\"western\">(setf c1 (make-instance 'child :name &quot;"
"Alice&quot;))</code></pre>\n"
"<p>\n"
"Ниже мы создаем методы, специализируем их, используем комбинацию методов \n"
"(before, after, around) и квалификаторы. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1262
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet (obj)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;Are "
"you a person ? You are a ~a.~&amp;&quot; (type-of obj)))</code>\n"
"<code class=\"western\">;; style-warning: Implicitly creating new generic "
"function common-lisp-user::greet.</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET (t) {1008EE4603}&gt;</"
"code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1268
msgid ""
"<code class=\"western\">(greet :anything)</code>\n"
"<code class=\"western\">;; Are you a person ? You are a KEYWORD.</code>\n"
"<code class=\"western\">;; NIL</code>\n"
"<code class=\"western\">(greet p1)</code>\n"
"<code class=\"western\">;; Are you a person ? You are a PERSON.</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1273
msgid ""
"<code class=\"western\">(defgeneric greet (obj)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;say hello&quot;))</code>\n"
"<code class=\"western\">;; STYLE-WARNING: redefining COMMON-LISP-USER::GREET "
"in DEFGENERIC</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-GENERIC-FUNCTION GREET (2)&gt;</"
"code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1277
msgid ""
"<code class=\"western\">(defmethod greet ((obj person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"Hello ~a !~&amp;&quot; (name obj)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET (PERSON) {1007C26743}"
"&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1280
msgid ""
"<code class=\"western\">(greet p1) ;; =&gt; &quot;Hello me !&quot;</code>\n"
"<code class=\"western\">(greet c1) ;; =&gt; &quot;Hello Alice !&quot;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1284
msgid ""
"<code class=\"western\">(defmethod greet ((obj child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;ur "
"so cute~&amp;&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET (CHILD) {1008F3C1C3}"
"&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1287
msgid ""
"<code class=\"western\">(greet p1) ;; =&gt; &quot;Hello me !&quot;</code>\n"
"<code class=\"western\">(greet c1) ;; =&gt; &quot;ur so cute&quot;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1291
msgid ""
"<code class=\"western\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</"
"code>\n"
"<code class=\"western\">;;; Method combination: before, after, around.</"
"code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</code>"
msgstr ""
"<code class=\"western\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</"
"code>\n"
"<code class=\"western\">;;; Комбинация методов: before, after, around.</"
"code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</code>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1295
msgid ""
"<code class=\"western\">(defmethod greet :before ((obj person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;-- "
"before person~&amp;&quot;))</code>\n"
"<code class=\"western\">#&lt;STANDARD-METHOD GREET :BEFORE (PERSON) "
"{100C94A013}&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1299
msgid ""
"<code class=\"western\">(greet p1)</code>\n"
"<code class=\"western\">;; -- before person</code>\n"
"<code class=\"western\">;; Hello me</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1307
msgid ""
"<code class=\"western\">(defmethod greet :before ((obj child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;-- "
"before child~&amp;&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET :BEFORE (CHILD) "
"{100AD32A43}&gt;</code>\n"
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; -- before child</code>\n"
"<code class=\"western\">;; -- before person</code>\n"
"<code class=\"western\">;; ur so cute</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1315
msgid ""
"<code class=\"western\">(defmethod greet :after ((obj person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;-- "
"after person~&amp;&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET :AFTER (PERSON) "
"{100CA2E1A3}&gt;</code>\n"
"<code class=\"western\">(greet p1)</code>\n"
"<code class=\"western\">;; -- before person</code>\n"
"<code class=\"western\">;; Hello me</code>\n"
"<code class=\"western\">;; -- after person</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1325
msgid ""
"<code class=\"western\">(defmethod greet :after ((obj child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;-- "
"after child~&amp;&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET :AFTER (CHILD) "
"{10075B71F3}&gt;</code>\n"
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; -- before child</code>\n"
"<code class=\"western\">;; -- before person</code>\n"
"<code class=\"western\">;; ur so cute</code>\n"
"<code class=\"western\">;; -- after person</code>\n"
"<code class=\"western\">;; -- after child</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1330
msgid ""
"<code class=\"western\">(defmethod greet :around ((obj child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"Hello my dear~&amp;&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET :AROUND (CHILD) "
"{10076658E3}&gt;</code>\n"
"<code class=\"western\">(greet c1) ;; Hello my dear</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1333
msgid "<code class=\"western\">;; call-next-method</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1339
msgid ""
"<code class=\"western\">(defmethod greet :around ((obj child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"Hello my dear~&amp;&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(when (next-method-"
"p)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(call-next-"
"method)))</code>\n"
"<code class=\"western\">;; #&lt;standard-method greet :around (child) "
"{100AF76863}&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1347
msgid ""
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; Hello my dear</code>\n"
"<code class=\"western\">;; -- before child</code>\n"
"<code class=\"western\">;; -- before person</code>\n"
"<code class=\"western\">;; ur so cute</code>\n"
"<code class=\"western\">;; -- after person</code>\n"
"<code class=\"western\">;; -- after child</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1351
msgid ""
"<code class=\"western\">;;;;;;;;;;;;;;;;;</code>\n"
"<code class=\"western\">;; Adding in &amp;key</code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;;</code>"
msgstr ""
"<code class=\"western\">;;;;;;;;;;;;;;;;;</code>\n"
"<code class=\"western\">;; Добавление в &amp;key</code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;;</code>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1358
msgid ""
"<code class=\"western\">;; In order to add &quot;&amp;key&quot; to our "
"generic method, we need to remove its definition first.</code>\n"
"<code class=\"western\">(fmakunbound 'greet)  ;; with Slime: C-c C-u (slime-"
"undefine-function)</code>\n"
"<code class=\"western\">(defmethod greet ((obj person) &amp;key talkative)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"Hello ~a~&amp;&quot; (name obj))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(when talkative</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"blah&quot;)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1361
msgid ""
"<code class=\"western\">(defgeneric greet (obj &amp;key &amp;allow-other-"
"keys)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;say hi&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1364
msgid ""
"<code class=\"western\">(defmethod greet (obj &amp;key &amp;allow-other-"
"keys)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;Are "
"you a person ? You are a ~a.~&amp;&quot; (type-of obj)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1369
msgid ""
"<code class=\"western\">(defmethod greet ((obj person) &amp;key talkative "
"&amp;allow-other-keys)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"Hello ~a !~&amp;&quot; (name obj))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(when talkative</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"blah&quot;)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1372
msgid ""
"<code class=\"western\">(greet p1 :talkative t) ;; ok</code>\n"
"<code class=\"western\">(greet p1 :foo t) ;; still ok</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1375
msgid "<code class=\"western\">;;;;;;;;;;;;;;;;;;;;;;;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1384
msgid ""
"<code class=\"western\">(defgeneric greet (obj)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;say hello&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (obj)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"Are you a person ? You are a ~a~&amp;.&quot; (type-of obj)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method ((obj "
"person))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"Hello ~a !~&amp;&quot; (name obj)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method ((obj "
"child))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"ur so cute~&amp;&quot;)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1388
msgid ""
"<code class=\"western\">;;;;;;;;;;;;;;;;</code>\n"
"<code class=\"western\">;;; Specializers</code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;</code>"
msgstr ""
"<code class=\"western\">;;;;;;;;;;;;;;;;</code>\n"
"<code class=\"western\">;;; Специализация</code>\n"
"<code class=\"western\">;;;;;;;;;;;;;;;;</code>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1393
msgid ""
"<code class=\"western\">(defgeneric feed (obj meal-type)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (obj meal-"
"type)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(declare "
"(ignorable meal-type))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"eating~&amp;&quot;)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1397
msgid ""
"<code class=\"western\">(defmethod feed (obj (meal-type (eql :dessert)))</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(declare "
"(ignorable meal-type))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"mmh, dessert !~&amp;&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1400
msgid ""
"<code class=\"western\">(feed c1 :dessert)</code>\n"
"<code class=\"western\">;; mmh, dessert !</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1404
msgid ""
"<code class=\"western\">(defmethod feed ((obj child) (meal-type (eql :"
"soup)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(declare "
"(ignorable meal-type))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"bwark~&amp;&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1411
msgid ""
"<code class=\"western\">(feed p1 :soup)</code>\n"
"<code class=\"western\">;; eating</code>\n"
"<code class=\"western\">(feed c1 :soup)</code>\n"
"<code class=\"western\">;; bwark</code></pre><h2 class=\"western\">\n"
"<a name=\"generic-functions-defgeneric-defmethod\"></a>Generic\n"
"functions (defgeneric, defmethod)</h2>"
msgstr ""
"<code class=\"western\">(feed p1 :soup)</code>\n"
"<code class=\"western\">;; eating</code>\n"
"<code class=\"western\">(feed c1 :soup)</code>\n"
"<code class=\"western\">;; bwark</code></pre><h2 class=\"western\">\n"
"<a name=\"generic-functions-defgeneric-defmethod\"></a>Обобщенные функции "
"(defgeneric, defmethod)</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1416
msgid ""
"<p>A <code class=\"western\">generic function</code> is a lisp function\n"
"which is associated with a set of methods and dispatches them when\n"
"itâs invoked. All the methods with the same function name belong to\n"
"the same generic function.</p>"
msgstr ""
"<p><code class=\"western\">generic function</code>(Обобщенная функция) - \n"
"это функция lisp, которая связана с набором методов и "
"отправляет(dispatches/\n"
"на самом деле выбирает какой из них выполнить(один или несколько)) их при "
"вызове. \n"
"Все методы с одинаковым именем функции принадлежат одной и той же обобщенной "
"функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1423
msgid ""
"<p>The <code class=\"western\">defmethod</code> form is similar to a\n"
"<code class=\"western\">defun</code>. It associates a body of code with\n"
"a function name, but that body may only be executed if the types of\n"
"the arguments match the pattern declared by the lambda list.</p>"
msgstr ""
"<p>Форма <code class=\"western\">defmethod</code> похожа на \n"
"<code class=\"western\">defun</code>. Она связывает тело кода с именем "
"функции, \n"
"но это тело может быть выполнено только в том случае, если типы аргументов \n"
"соответствуют шаблону, объявленному лямбда-списком..</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1428
msgid ""
"<p>They can have optional, keyword and <code class=\"western\">&amp;rest</"
"code>\n"
"arguments.</p>"
msgstr ""
"<p>У них могут быть необязательные аргументы, ключевые слова и аргументы \n"
"<code class=\"western\">&amp;rest</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1435
msgid ""
"<p>The <code class=\"western\">defgeneric</code> form defines the\n"
"generic function. If we write a <code class=\"western\">defmethod</code>\n"
"without a corresponding <code class=\"western\">defgeneric</code>, a\n"
"generic function is automatically created (see examples).</p>"
msgstr ""
"<p>Форма <code class=\"western\">defgeneric</code> определяет обобщенную "
"функцию. \n"
"Если мы напишем <code class=\"western\">defmethod</code> без "
"соответствующей \n"
"<code class=\"western\">defgeneric</code>, автоматически будет создана "
"обобщенная \n"
"функция (см. Примеры).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1440
msgid ""
"<p>It is generally a good idea to write the <code class=\"western"
"\">defgeneric</code>s.\n"
"We can add a default implementation and even some documentation.</p>"
msgstr ""
"<p>Обычно рекомендуется писать <code class=\"western\">defgeneric</code>. \n"
"Мы можем добавить реализацию по умолчанию и даже некоторую документацию. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1449
msgid ""
"<pre class=\"western\"><code class=\"western\">(defgeneric greet (obj)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;says hi&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (obj)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"Hi&quot;)))</code></pre>\n"
"<p>\n"
"The required parameters in the methodâs lambda list may take one of\n"
"the following three forms:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defgeneric greet (obj)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;says hi&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (obj)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"Hi&quot;)))</code></pre>\n"
"<p>\n"
"Обязательные параметры в лямбда-списке метода могут принимать одну из "
"следующих трех форм:\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1453
msgid "<p>1- a simple variable:</p>"
msgstr "<p>1- простая переменная: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1459
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet (foo)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">...)</code></pre>\n"
"<p>\n"
"This method can take any argument, it is always applicable.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet (foo)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">...)</code></pre>\n"
"<p>\n"
"Этот метод может принимать любые аргументы, он всегда применим.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1464
msgid ""
"<p>The variable <code class=\"western\">foo</code> is bound to the\n"
"corresponding argument value, as usual.</p>"
msgstr ""
"<p>TПеременная <code class=\"western\">foo</code>, как обычно, привязана к \n"
"соответствующему значению аргумента.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1468
msgid "<p>2- a variable and a <strong>specializer</strong>, as in:</p>"
msgstr ""
"<p>2- переменная и <strong>specializer</strong>(специализатор), как в: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1478
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet ((foo "
"person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">...)</code></pre>\n"
"<p>\n"
"In this case, the variable <code class=\"western\">foo</code> is bound\n"
"to the corresponding argument only if that argument is of specializer\n"
"class <code class=\"western\">person</code> <em>or a subclass</em>,\n"
"like <code class=\"western\">child</code> (indeed, a âchildâ is\n"
"also a âpersonâ).</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet ((foo "
"person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">...)</code></pre>\n"
"<p>\n"
"В этом случае переменная <code class=\"western\">foo</code> привязывается "
"к \n"
"соответствующему аргументу только в том случае, если этот аргумент "
"относится \n"
"к специализирующему-классу <code class=\"western\">person</code> или "
"подклассу, \n"
"например <code class=\"western\">child</code> (действительно, \n"
"<code class=\"western\">child</code> также является <code class=\"western"
"\">person</code>).\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1485
msgid ""
"<p>If any argument fails to match its specializer then the method is\n"
"not <em>applicable</em> and it cannot be executed with those\n"
"arguments.Weâll get an error message like âthere is no applicable\n"
"method for the generic function xxx when called with arguments yyyâ.</p>"
msgstr ""
"<p>Если какой-либо аргумент не соответствует своему специализатору, тогда \n"
"метод неприменим и не может быть выполнен с этими аргументами. Мы получим \n"
"сообщение об ошибке типа «не существует применимого метода для обобщенной \n"
"функции xxx при вызове с аргументами yyy».\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1491
msgid ""
"<p><strong>Only required parameters can be specialized</strong>. We\n"
"canât specialize on optional <code class=\"western\">&amp;key</code>\n"
"arguments.</p>"
msgstr ""
"<p><strong>Только необходимые параметры могут быть специализированы</"
"strong>. \n"
"Мы не можем специализироваться на необязательных <code class=\"western"
"\">&amp;key</code> \n"
"(ключевых) аргументах.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1495
msgid "<p>3- a variable and an <strong>eql specializer</strong></p>"
msgstr "<p>3- переменная и <strong>специализатор eql</strong></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1500
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod feed ((obj child) "
"(meal-type (eql :soup)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(declare "
"(ignorable meal-type))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"bwark~&amp;&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1507
msgid ""
"<code class=\"western\">(feed c1 :soup)</code>\n"
"<code class=\"western\">;; &quot;bwark&quot;</code></pre>\n"
"<p>\n"
"In place of a simple symbol (<code class=\"western\">:soup</code>), the\n"
"eql specializer can be any lisp form. It is evaluated at the same\n"
"time of the defmethod.</p>"
msgstr ""
"<code class=\"western\">(feed c1 :soup)</code>\n"
"<code class=\"western\">;; &quot;bwark&quot;</code></pre>\n"
"<p>\n"
"Вместо простого символа (<code class=\"western\">:soup</code>) "
"специализатором eql \n"
"может быть любая форма lisp. Она вычисляется в то же время, что и \n"
"defmethod.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1519
msgid ""
"<p>You can define any number of methods with the same function name\n"
"but with different specializers, as long as the form of the lambda\n"
"list is <em>congruent</em> with the shape of the generic function.\n"
"The system chooses the most <em>specific</em> applicable method and\n"
"executes its body. The most specific method is the one whose\n"
"specializers are nearest to the head of the <code class=\"western\">class-"
"precedence-list</code>\n"
"of the argument (classes on the left of the lambda list are more\n"
"specific). A method with specializers is more specific to one without\n"
"any.</p>"
msgstr ""
"<p>Вы можете определить любое количество методов с одним и тем же именем "
"функции, \n"
"но с разными специализаторами, при условии, что форма лямбда-списка \n"
"<em>congruent</em>(соответствует) форме обобщенной функции. \n"
"Система выбирает наиболее <em>специфичный(конкретный)</em> применимый метод "
"и \n"
"выполняет его тело. Наиболее конкретный метод - это тот, специализаторы \n"
"которого находятся ближе всего к заголовку списка предшествования класса -\n"
"<code class=\"western\">class-precedence-list</code>  аргумента \n"
"(классы слева от лямбда-списка более конкретны). Метод со специализаторами "
"более \n"
"специфичен(конкретен), чем метода без них. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1523
msgid "<p><strong>Notes:</strong></p>"
msgstr "<p><strong>Замечания:</strong></p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1527
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1527"
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1531
msgid ""
"<p>It is an error to define a method with the same function\n"
"\tname as an ordinary function. If you really want to do that, use the\n"
"\tshadowing mechanism.</p>"
msgstr ""
"<p>Ошибочно определять метод с тем же именем функции, что и у обычной "
"функции. \n"
"\tЕсли вы действительно хотите это сделать, используйте механизм затенения.</"
"p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1534
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1534"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1541
msgid ""
"<p>To add or remove <code class=\"western\">keys</code> or <code class="
"\"western\">rest</code>\n"
"\targuments to an existing generic methodâs lambda list, you will\n"
"\tneed to delete its declaration with <code class=\"western\">fmakunbound</"
"code>\n"
"\t(or <code class=\"western\">C-c C-u</code> (slime-undefine-function)\n"
"\twith the cursor on the function in Slime) and start again.\n"
"\tOtherwise, youâll see:</p>"
msgstr ""
"<p> Чтобы добавить или удалить ключи/<code class=\"western\">keys</code> "
"или\n"
"\t <code class=\"western\">rest</code> аргументы в лямбда-списке \n"
"\tсуществующего обобщенного метода, вам нужно будет удалить его \n"
"\tобъявление с помощью <code class=\"western\">fmakunbound</code> \n"
"\t(или <code class=\"western\">C-c C-u</code> (slime-undefine-function) \n"
"\tс установкой курсора на функцию в Slime) и начать заново. \n"
"\tВ противном случае вы увидите: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1552
msgid ""
"</ul>\n"
"<pre class=\"western\"><code class=\"western\">attempt to add the method</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">#&lt;STANDARD-"
"METHOD NIL (#&lt;STANDARD-CLASS CHILD&gt;) {1009504233}&gt;</code>\n"
"<code class=\"western\">to the generic function</code>\n"
"<code class=\"western\">  </code><code class=\"western\">#&lt;STANDARD-"
"GENERIC-FUNCTION GREET (2)&gt;;</code>\n"
"<code class=\"western\">but the method and generic function differ in "
"whether they accept</code>\n"
"<code class=\"western\">&amp;REST or &amp;KEY arguments.</code></pre>\n"
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1555
msgid ""
"<p>Methods can be redefined (exactly as for ordinary\n"
"\tfunctions).</p>"
msgstr ""
"<p>Методы можно переопределить (точно так же, как для обычных функций)..</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1558
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1558"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1561
msgid ""
"<p>The order in which methods are defined is irrelevant,\n"
"\talthough any classes on which they specialize must already exist.</p>"
msgstr ""
"<p>Порядок, в котором определены методы, не имеет значения, хотя любые "
"классы, \n"
"\tна которых они специализируются, уже должны существовать.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1564
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1564"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1570
msgid ""
"<p>An unspecialized argument is more or less equivalent to\n"
"\tbeing specialized on the class <code class=\"western\">t</code>. The\n"
"\tonly difference is that all specialized arguments are implicitly\n"
"\ttaken to be âreferred toâ (in the sense of <code class=\"western"
"\">declare\n"
"\tignore</code>.)</p>"
msgstr ""
"<p>Неспециализированный аргумент более или менее эквивалентен "
"специализации \n"
"\tна классе <code class=\"western\">t</code>. Единственное отличие состоит в "
"том, \n"
"\tчто все специализированные аргументы неявно считаются  “referred "
"to”(упомянутыми)\n"
"\t(в смысле <code class=\"western\">declare ignore</code>(объявления "
"игнорирования)). </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1573
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1573"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1576
msgid ""
"<p>Each <code class=\"western\">defmethod</code> form generates\n"
"\t(and returns) a CLOS instance, of class <code class=\"western\">standard-"
"method</code>.</p>"
msgstr ""
"<p>Каждая форма <code class=\"western\">defmethod</code> генерирует (и "
"возвращает) \n"
"\tэкземпляр CLOS класса <code class=\"western\">standard-method</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1579
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1579"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1585
msgid ""
"<p>An <code class=\"western\">eql</code> specializer wonât\n"
"\twork as is with strings. Indeed, strings need <code class=\"western"
"\">equal</code>\n"
"\tor <code class=\"western\">equalp</code> to be compared. But, we can\n"
"\tassign our string to a variable and use the variable both in the <code "
"class=\"western\">eql</code>\n"
"\tspecializer and for the function call.</p>"
msgstr ""
"<p>Специализатор <code class=\"western\">eql</code> не будет работать со "
"строками \n"
"\tкак есть. В самом деле, для сравнения строк нужно их сравнивать с помощью\n"
"\t <code class=\"western\">equal</code> или <code class=\"western\">equalp</"
"code>. \n"
"\tНо мы можем присвоить нашу строку переменной и использовать ее как в "
"специализаторе\n"
"\t<code class=\"western\">eql</code>, так и для вызова функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1588
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1588"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1591
msgid ""
"<p>All the methods with the same function name belong to the\n"
"\tsame generic function.</p>"
msgstr ""
"<p>Все методы с одинаковым именем функции принадлежат одной и той же \n"
"\tобобщенной функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1594
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1594"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1598
msgid ""
"<p>All slot accessors and readers defined by <code class=\"western"
"\">defclass</code>\n"
"\tare methods. They can override or be overridden by other methods on\n"
"\tthe same generic function.</p>"
msgstr ""
"<p>Все средства доступа(accessors) и читатели(readers) слотов, "
"определенные \n"
"\t<code class=\"western\">defclass</code>, являются методами. Их можно \n"
"\tпереопределить или переопределить другими методами той же обобщенной "
"функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1601
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1601"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1604
msgid ""
"<p>See more about <a href=\"http://www.lispworks.com/documentation/lw70/CLHS/"
"Body/m_defmet.htm\">defmethod\n"
"on the CLHS</a>.</p>"
msgstr ""
"<p>См. Больше о методе <a href=\"http://www.lispworks.com/documentation/lw70/"
"CLHS/Body/m_defmet.htm\">defmethod на CLHS</a> </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1607
msgid "<h2 class=\"western\"><a name=\"multimethods\"></a>Multimethods</h2>"
msgstr "<h2 class=\"western\"><a name=\"multimethods\"></a>Мультиметоды</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1610
msgid ""
"<p>Multimethods explicitly specialize more than one of the generic\n"
"functionâs required parameters.</p>"
msgstr ""
"<p>Мультиметоды явно специализируются на нескольких обязательных "
"параметрах \n"
"обобщенной функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1616
msgid ""
"<p>They donât belong to a particular class. Meaning, we donât\n"
"have to decide on the class that would be best to host this method,\n"
"as we might have to in other languages.</p>"
msgstr ""
"<p>Они не принадлежат к определенному классу. Это означает, что нам не "
"нужно\n"
"выбирать класс, в котором лучше всего разместить этот метод, как это могло \n"
"бы потребоваться в других языках. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1621
msgid ""
"<pre class=\"western\"><code class=\"western\">(defgeneric hug (a b)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(:documentation "
"&quot;Hug between two persons.&quot;))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-GENERIC-FUNCTION HUG (0)&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1624
msgid ""
"<code class=\"western\">(defmethod hug ((a person) (b person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">:person-person-"
"hug)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1630
msgid ""
"<code class=\"western\">(defmethod hug ((a person) (b child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">:person-child-hug)</"
"code></pre>\n"
"<p>\n"
"Read more on <a href=\"http://www.gigamonkeys.com/book/object-reorientation-"
"generic-functions.html#multimethods\">Practical\n"
"Common Lisp</a>.</p>"
msgstr ""
"<code class=\"western\">(defmethod hug ((a person) (b child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">:person-child-hug)</"
"code></pre>\n"
"<p>\n"
"Подробнее в  <a href=\"http://www.gigamonkeys.com/book/object-reorientation-"
"generic-functions.html#multimethods\">Practical\n"
"Common Lisp</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1634
msgid ""
"<h2 class=\"western\"><a name=\"controlling-setters-setf-ing-methods\"></a>\n"
"Controlling setters (setf-ing methods)</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"controlling-setters-setf-ing-methods\"></a>\n"
"Управление сеттерами(установщиками/setters) (методами работающими с setf)</"
"h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1638
msgid ""
"<p>In Lisp, we can define <code class=\"western\">setf</code>\n"
"counterparts of functions or methods. We might want this to have more\n"
"control on how to update an object.</p>"
msgstr ""
"<p>В Лиспе мы можем определять  <code class=\"western\">setf</code>-"
"аналоги \n"
"функций или методов. Мы могли бы захотеть, чтобы это было больше контроля \n"
"над обновлением объекта. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1644
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod (setf name) (new-"
"val (obj person))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(if (equalp new-val "
"&quot;james bond&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(format t &quot;"
"Dude that's not possible.~&amp;&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(setf (slot-value "
"obj 'name) new-val)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1649
msgid ""
"<code class=\"western\">(setf (name p1) &quot;james bond&quot;) ;; -&gt; no "
"rename</code></pre>\n"
"<p>\n"
"If you know Python, this behaviour is provided by the <code class=\"western"
"\">@property</code>\n"
"decorator.</p>"
msgstr ""
"<code class=\"western\">(setf (name p1) &quot;james bond&quot;) ;; -&gt; no "
"rename</code></pre>\n"
"<p>\n"
"Если вы знаете Python, такое поведение обеспечивается декоратором  \n"
"<code class=\"western\">@property</code>. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1653
msgid ""
"<h2 class=\"western\"><a name=\"dispatch-mechanism-and-next-methods\"></a>\n"
"Dispatch mechanism and next methods</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"dispatch-mechanism-and-next-methods\"></a>\n"
"Механизм отправки и методы next(последующие)\n"
"</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1656
msgid ""
"<p>When a generic function is invoked, the application cannot\n"
"directly invoke a method. The dispatch mechanism proceeds as follows:</p>"
msgstr ""
"<p>Когда вызывается обобщенная функция, приложение не может напрямую "
"вызывать метод. \n"
"Механизм отправки(dispatch-выбора конкретного метода) работает следующим "
"образом: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1663
msgid ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">compute the list of applicable\n"
"\tmethods \n"
"\t</p>"
msgstr ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">вычислить список применимых методов\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1669
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">if no method is applicable then\n"
"\tsignal an error \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">если нет применимых методов, то "
"сигнализирует об ошибке\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1675
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">sort the applicable methods in\n"
"\torder of specificity \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">отсортировать применимые методы в порядке их "
"специфичности\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1678
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1678"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1681
msgid ""
"<p>invoke the most specific method. \n"
"\t</p>"
msgstr ""
"<p>вызвать наиболее конкретный(специфичный) метод. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1684
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1684"
msgid "</ol>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1687
msgid ""
"<p>Our <code class=\"western\">greet</code> generic function has three\n"
"applicable methods:</p>"
msgstr ""
"<p>Наша обобщенная функция <code class=\"western\">greet</code> имеет три "
"применимых метода: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1700
msgid ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:generic-function-"
"methods #'greet)</code>\n"
"<code class=\"western\">(#&lt;STANDARD-METHOD GREET (CHILD) {10098406A3}&gt;"
"</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;STANDARD-METHOD "
"GREET (PERSON) {1009008EC3}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;STANDARD-METHOD "
"GREET (T) {1008E6EBB3}&gt;)</code></pre>\n"
"<p>\n"
"During the execution of a method, the remaining applicable methods\n"
"are still accessible, via the <em>local function</em>\n"
"<code class=\"western\">call-next-method</code>. This function has\n"
"lexical scope within the body of a method but indefinite extent. It\n"
"invokes the next most specific method, and returns whatever value\n"
"that method returned. It can be called with either:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(closer-mop:generic-function-"
"methods #'greet)</code>\n"
"<code class=\"western\">(#&lt;STANDARD-METHOD GREET (CHILD) {10098406A3}&gt;"
"</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;STANDARD-METHOD "
"GREET (PERSON) {1009008EC3}&gt;</code>\n"
"<code class=\"western\"> </code><code class=\"western\">#&lt;STANDARD-METHOD "
"GREET (T) {1008E6EBB3}&gt;)</code></pre>\n"
"<p>\n"
"Во время выполнения метода остальные применимые методы все еще доступны \n"
"через локальную функцию <em>call-next-method</em>. Эта функция имеет \n"
"лексическую область видимости в теле метода, но неопределенный экстент\n"
"(время существования). Она вызывает следующий наиболее конкретный метод \n"
"и возвращает любое значение, возвращенное этим методом. Её можно вызвать \n"
"одним из следующих способов:\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1704
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1704"
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1707
msgid ""
"<p>no arguments, in which case the <em>next method</em> will\n"
"\treceive exactly the same arguments as this method did, or</p>"
msgstr ""
"<p> без аргументов, и в этом случае <em>следующий метод</em> \n"
"\tполучит точно те же аргументы, что и этот метод, или</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1710
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1710"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1714
msgid ""
"<p>explicit arguments, in which case it is required that the\n"
"\tsorted set of methods applicable to the new arguments must be the\n"
"\tsame as that computed when the generic function was first called.</p>"
msgstr ""
"<p> явные аргументы, и в этом случае требуется, чтобы отсортированный набор "
"методов, \n"
"\tприменимых к новым аргументам, был таким же, как тот, который был "
"вычислен \n"
"\tпри первом вызове обобщенной функции.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1717
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1717"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1719
msgid "<p>For example:</p>"
msgstr "<p>Например:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1727
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod greet ((obj "
"child))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;ur "
"so cute~&amp;&quot;)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(when (next-method-"
"p)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(call-next-"
"method)))</code>\n"
"<code class=\"western\">;; STYLE-WARNING: REDEFINING GREET (#&lt;STANDARD-"
"CLASS CHILD&gt;) in DEFMETHOD</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD GREET (child) {1003D3DB43}"
"&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1736
msgid ""
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; ur so cute</code>\n"
"<code class=\"western\">;; Hello Alice !</code></pre>\n"
"<p>\n"
"Calling <code class=\"western\">call-next-method</code> when there is\n"
"no next method signals an error. You can find out whether a next\n"
"method exists by calling the local function <code class=\"western\">next-"
"method-p</code>\n"
"(which also has has lexical scope and indefinite extent).</p>"
msgstr ""
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; ur so cute</code>\n"
"<code class=\"western\">;; Hello Alice !</code></pre>\n"
"<p>\n"
"Вызов <code class=\"western\">call-next-method</code> при отсутствии \n"
"следующего метода сигнализирует об ошибке. Вы можете узнать, существует ли \n"
"следующий метод, вызвав локальную функцию <code class=\"western\">next-"
"method-p</code> \n"
"(которая также имеет лексическую область видимости и неопределенный экстент)."
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1743
msgid ""
"<p>Note finally that the body of every method establishes a block\n"
"with the same name as the methodâs generic function. If you\n"
"<code class=\"western\">return-from</code> that name you are exiting\n"
"the current method, not the call to the enclosing generic function.</p>"
msgstr ""
"<p>Наконец, обратите внимание, что тело каждого метода устанавливает \n"
"блок с тем же именем, что и обобщенная функция метода. Если вы \n"
"выполните <code class=\"western\">return-from</code> с этим именем, \n"
"вы выходите из текущего метода, а не из вызова включающей \n"
"обобщенной функции. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1747
msgid ""
"<h2 class=\"western\"><a name=\"method-qualifiers-before-after-around\"></"
"a>\n"
"Method qualifiers (before, after, around)</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"method-qualifiers-before-after-around\"></"
"a>\n"
"Квалификаторы метода (до(before), после(after), вокруг(around))</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1751
msgid ""
"<p>In our âDiving inâ examples, we saw some use of the <code class=\"western"
"\">:before</code>,\n"
"<code class=\"western\">:after</code> and <code class=\"western\">:around</"
"code>\n"
"<em>qualifiers</em>:</p>"
msgstr ""
"<p>В наших примерах \"Погружение в\", мы видели использование "
"<em>квалификаторов</em>\n"
"<code class=\"western\">:before</code>, <code class=\"western\">:after</"
"code> и \n"
"<code class=\"western\">:around</code> :</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1758
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">(defmethod\n"
"\tfoo :before (obj) (...))</code> \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1764
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">(defmethod\n"
"\tfoo :after (obj) (...))</code> \n"
"\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1767
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1767"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1770
msgid ""
"<p><code class=\"western\">(defmethod foo :around (obj) (...))</code>\n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1773
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1773"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1777
msgid ""
"<p>By default, in the <em>standard method combination</em> framework\n"
"provided by CLOS, we can only use one of those three qualifiers, and\n"
"the flow of control is as follows:</p>"
msgstr ""
"<p>По умолчанию в  фреймворке <em>стандартная  комбинация методов</em>,\n"
"предоставляемом CLOS, мы можем использовать только один из трех "
"квалификаторов,\n"
"а поток управления выглядит следующим образом:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1786
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">a <strong>before-method</strong>\n"
"\tis called, well, before the applicable primary method. If they are\n"
"\tmany before-methods, <strong>all</strong> are called. The most\n"
"\tspecific before-method is called first (child before person). \n"
"\t</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> метод-до(<strong>before-method</strong>)\n"
"\tвызывается перед применимым методом. Если их много, вызываются все\n"
"\tметоды-до. Наиболее специфичный(конкретный) метод-до вызывается первым\n"
"\t(child перед person). \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1793
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">the most specific applicable\n"
"\t<strong>primary method</strong> (a method without qualifiers) is\n"
"\tcalled (only one). \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">вызывается наиболее конкретный применимый\n"
"\tпервичный метод(<strong>primary method</strong>) (метод без "
"квалификаторов)\n"
"\t(только один). \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1796
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1796"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1801
msgid ""
"<p>all applicable <strong>after-methods</strong> are called.\n"
"\tThe most specific one is called <em>last</em> (after-method of\n"
"\tperson, then after-method of child). \n"
"\t</p>"
msgstr ""
"<p>вызываются все применимые методы-после(<strong>after-methods</strong>).\n"
"\tСамый конкретный вызывается <em>последним</em> (метод-после(after-method)\n"
"\tдля person, затем метод-после(after-method) для child). \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1804
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1804"
msgid "</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1808
msgid ""
"<p><strong>The generic function returns the value of the primary\n"
"method</strong>. Any values of the before or after methods are\n"
"ignored. They are used for their side effects.</p>"
msgstr ""
"<p><strong>Обобщенная функция возвращает значение основного метода</"
"strong>. \n"
"Любые значения методов before или after игнорируются. Их используют\n"
"из-за их побочных эффектов.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1815
msgid ""
"<p>And then we have <strong>around-methods</strong>. They are\n"
"wrappers around the core mechanism we just described. They can be\n"
"useful to catch return values or to set up an environment around the\n"
"primary method (set up a catch, a lock, timing an execution,â¦).</p>"
msgstr ""
"<p>А еще у нас есть методы-окружающие(<strong>around-methods</strong>/метод-"
"вокруг). \n"
"Они являются оболочкой только что описанного основного механизма. Они могут "
"быть\n"
"полезны для перехвата возвращаемых значений или для настройки среды вокруг "
"основного\n"
"метода (установки перехвата/ловушек(catch), блокировки, времени "
"выполнения, ...).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1823
msgid ""
"<p>If the dispatch mechanism finds an around-method, it calls it and\n"
"returns its result. If the around-method has a <code class=\"western\">call-"
"next-method</code>,\n"
"it calls the next most applicable around-method. It is only when we\n"
"reach the primary method that we start calling the before and\n"
"after-methods.</p>"
msgstr ""
"<p>Если механизм диспетчеризации находит  метод-вокруг(around-method), \n"
"он вызывает его и возвращает результат. Если у метода-вокруг есть \n"
"<code class=\"western\">call-next-method</code>, он вызывает следующий \n"
"наиболее подходящий метод-вокруг. Только когда мы достигаем основного "
"метода, \n"
"мы начинаем вызывать методы до и после.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1828
msgid ""
"<p>Thus, the full dispatch mechanism for generic functions is as\n"
"follows:</p>"
msgstr ""
"<p>Таким образом, полный механизм диспетчеризации обобщенных функций \n"
"выглядит следующим образом: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1835
msgid ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">compute the applicable methods,\n"
"\tand partition them into separate lists according to their qualifier;\n"
"\t\t</p>"
msgstr ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">вычислить применимые методы и разбить их "
"на \n"
"\tотдельные списки в соответствии с их квалификатором;\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1841
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">if there is no applicable\n"
"\tprimary method then signal an error; \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">если нет применимого основного метода, \n"
"\tто сигнализировать об ошибке;\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1847
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">sort each of the lists into\n"
"\torder of specificity; \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">отсортировать каждый из списков в порядке "
"специфичности;\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1854
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">execute the most specific\n"
"\t<code class=\"western\">:around</code> method and return whatever that\n"
"\treturns; \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">выполнить наиболее конкретный/специфичный "
"метод\n"
"\t<code class=\"western\">:around</code> и вернуть все, что он возвращает;\n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1862
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">if an <code class=\"western\">:around</"
"code>\n"
"\tmethod invokes <code class=\"western\">call-next-method</code>,\n"
"\texecute the next most specific <code class=\"western\">:around</code>\n"
"\tmethod; \n"
"\t</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">если метод <code class=\"western\">:around</"
"code> \n"
"\tвызывает метод <code class=\"western\">call-next-method</code>, "
"выполнить \n"
"\tследующий наиболее конкретный метод <code class=\"western\">:around</"
"code>; \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1865
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1865"
msgid "\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1871
msgid ""
"<p>if there were no <code class=\"western\">:around</code>\n"
"\tmethods in the first place, or if an <code class=\"western\">:around</"
"code>\n"
"\tmethod invokes <code class=\"western\">call-next-method</code> but\n"
"\tthere are no further <code class=\"western\">:around</code> methods to\n"
"\tcall, then proceed as follows:</p>"
msgstr ""
"<p>если в первую очередь не было методов <code class=\"western\">:around</"
"code> \n"
"\tили если метод <code class=\"western\">:around</code> вызывает \n"
"\t<code class=\"western\">call-next-method</code>, но больше нет методов\n"
"\t<code class=\"western\">:around</code> для вызова, то действуйте следующим "
"образом:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1877
msgid ""
"<p>a. run all the <code class=\"western\">:before</code> methods, in\n"
"\torder, ignoring any return values and not permitting calls to\n"
"\t<code class=\"western\">call-next-method</code> or <code class=\"western"
"\">next-method-p</code>;</p>"
msgstr ""
"<p>a. запустить все методы <code class=\"western\">:before</code> по "
"порядку, \n"
"\tигнорируя любые возвращаемые значения и не разрешая вызовы \n"
"\t<code class=\"western\">call-next-method</code> или <code class=\"western"
"\">next-method-p</code>;</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1882
msgid ""
"<p>b. execute the most specific primary method and return whatever\n"
"\tthat returns;</p>"
msgstr ""
"<p>b. выполнить наиболее конкретный первичный метод и вернуть все, \n"
"\tчто он вернет;</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1887
msgid ""
"<p>c. if a primary method invokes <code class=\"western\">call-next-method</"
"code>,\n"
"\texecute the next most specific primary method;</p>"
msgstr ""
"<p>c. если основной/первичный метод вызывает \n"
"\t<code class=\"western\">call-next-method</code>, \n"
"\tвыполнить следующий наиболее конкретный основной метод; </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1893
msgid ""
"<p>d. if a primary method invokes <code class=\"western\">call-next-method</"
"code>\n"
"\tbut there are no further primary methods to call then signal an\n"
"\terror;</p>"
msgstr ""
"<p>d. если основной метод вызывает <code class=\"western\">call-next-method</"
"code>, \n"
"\tно нет других основных методов для вызова, то сигнализирует об ошибке;\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1900
msgid ""
"<p>e. after the primary method(s) have completed, run all the <code class="
"\"western\">:after</code>\n"
"\tmethods, in <strong><u>reverse</u></strong> order, ignoring any\n"
"\treturn values and not permitting calls to <code class=\"western\">call-"
"next-method</code>\n"
"\tor <code class=\"western\">next-method-p</code>.</p>"
msgstr ""
"<p>e. после завершения основного метода(ов) запустите все методы\n"
"\t<code class=\"western\">:after</code> в обратном порядке, \n"
"\tигнорируя любые возвращаемые значения и не разрешая вызовы \n"
"\t<code class=\"western\">call-next-method</code>\n"
"\tили <code class=\"western\">next-method-p</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1903
msgctxt "in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1903"
msgid "</ol>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1908
msgid ""
"<p>Think of it as an onion, with all the <code class=\"western\">:around</"
"code>\n"
"methods in the outermost layer, <code class=\"western\">:before</code>\n"
"and <code class=\"western\">:after</code> methods in the middle layer,\n"
"and primary methods on the inside.</p>"
msgstr ""
"<p>Думайте об этом как о луковице, со всеми методами  \n"
"\t<code class=\"western\">:around</code> во внешнем слое, \n"
"\tметодами <code class=\"western\">:before</code>\n"
"\tи <code class=\"western\">:after</code> в среднем слое и \n"
"\tосновными/первичными методами внутри. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1912
msgid ""
"<h2 class=\"western\"><a name=\"other-method-combinations\"></a>Other\n"
"method combinations</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"other-method-combinations\"></a>Другие "
"комбинации методов</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1916
msgid ""
"<p>The default method combination type we just saw is named <code class="
"\"western\">standard</code>,\n"
"but other method combination types are available, and no need to say\n"
"that you can define your own.</p>"
msgstr ""
"<p>Тип комбинации методов по умолчанию, который мы только что рассмотрели, \n"
"\tназывается стандартным(<code class=\"western\">standard</code>), \n"
"\tно доступны и другие типы комбинации методов, и нет необходимости "
"говорить, \n"
"\tчто вы можете определить свой собственный.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1920
msgid "<p>The built-in types are:</p>"
msgstr "<p>Встроенные типы:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1930
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">progn + list nconc and max or append min</code></pre>\n"
"<p>\n"
"You notice that these types are named after a lisp operator. Indeed,\n"
"what they do is they define a framework that combines the applicable\n"
"primary methods inside a call to the lisp operator of that name. For\n"
"example, using the <code class=\"western\">progn</code> combination\n"
"type is equivalent to calling <strong>all</strong> the primary\n"
"methods one after the other:</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">progn + list nconc and max or append min</code></pre>\n"
"<p>\n"
"Вы заметили, что эти типы названы в честь оператора lisp. На самом деле, \n"
"они определяют структуру, которая объединяет применимые первичные методы \n"
"внутри вызова оператора lisp с таким именем. Например, использование \n"
"комбинированного типа <code class=\"western\">progn</code> эквивалентно "
"вызову \n"
"<strong>всех</strong> основных методов один за другим: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1939
msgid ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-1 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-2 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-3 args))</"
"code></pre>\n"
"<p>\n"
"Here, unlike the standard mechanism, all the primary methods\n"
"applicable for a given object are called, the most specific first.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(progn</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-1 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-2 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-3 args))</"
"code></pre>\n"
"<p>\n"
"Здесь, в отличие от стандартного механизма, вызываются все основные методы,\n"
"применимые к данному объекту, причем в первую очередь наиболее конкретные.</"
"p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1945
msgid ""
"<p>To change the combination type, we set the <code class=\"western\">:"
"method-combination</code>\n"
"option of <code class=\"western\">defgeneric</code> and we use it as\n"
"the methodsâ qualifier:</p>"
msgstr ""
"<p>Чтобы изменить тип комбинации, мы устанавливаем опцию\n"
"<code class=\"western\">:method-combination</code> в \n"
"<code class=\"western\">defgeneric</code> и используем ее в качестве \n"
"квалификатора методов: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1949
msgid ""
"<pre class=\"western\"><code class=\"western\">(defgeneric foo (obj)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method-"
"combination progn))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1954
msgid ""
"<code class=\"western\">(defmethod foo progn ((obj obj))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(...))</code></"
"pre>\n"
"<p>\n"
"An example with <strong>progn</strong>:</p>"
msgstr ""
"<code class=\"western\">(defmethod foo progn ((obj obj))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(...))</code></"
"pre>\n"
"<p>\n"
"Пример с <strong>progn</strong>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1965
msgid ""
"<pre class=\"western\"><code class=\"western\">(defgeneric dishes (obj)</"
"code>\n"
"<code class=\"western\">   </code><code class=\"western\">(:method-"
"combination progn)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(:method progn "
"(obj)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(format t "
"&quot;- clean and dry.~&amp;&quot;))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(:method progn "
"((obj person))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(format t "
"&quot;- bring a person's dishes~&amp;&quot;))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(:method progn "
"((obj child))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(format t "
"&quot;- bring the baby dishes~&amp;&quot;)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-GENERIC-FUNCTION DISHES (3)&gt;</"
"code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1970
msgid ""
"<code class=\"western\">(dishes c1)</code>\n"
"<code class=\"western\">;; - bring the baby dishes</code>\n"
"<code class=\"western\">;; - bring a person's dishes</code>\n"
"<code class=\"western\">;; - clean and dry.</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1976
msgid ""
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; ur so cute  --&gt; only the most applicable "
"method was called.</code></pre>\n"
"<p>\n"
"Similarly, using the <code class=\"western\">list</code> type is\n"
"equivalent to returning the list of the values of the methods.</p>"
msgstr ""
"<code class=\"western\">(greet c1)</code>\n"
"<code class=\"western\">;; ur so cute  --&gt; only the most applicable "
"method was called.</code></pre>\n"
"<p>\n"
"Точно так же использование типа <code class=\"western\">list</code> "
"эквивалентно \n"
"возврату списка значений методов. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1991
msgid ""
"<pre class=\"western\"><code class=\"western\">(list</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-1 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-2 args)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(method-3 args))</"
"code>\n"
"<code class=\"western\">(defgeneric tidy (obj)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method-"
"combination list)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method list "
"(obj)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:foo)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method list ((obj "
"person))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:books)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method list ((obj "
"child))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:toys))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-GENERIC-FUNCTION TIDY (3)&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:1996
msgid ""
"<code class=\"western\">(tidy c1)</code>\n"
"<code class=\"western\">;; (:toys :books :foo)</code></pre>\n"
"<p>\n"
"<strong>Around methods</strong> are accepted:</p>"
msgstr ""
"<code class=\"western\">(tidy c1)</code>\n"
"<code class=\"western\">;; (:toys :books :foo)</code></pre>\n"
"<p>\n"
"принимаются методы-вокруг(<strong>Around methods</strong>):</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2004
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod tidy :around "
"(obj)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(let ((res (call-"
"next-method)))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(format t &quot;"
"I'm going to clean up ~a~&amp;&quot; res)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(when (&gt; "
"(length res)</code>\n"
"<code class=\"western\">              </code><code class=\"western\">1)</"
"code>\n"
"<code class=\"western\">       </code><code class=\"western\">(format t "
"&quot;that's too much !~&amp;&quot;))))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2016
msgid ""
"<code class=\"western\">(tidy c1)</code>\n"
"<code class=\"western\">;; I'm going to clean up (toys book foo)</code>\n"
"<code class=\"western\">;; that's too much !</code></pre>\n"
"<p>\n"
"Note that these operators donât support <code class=\"western\">before</"
"code>,\n"
"<code class=\"western\">after</code> and <code class=\"western\">around</"
"code>\n"
"methods (indeed, there is no room for them anymore). They do support\n"
"around methods, where <code class=\"western\">call-next-method</code>\n"
"is allowed, but they donât support calling <code class=\"western\">call-next-"
"method</code>\n"
"in the primary methods (it would indeed be redundant since all\n"
"primary methods are called, or clunky to <em>not</em> call one).</p>"
msgstr ""
"<code class=\"western\">(tidy c1)</code>\n"
"<code class=\"western\">;; I'm going to clean up (toys book foo)</code>\n"
"<code class=\"western\">;; that's too much !</code></pre>\n"
"<p>\n"
"Обратите внимание, что эти операторы не поддерживают методы \n"
"<code class=\"western\">before</code>, <code class=\"western\">after</code> "
"и\n"
" <code class=\"western\">around</code> (действительно, для них больше нет "
"места). \n"
"Они поддерживают методы around(вокруг), для которых разрешен \n"
"<code class=\"western\">call-next-method</code>, но они не поддерживают "
"вызов \n"
"<code class=\"western\">call-next-method</code> в основных методах \n"
"(это действительно было бы избыточным, поскольку вызываются все основные "
"методы, \n"
"или неуклюже <em>не</em> вызывать один ).</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2022
msgid ""
"<p>CLOS allows us to define a new operator as a method combination\n"
"type, be it a lisp function, macro or special form. Weâll let you\n"
"refer to the books if you feel the need.</p>"
msgstr ""
"<p>CLOS позволяет нам определять новый оператор как тип комбинации "
"методов, \n"
"будь то функция lisp, макрос или специальная форма. Мы даём вам "
"возможность \n"
"обратиться к книгам, если вы почувствуете в этом необходимость. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2026
msgid ""
"<h2 class=\"western\"><a name=\"debugging-tracing-method-combination\"></a>\n"
"Debugging: tracing method combination</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"debugging-tracing-method-combination\"></a>\n"
"Отладка: трассировка комбинации методов</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2029
msgid ""
"<p>It is possible to <a href=\"http://www.xach.com/clhs?q=trace\">trace</a>\n"
"the method combination, but this is implementation dependent.</p>"
msgstr ""
"<p>Комбинацию методов можно трассировать/отслеживать(<a href=\"http://www."
"xach.com/clhs?q=trace\">trace</a>), но это зависит от реализации.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2035
msgid ""
"<p>In SBCL, we can use <code class=\"western\">(trace foo :methods t)</"
"code>.\n"
"See <a href=\"http://christophe.rhodes.io/notes/blog/posts/2018/"
"sbcl_method_tracing/\">this\n"
"post by an SBCL core developer</a>.</p>"
msgstr ""
"<p>В SBCL мы можем использовать <code class=\"western\">(trace foo :methods "
"t)</code>. \n"
"См. <a href=\"http://christophe.rhodes.io/notes/blog/posts/2018/"
"sbcl_method_tracing/\">Этот пост разработчика ядра SBCL</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2039
msgid "<p>For example, given a generic:</p>"
msgstr "<p>Например, учитывая обобщение:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2055
msgid ""
"<pre class=\"western\"><code class=\"western\">(defgeneric foo (x)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (x) 3))</"
"code>\n"
"<code class=\"western\">(defmethod foo :around ((x fixnum))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(1+ (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo ((x integer))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(* 2 (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo ((x float))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(* 3 (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo :before ((x single-float))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">'single)</code>\n"
"<code class=\"western\">(defmethod foo :after ((x double-float))</code>\n"
"<code class=\"western\"> </code><code class=\"western\">'double)</code></"
"pre>\n"
"<p>\n"
"Letâs trace it:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defgeneric foo (x)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:method (x) 3))</"
"code>\n"
"<code class=\"western\">(defmethod foo :around ((x fixnum))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(1+ (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo ((x integer))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(* 2 (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo ((x float))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(* 3 (call-next-"
"method)))</code>\n"
"<code class=\"western\">(defmethod foo :before ((x single-float))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">'single)</code>\n"
"<code class=\"western\">(defmethod foo :after ((x double-float))</code>\n"
"<code class=\"western\"> </code><code class=\"western\">'double)</code></"
"pre>\n"
"<p>\n"
"Давайте проследим(трассируем) это:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2058
msgid ""
"<pre class=\"western\"><code class=\"western\">(trace foo :methods t)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2072
msgid ""
"<code class=\"western\">(foo 2.0d0)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: (FOO 2.0d0)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: ((SB-PCL::"
"COMBINED-METHOD FOO) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD FOO "
"(FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: ((METHOD "
"FOO (T)) 2.0d0)</code>\n"
"<code class=\"western\">        </code><code class=\"western\">3: (METHOD "
"FOO (T)) returned 3</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO "
"(FLOAT)) returned 9</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: ((METHOD "
"FOO :AFTER (DOUBLE-FLOAT)) 2.0d0)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">2: (METHOD FOO :"
"AFTER (DOUBLE-FLOAT)) returned DOUBLE</code>\n"
"<code class=\"western\">    </code><code class=\"western\">1: (SB-PCL::"
"COMBINED-METHOD FOO) returned 9</code>\n"
"<code class=\"western\">  </code><code class=\"western\">0: FOO returned 9</"
"code>\n"
"<code class=\"western\">9</code></pre><h1 class=\"western\">\n"
"<a name=\"mop\"></a>MOP</h1>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2078
msgid ""
"<p>We gather here some examples that make use of the framework\n"
"provided by the meta-object protocol, the configurable object system\n"
"that rules Lispâs object system. We touch advanced concepts so, new\n"
"reader, donât worry: you donât need to understand this section to\n"
"start using the Common Lisp Object System.</p>"
msgstr ""
"<p>Мы собираем здесь несколько примеров, которые используют "
"структуру(фреймворк), \n"
"предоставляемую протоколом метаобъектов, настраиваемой объектной системой, \n"
"которая управляет объектной системой Lisp. Мы касаемся продвинутых "
"концепций, \n"
"поэтому, если ты новичек, не волнуйся: тебе не нужно понимать этот раздел, \n"
"чтобы начать использовать Common Lisp Object System.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2085
msgid ""
"<p>We wonât explain much about the MOP here, but hopefully\n"
"sufficiently to make you see its possibilities or to help you\n"
"understand how some CL libraries are built. We invite you to read the\n"
"books referenced in the introduction.</p>"
msgstr ""
"<p>Мы не будем здесь подробно рассказывать о MOP, но, надеюсь, достаточно, \n"
"чтобы вы увидели его возможности или помогли понять, как создаются "
"некоторые \n"
"библиотеки CL. Мы приглашаем вас прочитать книги, упомянутые во введении. </"
"p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2088
msgid "<h2 class=\"western\"><a name=\"metaclasses\"></a>Metaclasses</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"metaclasses\"></a>Метаклассы(Metaclasses)</"
"h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2090
msgid ""
"<p>Metaclasses are needed to control the behaviour of other classes.</p>"
msgstr "<p>Метаклассы необходимы для управления поведением других классов.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2096
msgid ""
"<p><em>As announced, we wonât talk much. See also Wikipedia for\n"
"<a href=\"https://en.wikipedia.org/wiki/Metaclass\">metaclasses</a> or\n"
"<a href=\"https://en.wikipedia.org/wiki/Common_Lisp_Object_System\">CLOS</"
"a></em>.</p>"
msgstr ""
"<p><em>Как заявлено, много говорить не будем. См. Также Википедию для \n"
"<a href=\"https://en.wikipedia.org/wiki/Metaclass\">metaclasses</a> или\n"
"<a href=\"https://en.wikipedia.org/wiki/Common_Lisp_Object_System\">CLOS</"
"a></em>.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2100
msgid ""
"<p>The standard metaclass is <code class=\"western\">standard-class</code>:</"
"p>"
msgstr ""
"<p>Стандартный метакласс - это  <code class=\"western\">standard-class</"
"code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2109
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(class-of p1) ;; #&lt;STANDARD-CLASS PERSON&gt;</code></pre>\n"
"<p>\n"
"But weâll change it to one of our own, so that weâll be able to\n"
"<strong>count the creation of instances</strong>. This same mechanism\n"
"could be used to auto increment the primary key of a database system\n"
"(this is how the Postmodern or Mito libraries do), to log the\n"
"creation of objects, etc.</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(class-of p1) ;; #&lt;STANDARD-CLASS PERSON&gt;</code></pre>\n"
"<p>\n"
"Но мы изменим его на собственный, чтобы иметь возможность "
"<strong>подсчитывать \n"
"создание экземпляров</strong>. Этот же механизм можно использовать для \n"
"автоматического увеличения первичного ключа системы баз данных \n"
"(так поступают библиотеки Postmodern или Mito), для регистрации \n"
"создания объектов и т. Д.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2113
msgid ""
"<p>Our metaclass inherits from <code class=\"western\">standard-class</code>:"
"</p>"
msgstr ""
"<p>Наш метакласс унаследован от  <code class=\"western\">standard-class</"
"code>:</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2118
msgid ""
"<pre class=\"western\"><code class=\"western\">(defclass counted-class "
"(standard-class)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((counter :initform "
"0)))</code>\n"
"<code class=\"western\">#&lt;STANDARD-CLASS COUNTED-CLASS&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2123
msgid ""
"<code class=\"western\">(unintern 'person)</code>\n"
"<code class=\"western\">;; this is necessary to change the metaclass of "
"person.</code>\n"
"<code class=\"western\">;; or (setf (find-class 'person) nil)</code>\n"
"<code class=\"western\">;; https://stackoverflow.com/questions/38811931/how-"
"to-change-classs-metaclass#38812140</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2134
msgid ""
"<code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:metaclass counted-"
"class))) ;; &lt;- metaclass</code>\n"
"<code class=\"western\">;; #&lt;COUNTED-CLASS PERSON&gt;</code>\n"
"<code class=\"western\">;;   ^^^ not standard-class anymore.</code></pre>\n"
"<p>\n"
"The <code class=\"western\">:metaclass</code> class option can appear\n"
"only once.</p>"
msgstr ""
"<code class=\"western\">(defclass person ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name</code>\n"
"<code class=\"western\">    </code><code class=\"western\">:initarg :name</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">:accessor name)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:metaclass counted-"
"class))) ;; &lt;- metaclass</code>\n"
"<code class=\"western\">;; #&lt;COUNTED-CLASS PERSON&gt;</code>\n"
"<code class=\"western\">;;   ^^^ not standard-class anymore.</code></pre>\n"
"<p>\n"
"Параметр класса <code class=\"western\">:metaclass</code> может появляться \n"
"только один раз.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2140
msgid ""
"<p>Actually you should have gotten a message asking to implement\n"
"<code class=\"western\">validate-superclass</code>. So, still with the\n"
"<code class=\"western\">closer-mop</code> library:</p>"
msgstr ""
"<p>На самом деле вы должны были получить сообщение с просьбой \n"
"реализовать <code class=\"western\">validate-superclass</code>(суперкласс "
"проверки). \n"
"Итак, с библиотекой <code class=\"western\">closer-mop</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2148
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod closer-mop:"
"validate-superclass ((class counted-class)</code>\n"
"<code class=\"western\">                                           </"
"code><code class=\"western\">(superclass standard-class))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">t)</code></pre>\n"
"<p>\n"
"Now we can control the creation of new <code class=\"western\">person</"
"code>\n"
"instances:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod closer-mop:"
"validate-superclass ((class counted-class)</code>\n"
"<code class=\"western\">                                           </"
"code><code class=\"western\">(superclass standard-class))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">t)</code></pre>\n"
"<p>\n"
"Теперь мы можем контролировать создание новых экземпляров \n"
"<code class=\"western\">person</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2157
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod make-instance :"
"after ((class counted-class) &amp;key)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(incf (slot-value "
"class 'counter)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD MAKE-INSTANCE :AFTER "
"(COUNTED-CLASS) {1007718473}&gt;</code></pre>\n"
"<p>\n"
"See that an <code class=\"western\">:after</code> qualifier is the\n"
"safest choice, we let the standard method run as usual and return a\n"
"new instance.</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod make-instance :"
"after ((class counted-class) &amp;key)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(incf (slot-value "
"class 'counter)))</code>\n"
"<code class=\"western\">;; #&lt;STANDARD-METHOD MAKE-INSTANCE :AFTER "
"(COUNTED-CLASS) {1007718473}&gt;</code></pre>\n"
"<p>\n"
"Обратите внимание, что квалификатор <code class=\"western\">:after</code> "
"- \n"
"самый безопасный вариант, мы позволяем стандартному методу работать как "
"обычно и \n"
"возвращаем новый экземпляр.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2162
msgid ""
"<p>The <code class=\"western\">&amp;key</code> is necessary, remember\n"
"that <code class=\"western\">make-instance</code> is given initargs.</p>"
msgstr ""
"<p>Ключ <code class=\"western\">&amp;key</code> необходим, помните, что \n"
"<code class=\"western\">make-instance</code> имеет initargs.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2166
msgid "<p>Now testing:</p>"
msgstr "<p>Сейчас тестируем: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2170
msgid ""
"<pre class=\"western\"><code class=\"western\">(defvar p3 (make-instance "
"'person :name &quot;adam&quot;))</code>\n"
"<code class=\"western\">#&lt;PERSON {1007A8F5B3}&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2175
msgid ""
"<code class=\"western\">(slot-value p3 'counter)</code>\n"
"<code class=\"western\">;; =&gt; error. No, our new slot isn't on the person "
"class.</code>\n"
"<code class=\"western\">(slot-value (find-class 'person) 'counter)</code>\n"
"<code class=\"western\">;; 1</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2182
msgid ""
"<code class=\"western\">(make-instance 'person :name &quot;eve&quot;)</"
"code>\n"
"<code class=\"western\">;; #&lt;PERSON {1007AD5773}&gt;</code>\n"
"<code class=\"western\">(slot-value (find-class 'person) 'counter)</code>\n"
"<code class=\"western\">;; 2</code></pre>\n"
"<p>\n"
"Itâs working.</p>"
msgstr ""
"<code class=\"western\">(make-instance 'person :name &quot;eve&quot;)</"
"code>\n"
"<code class=\"western\">;; #&lt;PERSON {1007AD5773}&gt;</code>\n"
"<code class=\"western\">(slot-value (find-class 'person) 'counter)</code>\n"
"<code class=\"western\">;; 2</code></pre>\n"
"<p>\n"
"Работает.</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2186
msgid ""
"<h2 class=\"western\"><a name=\"controlling-the-initialization-of-instances-"
"initialize-instance\"></a>\n"
"Controlling the initialization of instances (initialize-instance)</h2>"
msgstr ""
"<h2 class=\"western\"><a name=\"controlling-the-initialization-of-instances-"
"initialize-instance\"></a>\n"
"Управление инициализацией экземпляров (initialize-instance)</h2>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2192
msgid ""
"<p>To further customize the creation of instances by specializing\n"
"<code class=\"western\">initialize-instance</code>, which is called by\n"
"<code class=\"western\">make-instance</code>, just after it has created\n"
"a new instance but didnât initialize it yet with the default\n"
"initargs and initforms.</p>"
msgstr ""
"<p>Для дальнейшей настройки создания экземпляров путем специализации \n"
"<code class=\"western\">initialize-instance</code>, который вызывается \n"
"<code class=\"western\">make-instance</code>, сразу после того, как он "
"создал \n"
"новый экземпляр, но еще не инициализировал его с помощью initargs и "
"initforms по умолчанию. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2197
msgid ""
"<p>It is recommended (Keene) to create an after method, since\n"
"creating a primary method would prevent slotsâ initialization.</p>"
msgstr ""
"<p>Рекомендуется (Keene) создать метод after, поскольку создание основного "
"метода \n"
"предотвратит инициализацию слотов. </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2217
msgid ""
"<pre class=\"western\"><code class=\"western\">(defmethod initialize-"
"instance :after ((obj person) &amp;key)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(do something with "
"obj))</code></pre>\n"
"<p>\n"
"Another rational. The CLOS implementation of <code class=\"western\">make-"
"instance</code>\n"
"is in two stages: allocate the new object, and then pass it along\n"
"with all the <code class=\"western\">make-instance</code> keyword\n"
"arguments, to the generic function <code class=\"western\">initialize-"
"instance</code>.\n"
"Implementors and application writers define <code class=\"western\">:after</"
"code>\n"
"methods on <code class=\"western\">initialize-instance</code>, to\n"
"initialize the slots of the instance. The system-supplied primary\n"
"method does this with regard to (a) <code class=\"western\">:initform</"
"code>\n"
"and <code class=\"western\">:initarg</code> values supplied with the\n"
"class was defined and (b) the keywords passed through from\n"
"<code class=\"western\">make-instance</code>. Other methods can extend\n"
"this behaviour as they see fit. For example, they might accept an\n"
"additional keyword which invokes a database access to fill certain\n"
"slots. The lambda list for <code class=\"western\">initialize-instance</"
"code>\n"
"is:</p>"
msgstr ""
"<pre class=\"western\"><code class=\"western\">(defmethod initialize-"
"instance :after ((obj person) &amp;key)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(do something with "
"obj))</code></pre>\n"
"<p>\n"
"Другой рациональный путь. Реализация <code class=\"western\">make-instance</"
"code> \n"
"в CLOS состоит из двух этапов: выделяет новый объект и затем передает его "
"вместе \n"
"со всеми аргументами ключевыми словами <code class=\"western\">make-"
"instance</code> \n"
"в обобщенную функцию <code class=\"western\">initialize-instance</code>. \n"
"Реализаторы и разработчики приложений определяют: методы-после\n"
"(<code class=\"western\">:after</code>) <code class=\"western\">initialize-"
"instance</code> \n"
"для инициализации слотов экземпляра. Предоставляемый системой основной "
"метод \n"
"делает это в отношении (a) значений <code class=\"western\">:initform</code> "
"и\n"
"<code class=\"western\">:initarg</code>, предоставленных с определением "
"класса, и \n"
"(b) ключевых слов, переданных из <code class=\"western\">make-instance</"
"code>. \n"
"Другие методы могут расширить это поведение по своему усмотрению. \n"
"Например, они могут принять дополнительное ключевое слово, которое "
"вызывает \n"
"доступ к базе данных для заполнения определенных слотов. Лямбда-список для \n"
"<code class=\"western\">initialize-instance</code> это: </p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2223
msgid ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">initialize-instance instance &amp;rest initargs &amp;key &amp;allow-other-"
"keys</code></pre>\n"
"<p>\n"
"See more in the books \n"
"</p>"
msgstr ""
"<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">initialize-instance instance &amp;rest initargs &amp;key &amp;allow-other-"
"keys</code></pre>\n"
"<p>\n"
"Смотрите больше в книгах  \n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2226
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2228
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/clos-tutorial.html:2231
msgid ""
"</body>\n"
"</html>"
msgstr ""
