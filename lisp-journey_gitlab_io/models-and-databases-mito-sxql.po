#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-22 22:03+0300\n"
"PO-Revision-Date: 2021-08-23 23:41+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:32
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-22T21:58:57.812815251\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-22T22:02:31.260472092\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th4.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th4.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th5.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th5.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"title-non-xs\"></a><a href=\"https://"
"lispcookbook.github.io/cl-cookbook/\">The\n"
"Common Lisp Cookbook</a> â Database Access and Persistence</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-22T21:58:57.812815251\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-22T22:02:31.260472092\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\th2.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th2.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\th3.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th3.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th4.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th4.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\th5.cjk { font-family: \"Noto Sans CJK SC\" }\n"
"\t\th5.ctl { font-family: \"Lohit Devanagari\" }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"title-non-xs\"></a><a href=\"https://"
"lispcookbook.github.io/cl-cookbook/\">Поваренная книга Common Lisp</a> - "
"доступ к базе данных и Persistence(постоянство)</h1>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:35
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:35"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:37
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:37"
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:40
msgid "<div id=\"content\" dir=\"ltr\">"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:45
msgid ""
"<p>The <a href=\"https://github.com/CodyReichert/awesome-cl#database"
"\">Database\n"
"\tsection on the Awesome-cl list</a> is a resource listing popular\n"
"\tlibraries to work with different kind of databases. We can group\n"
"\tthem roughly in four categories:</p>"
msgstr ""
"<p>The <a href=\"https://github.com/CodyReichert/awesome-cl#database"
"\">Раздел «База данных» \n"
"в списке Awesome-cl</a> - это ресурс, в котором перечислены популярные "
"библиотеки \n"
"для работы с различными типами баз данных. Мы можем сгруппировать их "
"примерно в \n"
"четыре категории:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:52
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">wrappers to one database engine\n"
"\t\t(cl-sqlite, postmodern, cl-redis,â¦), \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">оболочки для одного движка базы данных \n"
"\t\t(cl-sqlite, postmodern, cl-redis,…), \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:58
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">interfaces to several DB\n"
"\t\tengines (clsql, sxql,â¦), \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">интерфейсы с несколькими \n"
"\tдвижками БД (clsql, sxql,â¦), \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:65
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">persistent object databases\n"
"\t\t(bknr.datastore (see chap. 21 of âCommon Lisp Recipesâ),\n"
"\t\tubiquitous,â¦), \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">базы данных постоянных/хранимых на диске "
"объектов \n"
"\t(bknr.datastore (см. главу 21 «Common Lisp Recipes»), повсеместно,…),\n"
" \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:68
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:68"
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:72
msgid ""
"<p><a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping"
"\">Object\n"
"\t\tRelational Mappers</a> (Mito), \n"
"\t\t</p>"
msgstr ""
"<p><a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping"
"\">объектно-реляционное \t\tотображение(преобразование)(Object Relational "
"Mappers - ORM)</a> (Mito), \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:75
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:75"
msgid "\t</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:77
msgid "<p>and other DB-related tools (pgloader).</p>"
msgstr "<p>и другие инструменты, связанные с БД (pgloader).</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:84
msgid ""
"<p>Weâll begin with an overview of Mito. If you must work with an\n"
"\texisting DB, you might want to have a look at cl-dbi and clsql. If\n"
"\tyou donât need a SQL database and want automatic persistence of\n"
"\tLisp objects, you also have a choice of libraries.</p>"
msgstr ""
"<p>Начнем с обзора Mito. Если вам необходимо работать с существующей БД, \n"
"\tвы можете взглянуть на cl-dbi и clsql. Если вам не нужна база данных SQL \n"
"\tи вы хотите автоматически сохранять объекты Lisp, у вас также есть выбор "
"библиотек. </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:88
msgid ""
"\t<h2 class=\"western\"><a name=\"the-mito-orm-and-sxql\"></a>The Mito ORM\n"
"\tand SxQL</h2>"
msgstr ""
"\t<h2 class=\"western\"><a name=\"the-mito-orm-and-sxql\"></a>Mito ORM\n"
"\tи SxQL</h2>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:90
msgid "<p>Mito is in Quicklisp:</p>"
msgstr "<p>Mito в Quicklisp:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:94
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload &quot;mito&quot;)</code></pre><h3 class=\"western\">\n"
"\t<a name=\"overview\"></a>Overview</h3>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ql:quickload &quot;mito&quot;)</code></pre><h3 class=\"western\">\n"
"\t<a name=\"overview\"></a>Обзор</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:98
msgid ""
"<p><a href=\"https://github.com/fukamachi/mito\">Mito</a> is âan ORM\n"
"\tfor Common Lisp with migrations, relationships and PostgreSQL\n"
"\tsupportâ.</p>"
msgstr ""
"<p><a href=\"https://github.com/fukamachi/mito\">Mito</a> - это \n"
"\t«ORM для Common Lisp с миграциями, связями и поддержкой PostgreSQL».</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:105
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">it <strong>supports MySQL,\n"
"\t\tPostgreSQL and SQLite3</strong>, \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">она <strong> поддерживает MySQL,\n"
"\t\tPostgreSQL и SQLite3</strong>, \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:113
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">when defining a model, it adds\n"
"\t\tan <code class=\"western\">id</code> (serial primary key), <code class="
"\"western\">created_at</code>\n"
"\t\tand <code class=\"western\">updated_at</code> fields by default like\n"
"\t\tRubyâs ActiveRecord or Django, \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> при определении модели она по умолчанию "
"добавляет \n"
"\tполя <code class=\"western\">id</code> (серийный/последовательный "
"первичный ключ), \n"
"\t<code class=\"western\">created_at</code>\n"
"\tи <code class=\"western\">updated_at</code>, например ActiveRecord или "
"Django в Ruby,\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:119
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">handles DB <strong>migrations</strong>\n"
"\t\tfor the supported backends, \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> обрабатывает  <strong>миграции </strong> "
"БД \n"
"\tдля поддерживаемых бэкэндов, \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:125
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">permits DB <strong>schema\n"
"\t\tversioning</strong>, \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">разрешает управление <strong>версиями схемы</"
"strong> БД, \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:128
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:128"
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:131
msgid ""
"<p>is tested under SBCL and CCL. \n"
"\t\t</p>"
msgstr ""
"<p> протестирована под SBCL и CCL. \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:134
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:134"
msgid "\t</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:140
msgid ""
"<p>As an ORM, it allows to write class definitions, to specify\n"
"\trelationships, and provides functions to query the database. For\n"
"\tcustom queries, it relies on <a href=\"https://github.com/fukamachi/sxql"
"\">SxQL</a>,\n"
"\tan SQL generator that provides the same interface for several\n"
"\tbackends.</p>"
msgstr ""
"<p>Как ORM, она позволяет писать определения классов, указывать отношения "
"и \n"
"\tпредоставляет функции для запросов к базе данных. Для пользовательских \n"
"\tзапросов она использует SxQL, генератор SQL, который предоставляет один \n"
"\tи тот же интерфейс для нескольких бэкэндов.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:144
msgid "<p>Working with Mito generally involves these steps:</p>"
msgstr "<p>Работа с Mito обычно включает следующие шаги: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:150
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">connecting to the DB \n"
"\t\t</p>"
msgstr ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">подключение к  DB \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:156
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">writing <a href=\"https://lispcookbook."
"github.io/cl-cookbook/clos.html\">CLOS</a>\n"
"\t\tclasses to define models \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> написание классов <a href=\"https://"
"lispcookbook.github.io/cl-cookbook/clos.html\">CLOS</a> для определения "
"моделей \n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:162
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\">running migrations to create or\n"
"\t\talter tables \n"
"\t\t</p>"
msgstr ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"> выполнение миграций для создания \n"
"\tили изменения таблиц\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:165
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:165"
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:168
msgid ""
"<p>creating objects, saving same in the DB, \n"
"\t\t</p>"
msgstr ""
"<p> создание объектов, сохранение их в БД,\n"
"\t\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:171
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:171"
msgid "\t</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:173
msgid "<p>and iterating.</p>"
msgstr "<p>и повторение. </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:177
msgid ""
"\t<h3 class=\"western\"><a name=\"connecting-to-a-db\"></a>Connecting to a\n"
"\tDB</h3>"
msgstr ""
"\t<h3 class=\"western\"><a name=\"connecting-to-a-db\"></a>Подключение к БД</"
"h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:180
msgid ""
"<p>Mito provides the function <code class=\"western\">connect-toplevel</"
"code>\n"
"\tto establish a connection to RDBMs:</p>"
msgstr ""
"<p>Mito предоставляет функцию <code class=\"western\">connect-toplevel</"
"code>\n"
"\t для установления соединения с RDBMs: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:186
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:connect-toplevel :mysql :database-name &quot;myapp&quot; :username "
"&quot;fukamachi&quot; :password &quot;c0mon-1isp&quot;)</code></pre>\n"
"<p>\n"
"\tThe driver type can be of <code class=\"western\">:mysql</code>,\n"
"\t<code class=\"western\">:sqlite3</code> and <code class=\"western\">:"
"postgres</code>.</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:connect-toplevel :mysql :database-name &quot;myapp&quot; :username "
"&quot;fukamachi&quot; :password &quot;c0mon-1isp&quot;)</code></pre>\n"
"<p>\n"
"\tТип драйвера может быть <code class=\"western\">:mysql</code>,\n"
"\t<code class=\"western\">:sqlite3</code> и <code class=\"western\">:"
"postgres</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:190
msgid "<p>With sqlite you donât need the username and password:</p>"
msgstr "<p>С sqlite вам не нужны имя пользователя и пароль: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:196
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:connect-toplevel :sqlite3 :database-name &quot;myapp&quot;)</code></"
"pre>\n"
"<p>\n"
"\tAs usual, you need to create the MySQL or PostgreSQL database\n"
"\tbeforehand. Refer to their documentation.</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:connect-toplevel :sqlite3 :database-name &quot;myapp&quot;)</code></"
"pre>\n"
"<p>\n"
"\tКак обычно, вам необходимо заранее создать базу данных MySQL или "
"PostgreSQL. \n"
"\tОбратитесь к их документации.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:201
msgid ""
"<p>Connecting sets <code class=\"western\">mito:*connection*</code> to\n"
"\tthe new connection and returns it.</p>"
msgstr ""
"<p>Соединение устанавливает <code class=\"western\">mito:*connection*</"
"code> \n"
"\tна новое соединение и возвращает его.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:205
msgid ""
"<p>Disconnect with <code class=\"western\">disconnect-toplevel</code>.</p>"
msgstr ""
"<p>Отключение с  <code class=\"western\">disconnect-toplevel</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:209
msgid "<p>You might make good use of a wrapper function:</p>"
msgstr "<p>Вы могли бы хорошо использовать функцию-оболочку: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:216
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defun connect ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Connect to "
"the DB.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mito:connect-"
"toplevel :sqlite3 :database-name &quot;myapp&quot;))</code></pre><h3 class="
"\"western\">\n"
"\t<a name=\"models\"></a>Models</h3>\n"
"\t<h4 class=\"western\"><a name=\"defining-models\"></a>Defining models</h4>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defun connect ()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Connect to "
"the DB.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mito:connect-"
"toplevel :sqlite3 :database-name &quot;myapp&quot;))</code></pre><h3 class="
"\"western\">\n"
"\t<a name=\"models\"></a>Модели</h3>\n"
"\t<h4 class=\"western\"><a name=\"defining-models\"></a>Определение моделей</"
"h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:219
msgid ""
"<p>In Mito, you can define a class which corresponds to a database\n"
"\ttable with the <code class=\"western\">deftable</code> macro:</p>"
msgstr ""
"<p>В Mito вы можете определить класс, соответствующий таблице базы данных, \n"
"\tс помощью макроса <code class=\"western\">deftable</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:227
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type "
"(or (:varchar 128) :null)))</code></pre>\n"
"<p>\n"
"\tAlternatively, you can specify <code class=\"western\">(:metaclass\n"
"\tmito:dao-table-class)</code> in a regular class definition.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type "
"(or (:varchar 128) :null)))</code></pre>\n"
"<p>\n"
"\tВ качестве альтернативы вы можете указать \n"
"\t<code class=\"western\">(:metaclass mito:dao-table-class)</code> \n"
"\tв определении обычного класса.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:244
msgid ""
"<p>The <code class=\"western\">deftable</code> macro automatically\n"
"\tadds some slots: a primary key named <code class=\"western\">id</code>\n"
"\tif thereâs no primary key, and <code class=\"western\">created_at</code>\n"
"\tand <code class=\"western\">updated_at</code> for recording\n"
"\ttimestamps. Specifying <code class=\"western\">(:auto-pk nil)</code>\n"
"\tand <code class=\"western\">(:record-timestamps nil)</code> in the\n"
"\t<code class=\"western\">deftable</code> form will disable these\n"
"\tbehaviours. A <code class=\"western\">deftable</code> class will also\n"
"\tcome with initializers, named after the slot, and accessors, of form\n"
"\t<code class=\"western\">&lt;class-name&gt;-&lt;slot-name&gt;</code>,\n"
"\tfor each named slot. For example, for the <code class=\"western\">name</"
"code>\n"
"\tslot in the above table definition, the initarg <code class=\"western\">:"
"name</code>\n"
"\twill be added to the constuctor, and the accessor <code class=\"western"
"\">user-name</code>\n"
"\twill be created.</p>"
msgstr ""
"<p>Макрос <code class=\"western\">deftable</code> автоматически добавляет "
"несколько слотов: \n"
"\tпервичный ключ с именем <code class=\"western\">id</code>, \n"
"\tесли первичного ключа нет, и <code class=\"western\">created_at</code>\n"
"\tи <code class=\"western\">updated_at</code> для записи временных меток. \n"
"\tУказание <code class=\"western\">(:auto-pk nil)</code>\n"
"\tи <code class=\"western\">(:record-timestamps nil)</code> в гибкой форме "
"отключит \n"
"\tэто поведение. Класс <code class=\"western\">deftable</code> также будет \n"
"\tиметь инициализаторы, именуемые после слота, и средства доступа в форме \n"
"\t<code class=\"western\">&lt;class-name&gt;-&lt;slot-name&gt;</code> для "
"каждого\n"
"\tименованного слота. Например, для слота <code class=\"western\">name</"
"code> в \n"
"\tприведенном выше определении таблицы, аргумент инициализации(initarg)\n"
"\t<code class=\"western\">:name</code>\n"
"\tбудет добавлен в конструктор, и будет создано  средства доступа\n"
"\t<code class=\"western\">user-name</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:248
msgid "<p>You can inspect the new class:</p>"
msgstr "<p>Вы можете проинспектировать(осмотреть) новый класс: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:259
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito.class:table-column-"
"slots (find-class 'user))</code>\n"
"<code class=\"western\">;=&gt; (#&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::ID&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"COMMON-LISP-USER::NAME&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"COMMON-LISP-USER::EMAIL&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::CREATED-AT&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::UPDATED-AT&gt;)</code></pre>\n"
"<p>\n"
"\tThe class inherits <code class=\"western\">mito:dao-class</code>\n"
"\timplicitly.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito.class:table-column-"
"slots (find-class 'user))</code>\n"
"<code class=\"western\">;=&gt; (#&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::ID&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"COMMON-LISP-USER::NAME&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"COMMON-LISP-USER::EMAIL&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::CREATED-AT&gt;</code>\n"
"<code class=\"western\">;    #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"MITO.DAO.MIXIN::UPDATED-AT&gt;)</code></pre>\n"
"<p>\n"
"\tКласс неявно наследует <code class=\"western\">mito:dao-class</code>. \n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:263
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(find-class 'user)</code>\n"
"<code class=\"western\">;=&gt; #&lt;MITO.DAO.TABLE:DAO-TABLE-CLASS COMMON-"
"LISP-USER::USER&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:269
msgid ""
"<code class=\"western\">(c2mop:class-direct-superclasses *)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;STANDARD-CLASS MITO.DAO.TABLE:DAO-"
"CLASS&gt;)</code></pre>\n"
"<p>\n"
"\tThis may be useful when you define methods which can be applied for\n"
"\tall table classes.</p>"
msgstr ""
"<code class=\"western\">(c2mop:class-direct-superclasses *)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;STANDARD-CLASS MITO.DAO.TABLE:DAO-"
"CLASS&gt;)</code></pre>\n"
"<p>\n"
"\tЭто может быть полезно при определении методов, которые можно \n"
"\tприменять для всех классов таблиц.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:275
msgid ""
"<p>For more information on using the Common Lisp Object System, see\n"
"\tthe <a href=\"https://lispcookbook.github.io/cl-cookbook/clos.html\">clos</"
"a>\n"
"\tpage.</p>"
msgstr ""
"<p>Для получения дополнительной информации об использовании объектной "
"системы \n"
"\tCommon Lisp, см. страницу <a href=\"https://lispcookbook.github.io/cl-"
"cookbook/clos.html\">clos</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:279
msgid ""
"\t<h4 class=\"western\"><a name=\"creating-the-tables\"></a>Creating the\n"
"\ttables</h4>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"creating-the-tables\"></a>Создание таблиц</"
"h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:281
msgid "<p>After defining the models, you must create the tables:</p>"
msgstr "<p>После определения моделей необходимо создать таблицы: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:286
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:ensure-table-exists 'user)</code></pre>\n"
"<p>\n"
"\tSo a helper function:</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:ensure-table-exists 'user)</code></pre>\n"
"<p>\n"
"\tИтак, вспомогательная функция:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:293
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defun ensure-tables ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mapcar #'mito:"
"ensure-table-exists '(user foo bar)))</code></pre>\n"
"<p>\n"
"\tSee <a href=\"https://github.com/fukamachi/mito#generating-table-"
"definitions\">Mitoâs\n"
"\tdocumentation</a> for a couple more ways.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defun ensure-tables ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mapcar #'mito:"
"ensure-table-exists '(user foo bar)))</code></pre>\n"
"<p>\n"
"\tСм. <a href=\"https://github.com/fukamachi/mito#generating-table-"
"definitions\">Документацию Mito</a>, чтобы узнать о других способах.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:298
msgid ""
"<p>When you alter the model youâll need to run a DB migration, see\n"
"\tthe next section.</p>"
msgstr ""
"<p>Когда вы измените модель, вам нужно будет запустить миграцию БД, \n"
"\tсм. Следующий раздел.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:302
msgid ""
"\t<h4 class=\"western\"><a name=\"fields\"></a>Fields</h4>\n"
"\t<h5 class=\"western\"><a name=\"fields-types\"></a>Fields types</h5>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"fields\"></a>Поля</h4>\n"
"\t<h5 class=\"western\"><a name=\"fields-types\"></a>Типы полей</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:304
msgid "<p>Field types are:</p>"
msgstr "<p>Типы полей бывают:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:308
msgid "<p><code class=\"western\">(:varchar &lt;integer&gt;)</code> ,</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:314
msgid ""
"<p><code class=\"western\">:serial</code>, <code class=\"western\">:"
"bigserial</code>,\n"
"\t<code class=\"western\">:integer</code>, <code class=\"western\">:bigint</"
"code>,\n"
"\t<code class=\"western\">:unsigned</code>,</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:318
msgid ""
"<p><code class=\"western\">:timestamp</code>, <code class=\"western\">:"
"timestamptz</code>,</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:322
msgid "<p><code class=\"western\">:bytea</code>,</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:325
msgid ""
"\t<h5 class=\"western\"><a name=\"optional-fields\"></a>Optional fields</h5>"
msgstr ""
"\t<h5 class=\"western\"><a name=\"optional-fields\"></a>Необязательные "
"поля(Optional fields)</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:327
msgid "<p>Use <code class=\"western\">(or &lt;real type&gt; :null)</code>:</p>"
msgstr ""
"<p>Используйте <code class=\"western\">(or &lt;real type&gt; :null)</code>:</"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:331
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">   </code><code class=\"western\">(email :col-type (or (:varchar 128) :"
"null))</code></pre><h5 class=\"western\">\n"
"\t<a name=\"field-constraints\"></a>Field constraints</h5>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">   </code><code class=\"western\">(email :col-type (or (:varchar 128) :"
"null))</code></pre><h5 class=\"western\">\n"
"\t<a name=\"field-constraints\"></a>Ограничения (налагаемые на) поля</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:333
msgid "<p><code class=\"western\">:unique-keys</code> can be used like so:</p>"
msgstr ""
"<p><code class=\"western\">:unique-keys</code> можно использовать так: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:341
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type (:"
"varchar 128))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code></pre>\n"
"<p>\n"
"\tWe already saw <code class=\"western\">:primary-key</code>.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type (:"
"varchar 128))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code></pre>\n"
"<p>\n"
"\tМы уже видели:  <code class=\"western\">:primary-key</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:345
msgid ""
"<p>You can change the table name with <code class=\"western\">:table-name</"
"code>.</p>"
msgstr ""
"<p>Вы можете изменить имя таблицы с помощью <code class=\"western\">:table-"
"name</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:348
msgid ""
"\t<h4 class=\"western\"><a name=\"relationships\"></a>Relationships</h4>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"relationships\"></"
"a>Отношения(Relationships)</h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:351
msgid ""
"<p>You can define a relationship by specifying a foreign class with\n"
"\t<code class=\"western\">:col-type</code>:</p>"
msgstr ""
"<p>Вы можете определить отношение, указав внешний класс с помощью \n"
"\t<code class=\"western\">:col-type</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:357
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable tweet ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((status :col-type :"
"text)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">;; This slot "
"refers to USER class</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(user :col-type "
"user))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:369
msgid ""
"<code class=\"western\">(table-definition (find-class 'tweet))</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE tweet (</"
"code>\n"
"<code class=\"western\">;        id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;        status TEXT NOT NULL,</code>\n"
"<code class=\"western\">;        user_id BIGINT NOT NULL,</code>\n"
"<code class=\"western\">;        created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        updated_at TIMESTAMP</code>\n"
"<code class=\"western\">;    )&gt;)</code></pre>\n"
"<p>\n"
"\tNow you can create or retrieve a <code class=\"western\">TWEET</code>\n"
"\tby a <code class=\"western\">USER</code> object, not a <code class="
"\"western\">USER-ID</code>.</p>"
msgstr ""
"<code class=\"western\">(table-definition (find-class 'tweet))</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE tweet (</"
"code>\n"
"<code class=\"western\">;        id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;        status TEXT NOT NULL,</code>\n"
"<code class=\"western\">;        user_id BIGINT NOT NULL,</code>\n"
"<code class=\"western\">;        created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        updated_at TIMESTAMP</code>\n"
"<code class=\"western\">;    )&gt;)</code></pre>\n"
"<p>\n"
"\tТеперь вы можете создать или получить <code class=\"western\">TWEET</"
"code> \n"
"\tс помощью объекта <code class=\"western\">USER</code>, а не\n"
"\tидентификатора <code class=\"western\">USER-ID</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:373
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defvar *user* (mito:create-"
"dao 'user :name &quot;Eitaro Fukamachi&quot;))</code>\n"
"<code class=\"western\">(mito:create-dao 'tweet :user *user*)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:377
msgid ""
"<code class=\"western\">(mito:find-dao 'tweet :user *user*)</code></pre>\n"
"<p>\n"
"\tMito doesnât add foreign key constraints for referring tables.</p>"
msgstr ""
"<code class=\"western\">(mito:find-dao 'tweet :user *user*)</code></pre>\n"
"<p>\n"
"\tMito не добавляет ограничений внешнего ключа(foreign key) для \n"
"\tссылок на таблицы.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:380
msgid "\t<h5 class=\"western\"><a name=\"one-to-one\"></a>One-to-one</h5>"
msgstr ""
"\t<h5 class=\"western\"><a name=\"one-to-one\"></a>Один-к-одному(One-to-"
"one)</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:386
msgid ""
"<p>A one-to-one relationship is simply represented with a simple\n"
"\tforeign key on a slot (as <code class=\"western\">:col-type user</code>\n"
"\tin the <code class=\"western\">tweet</code> class). Besides, we can\n"
"\tadd a unicity constraint, as with <code class=\"western\">(:unique-keys\n"
"\temail)</code>.</p>"
msgstr ""
"<p>Отношения «один-к-одному» просто представлены простым внешним ключом в "
"слоте \n"
"\t(как: <code class=\"western\">:col-type user</code> в классе\n"
"\t<code class=\"western\">tweet</code>). Кроме того, мы можем добавить "
"ограничение\n"
"\tуникальности, как в случае с <code class=\"western\">(:unique-keys email)</"
"code>.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:390
msgid ""
"\t<h5 class=\"western\"><a name=\"one-to-many-many-to-one\"></a>One-to-"
"many,\n"
"\tmany-to-one</h5>"
msgstr ""
"\t<h5 class=\"western\"><a name=\"one-to-many-many-to-one\"></a>Один-ко-"
"многим(One-to-many),\n"
"\tМного-к-одному(many-to-one)</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:394
msgid ""
"<p>The tweet example above shows a one-to-many relationship between\n"
"\ta user and his tweets: a user can write many tweets, and a tweet\n"
"\tbelongs to only one user.</p>"
msgstr ""
"<p>В приведенном выше примере tweet(твита) показана связь/отношение\n"
"\t «один ко многим» между пользователем(user) и его твитами: \n"
"\tпользователь(user) может написать много твитов(tweets), \n"
"\tа твит принадлежит только одному пользователю.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:402
msgid ""
"<p>The relationship is defined with a foreign key on the âmanyâ\n"
"\tside linking back to the âoneâ side. Here the <code class=\"western"
"\">tweet</code>\n"
"\tclass defines a <code class=\"western\">user</code> foreign key, so a\n"
"\ttweet can only have one user. You didnât need to edit the <code class="
"\"western\">user</code>\n"
"\tclass.</p>"
msgstr ""
"<p>Отношение определяется внешним ключом(foreign key) на стороне «многие», \n"
"\tвозвращающейся(устанавливающим связь назад) к стороне «один». \n"
"\tЗдесь класс <code class=\"western\">tweet</code>(твита) определяет \n"
"\tвнешний ключ <code class=\"western\">user</code>(пользователя), \n"
"\tпоэтому твит может иметь только одного пользователя. Вам не нужно \n"
"\tбыло редактировать класс <code class=\"western\">user</code>(пользователя)."
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:408
msgid ""
"<p>A many-to-one relationship is actually the contrary of a\n"
"\tone-to-many. You have to put the foreign key on the appropriate\n"
"\tside.</p>"
msgstr ""
"<p>Отношения «многие к одному» на самом деле противоположны отношениям «один "
"ко многим». \n"
"\tВы должны поместить внешний ключ на соответствующую сторону. </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:411
msgid "\t<h5 class=\"western\"><a name=\"many-to-many\"></a>Many-to-many</h5>"
msgstr ""
"\t<h5 class=\"western\"><a name=\"many-to-many\"></a>Многие-ко-многим(Many-"
"to-many)</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:415
msgid ""
"<p>A many-to-many relationship needs an intermediate table, which\n"
"\twill be the âmanyâ side for the two tables it is the\n"
"\tintermediary of.</p>"
msgstr ""
"<p>Отношение «многие ко многим» требует промежуточной таблицы, которая "
"будет \n"
"\tстороной «многие» для двух таблиц, посредником которых она является.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:420
msgid ""
"<p>And, thanks to the join table, we can store more information\n"
"\tabout the relationship.</p>"
msgstr ""
"<p>И благодаря таблице соединений(join table) мы можем хранить больше "
"информации \n"
"\tоб отношениях.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:424
msgid "<p>Letâs define a <code class=\"western\">book</code> class:</p>"
msgstr "<p>Давайте определим класс  <code class=\"western\">book</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:433
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable book ()</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">((title :col-type "
"(:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(ean :col-type "
"(or (:varchar 128) :null))))</code></pre>\n"
"<p>\n"
"\tA user can have many books, and a book (as the title, not the\n"
"\tphysical copy) is likely to be in many peopleâs library. Hereâs\n"
"\tthe intermediate class:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable book ()</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">((title :col-type "
"(:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(ean :col-type "
"(or (:varchar 128) :null))))</code></pre>\n"
"<p>\n"
"\tУ пользователя может быть много книг, и книга (как название, а не "
"физическая копия), \n"
"\tскорее всего, будет в библиотеке многих людей. Вот промежуточный класс: :</"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:442
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-books "
"()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((user :col-type "
"user)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(book :col-type "
"book)))</code></pre>\n"
"<p>\n"
"\tEach time we want to add a book to a userâs collection (say in a\n"
"\t<code class=\"western\">add-book</code> function), we create a new\n"
"\t<code class=\"western\">user-books</code> object.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-books "
"()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((user :col-type "
"user)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(book :col-type "
"book)))</code></pre>\n"
"<p>\n"
"\tКаждый раз, когда мы хотим добавить книгу в коллекцию пользователя \n"
"\t(например, в функции <code class=\"western\">add-book</code>), \n"
"\tмы создаем новый объект <code class=\"western\">user-books</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:447
msgid ""
"<p>But someone may very well own many copies of one book. This is an\n"
"\tinformation we can store in the join table:</p>"
msgstr ""
"<p>Но у кого-то вполне может быть много экземпляров одной книги. Это "
"информация, \n"
"\tкоторую мы можем сохранить в таблице соединений: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:455
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-books "
"()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((user :col-type "
"user)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(book :col-type "
"book)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">;; Set the "
"quantity, 1 by default:</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(quantity :col-"
"type :integer)))</code></pre><h4 class=\"western\">\n"
"\t<a name=\"inheritance-and-mixin\"></a>Inheritance and mixin</h4>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-books "
"()</code>\n"
"<code class=\"western\">    </code><code class=\"western\">((user :col-type "
"user)</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(book :col-type "
"book)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">;; Set the "
"quantity, 1 by default:</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(quantity :col-"
"type :integer)))</code></pre><h4 class=\"western\">\n"
"\t<a name=\"inheritance-and-mixin\"></a>Наследование и подмешивание(mixin)</"
"h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:458
msgid ""
"<p>A subclass of DAO-CLASS is allowed to be inherited. This may be\n"
"\tuseful when you need classes which have similar columns:</p>"
msgstr ""
"<p>Подкласс DAO-CLASS может быть унаследован. Это может быть полезно, \n"
"\tкогда вам нужны классы с похожими столбцами: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:464
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type (:"
"varchar 128)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:467
msgid ""
"<code class=\"western\">(mito:deftable temporary-user (user)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((registered-at :"
"col-type :timestamp)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:483
msgid ""
"<code class=\"western\">(mito:table-definition 'temporary-user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE "
"temporary_user (</code>\n"
"<code class=\"western\">;        id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;        name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;        email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;        registered_at TIMESTAMP NOT NULL,</code>\n"
"<code class=\"western\">;        created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        UNIQUE (email)</code>\n"
"<code class=\"western\">;    )&gt;)</code></pre>\n"
"<p>\n"
"\tIf you need a âtemplateâ for tables which arenât related to\n"
"\tany database tables, you can use <code class=\"western\">DAO-TABLE-MIXIN</"
"code>\n"
"\tin a <code class=\"western\">defclass</code> form. The <code class="
"\"western\">has-email</code>\n"
"\tclass below will not create a table.</p>"
msgstr ""
"<code class=\"western\">(mito:table-definition 'temporary-user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE "
"temporary_user (</code>\n"
"<code class=\"western\">;        id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;        name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;        email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;        registered_at TIMESTAMP NOT NULL,</code>\n"
"<code class=\"western\">;        created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;        UNIQUE (email)</code>\n"
"<code class=\"western\">;    )&gt;)</code></pre>\n"
"<p>\n"
"\tЕсли вам нужен «шаблон» для таблиц, которые не связаны ни с какими \n"
"\tтаблицами базы данных, вы можете использовать \n"
"\t<code class=\"western\">DAO-TABLE-MIXIN</code> в форме \n"
"\t<code class=\"western\">defclass</code>. Приведенный ниже класс\n"
"\t<code class=\"western\">has-email</code> не создает таблицу. </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:492
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defclass has-email ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((email :col-type (:"
"varchar 128)</code>\n"
"<code class=\"western\">          </code><code class=\"western\">:initarg :"
"email</code>\n"
"<code class=\"western\">          </code><code class=\"western\">:accessor "
"object-email))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:metaclass mito:"
"dao-table-mixin)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code>\n"
"<code class=\"western\">;=&gt; #&lt;MITO.DAO.MIXIN:DAO-TABLE-MIXIN COMMON-"
"LISP-USER::HAS-EMAIL&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:496
msgid ""
"<code class=\"western\">(mito:deftable user (has-email)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))))</code>\n"
"<code class=\"western\">;=&gt; #&lt;MITO.DAO.TABLE:DAO-TABLE-CLASS COMMON-"
"LISP-USER::USER&gt;</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:508
msgid ""
"<code class=\"western\">(mito:table-definition 'user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE user (</"
"code>\n"
"<code class=\"western\">;       id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;       name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;       email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;       created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;       updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;       UNIQUE (email)</code>\n"
"<code class=\"western\">;   )&gt;)</code></pre>\n"
"<p>\n"
"\tSee more examples of use in <a href=\"https://github.com/fukamachi/mito-"
"auth/\">mito-auth</a>.</p>"
msgstr ""
"<code class=\"western\">(mito:table-definition 'user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: CREATE TABLE user (</"
"code>\n"
"<code class=\"western\">;       id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;       name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;       email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;       created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;       updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;       UNIQUE (email)</code>\n"
"<code class=\"western\">;   )&gt;)</code></pre>\n"
"<p>\n"
"\tСмотрите больше примеров использования в. \n"
"\t<a href=\"https://github.com/fukamachi/mito-auth/\">mito-auth</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:513
msgid ""
"\t<h4 class=\"western\"><a name=\"troubleshooting\"></a>Troubleshooting</"
"h4>\n"
"\t<h5 class=\"western\"><a name=\"cannot-change-class-objects-into-class-"
"metaobjects\"></a>\n"
"\tâCannot CHANGE-CLASS objects into CLASS metaobjects.â</h5>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"troubleshooting\"></a>Исправление проблем</"
"h4>\n"
"\t<h5 class=\"western\"><a name=\"cannot-change-class-objects-into-class-"
"metaobjects\"></a>\n"
"\t«Невозможно ИЗМЕНИТЬ объекты КЛАССА в метаобъекты КЛАССА»\n"
"\t(Cannot CHANGE-CLASS objects into CLASS metaobjects)</h5>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:515
msgid "<p>If you get the following error message:</p>"
msgstr "<p>Если вы получили следующее сообщение об ошибке: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:525
msgid ""
"\t<pre class=\"western\"><code class=\"western\">Cannot CHANGE-CLASS objects "
"into CLASS metaobjects.</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SB-PCL::METAOBJECT-INITIALIZATION-VIOLATION]</code>\n"
"<code class=\"western\">See also:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">The Art of the "
"Metaobject Protocol, CLASS [:initialization]</code></pre>\n"
"<p>\n"
"\tit is certainly because you first wrote a class definition and <em>then</"
"em>\n"
"\tadded the Mito metaclass and tried to evaluate the class definition\n"
"\tagain.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">Cannot CHANGE-CLASS objects "
"into CLASS metaobjects.</code>\n"
"<code class=\"western\">   </code><code class=\"western\">[Condition of type "
"SB-PCL::METAOBJECT-INITIALIZATION-VIOLATION]</code>\n"
"<code class=\"western\">See also:</code>\n"
"<code class=\"western\">  </code><code class=\"western\">The Art of the "
"Metaobject Protocol, CLASS [:initialization]</code></pre>\n"
"<p>\n"
"\tэто определенно потому, что вы сначала написали определение класса, \n"
"\tа затем добавили метакласс Mito и снова попытались вычислить определение \n"
"\tкласса.\n"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:530
msgid ""
"<p>If this happens, you must remove the class definition from the\n"
"\tcurrent package:</p>"
msgstr ""
"<p>В этом случае необходимо удалить определение класса из текущего пакета: </"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:536
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setf (find-class 'foo) nil)</code></pre>\n"
"<p>\n"
"\tor, with the Slime inspector, click on the class and find the\n"
"\târemoveâ button.</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(setf (find-class 'foo) nil)</code></pre>\n"
"<p>\n"
"\tили с помощью инспектора Slime, щелкните класс и найдите кнопку "
"«удалить»(remove).</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:540
msgid ""
"<p>More info <a href=\"https://stackoverflow.com/questions/38811931/how-to-"
"change-classs-metaclass\">here</a>.</p>"
msgstr ""
"<p>Больше информации <a href=\"https://stackoverflow.com/questions/38811931/"
"how-to-change-classs-metaclass\"> здесь</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:543
msgid "\t<h3 class=\"western\"><a name=\"migrations\"></a>Migrations</h3>"
msgstr "\t<h3 class=\"western\"><a name=\"migrations\"></a>Миграции</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:548
msgid ""
"<p>We can run database migrations manually, as shown below, or we\n"
"\tcan automatically run migrations after a change to the model\n"
"\tdefinitions. To enable automatic migrations, set\n"
"\t<code class=\"western\">mito:*auto-migration-mode*</code> to <code class="
"\"western\">t</code>.</p>"
msgstr ""
"<p>Мы можем запускать миграции базы данных вручную, как показано ниже, \n"
"\tили мы можем запускать миграции автоматически после изменения определений "
"модели. \n"
"\tЧтобы включить автоматическую миграцию, установите \n"
"\t<code class=\"western\">mito:*auto-migration-mode*</code> в\n"
"\t<code class=\"western\">t</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:552
msgid "<p>The first step is to create the tables, if needed:</p>"
msgstr "<p>Первым шагом является создание таблиц, если это необходимо: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:557
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ensure-table-exists 'user)</code></pre>\n"
"<p>\n"
"\tthen alter the tables:</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(ensure-table-exists 'user)</code></pre>\n"
"<p>\n"
"\tзатем измените таблицы: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:564
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:migrate-table 'user)</code></pre>\n"
"<p>\n"
"\tYou can check the SQL generated code with <code class=\"western"
"\">migration-expressions\n"
"\t'class</code>. For example, we create the <code class=\"western\">user</"
"code>\n"
"\ttable:</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:migrate-table 'user)</code></pre>\n"
"<p>\n"
"\tВы можете проверить сгенерированный SQL код с помощью \n"
"\t<code class=\"western\">migration-expressions 'class</code>.\n"
"\tНапример, создаем таблицу <code class=\"western\">user</code>: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:576
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(ensure-table-exists "
"'user)</code>\n"
"<code class=\"western\">;-&gt; ;; CREATE TABLE IF NOT EXISTS &quot;"
"user&quot; (</code>\n"
"<code class=\"western\">;       &quot;id&quot; BIGSERIAL NOT NULL PRIMARY "
"KEY,</code>\n"
"<code class=\"western\">;       &quot;name&quot; VARCHAR(64) NOT NULL,</"
"code>\n"
"<code class=\"western\">;       &quot;email&quot; VARCHAR(128),</code>\n"
"<code class=\"western\">;       &quot;created_at&quot; TIMESTAMP,</code>\n"
"<code class=\"western\">;       &quot;updated_at&quot; TIMESTAMP</code>\n"
"<code class=\"western\">;   ) () [0 rows] | MITO.DAO:ENSURE-TABLE-EXISTS</"
"code></pre>\n"
"<p>\n"
"\tThere are no changes from the previous user definition:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(ensure-table-exists "
"'user)</code>\n"
"<code class=\"western\">;-&gt; ;; CREATE TABLE IF NOT EXISTS &quot;"
"user&quot; (</code>\n"
"<code class=\"western\">;       &quot;id&quot; BIGSERIAL NOT NULL PRIMARY "
"KEY,</code>\n"
"<code class=\"western\">;       &quot;name&quot; VARCHAR(64) NOT NULL,</"
"code>\n"
"<code class=\"western\">;       &quot;email&quot; VARCHAR(128),</code>\n"
"<code class=\"western\">;       &quot;created_at&quot; TIMESTAMP,</code>\n"
"<code class=\"western\">;       &quot;updated_at&quot; TIMESTAMP</code>\n"
"<code class=\"western\">;   ) () [0 rows] | MITO.DAO:ENSURE-TABLE-EXISTS</"
"code></pre>\n"
"<p>\n"
"\tНет никаких изменений по сравнению с предыдущим определением пользователя:"
"</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:582
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migration-expressions "
"'user)</code>\n"
"<code class=\"western\">;=&gt; NIL</code></pre>\n"
"<p>\n"
"\tNow letâs add a unique <code class=\"western\">email</code> field:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migration-expressions "
"'user)</code>\n"
"<code class=\"western\">;=&gt; NIL</code></pre>\n"
"<p>\n"
"\tТеперь давайте добавим уникальное поле <code class=\"western\">email</"
"code>: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:590
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type (:"
"varchar 128)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code></pre>\n"
"<p>\n"
"\tThe migration will run the following code:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user ()</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">((name :col-type (:"
"varchar 64))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(email :col-type (:"
"varchar 128)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:unique-keys "
"email))</code></pre>\n"
"<p>\n"
"\tПри миграции будет выполнен следующий код: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:597
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migration-expressions "
"'user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: ALTER TABLE user ALTER "
"COLUMN email TYPE character varying(128), ALTER COLUMN email SET NOT NULL&gt;"
"</code>\n"
"<code class=\"western\">;    #&lt;SXQL-STATEMENT: CREATE UNIQUE INDEX "
"unique_user_email ON user (email)&gt;)</code></pre>\n"
"<p>\n"
"\tso letâs apply it:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migration-expressions "
"'user)</code>\n"
"<code class=\"western\">;=&gt; (#&lt;SXQL-STATEMENT: ALTER TABLE user ALTER "
"COLUMN email TYPE character varying(128), ALTER COLUMN email SET NOT NULL&gt;"
"</code>\n"
"<code class=\"western\">;    #&lt;SXQL-STATEMENT: CREATE UNIQUE INDEX "
"unique_user_email ON user (email)&gt;)</code></pre>\n"
"<p>\n"
"\tтак что давайте применим его:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:606
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migrate-table 'user)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; ALTER TABLE &quot;user&quot; ALTER COLUMN "
"&quot;email&quot; TYPE character varying(128), ALTER COLUMN &quot;"
"email&quot; SET NOT NULL () [0 rows] | MITO.MIGRATION.TABLE:MIGRATE-TABLE</"
"code>\n"
"<code class=\"western\">;   ;; CREATE UNIQUE INDEX &quot;"
"unique_user_email&quot; ON &quot;user&quot; (&quot;email&quot;) () [0 rows] "
"| MITO.MIGRATION.TABLE:MIGRATE-TABLE</code>\n"
"<code class=\"western\">;-&gt; (#&lt;SXQL-STATEMENT: ALTER TABLE user ALTER "
"COLUMN email TYPE character varying(128), ALTER COLUMN email SET NOT NULL&gt;"
"</code>\n"
"<code class=\"western\">;    #&lt;SXQL-STATEMENT: CREATE UNIQUE INDEX "
"unique_user_email ON user (email)&gt;)</code></pre><h3 class=\"western\">\n"
"\t<a name=\"queries\"></a>Queries</h3>\n"
"\t<h4 class=\"western\"><a name=\"creating-objects\"></a>Creating objects</"
"h4>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:migrate-table 'user)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; ALTER TABLE &quot;user&quot; ALTER COLUMN "
"&quot;email&quot; TYPE character varying(128), ALTER COLUMN &quot;"
"email&quot; SET NOT NULL () [0 rows] | MITO.MIGRATION.TABLE:MIGRATE-TABLE</"
"code>\n"
"<code class=\"western\">;   ;; CREATE UNIQUE INDEX &quot;"
"unique_user_email&quot; ON &quot;user&quot; (&quot;email&quot;) () [0 rows] "
"| MITO.MIGRATION.TABLE:MIGRATE-TABLE</code>\n"
"<code class=\"western\">;-&gt; (#&lt;SXQL-STATEMENT: ALTER TABLE user ALTER "
"COLUMN email TYPE character varying(128), ALTER COLUMN email SET NOT NULL&gt;"
"</code>\n"
"<code class=\"western\">;    #&lt;SXQL-STATEMENT: CREATE UNIQUE INDEX "
"unique_user_email ON user (email)&gt;)</code></pre><h3 class=\"western\">\n"
"\t<a name=\"queries\"></a>Запросы</h3>\n"
"\t<h4 class=\"western\"><a name=\"creating-objects\"></a>Создание объектов</"
"h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:608
msgid ""
"<p>We can create user objects with the regular <code class=\"western\">make-"
"instance</code>:</p>"
msgstr ""
"<p>Мы можем создавать пользовательские объекты с помощью обычного\n"
"<code class=\"western\">make-instance</code>:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:615
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defvar me</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'user :name &quot;Eitaro Fukamachi&quot; :email &quot;e.arrows@gmail."
"com&quot;))</code>\n"
"<code class=\"western\">;=&gt; USER</code></pre>\n"
"<p>\n"
"\tTo save it in DB, use <code class=\"western\">insert-dao</code>:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defvar me</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'user :name &quot;Eitaro Fukamachi&quot; :email &quot;e.arrows@gmail."
"com&quot;))</code>\n"
"<code class=\"western\">;=&gt; USER</code></pre>\n"
"<p>\n"
"\tЧтобы сохранить его в БД, используйте <code class=\"western\">insert-dao</"
"code>:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:622
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:insert-dao me)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; INSERT INTO `user` (`name`, `email`, "
"`created_at`, `updated_at`) VALUES (?, ?, ?, ?) (&quot;Eitaro "
"Fukamachi&quot;, &quot;e.arrows@gmail.com&quot;, "
"&quot;2016-02-04T19:55:16.365543Z&quot;, "
"&quot;2016-02-04T19:55:16.365543Z&quot;) [0 rows] | MITO.DAO:INSERT-DAO</"
"code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {10053C4453}&gt;</code></pre>\n"
"<p>\n"
"\tDo the two steps above at once:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:insert-dao me)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; INSERT INTO `user` (`name`, `email`, "
"`created_at`, `updated_at`) VALUES (?, ?, ?, ?) (&quot;Eitaro "
"Fukamachi&quot;, &quot;e.arrows@gmail.com&quot;, "
"&quot;2016-02-04T19:55:16.365543Z&quot;, "
"&quot;2016-02-04T19:55:16.365543Z&quot;) [0 rows] | MITO.DAO:INSERT-DAO</"
"code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {10053C4453}&gt;</code></pre>\n"
"<p>\n"
"\tТак выполняются сразу два вышеуказанных шага: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:630
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:create-dao 'user :name &quot;Eitaro Fukamachi&quot; :email &quot;e."
"arrows@gmail.com&quot;)</code></pre>\n"
"<p>\n"
"\tYou should not export the <code class=\"western\">user</code> class\n"
"\tand create objects outside of its package (it is good practice\n"
"\tanyway to keep all database-related operations in say a <code class="
"\"western\">models</code>\n"
"\tpackage and file). You should instead use a helper function:</p>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:create-dao 'user :name &quot;Eitaro Fukamachi&quot; :email &quot;e."
"arrows@gmail.com&quot;)</code></pre>\n"
"<p>\n"
"\tВы не должны экспортировать класс <code class=\"western\">user</code> и \n"
"\tсоздавать объекты вне его пакета (в любом случае рекомендуется хранить \n"
"\tвсе операции, связанные с базой данных, например, в пакете и файле \n"
"\t<code class=\"western\">models</code>). Вместо этого вы должны "
"использовать \n"
"\tвспомогательную функцию: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:639
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defun make-user (&amp;key "
"name)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'user :name name))</code></pre><h4 class=\"western\">\n"
"\t<a name=\"updating-fields\"></a>Updating fields</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(setf (slot-value me 'name) "
"&quot;nitro_idiot&quot;)</code>\n"
"<code class=\"western\">;=&gt; &quot;nitro_idiot&quot;</code></pre>\n"
"<p>\n"
"\tand save it:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defun make-user (&amp;key "
"name)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(make-instance "
"'user :name name))</code></pre><h4 class=\"western\">\n"
"\t<a name=\"updating-fields\"></a>Обновление полей</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(setf (slot-value me 'name) "
"&quot;nitro_idiot&quot;)</code>\n"
"<code class=\"western\">;=&gt; &quot;nitro_idiot&quot;</code></pre>\n"
"<p>\n"
"\tи сохраним это:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:645
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:save-dao me)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"deleting\"></a>Deleting</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:delete-dao me)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; DELETE FROM `user` WHERE (`id` = ?) (1) [0 "
"rows] | MITO.DAO:DELETE-DAO</code>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:save-dao me)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"deleting\"></a>Удаление</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:delete-dao me)</"
"code>\n"
"<code class=\"western\">;-&gt; ;; DELETE FROM `user` WHERE (`id` = ?) (1) [0 "
"rows] | MITO.DAO:DELETE-DAO</code>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:662
msgid ""
"<code class=\"western\">;; or:</code>\n"
"<code class=\"western\">(mito:delete-by-values 'user :id 1)</code>\n"
"<code class=\"western\">;-&gt; ;; DELETE FROM `user` WHERE (`id` = ?) (1) [0 "
"rows] | MITO.DAO:DELETE-DAO</code></pre><h4 class=\"western\">\n"
"\t<a name=\"get-the-primary-key-value\"></a>Get the primary key value</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:object-id me)</code>\n"
"<code class=\"western\">;=&gt; 1</code></pre><h4 class=\"western\">\n"
"\t<a name=\"count\"></a>Count</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:count-dao 'user)</"
"code>\n"
"<code class=\"western\">;=&gt; 1</code></pre><h4 class=\"western\">\n"
"\t<a name=\"find-one\"></a>Find one</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:find-dao 'user :id "
"1)</code>\n"
"<code class=\"western\">;-&gt; ;; SELECT * FROM `user` WHERE (`id` = ?) "
"LIMIT 1 (1) [1 row] | MITO.DB:RETRIEVE-BY-SQL</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {10077C6073}&gt;</code></pre>\n"
"<p>\n"
"\tSo hereâs a possibility of generic helpers to find an object by a\n"
"\tgiven key:</p>"
msgstr ""
"<code class=\"western\">;; or:</code>\n"
"<code class=\"western\">(mito:delete-by-values 'user :id 1)</code>\n"
"<code class=\"western\">;-&gt; ;; DELETE FROM `user` WHERE (`id` = ?) (1) [0 "
"rows] | MITO.DAO:DELETE-DAO</code></pre><h4 class=\"western\">\n"
"\t<a name=\"get-the-primary-key-value\"></a>Получить значение первичного "
"ключа </h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:object-id me)</code>\n"
"<code class=\"western\">;=&gt; 1</code></pre><h4 class=\"western\">\n"
"\t<a name=\"count\"></a>Подсчет</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:count-dao 'user)</"
"code>\n"
"<code class=\"western\">;=&gt; 1</code></pre><h4 class=\"western\">\n"
"\t<a name=\"find-one\"></a>Найти одного </h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito:find-dao 'user :id "
"1)</code>\n"
"<code class=\"western\">;-&gt; ;; SELECT * FROM `user` WHERE (`id` = ?) "
"LIMIT 1 (1) [1 row] | MITO.DB:RETRIEVE-BY-SQL</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {10077C6073}&gt;</code></pre>\n"
"<p>\n"
"\tИтак, вот возможность общих помощников найти объект по заданному ключу: </"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:667
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defgeneric find-user (key-"
"name key-value)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:documentation "
"&quot;Retrieves an user from the data base by one of the unique</code>\n"
"<code class=\"western\">keys.&quot;))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:670
msgid ""
"<code class=\"western\">(defmethod find-user ((key-name (eql :id)) (key-"
"value integer))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mito:find-dao "
"'user key-value))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:675
msgid ""
"<code class=\"western\">(defmethod find-user ((key-name (eql :name)) (key-"
"value string))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(first (mito:select-"
"dao 'user</code>\n"
"<code class=\"western\">                          </code><code class="
"\"western\">(sxql:where (:= :name key-value)))))</code></pre><h4 class="
"\"western\">\n"
"\t<a name=\"find-all\"></a>Find all</h4>"
msgstr ""
"<code class=\"western\">(defmethod find-user ((key-name (eql :name)) (key-"
"value string))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(first (mito:select-"
"dao 'user</code>\n"
"<code class=\"western\">                          </code><code class="
"\"western\">(sxql:where (:= :name key-value)))))</code></pre><h4 class="
"\"western\">\n"
"\t<a name=\"find-all\"></a>Найти Все</h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:677
msgid "<p>Use the macro <code class=\"western\">select-dao</code>.</p>"
msgstr "<p>Используйте макрос <code class=\"western\">select-dao</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:681
msgid "<p>Get a list of all users:</p>"
msgstr "<p>Получим список всех пользователей:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:687
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:select-dao 'user)</"
"code>\n"
"<code class=\"western\">;(#&lt;USER {10077C6073}&gt;)</code>\n"
"<code class=\"western\">;#&lt;SXQL-STATEMENT: SELECT * FROM user&gt;</code></"
"pre><h4 class=\"western\">\n"
"\t<a name=\"find-by-relationship\"></a>Find by relationship</h4>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:select-dao 'user)</"
"code>\n"
"<code class=\"western\">;(#&lt;USER {10077C6073}&gt;)</code>\n"
"<code class=\"western\">;#&lt;SXQL-STATEMENT: SELECT * FROM user&gt;</code></"
"pre><h4 class=\"western\">\n"
"\t<a name=\"find-by-relationship\"></a>Найти по отношению</h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:689
msgid "<p>As seen above:</p>"
msgstr "<p>Как видно выше: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:693
msgid ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:find-dao 'tweet :user *user*)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"custom-queries\"></a>Custom queries</h4>"
msgstr ""
"\t<pre class=\"western\" style=\"margin-bottom: 0.5cm\"><code class=\"western"
"\">(mito:find-dao 'tweet :user *user*)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"custom-queries\"></a>Пользовательские запросы</h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:697
msgid ""
"<p>It is with <code class=\"western\">select-dao</code> that you can\n"
"\twrite more precise queries by giving it <a href=\"https://github.com/"
"fukamachi/sxql\">SxQL</a>\n"
"\tstatements.</p>"
msgstr ""
"<p>Именно с помощью <code class=\"western\">select-dao</code> вы можете "
"писать \n"
"\tболее точные запросы, задавая ему операторы \n"
"\t<a href=\"https://github.com/fukamachi/sxql\">SxQL</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:701
msgid "<p>Example:</p>"
msgstr "<p>Пример: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:707
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(select-dao 'tweet</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(where (:like :"
"status &quot;%Japan%&quot;)))</code></pre>\n"
"<p>\n"
"\tanother:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(select-dao 'tweet</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(where (:like :"
"status &quot;%Japan%&quot;)))</code></pre>\n"
"<p>\n"
"\tДругой:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:716
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(select (:id :name :sex)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(from (:as :person :"
"p))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(where (:and (:&gt;"
"= :age 18)</code>\n"
"<code class=\"western\">               </code><code class=\"western\">(:"
"&lt; :age 65)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(order-by (:desc :"
"age)))</code></pre>\n"
"<p>\n"
"\tYou can compose your queries with regular Lisp code:</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(select (:id :name :sex)</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(from (:as :person :"
"p))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(where (:and (:&gt;"
"= :age 18)</code>\n"
"<code class=\"western\">               </code><code class=\"western\">(:"
"&lt; :age 65)))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(order-by (:desc :"
"age)))</code></pre>\n"
"<p>\n"
"\tВы можете составлять свои запросы с помощью обычного кода Lisp:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:726
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defun find-tweets (&amp;"
"key user)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(select-dao 'tweet</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(when user</"
"code>\n"
"<code class=\"western\">      </code><code class=\"western\">(where (:= :"
"user user)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(order-by :object-"
"created)))</code></pre>\n"
"<p>\n"
"\t<code class=\"western\">select-dao</code> is a macro that expands to\n"
"\tthe right thingÂ©.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defun find-tweets (&amp;"
"key user)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(select-dao 'tweet</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(when user</"
"code>\n"
"<code class=\"western\">      </code><code class=\"western\">(where (:= :"
"user user)))</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(order-by :object-"
"created)))</code></pre>\n"
"<p>\n"
"\t<code class=\"western\">select-dao</code> - это макрос, который "
"расширяется \n"
"\tдо нужной вещи .</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:733
msgid ""
"<p><strong>Note:</strong> if you didn't <code class=\"western\">use</code>\n"
"\tSXQL, then write <code class=\"western\">(sxql:where â¦)</code> and\n"
"\t<code class=\"western\">(sxql:order-by â¦)</code>. \n"
"\t</p>"
msgstr ""
"<p><strong>Примечание:</strong> если вы не <code class=\"western"
"\">использовали</code> SXQL, \n"
"\tнапишите <code class=\"western\">(sxql:where …)</code> и\n"
"\t<code class=\"western\">(sxql:order-by …)</code>. \n"
"\t</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:738
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:738"
msgid ""
"<p><br/>\n"
"<br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:740
msgid "\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:744
msgid "<p>You can compose your queries further with the backquote syntax.</p>"
msgstr ""
"<p>Вы можете составить свои запросы с помощью синтаксиса обратных кавычек.</"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:753
msgid ""
"<p>Imagine you receive a <code class=\"western\">query</code> string,\n"
"\tmaybe composed of space-separated words, and you want to search for\n"
"\tbooks that have either one of these words in their title or in their\n"
"\tauthorâs name. Searching for âbob adventureâ would return a\n"
"\tbook that has âadventureâ in its title and âbobâ in its\n"
"\tauthor name, or both in the title.</p>"
msgstr ""
"<p>Представьте, что вы получаете строку  <code class=\"western\">query</"
"code>(запроса), \n"
"\tкоторая может состоять из слов, разделенных пробелами, и хотите найти "
"книги, \n"
"\tв названии которых есть одно из этих слов или имя автора. Поиск по "
"запросу \n"
"\t«bob adventure» вернет книгу, в названии которой есть «adventure/"
"приключения» \n"
"\tи «bob» в имени автора или и то, и другое в названии.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:758
msgid ""
"<p>For the example sake, an author is a string, not a link to\n"
"\tanother table:</p>"
msgstr ""
"<p>Для примера, автор - это строка, а не ссылка на другую таблицу: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:766
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable book ()</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">((title :col-type "
"(:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(author :col-"
"type (:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(ean :col-type "
"(or (:varchar 128) :null))))</code></pre>\n"
"<p>\n"
"\tYou want to add a clause that searches on both fields for each word.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable book ()</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">((title :col-type "
"(:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(author :col-"
"type (:varchar 128))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(ean :col-type "
"(or (:varchar 128) :null))))</code></pre>\n"
"<p>\n"
"\tВы хотите добавить предложение, которое ищет каждое слово в обоих полях.</"
"p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:782
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defun find-books (&amp;key "
"query (order :desc))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Return a list "
"of books. If a query string is given, search on both the title and the "
"author fields.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mito:select-dao "
"'book</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(when (str:non-"
"blank-string-p query)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">(sxql:where</"
"code>\n"
"<code class=\"western\">       </code><code class=\"western\">`(:and</code>\n"
"<code class=\"western\">         </code><code class=\"western\">,@(loop for "
"word in (str:words query)</code>\n"
"<code class=\"western\">              </code><code class=\"western\">:"
"collect `(:or (:like :title ,(str:concat &quot;%&quot; word &quot;%&quot;))</"
"code>\n"
"<code class=\"western\">                             </code><code class="
"\"western\">(:like :authors ,(str:concat &quot;%&quot; word &quot;"
"%&quot;)))))))</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(sxql:order-by "
"`(,order :created-at))))</code></pre>\n"
"<p>\n"
"\tBy the way, we are still using a <code class=\"western\">LIKE</code>\n"
"\tstatement, but with a non-small dataset youâll want to use your\n"
"\tdatabaseâs full text search engine.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(defun find-books (&amp;key "
"query (order :desc))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Return a list "
"of books. If a query string is given, search on both the title and the "
"author fields.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(mito:select-dao "
"'book</code>\n"
"<code class=\"western\">    </code><code class=\"western\">(when (str:non-"
"blank-string-p query)</code>\n"
"<code class=\"western\">      </code><code class=\"western\">(sxql:where</"
"code>\n"
"<code class=\"western\">       </code><code class=\"western\">`(:and</code>\n"
"<code class=\"western\">         </code><code class=\"western\">,@(loop for "
"word in (str:words query)</code>\n"
"<code class=\"western\">              </code><code class=\"western\">:"
"collect `(:or (:like :title ,(str:concat &quot;%&quot; word &quot;%&quot;))</"
"code>\n"
"<code class=\"western\">                             </code><code class="
"\"western\">(:like :authors ,(str:concat &quot;%&quot; word &quot;"
"%&quot;)))))))</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(sxql:order-by "
"`(,order :created-at))))</code></pre>\n"
"<p>\n"
"\tМежду прочим, мы все еще используем оператор <code class=\"western\">LIKE</"
"code>, \n"
"\tно с не-маленьким набором данных вы захотите использовать систему "
"полнотекстового \n"
"\tпоиска своей базы данных</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:785
msgid "\t<h4 class=\"western\"><a name=\"clauses\"></a>Clauses</h4>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"clauses\"></a>Предложения(Clauses)</h4>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:788
msgid ""
"<p>See the <a href=\"https://github.com/fukamachi/sxql#sql-clauses\">SxQL\n"
"\tdocumentation</a>.</p>"
msgstr ""
"<p>См. <a href=\"https://github.com/fukamachi/sxql#sql-clauses\">\n"
"\tДокументацию по SxQL</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:792
msgid "<p>Examples:</p>"
msgstr "<p>Примеры:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:802
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(select-dao 'foo</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(where (:and (:"
"&gt; :age 20) (:&lt;= :age 65))))</code>\n"
"<code class=\"western\">(order-by :age (:desc :id))</code>\n"
"<code class=\"western\">(group-by :sex)</code>\n"
"<code class=\"western\">(having (:&gt;= (:sum :hoge) 88))</code>\n"
"<code class=\"western\">(limit 0 10)</code></pre>\n"
"<p>\n"
"\tand <code class=\"western\">join</code>s, etc.</p>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(select-dao 'foo</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(where (:and (:"
"&gt; :age 20) (:&lt;= :age 65))))</code>\n"
"<code class=\"western\">(order-by :age (:desc :id))</code>\n"
"<code class=\"western\">(group-by :sex)</code>\n"
"<code class=\"western\">(having (:&gt;= (:sum :hoge) 88))</code>\n"
"<code class=\"western\">(limit 0 10)</code></pre>\n"
"<p>\n"
"\tи соединяем(<code class=\"western\">join</code>) и т. д.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:819
msgid ""
"\t<h4 class=\"western\"><a name=\"operators\"></a>Operators</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">:not</code>\n"
"<code class=\"western\">:is-null, :not-null</code>\n"
"<code class=\"western\">:asc, :desc</code>\n"
"<code class=\"western\">:distinct</code>\n"
"<code class=\"western\">:=, :!=</code>\n"
"<code class=\"western\">:&lt;, :&gt;, :&lt;= :&gt;=</code>\n"
"<code class=\"western\">:a&lt;, :a&gt;</code>\n"
"<code class=\"western\">:as</code>\n"
"<code class=\"western\">:in, :not-in</code>\n"
"<code class=\"western\">:like</code>\n"
"<code class=\"western\">:and, :or</code>\n"
"<code class=\"western\">:+, :-, :* :/ :%</code>\n"
"<code class=\"western\">:raw</code></pre><h3 class=\"western\">\n"
"\t<a name=\"triggers\"></a>Triggers</h3>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"operators\"></a>Операторы</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">:not</code>\n"
"<code class=\"western\">:is-null, :not-null</code>\n"
"<code class=\"western\">:asc, :desc</code>\n"
"<code class=\"western\">:distinct</code>\n"
"<code class=\"western\">:=, :!=</code>\n"
"<code class=\"western\">:&lt;, :&gt;, :&lt;= :&gt;=</code>\n"
"<code class=\"western\">:a&lt;, :a&gt;</code>\n"
"<code class=\"western\">:as</code>\n"
"<code class=\"western\">:in, :not-in</code>\n"
"<code class=\"western\">:like</code>\n"
"<code class=\"western\">:and, :or</code>\n"
"<code class=\"western\">:+, :-, :* :/ :%</code>\n"
"<code class=\"western\">:raw</code></pre><h3 class=\"western\">\n"
"\t<a name=\"triggers\"></a>Триггеры</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:826
msgid ""
"<p>Since <code class=\"western\">insert-dao</code>, <code class=\"western"
"\">update-dao</code>\n"
"\tand <code class=\"western\">delete-dao</code> are defined as generic\n"
"\tfunctions, you can define <code class=\"western\">:before</code>,\n"
"\t<code class=\"western\">:after</code> or <code class=\"western\">:around</"
"code>\n"
"\tmethods to those, like regular <a href=\"https://lispcookbook.github.io/cl-"
"cookbook/clos.html#qualifiers-and-method-combination\">method\n"
"\tcombination</a>.</p>"
msgstr ""
"<p>Поскольку <code class=\"western\">insert-dao</code>, <code class=\"western"
"\">update-dao</code>\n"
"\tи <code class=\"western\">delete-dao</code> определены как обобщенные "
"функции, \n"
"\tвы можете определить для них методы <code class=\"western\">:before</"
"code>,\n"
"\t<code class=\"western\">:after</code> или <code class=\"western\">:around</"
"code>, \n"
"\tкак и обычную <a href=\"https://lispcookbook.github.io/cl-cookbook/clos."
"html#qualifiers-and-method-combination\">комбинацию методов</a>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:830
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defmethod mito:insert-dao :"
"before ((object user))</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(format t &quot;"
"~&amp;Adding ~S...~%&quot; (user-name object)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:836
msgid ""
"<code class=\"western\">(mito:create-dao 'user :name &quot;Eitaro "
"Fukamachi&quot; :email &quot;e.arrows@gmail.com&quot;)</code>\n"
"<code class=\"western\">;-&gt; Adding &quot;Eitaro Fukamachi&quot;...</"
"code>\n"
"<code class=\"western\">;   ;; INSERT INTO &quot;user&quot; (&quot;"
"name&quot;, &quot;email&quot;, &quot;created_at&quot;, &quot;"
"updated_at&quot;) VALUES (?, ?, ?, ?) (&quot;Eitaro Fukamachi&quot;, &quot;e."
"arrows@gmail.com&quot;, &quot;2016-02-16 21:13:47&quot;, &quot;2016-02-16 "
"21:13:47&quot;) [0 rows] | MITO.DAO:INSERT-DAO</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {100835FB33}&gt;</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"inflationdeflation\"></a>Inflation/Deflation</h3>"
msgstr ""
"<code class=\"western\">(mito:create-dao 'user :name &quot;Eitaro "
"Fukamachi&quot; :email &quot;e.arrows@gmail.com&quot;)</code>\n"
"<code class=\"western\">;-&gt; Adding &quot;Eitaro Fukamachi&quot;...</"
"code>\n"
"<code class=\"western\">;   ;; INSERT INTO &quot;user&quot; (&quot;"
"name&quot;, &quot;email&quot;, &quot;created_at&quot;, &quot;"
"updated_at&quot;) VALUES (?, ?, ?, ?) (&quot;Eitaro Fukamachi&quot;, &quot;e."
"arrows@gmail.com&quot;, &quot;2016-02-16 21:13:47&quot;, &quot;2016-02-16 "
"21:13:47&quot;) [0 rows] | MITO.DAO:INSERT-DAO</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {100835FB33}&gt;</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"inflationdeflation\"></a>Инфляция(Inflation)/"
"дефляция(Deflation)</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:839
msgid ""
"<p>Inflation/Deflation is a function to convert values between Mito\n"
"\tand RDBMS.</p>"
msgstr ""
"<p> Инфляция/дефляция - это функция для преобразования значений \n"
"\tмежду Mito и СУБД. </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:850
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-report "
"()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((title :col-type (:"
"varchar 100))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(body :col-type :"
"text</code>\n"
"<code class=\"western\">         </code><code class=\"western\">:initform "
"&quot;&quot;)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(reported-at :col-"
"type :timestamp</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"initform (local-time:now)</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"inflate #'local-time:universal-to-timestamp</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"deflate #'local-time:timestamp-to-universal)))</code></pre><h3 class="
"\"western\">\n"
"\t<a name=\"eager-loading\"></a>Eager loading</h3>"
msgstr ""
"\t<pre class=\"western\"><code class=\"western\">(mito:deftable user-report "
"()</code>\n"
"<code class=\"western\">  </code><code class=\"western\">((title :col-type (:"
"varchar 100))</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(body :col-type :"
"text</code>\n"
"<code class=\"western\">         </code><code class=\"western\">:initform "
"&quot;&quot;)</code>\n"
"<code class=\"western\">   </code><code class=\"western\">(reported-at :col-"
"type :timestamp</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"initform (local-time:now)</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"inflate #'local-time:universal-to-timestamp</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"deflate #'local-time:timestamp-to-universal)))</code></pre><h3 class="
"\"western\">\n"
"\t<a name=\"eager-loading\"></a>Нетерпеливая/энергичная загрузка</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:853
msgid ""
"<p>One of the pains in the neck to use ORMs is the âN+1 queryâ\n"
"\tproblem.</p>"
msgstr ""
"<p>Одна из головных болей при использовании ORM - это проблема \n"
"\t«N + 1 запроса». </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:856
msgid "\t<pre class=\"western\"><code class=\"western\">;; BAD EXAMPLE</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:858
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:858"
msgid "<code class=\"western\">(use-package '(:mito :sxql))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:862
msgid ""
"<code class=\"western\">(defvar *tweets-contain-japan*</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(select-dao 'tweet</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(where (:like :"
"status &quot;%Japan%&quot;))))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:870
msgid ""
"<code class=\"western\">;; Getting names of tweeted users.</code>\n"
"<code class=\"western\">(mapcar (lambda (tweet)</code>\n"
"<code class=\"western\">          </code><code class=\"western\">(user-name "
"(tweet-user tweet)))</code>\n"
"<code class=\"western\">        </code><code class=\"western\">*tweets-"
"contain-japan*)</code></pre>\n"
"<p>\n"
"\tThis example sends a query to retrieve a user like âSELECT * FROM\n"
"\tuser WHERE id = ?â at each iteration.</p>"
msgstr ""
"<code class=\"western\">;; Getting names of tweeted users.</code>\n"
"<code class=\"western\">(mapcar (lambda (tweet)</code>\n"
"<code class=\"western\">          </code><code class=\"western\">(user-name "
"(tweet-user tweet)))</code>\n"
"<code class=\"western\">        </code><code class=\"western\">*tweets-"
"contain-japan*)</code></pre>\n"
"<p>\n"
"\tВ этом примере отправляется запрос на получение user(пользователя)\n"
"\t типа «SELECT * FROM user WHERE id =?» на каждой итерации.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:876
msgid ""
"<p>To prevent this performance issue, add <code class=\"western\">includes</"
"code>\n"
"\tto the above query which only sends a single WHERE IN query instead\n"
"\tof N queries:</p>"
msgstr ""
"<p>Чтобы предотвратить эту проблему с производительностью, \n"
"\tдобавьте <code class=\"western\">includes</code> в приведенный выше "
"запрос, \n"
"\tкоторый отправит только один запрос WHERE IN вместо N запросов: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:879
msgid ""
"\t<pre class=\"western\"><code class=\"western\">;; GOOD EXAMPLE with eager "
"loading</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:881
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:881"
msgid "<code class=\"western\">(use-package '(:mito :sxql))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:889
msgid ""
"<code class=\"western\">(defvar *tweets-contain-japan*</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(select-dao 'tweet</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(includes 'user)</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(where (:like :"
"status &quot;%Japan%&quot;))))</code>\n"
"<code class=\"western\">;-&gt; ;; SELECT * FROM `tweet` WHERE (`status` "
"LIKE ?) (&quot;%Japan%&quot;) [3 row] | MITO.DB:RETRIEVE-BY-SQL</code>\n"
"<code class=\"western\">;-&gt; ;; SELECT * FROM `user` WHERE (`id` IN "
"(?, ?, ?)) (1, 3, 12) [3 row] | MITO.DB:RETRIEVE-BY-SQL</code>\n"
"<code class=\"western\">;=&gt; (#&lt;TWEET {1003513EC3}&gt; #&lt;TWEET "
"{1007BABEF3}&gt; #&lt;TWEET {1007BB9D63}&gt;)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:897
msgid ""
"<code class=\"western\">;; No additional SQLs will be executed.</code>\n"
"<code class=\"western\">(tweet-user (first *))</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {100361E813}&gt;</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"schema-versioning\"></a>Schema versioning</h3>\n"
"\t<pre class=\"western\"><code class=\"western\">$ ros install mito</code>\n"
"<code class=\"western\">$ mito</code>\n"
"<code class=\"western\">Usage: mito command [option...]</code>"
msgstr ""
"<code class=\"western\">;; No additional SQLs will be executed.</code>\n"
"<code class=\"western\">(tweet-user (first *))</code>\n"
"<code class=\"western\">;=&gt; #&lt;USER {100361E813}&gt;</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"schema-versioning\"></a>Управление версиями схемы </h3>\n"
"\t<pre class=\"western\"><code class=\"western\">$ ros install mito</code>\n"
"<code class=\"western\">$ mito</code>\n"
"<code class=\"western\">Usage: mito command [option...]</code>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:901
msgid ""
"<code class=\"western\">Commands:</code>\n"
"<code class=\"western\">    </code><code class=\"western\">generate-"
"migrations</code>\n"
"<code class=\"western\">    </code><code class=\"western\">migrate</code>"
msgstr ""
"<code class=\"western\">Команды:</code>\n"
"<code class=\"western\">    </code><code class=\"western\">generate-"
"migrations</code>\n"
"<code class=\"western\">    </code><code class=\"western\">migrate</code>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:911
msgid ""
"<code class=\"western\">Options:</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-t, --type DRIVER-"
"TYPE          DBI driver type (one of &quot;mysql&quot;, &quot;"
"postgres&quot; or &quot;sqlite3&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-d, --database "
"DATABASE-NAME    Database name to use</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-u, --username "
"USERNAME         Username for RDBMS</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-p, --password "
"PASSWORD         Password for RDBMS</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-s, --system "
"SYSTEM             ASDF system to load (several -s's allowed)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-D, --directory "
"DIRECTORY       Directory path to keep migration SQL files (default: &quot;/"
"Users/nitro_idiot/Programs/lib/mito/db/&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">--dry-"
"run                       List SQL expressions to migrate</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"introspection\"></a>Introspection</h3>"
msgstr ""
"<code class=\"western\">Опции:</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-t, --type DRIVER-"
"TYPE          DBI driver type (one of &quot;mysql&quot;, &quot;"
"postgres&quot; or &quot;sqlite3&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-d, --database "
"DATABASE-NAME    Database name to use</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-u, --username "
"USERNAME         Username for RDBMS</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-p, --password "
"PASSWORD         Password for RDBMS</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-s, --system "
"SYSTEM             ASDF system to load (several -s's allowed)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">-D, --directory "
"DIRECTORY       Directory path to keep migration SQL files (default: &quot;/"
"Users/nitro_idiot/Programs/lib/mito/db/&quot;)</code>\n"
"<code class=\"western\">    </code><code class=\"western\">--dry-"
"run                       List SQL expressions to migrate</code></pre><h3 "
"class=\"western\">\n"
"\t<a name=\"introspection\"></a>Самоанализ(Introspection)</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:913
msgid "<p>Mito provides some functions for introspection.</p>"
msgstr "<p>Mito предоставляет несколько функций для самоанализа.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:918
msgid ""
"<p>We can access the information of <strong>columns</strong> with\n"
"\tthe functions in <code class=\"western\">(mito.class.column:...)</code>:</"
"p>"
msgstr ""
"<p>Мы можем получить доступ к информации о <strong>columns</"
"strong>(столбцах)\n"
"\t с помощью функций в <code class=\"western\">(mito.class.column:...)</"
"code>:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:925
msgid ""
"\t<ul>\n"
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><code class=\"western\">table-column-"
"[class,\n"
"\t\tname, info, not-null-p,...]</code> \n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:928
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:928"
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:931
msgid ""
"<p><code class=\"western\">primary-key-p</code> \n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:934
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:934"
msgid "\t</ul>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:937
msgid ""
"<p>and likewise for <strong>tables</strong> with\n"
"\t<code class=\"western\">(mito.class.table:...)</code>.</p>"
msgstr ""
"<p>и то же самое для таблиц с помощью\n"
"\t<code class=\"western\">(mito.class.table:...)</code>.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:941
msgid "<p>Given we get a list of slots of our class:</p>"
msgstr "<p>Учитывая, что мы получаем список слотов нашего класса: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:944
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(ql:quickload &quot;closer-"
"mop&quot;)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:948
msgid ""
"<code class=\"western\">(closer-mop:class-direct-slots (find-class 'user))</"
"code>\n"
"<code class=\"western\">;; (#&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"NAME&gt;</code>\n"
"<code class=\"western\">;;  #&lt;MITO.DAO.COLUMN:DAO-TABLE-COLUMN-CLASS "
"EMAIL&gt;)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:952
msgid ""
"<code class=\"western\">(defparameter user-slots *)</code></pre>\n"
"<p>\n"
"\tWe can answer the following questions:</p>"
msgstr ""
"<code class=\"western\">(defparameter user-slots *)</code></pre>\n"
"<p>\n"
"\tМы можем ответить на следующие вопросы:</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:966
msgid ""
"\t<h4 class=\"western\"><a name=\"what-is-the-type-of-this-column-\"></"
"a>What\n"
"\tis the type of this column ?</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito.class.column:table-"
"column-type (first user-slots))</code>\n"
"<code class=\"western\">;; (:VARCHAR 64)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"is-this-column-nullable-\"></a>Is this column nullable ?</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito.class.column:table-"
"column-not-null-p</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(first user-"
"slots))</code>\n"
"<code class=\"western\">;; T</code>\n"
"<code class=\"western\">(mito.class.column:table-column-not-null-p</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(second user-"
"slots))</code>\n"
"<code class=\"western\">;; NIL</code></pre><h3 class=\"western\">\n"
"\t<a name=\"testing\"></a>Testing</h3>"
msgstr ""
"\t<h4 class=\"western\"><a name=\"what-is-the-type-of-this-column-\"></"
"a>Какого типа эта\n"
"\tколонка(column) ?</h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito.class.column:table-"
"column-type (first user-slots))</code>\n"
"<code class=\"western\">;; (:VARCHAR 64)</code></pre><h4 class=\"western\">\n"
"\t<a name=\"is-this-column-nullable-\"></a>Допускается ли в этом столбце "
"NULL? </h4>\n"
"\t<pre class=\"western\"><code class=\"western\">(mito.class.column:table-"
"column-not-null-p</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(first user-"
"slots))</code>\n"
"<code class=\"western\">;; T</code>\n"
"<code class=\"western\">(mito.class.column:table-column-not-null-p</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(second user-"
"slots))</code>\n"
"<code class=\"western\">;; NIL</code></pre><h3 class=\"western\">\n"
"\t<a name=\"testing\"></a>Тестирование</h3>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:969
msgid ""
"<p>We donât want to test DB operations against the production one.\n"
"\tWe need to create a temporary DB before each test.</p>"
msgstr ""
"<p>Мы не хотим проверять операции с БД на производственной БД. Нам нужно \n"
"\tсоздавать временную базу данных перед каждым тестом.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:975
msgid ""
"<p>The macro below creates a temporary DB with a random name,\n"
"\tcreates the tables, runs the code and connects back to the original\n"
"\tDB connection.</p>"
msgstr ""
"<p>Приведенный ниже макрос создает временную базу данных со случайным "
"именем, \n"
"\tсоздает таблицы, запускает код и подключается обратно к исходному "
"подключению \n"
"\tк базе данных.</p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:986
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(defpackage my-test.utils</"
"code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:use :cl)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:import-from :my."
"models</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"*db*</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:*db-"
"name*</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"connect</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"ensure-tables-exist</code>\n"
"<code class=\"western\">                </code><code class=\"western\">:"
"migrate-all)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(:export :with-"
"empty-db))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:988
msgid "<code class=\"western\">(in-package my-test.utils)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:995
msgid ""
"<code class=\"western\">(defun random-string (length)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">;; thanks 40ants/"
"hacrm.</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(let ((chars &quot;"
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;))</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(coerce (loop "
"repeat length</code>\n"
"<code class=\"western\">                  </code><code class=\"western"
"\">collect (aref chars (random (length chars))))</code>\n"
"<code class=\"western\">            </code><code class=\"western"
"\">'string)))</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1015
msgid ""
"<code class=\"western\">(defmacro with-empty-db (&amp;body body)</code>\n"
"<code class=\"western\">  </code><code class=\"western\">&quot;Run `body` "
"with a new temporary DB.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">`(let* ((*random-"
"state* (make-random-state t))</code>\n"
"<code class=\"western\">          </code><code class=\"western\">(prefix "
"(concatenate 'string</code>\n"
"<code class=\"western\">                               </code><code class="
"\"western\">(random-string 8)</code>\n"
"<code class=\"western\">                               </code><code class="
"\"western\">&quot;/&quot;))</code>\n"
"<code class=\"western\">          </code><code class=\"western\">;; Save our "
"current DB connection.</code>\n"
"<code class=\"western\">          </code><code class=\"western\">(connection "
"mito:*connection*))</code>\n"
"<code class=\"western\">     </code><code class=\"western\">(uiop:with-"
"temporary-file (:pathname name :prefix prefix)</code>\n"
"<code class=\"western\">       </code><code class=\"western\">;; Bind our "
"*db-name* to a new name, so as to create a new DB.</code>\n"
"<code class=\"western\">       </code><code class=\"western\">(let* ((*db-"
"name* name))</code>\n"
"<code class=\"western\">         </code><code class=\"western\">;; Always re-"
"connect to our real DB even in case of error in body.</code>\n"
"<code class=\"western\">         </code><code class=\"western\">(unwind-"
"protect</code>\n"
"<code class=\"western\">           </code><code class=\"western\">(progn</"
"code>\n"
"<code class=\"western\">             </code><code class=\"western\">;; our "
"functions to connect to the DB, create the tables and run the migrations.</"
"code>\n"
"<code class=\"western\">             </code><code class=\"western"
"\">(connect)</code>\n"
"<code class=\"western\">             </code><code class=\"western\">(ensure-"
"tables-exist)</code>\n"
"<code class=\"western\">             </code><code class=\"western\">(migrate-"
"all)</code>\n"
"<code class=\"western\">             </code><code class=\"western\">,@body)</"
"code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1019
msgid ""
"<code class=\"western\">           </code><code class=\"western\">(setf mito:"
"*connection* connection))))))</code></pre>\n"
"<p>\n"
"\tUse it like this:</p>"
msgstr ""
"<code class=\"western\">           </code><code class=\"western\">(setf mito:"
"*connection* connection))))))</code></pre>\n"
"<p>\n"
"\tИспользуйте это так: </p>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1025
msgid ""
"\t<pre class=\"western\"><code class=\"western\">(prove:subtest &quot;"
"Creation in a temporary DB.&quot;</code>\n"
"<code class=\"western\">  </code><code class=\"western\">(with-empty-db</"
"code>\n"
"<code class=\"western\">    </code><code class=\"western\">(let ((user (make-"
"user :name &quot;Cookbook&quot;)))</code>\n"
"<code class=\"western\">      </code><code class=\"western\">(save-user "
"user)</code>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1042
msgid ""
"<code class=\"western\">      </code><code class=\"western\">(prove:is (name "
"user)</code>\n"
"<code class=\"western\">                </code><code class=\"western\">&quot;"
"Cookbook&quot;</code>\n"
"<code class=\"western\">                </code><code class=\"western\">&quot;"
"Test username in a temp DB.&quot;))))</code>\n"
"<code class=\"western\">;; Creation in a temporary DB</code>\n"
"<code class=\"western\">;;  CREATE TABLE &quot;user&quot; (</code>\n"
"<code class=\"western\">;;       id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;;       name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;;       email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;;       created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;;       updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;;       UNIQUE (email)</code>\n"
"<code class=\"western\">;; ) () [0 rows] | MITO.DB:EXECUTE-SQL</code>\n"
"<code class=\"western\">;; â Test username in a temp DB.</code></pre><h2 "
"class=\"western\">\n"
"\t<a name=\"see-also\"></a>See also</h2>\n"
"\t<ul>\n"
"\t\t<li/>"
msgstr ""
"<code class=\"western\">      </code><code class=\"western\">(prove:is (name "
"user)</code>\n"
"<code class=\"western\">                </code><code class=\"western\">&quot;"
"Cookbook&quot;</code>\n"
"<code class=\"western\">                </code><code class=\"western\">&quot;"
"Test username in a temp DB.&quot;))))</code>\n"
"<code class=\"western\">;; Creation in a temporary DB</code>\n"
"<code class=\"western\">;;  CREATE TABLE &quot;user&quot; (</code>\n"
"<code class=\"western\">;;       id BIGSERIAL NOT NULL PRIMARY KEY,</code>\n"
"<code class=\"western\">;;       name VARCHAR(64) NOT NULL,</code>\n"
"<code class=\"western\">;;       email VARCHAR(128) NOT NULL,</code>\n"
"<code class=\"western\">;;       created_at TIMESTAMP,</code>\n"
"<code class=\"western\">;;       updated_at TIMESTAMP,</code>\n"
"<code class=\"western\">;;       UNIQUE (email)</code>\n"
"<code class=\"western\">;; ) () [0 rows] | MITO.DB:EXECUTE-SQL</code>\n"
"<code class=\"western\">;; â Test username in a temp DB.</code></pre><h2 "
"class=\"western\">\n"
"\t<a name=\"see-also\"></a>Смотрите также </h2>\n"
"\t<ul>\n"
"\t\t<li/>"

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1045
msgid ""
"<p><a href=\"https://sites.google.com/site/sabraonthehill/postmodern-"
"examples/exploring-a-database\">exploring\n"
"\t\tan existing (PostgreSQL) database with postmodern</a></p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1050
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://github.com/fukamachi/mito-"
"attachment\">mito-attachment</a>\n"
"\t\t\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1055
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://github.com/fukamachi/mito-"
"auth\">mito-auth</a>\n"
"\t\t\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1061
msgid ""
"\t\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a href=\"https://github.com/fukamachi/can/"
"\">can</a>\n"
"\t\ta role-based access right control library \n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1064
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1064"
msgid "\t\t<li/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1068
msgid ""
"<p>an advanced <a href=\"https://lispcookbook.github.io/cl-cookbook/drafts/"
"defmodel.lisp.html\">âdefmodelâ\n"
"\t\tmacro</a>. \n"
"\t\t</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1073
msgid ""
"\t</ul>\n"
"</div>\n"
"<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1075
msgctxt "in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1075"
msgid "</p>"
msgstr ""

#: in_ed/lisp-journey_gitlab_io/models-and-databases-mito-sxql.html:1078
msgid ""
"</body>\n"
"</html>"
msgstr ""
