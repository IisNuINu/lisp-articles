#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-11 10:44+0300\n"
"PO-Revision-Date: 2021-08-11 17:00+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:22
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:21:20.399259544\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:22:28.619740215\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"7833\"></a>A gentle introduction to\n"
"Compile-Time Computing â Part 2</h1>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-11T10:21:20.399259544\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-11T10:22:28.619740215\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\ta:link { so-language: zxx }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\"><a name=\"7833\"></a>Нежное введение в вычисления во "
"время компиляции - Часть 2 </h1>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:29
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?source=post_page-----"
"cb0a46f6cfe8--------------------------------\">\n"
"  <font color=\"#000080\">\n"
"    <img src=\"a-gentle-introduction-to-compile-time-computing-"
"part-2_html_39aaac8f8c35ff7a.jpg\" name=\"Image1\" alt=\"Martin Cracauer\" "
"align=\"bottom\" width=\"28\" height=\"28\" border=\"1\"/>\n"
"  </font>\n"
"</a>\n"
"</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:34
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer?source=post_page-----"
"cb0a46f6cfe8--------------------------------\">Martin\n"
"Cracauer</a></p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:39
msgid ""
"<p><a href=\"https://medium.com/@MartinCracauer/a-gentle-introduction-to-"
"compile-time-computing-part-2-cb0a46f6cfe8?source=post_page-----"
"cb0a46f6cfe8--------------------------------\">Aug\n"
"30, 2017Â·7 min read</a></p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:43
msgid ""
"<p><a name=\"71e0\"></a>So what do you use compile-time computing for?</p>"
msgstr ""
"<p><a name=\"71e0\"></a>Итак, для чего вы используете вычисления во время "
"компиляции? </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:47
msgid ""
"<p><a name=\"5103\"></a>Over time this blog will cover these examples:</p>"
msgstr ""
"<p><a name=\"5103\"></a>Со временем в этом блоге будут рассмотрены следующие "
"примеры:</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:58
msgid ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"263c\"></a>you want to\n"
"\thave a structure with multiple fields. There will be member\n"
"\tfunctions for arithmetic (+, -, *, /) which should be applied to all\n"
"\tfields. How do you make sure that all the fields are covered for all\n"
"\toperators? Do you want to write all these methods by hand, hoping\n"
"\tyou never forget a field, and neither do the people who subclass\n"
"\tlater?</p>"
msgstr ""
"<ol>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"263c\"></a>вы хотите иметь "
"структуру с несколькими полями. \n"
"\tБудут функции-члены для арифметики (+, -, *, /), которые должны "
"применяться ко всем полям. \n"
"\tКак убедиться, что все поля заполнены для всех операторов? \n"
"\tВы хотите написать все эти методы вручную, надеясь, что вы никогда не "
"забудете поле, \n"
"\tкак и люди, которые создают подклассы позже? </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:72
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"2bfc\"></a>code\n"
"\tliterals, letâs say string-based regular expressions. Do you want\n"
"\tto compile them at runtime, at startup? Why? This will take\n"
"\tunnecessary extra time, if they are known at compile time. But they\n"
"\tmight not be known at compile time. In Lisp you write a macro that\n"
"\tcompile-time compiles a regexp if it is a literal, and defers to\n"
"\truntime if not. As an additional benefit, not only do you save run\n"
"\ttime here, you also <em>enable warnings</em> about broken regexp\n"
"\tliterals at compile time. Many languages do that, say Perl. <em>But\n"
"\tthey build it into the language and the compiler. In Lisp you can do\n"
"\tit without modifying the compiler.</em></p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"2bfc\"></a>кодовые литералы, "
"скажем, \n"
"\tстроковые регулярные выражения. Вы хотите компилировать их во время "
"выполнения, \n"
"\tпри запуске? Почему? Это займет ненужное дополнительное время, если они "
"известны \n"
"\tво время компиляции. Но они могут быть неизвестны во время компиляции. \n"
"\tВ Лиспе вы пишете макрос, который во время компиляции компилирует "
"регулярное выражение, \n"
"\tесли это литерал, и откладывает выполнение до времени выполнения, если "
"нет. \n"
"\tВ качестве дополнительного преимущества вы не только экономите время "
"выполнения, \n"
"\tно и включаете предупреждения о неработающих литералах регулярного "
"выражения \n"
"\tво время компиляции. Многие языки делают это, например Perl. Но они "
"встроили \n"
"\tэто в язык и в компилятор. В Лиспе это можно сделать, не изменяя "
"компилятор. </em></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:84
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"f7cb\"></a>Same for e.g.\n"
"\tprintf format string checking (wrt the type and number of object\n"
"\targuments). In Common Lisp you can implement that kind of\n"
"\tcompile-time checking <em>without modifying the compiler</em>. Now,\n"
"\twhat you really want is that you write your own warning-emitters\n"
"\tsuch as those printf format string warnings and regex checks, <em>and\n"
"\tyou can supply them to the users of your library</em> without having\n"
"\tto ship them a hacked up compiler. With real compile-time computing\n"
"\tyou can do that.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"f7cb\"></a>То же самое, "
"например, \n"
"\tПроверка строки формата printf (по типу и количеству аргументов "
"объекта). \n"
"\tВ Common Lisp вы можете реализовать такую проверку во время компиляции, \n"
"\t<em>не изменяя компилятор</em>. Теперь вы действительно хотите, чтобы вы \n"
"\tнаписали свои собственные источники предупреждений, такие как эти "
"предупреждения \n"
"\tстроки формата printf и проверки регулярных выражений, <em>и вы можете "
"предоставить \n"
"\tих пользователям своей библиотеки</em>, не отправляя им взломанный "
"компилятор. \n"
"\tВы можете это сделать с помощью вычислений во время компиляции. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:104
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"371c\"></a>letâs look\n"
"\tat the effort that it took to turn non-OO languages into\n"
"\tobject-oriented languages. How much compiler support was needed?\n"
"\tLooks pretty ugly to me. Is C++ even finished? Well, C++ kind of\n"
"\tgave up on OO instead, didnât they? With compile-time computing as\n"
"\timplemented in Common Lisp you can turn a structs-n-functions\n"
"\tlanguage into an object-oriented one without modifying the compiler.\n"
"\t<em>In fact that is what Common Lisp did to get OO</em>. You <em>can</em>\n"
"\tadd compiler support for speed optimizations later, but you <em>donât\n"
"\thave to</em>. The OO language that the CL community implemented was\n"
"\tpure macros at first. Or letâs say you hate OO programming and\n"
"\thave an idea for something better. Would you like to hack up a\n"
"\tcompiler for a new top-level meta-language (such as templates) or do\n"
"\tyou want to do it in the same base language? This example will\n"
"\tmostly cover existing CLOS packages. Oh, and other Common Lisp OO\n"
"\tpackages that you can use alternatively, even mixed into the same\n"
"\tprogram.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"371c\"></a>Давайте посмотрим на "
"усилия, \n"
"\tкоторые потребовались, чтобы превратить не объектно-ориентированные языки "
"в \n"
"\tобъектно-ориентированные языки. Насколько нужна была поддержка "
"компилятора? \n"
"\tДля меня это выглядит довольно некрасиво. С ++ вообще закончен? Что ж, C+"
"+ \n"
"\tвместо этого отказался от объектно-ориентированного подхода, не так ли? \n"
"\tИспользуя вычисления во время компиляции, реализованные в Common Lisp, \n"
"\tвы можете превратить язык структур и функций в объектно-ориентированный, \n"
"\tне изменяя компилятор. Фактически, это то, что сделал Common Lisp, чтобы \n"
"\tполучить объектную ориентириентированность. Вы <em>можете</em> добавить "
"поддержку \n"
"\tкомпилятора для оптимизации скорости позже, но это не обязательно. ОО-"
"язык, \n"
"\tреализованный сообществом CL, сначала был чистым макросом. Или, скажем, \n"
"\tвы ненавидите объектно-ориентированное программирование и у вас есть "
"идея \n"
"\tчего-то получше. Хотели бы вы взломать компилятор для нового метаязыка \n"
"\tверхнего уровня (например, шаблонов) или вы хотите сделать это на том же \n"
"\tбазовом языке? Этот пример в основном охватывает существующие пакеты "
"CLOS. \n"
"\tДа, и другие OO-пакеты Common Lisp, которые вы можете использовать "
"альтернативно, \n"
"\tдаже смешанно в одной и той же программе. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:117
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"2487\"></a>numerical\n"
"\tsource code literals that carry units, and where conversion from the\n"
"\twritten down number-with-unit to the internally used unit is done at\n"
"\tcompile time if known at compile time (and at runtime otherwise).\n"
"\tChecking of unit compatibility is skipped if it can be proven at\n"
"\tcompile time. You donât have to slow down code by dragging around\n"
"\tthe unit information if unit compatibility was proven at compile\n"
"\ttime. Donât underestimate the significance of this. We (humanity)\n"
"\tblew up lots of stuff including spaceships and water ships because\n"
"\tof the scientific units mess. Letâs make it safe.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"2487\"></a>числовые литералы "
"исходного кода, \n"
"\tкоторые несут единицы измерения, и где преобразование записанного числа с "
"единицей \n"
"\tизмерения(number-with-unit) во внутренне используемую единицу выполняется "
"во время\n"
"\tкомпиляции, если известно во время компиляции (и во время выполнения в "
"противном случае).\n"
"\tПроверка совместимости модулей пропускается, если она может быть "
"подтверждена \n"
"\tво время компиляции. Вам не нужно замедлять код, перетаскивая информацию о "
"модуле, \n"
"\tесли совместимость модуля была доказана во время компиляции. Не стоит "
"недооценивать \n"
"\tзначение этого. Мы (человечество) взорвали множество вещей, включая "
"космические \n"
"\tкорабли и корабли, из-за беспорядка в научных единицах. Давайте сделаем их "
"безопасными. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:138
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"693c\"></a>you wrote\n"
"\tdown (in code) a mathematical formula, solved by one variable. Your\n"
"\tprogram also needs the same formula solved by another variable. Why\n"
"\twould you solve this on a piece of paper and then write down a\n"
"\tsecond function into the source code? The computer should be smart\n"
"\tenough that you can pass it the function once and request that it\n"
"\tgenerates code for the variants, solved by different variables of\n"
"\tthat one definition. One source code definition, several compiled\n"
"\tfunctions to call. It keeps you from making human errors, and it is\n"
"\ta great help if you find that your formula needs adjusting later\n"
"\t(otherwise known as ânot againâ¦â). Instead of multiple places\n"
"\tto edit, you have one place to control this one formula and all its\n"
"\tvariants. Compile-time computing in Common Lisp is powerful enough\n"
"\tto do this. Now having said thatâ¦ we are pushing the envelope of\n"
"\twhat I actually implemented so far. This is fairly advanced and not\n"
"\tquick to write. I hope that I can use Maxima for this. Weâll see\n"
"\tby the time I get to this part and you get to have a look at what\n"
"\ttackling a problem like this is like.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"693c\"></a>вы записали (в коде) \n"
"\tматематическую формулу, решаемую одной переменной. Вашей программе \n"
"\tтакже нужна та же формула, решаемая другой переменной. Зачем вам решать \n"
"\tэту проблему на листе бумаги, а затем записывать вторую функцию в \n"
"\tисходный код? Компьютер должен быть достаточно умен, чтобы вы могли "
"передать \n"
"\tему функцию один раз и запросить, чтобы он сгенерировал код для "
"вариантов, \n"
"\tрешаемых разными переменными этого одного определения. Одно определение \n"
"\tисходного кода, несколько скомпилированных функций для вызова. Это "
"убережет \n"
"\tвас от человеческих ошибок и станет большим подспорьем, если вы "
"обнаружите, \n"
"\tчто ваша формула требует корректировки позже (иначе известное как «только "
"не снова…»). \n"
"\tВместо нескольких мест для редактирования у вас есть одно место для "
"управления этой \n"
"\tформулой и всеми ее вариантами. Вычисления во время компиляции в Common "
"Lisp \n"
"\tдостаточно мощны для этого. Теперь, сказав это ... мы расширяем границы "
"того, \n"
"\tчто я на самом деле реализовал до сих пор. Это довольно продвинуто, и "
"писать \n"
"\tего не так быстро. Я надеюсь, что смогу использовать для этого Maxima. К "
"тому времени, \n"
"\tкак я дойду до этой части, мы увидим, и вы узнаете, на что похоже решение "
"такой проблемы. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:155
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"c1b5\"></a>Avoiding\n"
"\tReflection at runtime. This wonât be a Common Lisp example. Iâll\n"
"\tjust rant a bit about how bad it is to replace compile time\n"
"\tcomputing with reflection at runtime. Apart from dropping all the\n"
"\tspeed on the floor, you are also opening your previously statically\n"
"\ttyped and compiled program to runtime errors. For added spice,\n"
"\timagine that those structs reflected on at runtime represent\n"
"\tdatabase schemas, and now something got out of sync and throws\n"
"\truntime error messages in production, instead of using reflection at\n"
"\tcompile time, with checking. Yes, your syntax-correct CL source code\n"
"\tcan do (checkagainst (read (/bin/sh â./gimmetheschemaâ)) at\n"
"\tcompile time. Runtime reflection is a really bad substitute here and\n"
"\tit wouldnât be required for most uses if you had compile time\n"
"\tcomputing (this is a more general case of example #1 above).</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"c1b5\"></a>Избегайте "
"отражения(Reflection) \n"
"\tво время выполнения. Это не будет пример Common Lisp. Я просто немного "
"расскажу, \n"
"\tкак плохо заменять вычисления во время компиляции отражением во время "
"выполнения. \n"
"\tПомимо того, что вы теряете всю скорость, вы также открываете свою ранее \n"
"\tстатически типизированную и скомпилированную программу для ошибок времени "
"выполнения. \n"
"\tДля дополнительной изюминки представьте, что эти структуры, отраженные во "
"время \n"
"\tвыполнения, представляют схемы базы данных, и теперь что-то вышло из "
"синхронизации \n"
"\tи выдает сообщения об ошибках времени выполнения в производственной среде "
"вместо\n"
"\tиспользования отражения во время компиляции с проверкой. Да, ваш исходный "
"код CL \n"
"\tс правильным синтаксисом может выполнять (checkagainst (read (/bin/sh «./"
"gimmetheschema»)) \n"
"\tво время компиляции. Отражение времени выполнения здесь действительно "
"плохая замена, \n"
"\tи оно не потребуется для большинства применений, если у вас были "
"вычисления во время\n"
"\tкомпиляции (это более общий случай примера №1 выше). </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:158
msgctxt "in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:158"
msgid "\t<li/>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:176
msgid ""
"<p><a name=\"6f32\"></a>Letâs hope I make it to the more\n"
"\tesoteric items. One such thing is that Common Lisp is so powerful\n"
"\tthat if your compiler was too dumb to have inline functions you can\n"
"\tfix that yourself. You write a macro that translates your function\n"
"\tdefinition. It walks it statement by statement and re-writes the\n"
"\tfunction as a macro. Then it puts the macro version into the\n"
"\tto-be-compiled code and there you are. Now itâs inline, machine\n"
"\tcode wise. This is of course crazy in multiple ways, and I donât\n"
"\tthink I can show you the ITA code we had that did this. Oh. Nonono,\n"
"\tthis isnât theory, as much as I wish. We had that. It illustrates\n"
"\tthe raw expressive power of the language. In milder climates I use\n"
"\tthis capability to change functions from being inline or not-inline\n"
"\ton the fly, during compilation, based on any random criteria I\n"
"\tchoose (compiled code size, local exits close to the beginning,\n"
"\tnumber of times called in benchmarks), without having to use any\n"
"\texternal tools (and without having to move those functions between\n"
"\tsource code files).</p>"
msgstr ""
"<p><a name=\"6f32\"></a>Будем надеяться, что я дойду до более эзотерических "
"предметов. \n"
"\tОдна из таких вещей заключается в том, что Common Lisp настолько мощный, "
"что \n"
"\tесли ваш компилятор был слишком глуп, чтобы иметь встроенные функции, вы "
"можете \n"
"\tисправить это самостоятельно. Вы пишете макрос, который переводит "
"определение \n"
"\tвашей функции. Он обходит его оператор за оператором и перезаписывает "
"функцию \n"
"\tкак макрос. Затем он помещает макроверсию в код, который должен быть "
"скомпилирован, \n"
"\tи готово. Теперь это встроенный машинный код. Это, конечно, безумие во "
"многих отношениях, \n"
"\tи я не думаю, что смогу показать вам код ITA, который у нас был, чтобы это "
"сделать. \n"
"\tОй. Нононо, это не теория, как бы мне ни хотелось. У нас это было. Он "
"демонстрирует \n"
"\tчистую выразительную силу языка. В более мягком климате я использую эту "
"возможность \n"
"\tдля изменения функций из встроенных или не встроенных на лету, во время "
"компиляции, \n"
"\tна основе любых случайных критериев, которые я выбираю (размер "
"скомпилированного кода,\n"
"\t локальные выходы близко к началу, количество раз, вызываемых в тестах) , "
"без \n"
"\tиспользования каких-либо внешних инструментов (и без необходимости "
"перемещать \n"
"\tэти функции между файлами исходного кода). </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:179
msgid "</ol>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:181
msgid "<p><a name=\"98c8\"></a><strong><em>Error handling</em></strong></p>"
msgstr "<p><a name=\"98c8\"></a><strong><em>Обработка ошибок</em></strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:200
msgid ""
"<p><a name=\"4604\"></a><a name=\"rmm\"></a>Throughout this series you\n"
"will also gradually realize one of the major advantages of having the\n"
"<em>same language at compile and at run time.</em> It is error\n"
"handling. All these <em>macros</em> that you use to achieve the\n"
"above, they are <em>regular</em> Common Lisp code. The entire\n"
"language is available, including all libraries you ever wrote for it.\n"
"And all the <em>error handling capabilities are available at compile\n"
"time</em>. This isnât some crazy C++ template thing giving you an\n"
"error message^H^H^Hnovel that needs a web app to translate into\n"
"something readable. With real compile-time computing the compile time\n"
"error messages come out of your code written in your primary\n"
"language, and the compile time error messages are as clear or unclear\n"
"as your runtime ones. And yes, you have, at compile time, backtraces,\n"
"debuggers, step-by-step evaluation, inspection, and regular data\n"
"structures. You can even use your regular profiler to fix performance\n"
"bugs that slow down compilation too much.</p>"
msgstr ""
"<p><a name=\"4604\"></a><a name=\"rmm\"></a>На протяжении всей этой серии "
"статей \n"
"вы также постепенно поймете одно из главных преимуществ использования "
"одного \n"
"и того же языка при компиляции и во время выполнения. Это обработка "
"ошибок. \n"
"Все эти макросы, которые вы используете для достижения вышеуказанного, \n"
"представляют собой обычный код Common Lisp. Доступен весь язык, включая все "
"библиотеки, \n"
"которые вы когда-либо писали для него. И все возможности обработки ошибок "
"доступны \n"
"во время компиляции. Это не какой-то сумасшедший шаблон C ++, который "
"выдает \n"
"сообщение об ошибке ^H^H^Hnovel, которому требуется веб-приложение, чтобы "
"преобразовать\n"
"его во что-то читаемое. При реальном вычислении времени компиляции сообщения "
"об ошибках \n"
"времени компиляции исходят из вашего кода, написанного на вашем основном "
"языке, \n"
"а сообщения об ошибках времени компиляции столь же ясны или неясны, как и "
"сообщения \n"
"времени выполнения. И да, во время компиляции у вас есть обратная "
"трассировка, \n"
"отладчики, пошаговое исполнение, проверка и обычные структуры данных. Вы "
"даже \n"
"можете использовать свой обычный профилировщик для исправления ошибок "
"производительности, \n"
"которые слишком замедляют компиляцию. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:206
msgid ""
"<p><a name=\"e844\"></a>You use the regular Lisp debugger on that\n"
"compile time Lisp code. Ever tried to use gdb on C++ template\n"
"expansion?</p>"
msgstr ""
"<p><a name=\"e844\"></a>Вы используете обычный отладчик Lisp для этого кода "
"Lisp \n"
"во время компиляции. Вы когда-нибудь пробовали использовать gdb для "
"расширения \n"
"шаблона C++?</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:210
msgid "<p><a name=\"d773\"></a><strong>Objectives</strong></p>"
msgstr "<p><a name=\"d773\"></a><strong>Цели</strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:215
msgid ""
"<p><a name=\"4639\"></a>Overall youâll see how the examples implement\n"
"our primary goals:</p>"
msgstr ""
"<p><a name=\"4639\"></a>В целом вы увидите, как примеры реализуют наши "
"основные цели: </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:222
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"94d8\"></a>avoid\n"
"\trepetition in human-written/to-be-changed-by-humans/diffed source\n"
"\tcode.</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"94d8\"></a>Избегайте повторений в "
"исходном коде, \n"
"\tнаписанном человеком/изменяемом людьми/различном исходном коде..</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:225
msgctxt "in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:225"
msgid "\t<li/>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:230
msgid ""
"<p><a name=\"2b4b\"></a>do as much work as you can at compile\n"
"\ttime (not run time) because it is safer (warnings from the compiler,\n"
"\tand warnings from your own code running at compile time) and makes\n"
"\tthe program run faster(*).</p>"
msgstr ""
"<p><a name=\"2b4b\"></a>выполняйте как можно больше работы во время "
"компиляции \n"
"\t(не во время выполнения), потому что это безопаснее (предупреждения от \n"
"\tкомпилятора и предупреждения из вашего собственного кода, выполняемого \n"
"\tво время компиляции) и ускоряет выполнение программы(*).</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:233
msgctxt "in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:233"
msgid "</ul>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:235
msgid "<p><a name=\"a5ca\"></a>While also going for secondary goals:</p>"
msgstr ""
"<p><a name=\"a5ca\"></a>При этом также преследуя второстепенные цели:</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:245
msgid ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"4933\"></a>make source\n"
"\tcode with complicated items (say complex literals) as easy to read\n"
"\tas possible, without having to write custom lexers and parsers. In\n"
"\tcase it isnât obvious by now, in Common Lisp you can express any\n"
"\tdata structure that is possible at runtime as a source code literal.\n"
"\tThat includes graphs and trees.</p>"
msgstr ""
"<ul>\n"
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"4933\"></a>сделать исходный код со "
"сложными элементами \n"
"\t(например, сложными литералами) максимально легким для чтения без "
"необходимости писать\n"
"\tсобственные лексеры и анализаторы. Если сейчас это неочевидно, в Common "
"Lisp вы можете \n"
"\tвыразить любую структуру данных, которая возможна во время выполнения, как "
"литерал \n"
"\tисходного кода. Сюда входят графы и деревья. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:258
msgid ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"1f0f\"></a>keep source\n"
"\tcode diffs over the change history small and readable. No\n"
"\tboilerplate and huge cascading diffs from originally small changes\n"
"\tdrowning out the real change with noise. Always remember that you\n"
"\tmight want to read this (much) later with 15 years worth of changes\n"
"\tpiled on. The worst of this are languages that require so much\n"
"\tchange-noise boilerplate that people have their IDE do the\n"
"\tboilerplate changes for you. Thatâs nice for next weekâs\n"
"\tdeadline, but it doesnât address the follow-changes-in-15-years\n"
"\tperspective.</p>"
msgstr ""
"\t<li/>\n"
"<p style=\"margin-bottom: 0cm\"><a name=\"1f0f\"></a>Сохраняйте различия в "
"исходном коде \n"
"\tв истории изменений небольшими и удобочитаемыми. Никаких шаблонов и "
"огромных \n"
"\tкаскадных различий от изначально небольших изменений, заглушающих "
"реальное \n"
"\tизменение шумом. Всегда помните, что вы, возможно, захотите прочитать "
"это \n"
"\t(много) позже, когда накопятся изменения за 15 лет. Худшим из них "
"являются \n"
"\tязыки, которые требуют такого большого количества шаблонных изменений, \n"
"\tчто люди заставляют их IDE вносить стандартные изменения за вас. Это "
"хорошо \n"
"\tдля крайнего срока на следующей неделе, но не учитывает перспективу "
"последующих \n"
"\tизменений через 15 лет. </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:261
msgctxt "in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:261"
msgid "\t<li/>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:266
msgid ""
"<p><a name=\"5368\"></a>donât be forced into object-oriented\n"
"\tprogramming when it doesnât suit the project at hand - just\n"
"\tbecause your compiler happens to only have support for OO paradigms\n"
"\t(kudos to C++ to open up the language to other approaches, BTW).</p>"
msgstr ""
"<p><a name=\"5368\"></a>Не навязывайте объектно-ориентированное "
"программирование, \n"
"\tкогда оно не подходит для текущего проекта - просто потому, что ваш "
"компилятор \n"
"\tподдерживает только парадигмы объектно-ориентированного программирования \n"
"\t(слава C ++, чтобы открыть язык для других подходов, BTW).</p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:269
msgctxt "in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:269"
msgid "</ul>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:273
msgid ""
"<p><a name=\"afb6\"></a>Stand by while I polish, re-think, and explain\n"
"all this âreal quick.â If you want deeper introductions to these\n"
"topics in the meantime, there are two books I particularly recommend:</p>"
msgstr ""
"<p><a name=\"afb6\"></a>Подождите, пока я буду полировать, переосмысливать и "
"объяснять все это \n"
"«очень быстро». Если вы тем временем хотите более глубоко познакомиться с "
"этими темами, \n"
"я особенно рекомендую две книги: </p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:280
msgid ""
"<p><a name=\"53d2\"></a>Paul Grahamâs <em>âOn Lispâ</em>. This is\n"
"the Lisp book with the most emphasis on Macros. It is now freely\n"
"available (there also is a paper book):\n"
"<a href=\"http://www.paulgraham.com/onlisp.html\">http://www.paulgraham.com/"
"onlisp.html</a></p>"
msgstr ""
"<p><a name=\"53d2\"></a>«О Лиспе» Пола Грэма. Это книга по Лиспу, в которой "
"основное \n"
"внимание уделяется макросам. Сейчас она находится в свободном доступе (есть "
"также бумажная книга\n"
", а есть еще и русский перевод): \n"
"<a href=\"http://www.paulgraham.com/onlisp.html\">http://www.paulgraham.com/"
"onlisp.html</a></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:290
msgid ""
"<p><a name=\"b24c\"></a>Peter Norvigâs <em>âParadigms of Artificial\n"
"Intelligence Programming: Case Studies in Common Lispâ</em>. This\n"
"book is much lighter on complicated Lisp macros than âOn Lispâ\n"
"is. The beauty here is that Peter Norvig show you the power of this\n"
"in an element way, expressing ideas and assumptions the way that you\n"
"want and that keeps things changeable. Paper book only:\n"
"<a href=\"https://www.amazon.com/Paradigms-Artificial-Intelligence-"
"Programming-Studies/dp/1558601910/ref=sr_1_1?ie=UTF8&amp;qid=1468351436&amp;"
"sr=8-1&amp;keywords=norvig+lisp\">https://www.amazon.com/Paradigms-"
"Artificial-Intelligence-Programming-Studies</a></p>"
msgstr ""
"<p><a name=\"b24c\"></a>«Парадигмы программирования искусственного "
"интеллекта: \n"
"примеры использования Common Lisp» Питера Норвига. Эта книга гораздо легче "
"описывает \n"
"сложные макросы Лиспа, чем «О Лиспе». Прелесть здесь в том, что Питер Норвиг "
"элементарно \n"
"демонстрирует вам силу этого, выражая идеи и предположения так, как вы "
"хотите, и это \n"
"сохраняет изменения. Только бумажная книга(есть русский перевод, только в "
"электронном виде): \n"
"<a href=\"https://www.amazon.com/Paradigms-Artificial-Intelligence-"
"Programming-Studies/dp/1558601910/ref=sr_1_1?ie=UTF8&amp;qid=1468351436&amp;"
"sr=8-1&amp;keywords=norvig+lisp\">https://www.amazon.com/Paradigms-"
"Artificial-Intelligence-Programming-Studies</a></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:294
msgid "<p><a name=\"2a83\"></a><strong>Footnotes:</strong></p>"
msgstr "<p><a name=\"2a83\"></a><strong>Сноски:</strong></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:302
msgid ""
"<p><a name=\"33e0\"></a>(*) to go to extremes, compile-time computing\n"
"done right might eliminate runtime altogether, if no unknown data\n"
"that actually influences output flows in. That isnât theory either,\n"
"check out Jeffrey Mark Siskindâs âStalinâ compiler for Scheme.\n"
"<a href=\"https://engineering.purdue.edu/~qobi/software.html\">https://"
"engineering.purdue.edu/~qobi/software.html</a></p>"
msgstr ""
"<p><a name=\"33e0\"></a>(*) (*) в крайнем случае: правильно выполненные "
"вычисления во время \n"
"компиляции могут полностью исключить время выполнения, если не поступают "
"неизвестные данные, \n"
"которые действительно влияют на потоки вывода. Это тоже не теория, "
"посмотрите компилятор \n"
"«Сталин» Джеффри Марка Сискинда(Jeffrey Mark Siskind) для Scheme. \n"
"<a href=\"https://engineering.purdue.edu/~qobi/software.html\">https://"
"engineering.purdue.edu/~qobi/software.html</a></p>"

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:307
msgid ""
"<p><a name=\"fc04\"></a>Thank you again to dcooper8@ for editing and\n"
"general help.</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:310
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:312
msgid "</p>"
msgstr ""

#: in_ed/a-gentle-introduction-to-compile-time-computing-part-2.html:315
msgid ""
"</body>\n"
"</html>"
msgstr ""
