#
# NuINu <don't@send.my>, 2021, 2022.
#
#. extracted from in_ed/SimpleCLX.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-31 07:57+0300\n"
"PO-Revision-Date: 2022-01-06 01:17+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/SimpleCLX.html:5
msgid ""
"<html><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; "
"charset=windows-1252\"><title>Simple CLX</title></head>\n"
"<body>\n"
"<h1>Simple Examples of Driving X11 From Common Lisp Using CLX</h1>"
msgstr ""
"<html><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; "
"charset=utf8\"><title>Простой CLX</title></head>\n"
"<body>\n"
"<h1>Простые примеры управления X11 из Common Lisp с использованием CLX </h1>"

#: in_ed/SimpleCLX.html:8
msgid "<p>Friday 10th December 2021</p>"
msgstr ""

#: in_ed/SimpleCLX.html:12
msgid "<p>Back online. No real changes since 2005</p>"
msgstr ""

#: in_ed/SimpleCLX.html:21
msgid ""
"<p>The source code files are gathered in a \n"
"<a href=\"http://alan.sdf-eu.org/clx/simple/examples/source.tar\">tarfile</"
"a>  for\n"
"easy downloading.  It contains three extra source files:\n"
"mixed-input.lisp and animation.lisp log.op.lisp \n"
"for which I haven't yet written the explanations.</p>"
msgstr ""
"<p>Файлы исходного кода собраны в <a href=\"http://alan.sdf-eu.org/clx/"
"simple/examples/source.tar\">tar-файл</a> для удобной загрузки. Он содержит "
"три дополнительных исходных файла: \n"
"mixed-input.lisp, animation.lisp log.op.lisp, пояснения для которых я еще не "
"написал.</p>"

#: in_ed/SimpleCLX.html:27
msgid ""
"<p>There may be some inconsistancies over file names and\n"
"function names. I still haven't proof read this.</p>"
msgstr ""
"<p>Могут быть некоторые несоответствия в именах файлов и именах функций. \n"
"У меня до сих пор нет подтверждения, после прочитения этого поста. </p>"

#: in_ed/SimpleCLX.html:31
msgid "<h2>Minimalist code to pop up a window</h2>"
msgstr "<h2>Минималистичный код для всплывающего окна</h2>"

#: in_ed/SimpleCLX.html:34
msgid ""
"<p>Source file:<a href=\"http://alan.sdf-eu.org/clx/simple/examples/min-pop-"
"up-window.txt\">min-pop-up-window</a></p>"
msgstr ""
"<p>Файл с исходным кодом:<a href=\"http://alan.sdf-eu.org/clx/simple/"
"examples/min-pop-up-window.txt\">min-pop-up-window</a></p>"

#: in_ed/SimpleCLX.html:41
msgid ""
"<p>First I try to pop up a window. I aim for the simplest\n"
"possible program, and point out where it is misleading as to\n"
"how to write a proper program.</p>"
msgstr ""
"<p>Сначала я пытаюсь открыть окно. Я стремлюсь к максимально простой \n"
"программе и указываю, где она вводит в заблуждение относительно того, \n"
"как написать правильную программу.</p>"

#: in_ed/SimpleCLX.html:47
msgid ""
"<p>The two central assumptions of the X protocol are\n"
"</p>"
msgstr ""
"<p>Два основных допущения протокола X: \n"
"</p>"

#: in_ed/SimpleCLX.html:49
msgctxt "in_ed/SimpleCLX.html:49"
msgid "<ul>"
msgstr ""

#: in_ed/SimpleCLX.html:53
msgid ""
"    <li> The keyboard, mouse, and CRT are on one machine, called\n"
"    the server. The program that processes the data is on a\n"
"    different machine, called the client.</li>"
msgstr ""
"    <li> Клавиатура, мышь и ЭЛТ находятся на одной машине, называемой \n"
"\tсервером. Программа, обрабатывающая данные, находится(или может "
"находится) \n"
"\tна другом компьютере, называемом клиентом.</li>"

#: in_ed/SimpleCLX.html:57
msgid ""
"    <li>The server is a multi-user machine and each user\n"
"    sits infront of a fancy set up, called a display, with\n"
"    several CRT's</li>"
msgstr ""
"    <li> Сервер - это многопользовательская машина, и каждый \n"
"\tпользователь сидит перед причудливой установкой, называемой дисплеем, \n"
"\tс несколькими ЭЛТ.\n"
"</li>"

#: in_ed/SimpleCLX.html:59
msgid "</ul>"
msgstr ""

#: in_ed/SimpleCLX.html:65
msgid ""
"<p>So, by the miracle of multi-tasking, your machine pretends to\n"
"be two machines, client and server, talking to each other\n"
"over the internal loopback interface. This might be a good\n"
"time to check that it is actually running.</p>"
msgstr ""
"<p>Итак, чудом многозадачности ваша машина притворяется двумя машинами, \n"
"клиентской и серверной, которые общаются друг с другом через внутренний \n"
"интерфейс loopback(обратной петли). Возможно, сейчас самое время "
"проверить, \n"
"действительно ли он запущен. </p>"

#: in_ed/SimpleCLX.html:73
msgid ""
"<pre>&gt;&gt;&gt;&gt;&gt;&gt; ifconfig lo0\n"
"lo0: flags=8049<up,loopback,running,multicast> mtu 16384\n"
"        inet6 fe80::1%lo0 prefixlen 64 scopeid 0x5 \n"
"        inet6 ::1 prefixlen 128 \n"
"        inet 127.0.0.1 netmask 0xff000000 \n"
"</up,loopback,running,multicast></pre>"
msgstr ""

#: in_ed/SimpleCLX.html:78
msgid ""
"<p>Well, that is OK, and it makes the point, though I suspect\n"
"that my machine actually has clients talk to the local X\n"
"server using the socket /tmp/.X11-unix/X0, for efficiency\n"
"reasons.</p>"
msgstr ""
"<p>Что ж, это нормально, и в этом есть смысл, хотя я подозреваю, \n"
"что на моей машине клиенты действительно общаются с локальным X-сервером, \n"
"используя сокет /tmp/.X11-unix/X0 из соображений эффективности.</p>"

#: in_ed/SimpleCLX.html:86
msgid ""
"<p>How does the minimal program do the handshaking between\n"
"client and server? It doesn't. It just assumes that the\n"
"window has popped up, sleeps a few seconds, and then takes\n"
"it down again whether it actually appeared or not.</p>"
msgstr ""
"<p>Как минимальная программа выполняет обмен данными(установку соединения) \n"
"между клиентом и сервером? Это не так. Она просто предполагает, что окно "
"появилось, \n"
"спит несколько секунд, а затем снова закрывает его, независимо от того, \n"
"появилось окно на самом деле или нет.</p>"

#: in_ed/SimpleCLX.html:92
msgid ""
"<h2>Line by line explanation</h2>\n"
"<pre>    (defun pop-up-window (life-time &amp;optional (host \"\"))\n"
"</pre>"
msgstr ""
"<h2>Построчное объяснение</h2>\n"
"<pre>    (defun pop-up-window (life-time &amp;optional (host \"\"))\n"
"</pre>"

#: in_ed/SimpleCLX.html:97
msgid ""
"<p>The first argument <i>life-time</i> is how long the program waits\n"
"between asking the X server to display the window, and\n"
"taking it down again. If nothing happens, you can try a\n"
"longer time.</p>"
msgstr ""
"<p>Первый аргумент - <i>life-time</i>(время жизни) - это время, в течение \n"
"которого программа ожидает между запросом X-сервера отобразить окно и "
"повторным \n"
"его закрытием. Если ничего не происходит, можно попробовать еще раз.\n"
"</p>"

#: in_ed/SimpleCLX.html:108
msgid ""
"<p>The second argument lets you open the window on a different\n"
"server. There is authorisation stuff to sort out before this\n"
"works. It is probably best not to try it yet, but it makes\n"
"the point that if you use X your code is network enabled\n"
"right from the start. This does mean that you always have\n"
"to start by connecting to your chosen display\n"
"</p>"
msgstr ""
"<p>Второй аргумент позволяет вам открыть окно на другом сервере. \n"
"Перед тем, как это сработает, нужно разобраться с вопросами авторизации. \n"
"Вероятно, лучше пока не пробовать её, но он подчеркивает, что если вы \n"
"используете X, ваш код с самого начала включен в сеть. Это означает, \n"
"что вам всегда нужно начинать с подключения к выбранному дисплею. \n"
"</p>"

#: in_ed/SimpleCLX.html:119
msgid ""
"<pre>    (let* ((display (xlib:open-display host))\n"
"</pre>\n"
"In principle a display is fancy setup with several CRT's (or\n"
"LCD's). We hardwire into the code that we want to use the\n"
"first CRT\n"
"<pre> \t (screen (first (xlib:display-roots display)))\n"
"</pre>\n"
"What is happening with the package qualifiers here? Why\n"
"<tt>xlib:display-roots</tt> but not <tt>xlib:first</tt>?\n"
"<p></p>"
msgstr ""
"<pre>    (let* ((display (xlib:open-display host))\n"
"</pre>\n"
"В принципе, дисплей представляет собой причудливую установку с \n"
"несколькими ЭЛТ (или ЖК-дисплеями). Мы прямо указываем в коде, \n"
"что хотим использовать первую CRT(дисплей) \n"
"<pre> \t (screen (first (xlib:display-roots display)))\n"
"</pre>\n"
"Что здесь происходит с квалификаторами пакетов? Почему \n"
"<tt>xlib:display-roots</tt> но не <tt>xlib:first</tt>?\n"
"<p></p>"

#: in_ed/SimpleCLX.html:130
msgid ""
"<p>I've not imported the display-roots symbol, neither via\n"
"import nor use-package. So I'm using the package\n"
"qualifier, making it clear what function calls are specific\n"
"to X11. However, <tt>xlib:display-roots</tt> returns an ordinary\n"
"list. There is no special <tt>xlib:first</tt> accessor required. I'm\n"
"just using <tt>first</tt> from the common-lisp package. I could have used\n"
"<tt>car</tt>.</p>"
msgstr ""
"<p>Я не импортировал символ display-root ни через import, ни через use-"
"package. \n"
"Поэтому я использую квалификатор пакета, чтобы прояснить, какие вызовы "
"функций \n"
"характерны для X11. Однако <tt>xlib:display-roots</tt> возвращает обычный "
"список. \n"
"Специальной функции доступа <tt>xlib:first</tt> не требуется. Я просто "
"использую \n"
"<tt>first</tt> из пакета common-lisp. Я мог бы использовать <tt>car</tt>.</p>"

#: in_ed/SimpleCLX.html:134
msgid ""
"<pre>   (root-window (xlib:screen-root screen))\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:140
msgid ""
"<p>Windows live in a hierarchical trees, with each window\n"
"having a parent. Each window that is, except the special\n"
"root window of each screen. We ask the X server to tell us\n"
"the root window, so that we can pass it back as the parent\n"
"of our own window.</p>"
msgstr ""
"<p>Окна находятся в иерархическом дереве, где у каждого окна есть \n"
"родительский элемент. Каждое окно, кроме специального корневого окна \n"
"каждого экрана. Мы просим X-сервер сообщить нам корневое окно, чтобы \n"
"мы могли передать его обратно в качестве родителя нашего собственного \n"
"окна. </p>"

#: in_ed/SimpleCLX.html:150
msgid ""
"<pre>\t (my-window (xlib:create-window\n"
"\t\t     :parent root-window\n"
"\t\t     :x 0\n"
"\t\t     :y 0\n"
"\t\t     :width 200\n"
"\t\t     :height 100)))\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:158
msgid ""
"<p>This is the line you have been waiting for, that creates a\n"
"window. :x 0 and :y 0 specify the top left. Don't worry if\n"
"that is not where you want it to go.  Since it is a top\n"
"level window, the window manager will intervene and put it\n"
"where it thinks best. The window manager can also overrule\n"
"your chosen width and height, though that is less common.</p>"
msgstr ""
"<p>Это строка, которую вы так долго ждали, которая создает окно. \n"
":x 0 и :y 0 указывают верхний левый угол. Не волнуйтесь, если это \n"
"не то, чего вы хотите. Поскольку это окно верхнего уровня, оконный \n"
"менеджер вмешается и поместит его туда, где он считает нужным. \n"
"Диспетчер окон также может отменить выбранную вами ширину и высоту, \n"
"хотя это встречается реже.</p>"

#: in_ed/SimpleCLX.html:163
msgctxt "in_ed/SimpleCLX.html:163"
msgid "<p></p>"
msgstr ""

#: in_ed/SimpleCLX.html:172
msgid ""
"(The intervention of the window manager, known as\n"
"redirection, is undesirable when you are popping up a menu\n"
"window, and can be turned off, that is overridden, with\n"
"\":override-redirect :on\". Don't try this now. Since the\n"
"window manager has been told to stay out of it, it will not\n"
"put a border round your window, so there might be nothing to\n"
"see even if the code works.)\n"
"<p></p>"
msgstr ""
"(Вмешательство оконного менеджера, известное как перенаправление, \n"
"нежелательно, когда вы открываете окно меню, и может быть отключено, \n"
"то есть переопределено с помощью \":override-redirect :on\". Не пробуйте \n"
"это сейчас. Поскольку диспетчеру окон было приказано держаться подальше \n"
"от него, он не будет ставить рамку вокруг вашего окна, поэтому может \n"
"быть и смотреть не на что , даже если код работает.)\n"
"<p></p>"

#: in_ed/SimpleCLX.html:182
msgid ""
"<p>Now we have created a window we can get fancy. We can\n"
"extract the window's ID with xlib:drawable-id, email it to a\n"
"machine on the other side of the world, which can connect to\n"
"the X server over the internet and map the window, causing\n"
"it to appear on the screen. Perhaps not.\n"
"</p>"
msgstr ""
"<p>Теперь мы создали окно, которое мы можем себе представить. \n"
"Мы можем извлечь идентификатор окна с помощью xlib:drawable-id, \n"
"отправить его по электронной почте на компьютер на другом конце света, \n"
"который может подключиться к X-серверу через Интернет и отобразить окно, \n"
"в результате чего оно появится на экране. Возможно, и нет. \n"
"</p>"

#: in_ed/SimpleCLX.html:185
msgid ""
"<pre>    (xlib:map-window my-window)\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:190
msgid ""
"<p>At this point the map-window request is sitting in the\n"
"client's queue, waiting to be sent over the network to the\n"
"server. X11 is always buffering and queuing, caching and\n"
"prevaricating, to minimise network traffic.</p>"
msgstr ""
"<p>В этот момент запрос map-window находится в очереди клиента, \n"
"ожидая отправки по сети на сервер. X11 всегда буферизует и ставит в "
"очередь, \n"
"кэширует и prevaricating(преобразует), чтобы минимизировать сетевой трафик. "
"</p>"

#: in_ed/SimpleCLX.html:194
msgid ""
"<pre>    (xlib:display-finish-output display)\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:200
msgid ""
"<p>This command flushes the output buffer, sending the events\n"
"and updating the event queue with any responses before\n"
"proceding. This is misleading as to how to write a proper\n"
"program, and the second example will use the buffer flushing\n"
"built into the <tt>event-case</tt> macro <em>instead</em>.</p>"
msgstr ""
"<p>Эта команда очищает выходной буфер, отправляя события и обновляя \n"
"очередь событий любыми ответами перед продолжением. Это вводит в "
"заблуждение \n"
"относительно того, как написать правильную программу, и во втором примере \n"
"<em>вместо</em> неё будет использоваться очистка буфера, встроенная в "
"макрос \n"
"<tt>event-case</tt>.</p>"

#: in_ed/SimpleCLX.html:215
msgid ""
"<p>Most of the time, the built-in buffer flushing works well,\n"
"minimising network traffic without inconveniencing the\n"
"programmer. Every so often it doesn't work how you\n"
"want. Typically this is infrequently enough that you have\n"
"forgotten all about the queuing, and procede to waste half\n"
"an hour looking for the bug in all the wrong places. So it\n"
"seems like a good idea to introduce\n"
"<tt>display-force-output</tt> and\n"
"<tt>display-finish-output</tt> straight away, because of the\n"
"frustration that unflushed buffers cause if you are not\n"
"aware of them, even though you seldom use these commands.</p>"
msgstr ""
"<p>В большинстве случаев встроенная очистка буфера работает хорошо, \n"
"минимизируя сетевой трафик, не доставляя неудобств программисту. \n"
"Иногда она не работает так, как вы хотите. Обычно этого бывает \n"
"достаточно нечасто, чтобы вы полностью забыли об очередях и продолжали \n"
"тратить полчаса на поиск ошибки во всех неправильных местах. \n"
"Так что кажется хорошей идеей сразу ввести <tt>display-force-output</tt> и\n"
"<tt>display-finish-output</tt> из-за разочарования, которое вызывают \n"
"неочищенные(т.е не отправленные) буферы, если вы о них не знаете, \n"
"даже если вы редко используете эти команды. </p>"

#: in_ed/SimpleCLX.html:220
msgctxt "in_ed/SimpleCLX.html:220"
msgid "<p></p>"
msgstr ""

#: in_ed/SimpleCLX.html:224
msgid ""
"<pre>    (format t \"should appear now~%\")\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:228
msgid ""
"<p>This goes to Lisp's standard output. It appears just below\n"
"where you typed in (pop-up-window 5), hoping to get a window\n"
"to pop up for five seconds.</p>"
msgstr ""
"<p>Это идет на стандартный вывод Лиспа. Он появляется чуть ниже того "
"места, \n"
"где вы ввели (pop-up-window 5), надеясь, что окно появится на пять секунд. </"
"p>"

#: in_ed/SimpleCLX.html:249
msgid ""
"<pre>    (sleep life-time)\n"
"</pre>\n"
"Deranged minimalist code, instead of doing the right thing of\n"
"checking the event queue to see if the window has been\n"
"exposed.\n"
"<pre>    (xlib:destroy-window my-window)\n"
"</pre>\n"
"Remember that you are allowed to pass round window id's to\n"
"other clients\n"
"<pre>    (xlib:close-display display)\n"
"</pre>\n"
"An X11 client doesn't have to clean up or even exit. The X\n"
"server is charged with the duty of noticing when the\n"
"connection has closed, and then cleaning up. So you can kill\n"
"a perpetual client program with the xkill client that comes\n"
"with X, or with an operating system command. The operating\n"
"system closes the outstanding connections. The X server\n"
"notices and cleans up.\n"
"<p></p>"
msgstr ""
"<pre>    (sleep life-time)\n"
"</pre>\n"
"Неуравновешенный минималистский код вместо того, чтобы сделать \n"
"правильные вещи, т.е. проверять очередь событий, чтобы увидеть, \n"
"было ли открыто окно. \n"
"<pre>    (xlib:destroy-window my-window)\n"
"</pre>\n"
"Помните, что вам разрешено передавать идентификаторы окружающего окна \n"
"другим клиентам. \n"
"<pre>    (xlib:close-display display)\n"
"</pre>\n"
"Клиенту X11 не нужно выполнять очистку или даже выходить. \n"
"На X-сервер возложена обязанность замечать, когда соединение закрывается, \n"
"а затем очищать его. Таким образом, вы можете убить постоянную клиентскую \n"
"программу с помощью клиента xkill, который поставляется с X, или с помощью \n"
"команды операционной системы. Операционная система закрывает просроченные \n"
"соединения. X-сервер замечает их и убирает.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:258
msgid ""
"<p>If your program has passed its window onto a different\n"
"program it has to tell the X server before it is killed, by\n"
"setting the close-down-mode. There is a\n"
"kill-temporary-clients command for when you are completely\n"
"finished with the window.</p>"
msgstr ""
"<p>Если ваша программа передала свое окно другой программе, она \n"
"должна сообщить X-серверу, прежде чем оно будет убито, установив \n"
"режим закрытия(close-down-mode). Когда вы полностью закончили работу \n"
"с окном, есть команда kill-tempo-clients. </p>"

#: in_ed/SimpleCLX.html:262
msgid ""
"<p.if you=\"\" don't=\"\" include=\"\" destroy-window=\"\" or=\"\" close-"
"display=\"\" in=\"\" the=\"\" code=\"\" write=\"\" when=\"\" are=\"\" trying="
"\"\" things=\"\" out=\"\" at=\"\" repl=\"\" end=\"\" up=\"\" with=\"\" dead="
"\"\" windows=\"\" cluttering=\"\" display=\"\" until=\"\" destroy=\"\" them="
"\"\" window=\"\" manager=\"\" commands=\"\" exit=\"\" your=\"\" lisp=\"\" "
"image.=\"\" this=\"\" is=\"\" harmless,=\"\" but=\"\" makes=\"\" feel=\"\" "
"icky=\"\" and=\"\" broken.<=\"\" p=\"\">"
msgstr ""

#: in_ed/SimpleCLX.html:264
msgid "<h2>More realistic code for popping up a window</h2>"
msgstr "<h2>Более реалистичный код для всплывающего окна</h2>"

#: in_ed/SimpleCLX.html:267
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/soap-"
"bubble.txt\">Soap Bubble</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/soap-"
"bubble.txt\">Soap Bubble</a></p>"

#: in_ed/SimpleCLX.html:271
msgid ""
"<pre>(defun blow-bubble (&amp;optional (host \"\"))\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:274
msgid ""
"<p>The awful kludge of a delay is gone. This function responds\n"
"to events from the X server.</p>"
msgstr ""
"<p>Ужасная задержка исчезла. Эта функция реагирует на события \n"
"от X-сервера.</p>"

#: in_ed/SimpleCLX.html:286
msgid ""
"<p>The previous minimalist code pops up a transparent\n"
"window. That is taking the window metaphor too far.\n"
"We want a black background. What pixel value gives black?\n"
"Remember that it is no use for the client to find out the\n"
"code for the black pixel locally. The machine it is running\n"
"on might not even have a X server. You have to go over the\n"
"network to ask the X server you are connected to.\n"
"</p>"
msgstr ""
"<p>В предыдущем минималистичном коде появляется прозрачное окно. \n"
"Оно слишком далеко заходит с метафорой окна. Нам нужен черный фон. \n"
"Какое значение пикселя дает черный цвет? Помните, что клиенту нет \n"
"смысла узнавать код черного пикселя локально. Машина, на которой он \n"
"работает, может даже не иметь X-сервера. Вы должны пройти по сети, \n"
"чтобы спросить об этом X-сервер, к которому вы подключены. \n"
"</p>"

#: in_ed/SimpleCLX.html:297
msgid ""
"<pre>   (black (xlib:screen-black-pixel screen))\n"
"</pre>\n"
"Notice this get the black pixel for a specific screen. I'm\n"
"hoping to cobble to gether a double headed server with an\n"
"nVidia card in the AGP slot, and a Matrox card in a PCI\n"
"slot. What happens if the two different graphics cards use\n"
"different codes for black? I should be OK with the X server\n"
"returning the code for the card that is driving the screen I\n"
"asked about. \n"
"<p></p>"
msgstr ""
"<pre>   (black (xlib:screen-black-pixel screen))\n"
"</pre>\n"
"Обратите внимание, что это черный пиксель для определенного экрана. \n"
"Я надеюсь собрать двухголовый сервер с картой nVidia в слоте AGP и \n"
"картой Matrox в слоте PCI. Что произойдет, если две разные видеокарты \n"
"используют разные коды для черного? Я должен быть OK(в порядке?/на связи?) \n"
"с X-сервером, возвращающим код карты, которая управляет экраном, \n"
"о котором я спрашивал. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:304
msgid ""
"<p>Having obtained the black pixel code, we use it in\n"
"<tt>xlib:create-window</tt>\n"
"</p>"
msgstr ""
"<p>Получив код черного пикселя, используем его в xlib:  \n"
"<tt>xlib:create-window</tt>\n"
"</p>"

#: in_ed/SimpleCLX.html:312
msgid ""
"<pre>:background black\n"
"</pre>\n"
"The other big change from the minimalist code is handling\n"
"events. This window is like a soap bubble. It stays up until\n"
"we pop it with the mouse cursor. Also we introduce, but do\n"
"not use, the exposure event.\n"
"<p></p>"
msgstr ""
"<pre>:background black\n"
"</pre>\n"
"Другое большое отличие от минималистичного кода - это обработка событий. \n"
"Это окно похоже на soap bubble(мыльный пузырь). Он остается вверху, \n"
"пока мы не нажмем на него курсор мыши. Также мы вводим, но не используем \n"
"событие exposure(воздействия).\n"
"<p></p>"

#: in_ed/SimpleCLX.html:324
msgid ""
"<p>The exposure event is crucial. The X server doesn't take\n"
"notes on what was drawn in your window. If your window gets\n"
"covered over the contents are lost. When it is uncovered the\n"
"X server sends an expose event. This is not just to say the\n"
"window is up, you can draw something now. It is also the X\n"
"server saying, \"I've lost the contents, remind me what was\n"
"supposed to be in the window.\"\n"
"</p>"
msgstr ""
"<p>Событие exposure(воздействия) имеет решающее значение. \n"
"X-сервер не делает заметок о том, что было нарисовано в вашем окне. \n"
"Если ваше окно закрывается, содержимое теряется. Когда оно обнаружено, \n"
"X-сервер отправляет событие expose(раскрытия). Оно не означает, \n"
"что окно открыто, теперь вы можете что-нибудь нарисовать. Оно также\n"
"означает X-сервер, говорящий: «Я потерял содержимое, напомните мне, \n"
"что должно было быть в окне». \n"
"</p>"

#: in_ed/SimpleCLX.html:357
msgid ""
"<pre>:event-mask (xlib:make-event-mask :exposure\n"
"\t\t\t          :enter-window)\n"
"</pre>\n"
"This sets the window to receive exposure events. You almost\n"
"always want to receive exposure events. It also sets the\n"
"window to receive enter-notify events. This lets us pop the\n"
"window like a soap bubble, poof, without even a mouse\n"
"click. It is a convenient event to use in a simple example,\n"
"but it is not as important as you might guess from the\n"
"name. Keyboard input and button presses automatically go to\n"
"the the selected window. If the window has asked for\n"
"key press and button press events it will get them, it\n"
"doesn't have to keep track of the mouse cursor entering and\n"
"leaving. Enter-notify is useful if you want a window to\n"
"change colour to alert the user to which window he is about\n"
"to click in.\n"
"<pre>    (xlib:event-case (display :force-output-p t\n"
"\t\t\t      :discard-p t)\n"
"      (:exposure ()(format t \"Exposed~%\"))\n"
"      (:enter-notify () t))\n"
"</pre>\n"
"This is the core of a clx program. The various events are\n"
"distributed to code that handles them. The first thing to\n"
"notice is that <tt>xlib:display-force-output</tt> is gone. We have\n"
"set the <tt>:force-output-p</tt> keyword of eventcase. This tells\n"
"event-case to flush the output buffer before checking for\n"
"events. Since event-case is so central to clx programing,\n"
"the buffer flushes caused by <tt>:force-output-p</tt> are often all\n"
"the buffer flushes we need. So we are well set up to forget\n"
"all about flushing the output buffer and get really caught\n"
"out by the odd occasion that it is needed.\n"
"<p></p>"
msgstr ""
"<pre>:event-mask (xlib:make-event-mask :exposure\n"
"\t\t\t          :enter-window)\n"
"</pre>\n"
"Это устанавливает окно для приема событий exposure(экспонирования). \n"
"Вы почти всегда хотите получать события exposure(экспонирования/"
"отображения). \n"
"Оно также устанавливает окно для приема событий с enter-notify(уведомлением "
"о вводе). \n"
"Это позволяет нам \"лопнуть\" окно, как мыльный пузырь, пуф, даже \n"
"без щелчка мышью. Это событие удобно использовать в простом примере, \n"
"но оно не так важно, как можно догадаться по названию. Ввод с клавиатуры \n"
"и нажатие кнопок автоматически переходят в выбранное окно. Если окно "
"запросило \n"
"события нажатия клавиш и кнопок, оно получит их, и ему не нужно "
"отслеживать \n"
"вход и выход курсора мыши. Enter-notify полезен, если вы хотите, чтобы "
"окно \n"
"меняло цвет, чтобы предупреждать пользователя, в каком окне он \n"
"собирается щелкнуть. \n"
"<pre>    (xlib:event-case (display :force-output-p t\n"
"\t\t\t      :discard-p t)\n"
"      (:exposure ()(format t \"Exposed~%\"))\n"
"      (:enter-notify () t))\n"
"</pre>\n"
"Это ядро программы clx. Различные события распределяются по коду, \n"
"который их обрабатывает. Первое, что следует заметить, это \n"
"отсутствие  <tt>xlib:display-force-output</tt>. Мы установили ключевое "
"слово: \n"
"<tt>:force-output-p</tt> для eventcase. Оно указывает event-case \n"
"очищать выходной буфер перед проверкой событий. Поскольку event-case \n"
"занимает центральное место в программировании clx, сбросы буфера, \n"
"вызванные: <tt>:force-output-p</tt>, часто являются всеми необходимыми \n"
"очистками буфера. Итак, у нас есть все необходимое, чтобы забыть о \n"
"сбросе/очистке выходного буфера и попасть в ловушку из-за того, \n"
"что мы забываем, что это необходимо делать.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:363
msgid ""
"<p>The xlib:event-case macro has two clever features\n"
"</p>"
msgstr ""
"<p>Макрос xlib:event-case имеет две умные функциональности \n"
"</p>"

#: in_ed/SimpleCLX.html:365
msgctxt "in_ed/SimpleCLX.html:365"
msgid "<ul>"
msgstr ""

#: in_ed/SimpleCLX.html:369
msgid ""
"    <li><tt>xlib:event-case</tt> has a notion of whether the handler code\n"
"    has ticked off the event as finished with, or whether it\n"
"    should be left in the event queue.</li>"
msgstr ""
"    <li><tt>xlib:event-case</tt> определяет, пометил ли код обработчика "
"событие \n"
"\tкак завершенное или его следует оставить в очереди событий.</li>"

#: in_ed/SimpleCLX.html:379
msgid ""
"    <li><tt>xlib:event-case</tt> does more than just dispatch the events,\n"
"    it can also act as a loop, repeatedly dispatching\n"
"    events.</li>\n"
"</ul>\n"
"Awkwardly though, these both use the same mechanism. The\n"
"final value yielded by the code that handles an event is\n"
"interpreted as true or false in the usual way, and this\n"
"boolean value is given a double significance. \n"
"<p></p>"
msgstr ""
"    <li><tt>xlib:event-case</tt> делает больше, чем просто отправляет "
"события, \n"
"\tон также может действовать как цикл, повторно отправляя(dispatching) \n"
"\tсобытия.</li>\n"
"</ul>\n"
"Как ни странно, они оба используют один и тот же механизм. Конечное "
"значение, \n"
"выдаваемое кодом, обрабатывающим событие, обычно интерпретируется как "
"истина \n"
"или ложь, и этому логическому значению придается двойное значение.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:388
msgid ""
"<p>If true, the event is ticked off (`processed' in the\n"
"documentation) and removed from the event queue. If false,\n"
"the event is not ticked off (`unprocessed' in the\n"
"documentation) and hangs about so it can come back to haunt\n"
"you later.</p>"
msgstr ""
"<p>Если true, событие отмечается галочкой (в документации \n"
"`processed'(обработано)) и удаляется из очереди событий. \n"
"Если false, событие не отмечается галочкой (в документации \n"
"`unprocessed'(необработано)) и висит где-то поблизости, \n"
"чтобы потом вернуться и всё равно достать вас.</p>"

#: in_ed/SimpleCLX.html:395
msgid ""
"<p>If true, the implicit event-case loop has done its job and\n"
"exits. If false, the implicit event-case loop goes round for\n"
"another try.</p>"
msgstr ""
"<p>Если true(истина), неявный цикл event-case выполнил свою работу \n"
"и завершился. Если false, неявный цикл case-case повторяется для \n"
"еще одной попытки.</p>"

#: in_ed/SimpleCLX.html:401
msgid ""
"<p>The odd little line \n"
"</p>"
msgstr ""
"<p>Странная маленькая линия\n"
"</p>"

#: in_ed/SimpleCLX.html:426
msgid ""
"<pre>:discard-p t \n"
"</pre>\n"
"is vital. It says that once an event has been dispatched and\n"
"some code run to process it, it is removed from the event\n"
"queue, even if it has not been ticked off. (The documentation\n"
"calls this \"discarding unprocessed events\" which creates\n"
"a misleading impression.)\n"
"<pre>(:exposure ()(format t \"Exposed~%\"))\n"
"</pre>\n"
"In a real application, this triggers the code to redraw the\n"
"screen. We just note the arrival of the event on Lisp\n"
"terminal. Remember the function of the first argument of\n"
"format\n"
"<pre>format stream --- output to stream, return nil\n"
"format t --- output to standard output, return nil\n"
"format nil --- output to string, return string\n"
"</pre>\n"
"So format returns nil, and event-case goes round for another\n"
"try.\n"
"<pre>(:enter-notify () t))\n"
"</pre>\n"
"this returns true, so the event-case loop terminates and the\n"
"program proceeds to destroy the window and exit.\n"
"<p></p>"
msgstr ""
"<pre>:discard-p t \n"
"</pre>\n"
"жизненно важна. В ней говорится, что после отправки события и \n"
"запуска некоторого кода для его обработки оно удаляется из \n"
"очереди событий, даже если оно не было отмечено галочкой. \n"
"(В документации это называется «отбрасыванием необработанных событий»\n"
"(\"discarding unprocessed events\"), что создает обманчивое \n"
"впечатление.) \n"
"<pre>(:exposure ()(format t \"Exposed~%\"))\n"
"</pre>\n"
"В реальном приложении это запускает код для перерисовки экрана. \n"
"Мы же просто отмечаем прибытие события в терминал Лиспа. Помните \n"
"функцию первого аргумента format \n"
"<pre>format stream --- output to stream, return nil\n"
"format t --- output to standard output, return nil\n"
"format nil --- output to string, return string\n"
"</pre>\n"
"Таким образом, формат возвращает nil, и event-case повторяется для \n"
"другой попытки. \n"
"<pre>(:enter-notify () t))\n"
"</pre>\n"
"это возвращает истину, поэтому цикл event-case завершается, и программа \n"
"перейдет к уничтожению окна и завершении работы. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:431
msgid "<h2>Making a mark</h2>"
msgstr "<h2>Создание отметок</h2>"

#: in_ed/SimpleCLX.html:434
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/graphic-"
"x.txt\">graphic-x</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"graphic-x.txt\">graphic-x</a></p>"

#: in_ed/SimpleCLX.html:444
msgid ""
"<p>It is probably rather frustrating that it is only at the\n"
"third example that one gets to draw anything on the\n"
"screen. I've delayed because you cannot just draw a line,\n"
"you must first create a graphics context. It is worth taking\n"
"a little while to review the two problems that graphics\n"
"contexts are intended to solve.</p>"
msgstr ""
"<p>Вероятно, довольно неприятно, что только в третьем примере \n"
"можно что-либо нарисовать на экране. Я задержался, потому что \n"
"вы не можете просто нарисовать линию, вы должны сначала создать \n"
"графический контекст. Стоит уделить немного времени рассмотрению \n"
"двух проблем, для решения которых предназначены графические \n"
"контексты.</p>"

#: in_ed/SimpleCLX.html:460
msgid ""
"<p>The first problem is that one quickly finds that there are\n"
"many variations on drawing a line. How thick is it, what\n"
"colour is it. If it is thick, does it have an end cap? If so is it\n"
"round or square. Is it dashed? If so, how long is the dash\n"
"and how long the gap, or is there a more elaborate\n"
"pattern. More subtly, is the gap just left or is it inked in\n"
"the background colour? One certainly doesn't want to type in\n"
"all these different parameters every time one wants to draw\n"
"a line. There is a choice of solutions. Either one takes\n"
"advantage of Lisp's keyword parameters, eg a :thickness\n"
"keyword to set line thicknesses, or one has a graphics\n"
"context that packages up your favourite settings.</p>"
msgstr ""
"<p>Первая проблема заключается в том, что можно быстро обнаружить, \n"
"что существует множество вариантов рисования линии. Насколько она толстая, \n"
"какого цвета. Если она толстая, есть ли у неё заглушка? Если да, то "
"круглая \n"
"или квадратная. Она разбита(dashed)? Если да, то какова длина тире и "
"промежутка, \n"
"или существует более сложная схема. Более тонко, это только что "
"образовавшийся \n"
"зазор или он окрашен в цвет фона? Конечно, не хочется вводить все эти "
"разные \n"
"параметры каждый раз, когда нужно нарисовать линию. Есть выбор решений. "
"Либо \n"
"оно использует преимущества параметров ключевого слова Lisp, например, "
"ключевое \n"
"слово: thickness для установки толщины линий, либо имеет графический "
"контекст, \n"
"в котором хранятся ваши любимые настройки. </p>"

#: in_ed/SimpleCLX.html:470
msgid ""
"<p>The second problem is that one must remember that X11 is\n"
"intended as a network window system. Obviously one must send\n"
"the coordinates of the end points across the network, but\n"
"one wants to avoid repeatedly sending colour and thickness\n"
"data over the network. The graphics context should reside on\n"
"the server.</p>"
msgstr ""
"<p>Вторая проблема заключается в том, что нужно помнить, что X11 \n"
"задуман как сетевая оконная система. Очевидно, что необходимо \n"
"отправлять координаты конечных точек по сети, но нужно избегать \n"
"повторной отправки данных о цвете и толщине по сети. Графический \n"
"контекст должен находиться на сервере.</p>"

#: in_ed/SimpleCLX.html:481
msgid ""
"<p>The assumption underpining X11 is that you will often want\n"
"to make changes to the graphics context, sometimes drawing\n"
"in red, sometimes in blue, some lines thick, others thin,\n"
"but that you will circulate round a limited set of options.\n"
"For example, there might be hundreds of lines, but they will\n"
"all fall into one of the four categories thick-red,\n"
"thin-red, thick-blue, thin-blue.</p>"
msgstr ""
"<p>Предположение, лежащее в основе X11, заключается в том, \n"
"что вам часто нужно вносить изменения в графический контекст, \n"
"иногда рисовать красным, иногда синим, некоторые линии толстые, \n"
"другие тонкие, но вы будете использовать ограниченный набор параметров. \n"
"Например, линий могут быть сотни, но все они попадают в одну из \n"
"четырех категорий: толстый красный, тонкий красный, толстый синий, \n"
"тонкий синий.</p>"

#: in_ed/SimpleCLX.html:489
msgid ""
"<p>The way it works in X11 is that the client sets up a modest\n"
"number of graphics contexts on the server. Drawing commands\n"
"quote the numerical ID of the graphics context. So it is\n"
"very cheap to chop and change between graphics contexts.</p>"
msgstr ""
"<p>В X11 это работает так: клиент устанавливает небольшое количество \n"
"графических контекстов на сервере. Команды рисования указывают числовой \n"
"идентификатор графического контекста. Поэтому очень дешево нарезать и \n"
"менять графические контексты.</p>"

#: in_ed/SimpleCLX.html:496
msgid ""
"<p>Clients can also change the contents of a graphics\n"
"context. CLX saves up the changes and keeps a local copy,\n"
"only sending them over the network as required.</p>"
msgstr ""
"<p>Клиенты также могут изменять содержимое графического контекста. \n"
"CLX сохраняет изменения и сохраняет локальную копию, отправляя их \n"
"по сети только по мере необходимости. </p>"

#: in_ed/SimpleCLX.html:500
msgid ""
"<pre>(defun graphic-x (width height &amp;optional (host \"\"))\n"
"</pre>"
msgstr ""

#: in_ed/SimpleCLX.html:507
msgid ""
"<p>We are going to draw a big X across the window, with two\n"
"lines. The lines will be drawn according to the function\n"
"arguments, so if the window manager doesn't give you the\n"
"size you ask for the lines will not go neatly into the\n"
"corners as intended.\n"
"</p>"
msgstr ""
"<p>Мы собираемся нарисовать большой крестик поперек окна двумя линиями. \n"
"Линии будут нарисованы в соответствии с аргументами функции, поэтому, \n"
"если оконный менеджер не предоставит вам запрашиваемый размер, линии не \n"
"будут точно входить в углы, как предполагалось. \n"
"</p>"

#: in_ed/SimpleCLX.html:528
msgid ""
"<pre> \t (grackon (xlib:create-gcontext\n"
"\t\t   :drawable root-window\n"
"\t\t   :foreground white\n"
"\t\t   :background black))\n"
"</pre>\n"
"We need to store the graphics context in a variable, because\n"
"in principle we could have several different ones. We are\n"
"only storing CLX's local copy. Crucially that contains the\n"
"numerical ID which CLX inserts into calls over the network.\n"
"I struggled to come up with a variable\n"
"name. graphics-context is too long. gc to short. g-context\n"
"and graphics-c too lopsided. gra-con too ugly. grackon is\n"
"not much better, but putting the k in nearly makes a word\n"
"out of it.\n"
"<pre>    (describe grackon)\n"
"</pre>\n"
"Uses Common Lisp's built in describe command to display some\n"
"information in the Lisp window. This is not necessary, but\n"
"helps you see what is going on.\n"
"<p></p>"
msgstr ""
"<pre> \t (grackon (xlib:create-gcontext\n"
"\t\t   :drawable root-window\n"
"\t\t   :foreground white\n"
"\t\t   :background black))\n"
"</pre>\n"
"Нам нужно сохранить графический контекст в переменной, потому \n"
"что в принципе у нас может быть несколько разных контекстов. \n"
"Мы храним только локальную копию CLX. Важно то, что она содержит \n"
"числовой идентификатор, который CLX вставляет в вызовы по сети. \n"
"Я изо всех сил пытался придумать имя переменной. \n"
"graphics-context слишком длинный. gc наоборот короткое. g-context \n"
"и graphics-c слишком однобокие. gra-con слишком уродлив. \n"
"grackon не намного лучше, но добавление k почти делает из \n"
"него слово. \n"
"<pre>    (describe grackon)\n"
"</pre>\n"
"Используем встроенную команду описания Common Lisp для отображения \n"
"некоторой информации в окне Lisp. Это не обязательно, но помогает \n"
"понять, что происходит.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:534
msgid ""
"<p>Now we respond to exposure events by drawing:\n"
"</p>"
msgstr ""
"<p>Теперь мы реагируем на события exposure, рисуя: \n"
"</p>"

#: in_ed/SimpleCLX.html:550
msgid ""
"<pre>      (:exposure ()\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    0 height\n"
"\t\t\t    width 0)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    0 0\n"
"\t\t\t    width height))\n"
"</pre>\n"
"The calls are much as you would expect, which window the\n"
"line goes in, the graphics context specifying all the\n"
"details, and four numbers giving the coordinates of the\n"
"endpoints.\n"
"<p></p>"
msgstr ""
"<pre>      (:exposure ()\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    0 height\n"
"\t\t\t    width 0)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    0 0\n"
"\t\t\t    width height))\n"
"</pre>\n"
"Вызовы такие же, как и следовало ожидать: в какое окно \n"
"входит линия, в графическом контексте указываются все детали, \n"
"а четыре числа задают координаты конечных точек.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:559
msgid ""
"<p>I've sneaked in a little change to the event mask and the\n"
"list of events in event-case. Now the window stays up until\n"
"you click a button in it. So it is convenient to resize the\n"
"window, and iconise it and de-iconise it, and see that you\n"
"are redrawing the same old X.</p>"
msgstr ""
"<p>Я немного изменил маску событий и список событий в event-case. \n"
"Теперь окно остается открытым, пока вы не нажмете в нем кнопку. \n"
"Так что удобно изменять размер окна, уменьшать его и уменьшать, \n"
"и видеть, что вы перерисовываете тот же старый X. </p>"

#: in_ed/SimpleCLX.html:563
msgid "<h2>Graphing a function</h2>"
msgstr "<h2>Построение графика функции</h2>"

#: in_ed/SimpleCLX.html:566
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/graph-f."
"txt\">graph-f</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/graph-"
"f.txt\">graph-f</a></p>"

#: in_ed/SimpleCLX.html:579
msgid ""
"<p>We've just used Xlib's draw-line routine to draw a line. It\n"
"is natural to plunge into plotting the graph of a function\n"
"by writing a loop to draw many lines, from (0,f(0)) to\n"
"(1,f(1)) and from (1,f(1)) to (2,f(2)) and so on. Wait. Xlib\n"
"has a draw-lines command, which accepts a sequence of\n"
"numbers, alternating x and y co-ordinates. It links the\n"
"lines for you, using the joining style in the graphics\n"
"context, and can even fill your figure for you if you want\n"
"the lines to represent a polygon.</p>"
msgstr ""
"<p>Мы только что использовали процедуру draw-line(рисования линии) \n"
"Xlib, чтобы нарисовать линию. Естественно окунуться в построение \n"
"графика функции, написав цикл для рисования множества линий, от (0, f(0)) \n"
"до (1, f(1)) и от (1, f(1)) до (2, f(2)) и так далее. Подождите. \n"
"В Xlib есть команда draw-lines, которая принимает последовательность "
"чисел, \n"
"чередуя координаты x и y. Она связывает линии за вас, используя стиль \n"
"соединения в графическом контексте, и может даже заполнить вашу фигуру за "
"вас, \n"
"если вы хотите, чтобы линии представляли многоугольник.</p>"

#: in_ed/SimpleCLX.html:586
msgid ""
"<p>To obtain greater functionality, we simplify our CLX\n"
"code! We respond to exposure events thus:\n"
"</p>"
msgstr ""
"<p>Чтобы получить большую функциональность, мы упрощаем наш код CLX! \n"
"Мы реагируем на события exposure следующим образом: \n"
"</p>"

#: in_ed/SimpleCLX.html:596
msgid ""
"<pre>      (:exposure ()\n"
"\t\t (xlib:draw-lines my-window\n"
"\t\t\t\t  grackon\n"
"\t\t\t\t  points)\n"
"\t\t nil)\n"
"</pre>\n"
"All the rest of the functionality is provided by ordinary\n"
"Common Lisp code, that doesn't call CLX.\n"
"<p></p>"
msgstr ""
"<pre>      (:exposure ()\n"
"\t\t (xlib:draw-lines my-window\n"
"\t\t\t\t  grackon\n"
"\t\t\t\t  points)\n"
"\t\t nil)\n"
"</pre>\n"
"Вся остальная функциональность обеспечивается обычным кодом Common Lisp, \n"
"который не вызывает CLX.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:604
msgid ""
"<p>Actually the other code is CLX-style. The natural style for\n"
"Common Lisp is to use a sequence of points. CLX uses a\n"
"sequence twice as long alternating x and y. This results in\n"
"clumsy code. I walk you through it.</p>"
msgstr ""
"<p>На самом деле другой код выполнен в стиле CLX. Естественный стиль \n"
"Common Lisp - использовать последовательность точек. CLX использует \n"
"последовательность в два раза длиннее, чередуя x и y. Это приводит к \n"
"неуклюжему коду. Я провожу вас через него.</p>"

#: in_ed/SimpleCLX.html:610
msgid ""
"<p>First try out the single-graph function with something like\n"
"</p>"
msgstr ""
"<p>Сначала попробуйте функцию single-graph с чем-нибудь вроде  \n"
"</p>"

#: in_ed/SimpleCLX.html:618
msgid ""
"<pre>(single-graph #(0 0 100 100 200 300 300 0) 400 400)\n"
"</pre>\n"
"Well it works, but there are various issues. X works down\n"
"from the top of the screen, so the graph is wrong way\n"
"up. The graph is sized in pixels. The graph hasn't been\n"
"scaled to fit the window.\n"
"<p></p>"
msgstr ""
"<pre>(single-graph #(0 0 100 100 200 300 300 0) 400 400)\n"
"</pre>\n"
"Хорошо, это работает, но есть разные проблемы. X работает вниз \n"
"от верхнего края экрана, поэтому график идет вверх неправильно. \n"
"График имеет размер в пикселях. График не масштабирован под \n"
"размер окна.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:631
msgid ""
"<p>We start with a routine to generate the array for\n"
"plotting a graph of the function\n"
"<i>y</i>=<i>f</i>(<i>x</i>). We take advantage of the fact\n"
"that CL lets you use any characters in a symbol name to call\n"
"our function <i>x,f(x)</i> which reminds us that it is generating a\n"
"list which alternates <i>x1,f(x1),x2,f(x2),...</i> The vertical\n"
"lines are the essential quoting characters. They let you use\n"
"commas and parentheses in symbol names just like \" lets you\n"
"use them in strings.</p>"
msgstr ""
"<p>Начнем с процедуры создания массива для построения графика функции \n"
"<i>y</i>=<i>f</i>(<i>x</i>). Мы пользуемся преимуществом того факта, \n"
"что CL позволяет использовать любые символьные знаки в имени символа \n"
"для вызова нашей функции <i>x,f(x)</i> что напоминает нам, что она \n"
"генерирует список, который чередует <i>x1,f(x1),x2,f(x2),...</i> \n"
"Вертикальные линии - важные символы цитирования. Они позволяют "
"использовать \n"
"запятые и круглые скобки в именах символов точно так же, как \"позволяет \n"
"вам использовать их в строках\".</p>"

#: in_ed/SimpleCLX.html:640
msgid ""
"<p><tt>|x,f(x)|</tt> is passed a function f and calls it repeatedly to\n"
"build an array tabulating the function in the range x-min\n"
"to x-max. The only concessions to this being graphics code\n"
"are the inclusion of a resolution parameter saying how many\n"
"points to plot and the use of CLX's native data layout.</p>"
msgstr ""
"<p><tt>|x,f(x)|</tt> передается функция f и вызывает ее несколько раз, \n"
"чтобы построить массив, табулирующий функцию в диапазоне от x-min до x-"
"max. \n"
"Единственными уступками этому графическому коду являются включение "
"параметра \n"
"разрешения, указывающего, сколько точек нужно построить, и использование \n"
"собственного макета данных CLX.</p>"

#: in_ed/SimpleCLX.html:647
msgid ""
"<p>If we are going to scale this data to fit a window we need\n"
"to know the minimum and maximum values. This is calculated\n"
"by bound-xy-vec. </p>"
msgstr ""
"<p>Если мы собираемся масштабировать эти данные по размеру окна, \n"
"нам нужно знать минимальное и максимальное значения. Оно вычисляется \n"
"с помощью bound-xy-vec. </p>"

#: in_ed/SimpleCLX.html:655
msgid ""
"<p><tt>fit-xy-to-window</tt> uses <tt>bound-xy-vec</tt> to find the minima "
"and\n"
"maxima, then builds a new array of integers, scaled and\n"
"rounded for display. Note the natural use of the second\n"
"argument to round to divide out the range from min to max.</p>"
msgstr ""
"<p><tt>fit-xy-to-window</tt> использует <tt>bound-xy-vec</tt> для \n"
"нахождения минимумов и максимумов, а затем создает новый массив целых \n"
"чисел, масштабированных и округленных для отображения. Обратите внимание \n"
"на естественное использование второго аргумента для округления, чтобы \n"
"разделить диапазон от минимального до максимального.</p>"

#: in_ed/SimpleCLX.html:664
msgid ""
"<p>Finally, normalised-graph duplicates its width and height\n"
"arguments, to scale the plotting data and set the size of\n"
"the window. This is where we lose the chance to resize the\n"
"graph when the window is resized, so this is the code we\n"
"need to fix in a later, not quite so simple example.</p>"
msgstr ""
"<p>Наконец, normalized-graph дублирует свои аргументы ширины и высоты, \n"
"чтобы масштабировать данные построения и установить размер окна. \n"
"Здесь мы теряем шанс изменить размер графика при изменении размера окна, \n"
"поэтому это код, который нам нужно исправить в более позднем, не совсем \n"
"простом примере.</p>"

#: in_ed/SimpleCLX.html:670
msgid ""
"<p>So we can plot a few cycles of a sine wave\n"
"</p>"
msgstr ""
"<p>Итак, мы можем построить несколько циклов синусоидальной волны \n"
"</p>"

#: in_ed/SimpleCLX.html:689
msgid ""
"<pre>(normalised-graph (|x,f(x)| 100 (- pi) (* 3 pi) #'sin)\n"
"\t\t    400 200)\n"
"</pre>\n"
"or a parabola\n"
"<pre>(normalised-graph (|x,f(x)| 100 -3 3\n"
"\t\t  #'(lambda(x)(* x x)))\n"
"\t\t  400 400)\n"
"</pre>\n"
"The way such software usually works is for the array to\n"
"contain only the y data. The x data is implicit in a\n"
"starting value and an increment. Since we have used the CLX\n"
"representation, in which the x co-ordinates are listed\n"
"explicitly, it is easy to plot a parametric curve, by\n"
"supplying functions for x and y. <tt>|x(t),y(t)|</tt> builds the\n"
"array. Don't fall into the trap of using t for a\n"
"variable. t is a constant that CL reserves for representing\n"
"true. \n"
"<p></p>"
msgstr ""
"<pre>(normalised-graph (|x,f(x)| 100 (- pi) (* 3 pi) #'sin)\n"
"\t\t    400 200)\n"
"</pre>\n"
"или параболы \n"
"<pre>(normalised-graph (|x,f(x)| 100 -3 3\n"
"\t\t  #'(lambda(x)(* x x)))\n"
"\t\t  400 400)\n"
"</pre>\n"
"Такое программное обеспечение обычно работает так, что массив содержит \n"
"только данные y. Данные x неявно присутствуют в начальном значении и \n"
"приращении. Поскольку мы использовали представление CLX, в котором \n"
"координаты x указаны явно, легко построить параметрическую кривую, \n"
"предоставив функции для x и y. <tt>|x(t),y(t)|</tt> строит массив. \n"
"Не попадитесь в ловушку, используя t для переменной. t - это константа, \n"
"которую CL резервирует для представления истины.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:695
msgid ""
"<p>So one draws a circle with \n"
"</p>"
msgstr ""
"<p>Итак, рисуем круг с помощью\n"
"</p>"

#: in_ed/SimpleCLX.html:739
msgid ""
"<pre>(normalised-graph (|x(t),y(t)| 100 0 (* 2 pi) #'cos #'sin)\n"
"\t\t  400 400)\n"
"</pre>\n"
"and a Lisajou figure with\n"
"<pre>(normalised-graph (|x(t),y(t)| 100 0 (* 2 pi)\n"
"\t\t  #'(lambda(x)(sin (* 2 x))) #'sin)\n"
"\t\t  400 400)\n"
"</pre>\n"
"CL supports complex numbers, and complex numbers have a\n"
"natural interpretation as points in a plane. <tt>|z(t)|</tt> plots a\n"
"path in the complex plane. We can draw a circle with\n"
"<pre>(normalised-graph (|z(t)| 100 0 (* 2 pi)\n"
"\t\t   #'(lambda(theta)(exp (* #c(0 1) theta))))\n"
"\t\t   400 400)\n"
"</pre>\n"
"and a cycloid with\n"
"<pre>(normalised-graph (|z(t)| 100 0 (* 3 pi)\n"
"\t\t   #'(lambda(theta)\n"
"\t\t       (+ theta \n"
"\t\t\t  (exp (* #c(0 1)\n"
"\t\t\t\t  (- (* 3/2 pi) \n"
"\t\t\t\t     theta))))))\n"
"\t\t  800 200)\n"
"</pre>\n"
"I've included a routine to make the pretty patterns of the\n"
"spirograph toy of my childhood\n"
"<pre>(normalised-graph (|z(t)| 1000 0 (* 2 pi)\n"
"\t\t   (cycloid 3 10 13 5))\n"
"\t\t   400 400)\n"
"</pre>\n"
"Whoops. This is supposed to be \"simple examples in CLX\", not\n"
"\"Complex variables to make your head spin\". Lets go back to\n"
"think about the code. All the CLX calls are segregated in\n"
"single-graph. However CLX-ness leaks into the rest of the\n"
"code, due to the use of the CLX data layout of alternating x\n"
"and y. It might make for cleaner Common Lisp code to use a\n"
"more natural data structure, perhaps defining a point\n"
"structure, and using an array of points. Complex numbers\n"
"already provide this. Perhaps an array of complex numbers\n"
"would be best. On the other hand this web page is about\n"
"CLX. It seems appropriate to use the CLX data layout in the\n"
"example code.\n"
"<p></p>"
msgstr ""
"<pre>(normalised-graph (|x(t),y(t)| 100 0 (* 2 pi) #'cos #'sin)\n"
"\t\t  400 400)\n"
"</pre>\n"
"и фигуру Лиссажу с помощью\n"
"<pre>(normalised-graph (|x(t),y(t)| 100 0 (* 2 pi)\n"
"\t\t  #'(lambda(x)(sin (* 2 x))) #'sin)\n"
"\t\t  400 400)\n"
"</pre>\n"
"CL поддерживает комплексные числа, а комплексные числа естественным \n"
"образом интерпретируются как точки на плоскости. <tt>|z(t)|</tt> строит \n"
"путь на комплексной плоскости. Мы можем нарисовать круг с помощью \n"
"<pre>(normalised-graph (|z(t)| 100 0 (* 2 pi)\n"
"\t\t   #'(lambda(theta)(exp (* #c(0 1) theta))))\n"
"\t\t   400 400)\n"
"</pre>\n"
"и циклоид с помощью\n"
"<pre>(normalised-graph (|z(t)| 100 0 (* 3 pi)\n"
"\t\t   #'(lambda(theta)\n"
"\t\t       (+ theta \n"
"\t\t\t  (exp (* #c(0 1)\n"
"\t\t\t\t  (- (* 3/2 pi) \n"
"\t\t\t\t     theta))))))\n"
"\t\t  800 200)\n"
"</pre>\n"
"Я включил процедуру изготовления красивых выкроек из \n"
"игрушки-спирографа из моего детства. \n"
"<pre>(normalised-graph (|z(t)| 1000 0 (* 2 pi)\n"
"\t\t   (cycloid 3 10 13 5))\n"
"\t\t   400 400)\n"
"</pre>\n"
"Упс. Предполагается, что это будут «простые примеры в CLX», \n"
"а не «сложные переменные, от которых у вас закружится голова». \n"
"Вернемся к коду. Все вызовы CLX разделены на один график. \n"
"Однако CLX-ность просачивается в остальную часть кода из-за \n"
"использования структуры данных CLX с чередованием x и y. \n"
"Это может привести к тому, что более чистый код Common Lisp \n"
"будет использовать более естественную структуру данных, \n"
"возможно, с определением точечной структуры и использованием \n"
"массива точек. Комплексные числа уже обеспечивают это. Возможно, \n"
"лучше всего подойдет массив комплексных чисел. С другой стороны, \n"
"эта веб-страница посвящена CLX. Представляется целесообразным \n"
"использовать схему данных CLX в примере кода. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:744
msgid "<h2>Understanding exposure</h2>"
msgstr "<h2>Понимание exposure(экспозиции)</h2>"

#: in_ed/SimpleCLX.html:747
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"understanding-exposure.txt\">understanding-exposure</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"understanding-exposure.txt\">understanding-exposure</a></p>"

#: in_ed/SimpleCLX.html:756
msgid ""
"<p>The purpose of exposure events is to let the client redraw\n"
"freshly revealed parts of the window. Simple example code\n"
"does not have to confine itself within this intention. The\n"
"function \n"
"</p>"
msgstr ""
"<p>Цель событий exposure(экспонирования) - позволить клиенту перерисовать \n"
"только что открывшиеся части окна. Простой примерный код не должен \n"
"ограничиваться этим намерением. Функция \n"
"</p>"

#: in_ed/SimpleCLX.html:780
msgid ""
"<pre>(defun show-exposure-events (width height &amp;optional (host \"\"))\n"
"</pre>\n"
"doesn't redraw an existing image, like a good CLX program\n"
"should. Instead, this badboy of a function puts diagonal\n"
"crosses in the rectangles provided by exposure events so\n"
"that we can see the exposure events themselves.\n"
"<pre>      (:exposure (count x y width height)\n"
"\t\t (format t \"~A~%\" count)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    x y\n"
"\t\t\t    width height\n"
"\t\t\t    t)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    x (+ y height)\n"
"\t\t\t    (+ x width) y))\n"
"</pre>\n"
"Exposure events look obvious on the surface. Your window is\n"
"covered over. You iconise the covering window, revealing\n"
"your window underneath, and your window gets an expose event\n"
"detailing the rectangle that has been exposed.\n"
"<p></p>"
msgstr ""
"<pre>(defun show-exposure-events (width height &amp;optional (host \"\"))\n"
"</pre>\n"
"не перерисовывает существующее изображение, как это должна делать хорошая \n"
"программа CLX. Вместо этого эта злодейская функция помещает диагональные \n"
"кресты в прямоугольники, предоставленные событиями exposure(экспозиции), \n"
"чтобы мы могли видеть сами события экспозиции. \n"
"<pre>      (:exposure (count x y width height)\n"
"\t\t (format t \"~A~%\" count)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    x y\n"
"\t\t\t    width height\n"
"\t\t\t    t)\n"
"\t\t (xlib:draw-line my-window\n"
"\t\t\t    grackon\n"
"\t\t\t    x (+ y height)\n"
"\t\t\t    (+ x width) y))\n"
"</pre>\n"
"На поверхности события exposure(экспозиции) выглядят очевидными. \n"
"Ваше окно закрыто. Вы выделяете иконку закрывающего окна, открывая \n"
"свое окно под ним, и ваше окно получает событие expose с подробным \n"
"описанием прямоугольника, который был открыт(требует экспонирования/"
"отображения).\n"
"<p></p>"

#: in_ed/SimpleCLX.html:785
msgid "<p>Is the exposed region always rectangular? No.</p>"
msgstr "<p>Всегда ли открытая область прямоугольная? Нет.</p>"

#: in_ed/SimpleCLX.html:798
msgid ""
"<p>Shrink one of your X terms so that it fits inside this\n"
"programs window, and leave it on top. Expand another window\n"
"so that it will cover both, and place it on top. Now iconise\n"
"the large window, exposing this programs window, and the\n"
"smaller window sitting on top of it. The exposed region\n"
"forms a ring. It is not rectangular. It is not even simply\n"
"connected. Worse, one can use two small windows to create an\n"
"event that exposes a region with two holes in it. Try it and\n"
"see. It will become apparent what the count variable is for.</p>"
msgstr ""
"<p>Сократите один из ваших терминалов X так, чтобы он помещался \n"
"внутри этого окна программы, и оставьте его сверху. Разверните \n"
"другое окно так, чтобы оно закрывало оба, и поместите его сверху. \n"
"Теперь выделите иконкой большое окно, открывающее это окно программы, \n"
"и меньшее окно, расположенное поверх него. Открытая область образует \n"
"кольцо. Оно не прямоугольное. Это даже не просто связано. Хуже того, \n"
"можно использовать два маленьких окна для создания события, которое \n"
"открывает область с двумя отверстиями в ней. Попробуй и увидишь. \n"
"Станет очевидно, для чего предназначена  переменная count. </p>"

#: in_ed/SimpleCLX.html:809
msgid ""
"<p>The classic use of count is to spot that a single action has\n"
"exposed a region that is not rectangular and to simply give\n"
"up. The expose events are guaranteed to be contiguous in the\n"
"event queue, with the count counting down to zero, so the\n"
"program discards expose events with a positive value of\n"
"count and when the countdown ends, it redraws the whole\n"
"window.</p>"
msgstr ""
"<p>Классическое использование count(счетчика) - определить, \n"
"что одно действие выявило непрямоугольную область, и просто сдаться. \n"
"События экспонирования гарантированно будут непрерывными в очереди \n"
"событий с обратным отсчетом до нуля, поэтому программа отбрасывает \n"
"события экспонирования с положительным значением счетчика, а по \n"
"окончании обратного отсчета перерисовывает все окно.</p>"

#: in_ed/SimpleCLX.html:823
msgid ""
"<p>Is this an adequate approach? You'll have seen the problem\n"
"when you moved other windows over the show-exposure-events\n"
"function's window. Lots of narrow rectangles are\n"
"generated. If a real program embarks on an elaborate\n"
"recomputation of the whole window for each of many narrow\n"
"rectangular expose events, it could get hopelessly\n"
"backlogged. Unfortunately the X server cannot provide a\n"
"count down. It doesn't know when the user is going to stop\n"
"waving the uppper window around, so what would the count\n"
"start at?</p>"
msgstr ""
"<p>Это адекватный подход? Вы заметите проблему, когда переместите \n"
"другие окна над окном функции show-extension-events. Создается \n"
"множество узких прямоугольников. Если реальная программа приступит \n"
"к тщательно продуманному пересчету всего окна для каждого из \n"
"множества узких прямоугольных событий экспонирования, она может \n"
"безнадежно застрять. К сожалению, X-сервер не может производить \n"
"обратный отсчет. Он не знает, когда пользователь перестанет \n"
"размахивать верхним окном, так с чего же начнется отсчет? </p>"

#: in_ed/SimpleCLX.html:836
msgid ""
"<p>Two possible answers: One is that clients that are\n"
"presenting the results of slow computations should cache the\n"
"results on their side of the network and retransmit from\n"
"their explicitly managed cache. Alternatively, create a\n"
"pixmap at the server end. Write the data into the pixmap and\n"
"have the client program issue instructions to the X server\n"
"to copy the pixmap into the client programs window. But\n"
"where are pixmaps stored? In the graphics card? In the\n"
"server machines main memory. I don't know.</p>"
msgstr ""
"<p>Два возможных ответа: один заключается в том, что клиенты, \n"
"представляющие результаты медленных вычислений, должны кэшировать \n"
"результаты на своей стороне сети и повторно передавать их из своего \n"
"явно управляемого кеша. В качестве альтернативы создайте растровое \n"
"изображение на стороне сервера. Запишите данные в растровое \n"
"изображение и попросите клиентскую программу выдать инструкции X-серверу, \n"
"чтобы скопировать растровое изображение в окно клиентских программ. \n"
"Но где хранятся растровые изображения? В видеокарте? В основной памяти\n"
"серверных машин . Я не знаю.</p>"

#: in_ed/SimpleCLX.html:844
msgid ""
"<p>We don't have to tackle those problems now. It is enough\n"
"just to have an idea of what causes exposure events, and \n"
"what your client program has to cope with as far as numbers\n"
"and shapes.</p>"
msgstr ""
"<p>Сейчас нам не нужно решать эти проблемы. Достаточно просто \n"
"иметь представление о том, что вызывает события exposure, и с \n"
"чем приходится справляться вашей клиентской программе, вплоть \n"
"до чисел и форм. </p>"

#: in_ed/SimpleCLX.html:848
msgid "<h2>Hello World</h2>"
msgstr ""

#: in_ed/SimpleCLX.html:851
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/hello-"
"world.txt\">hello-world</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/hello-"
"world.txt\">hello-world</a></p>"

#: in_ed/SimpleCLX.html:861
msgid ""
"<p>Simple examples make use of defaults. The clx commands to\n"
"place text on the screen draw it under the control of the\n"
"graphics context. The graphics context contains a field for\n"
"the font information, and is supposed to default to\n"
"something useable. So we can replace our crossed lines with\n"
"text.</p>"
msgstr ""
"<p>В простых примерах используются значения по умолчанию. \n"
"Команды clx для размещения текста на экране рисуют его под \n"
"контролем графического контекста. Графический контекст содержит \n"
"поле для информации о шрифте, и предполагается, что по умолчанию \n"
"используется что-то полезное. Таким образом, мы можем заменить \n"
"наши перекрещенные линии текстом. </p>"

#: in_ed/SimpleCLX.html:865
msgid "<h2>Ragged Right</h2>"
msgstr "<h2>Ragged Right(Рваный справа)</h2>"

#: in_ed/SimpleCLX.html:869
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/ragged-"
"right.txt\">ragged-right</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"ragged-right.txt\">ragged-right</a></p>"

#: in_ed/SimpleCLX.html:877
msgid ""
"<p>Some examples are so simples that they are useless. In\n"
"particular, one wants to call <tt>xlib:text-width</tt> to keep track\n"
"of spacing, and that requires that you know what font you\n"
"are using. Just letting it default doesn't really work. </p>"
msgstr ""
"<p>Некоторые примеры настолько просты, что бесполезны. В частности, \n"
"нужно вызвать <tt>xlib:text-width</tt>, чтобы отслеживать интервалы, \n"
"а для этого необходимо знать, какой шрифт вы используете. Просто \n"
"позволить ему остаться по умолчанию на самом деле не срабатывает. </p>"

#: in_ed/SimpleCLX.html:884
msgid ""
"<p>The obvious thing to do is to have an extra variable <tt>font</tt>,\n"
"initialised by a call to <tt>xlib:open-font</tt>\n"
"</p>"
msgstr ""
"<p>Очевидно, что нужно иметь дополнительную переменную <tt>font</"
"tt>(шрифт), \n"
"инициализированную вызовом <tt>xlib:open-font</tt>\n"
"</p>"

#: in_ed/SimpleCLX.html:920
msgid ""
"<pre>(font (xlib:open-font\n"
"\tdisplay\n"
"\t\"-*-lucida-medium-r-*-*-12-*-*-*-*-*-*\")\n"
"</pre>\n"
"This font can be passed to the call of <tt>xlib:create-gcontext</tt>.\n"
"There is an alternative. If the font argument to\n"
"<tt>xlib:create-gcontext</tt> is a stringable, <tt>xlib:create-gcontext</"
"tt>\n"
"will open the font for you, using the string as its name.\n"
"Coming from a background of many years programming in\n"
"statically typed languages I immediately spotted the flaw in\n"
"the alternative. I would not be able to write:\n"
"<pre>(xlib:text-width font word)\n"
"</pre>\n"
"but would have to access the font component of the graphics\n"
"context thus:\n"
"<pre>(xlib:text-width (xlib:gcontext-font grackon) word)\n"
"</pre>\n"
"My many years of experience with statically typed languages\n"
"had mislead me. Yes, <tt>xlib:text-width</tt> expects a font, but if\n"
"it is given a graphics context, it doesn't throw a type\n"
"error, it simply extracts the font from the graphics context\n"
"and carries on. So <tt>ragged-right.lisp</tt> doesn't have a separate\n"
"variable for the font and just does\n"
"<pre>(xlib:text-width grackon word)\n"
"</pre>\n"
"This doesn't work entirely smoothly. One still has to write\n"
"<pre>(xlib:font-ascent (xlib:gcontext-font grackon))\n"
"</pre>\n"
"Real code imports the xlib package, and doesn't use the xlib\n"
"package qualifier. (I'm no longer so sure about this. Why not write a\n"
"wrapper <tt>alan:font-ascent</tt> that extracts the font from a\n"
"graphics context? Why not write a wrapper <tt>alan:draw-line</tt> on\n"
"<tt>xlib:draw-line</tt> that remembers the line ready for subsequence\n"
"expose events?)\n"
"<p></p>"
msgstr ""
"<pre>(font (xlib:open-font\n"
"\tdisplay\n"
"\t\"-*-lucida-medium-r-*-*-12-*-*-*-*-*-*\")\n"
"</pre>\n"
"Этот шрифт можно передать вызову <tt>xlib:create-gcontext</tt>. \n"
"Альтернатива есть. Если аргумент font для <tt>xlib:create-gcontext</tt> \n"
"является строковым, <tt>xlib:create-gcontext</tt> откроет шрифт \n"
"для вас, используя строку в качестве имени. Исходя из многолетнего опыта \n"
"программирования на статически типизированных языках, я сразу заметил \n"
"недостаток альтернативы. Я бы не смог написать:\n"
"<pre>(xlib:text-width font word)\n"
"</pre>\n"
"но должен получить доступ к компоненту шрифта графического контекста \n"
"таким образом: :\n"
"<pre>(xlib:text-width (xlib:gcontext-font grackon) word)\n"
"</pre>\n"
"Мой многолетний опыт работы со статически типизированными языками ввел \n"
"меня в заблуждение. Да, <tt>xlib:text-width</tt> ожидает шрифт, \n"
"но если ему задан графический контекст, он не вызывает ошибку типа, \n"
"он просто извлекает шрифт из графического контекста и продолжает работу. \n"
"Итак, <tt>ragged-right.lisp</tt> не имеет отдельной переменной для \n"
"шрифта, а просто имеет \n"
"<pre>(xlib:text-width grackon word)\n"
"</pre>\n"
"Это работает не совсем гладко. Еще нужно написать \n"
"<pre>(xlib:font-ascent (xlib:gcontext-font grackon))\n"
"</pre>\n"
"Настоящий код (обычно) импортирует пакет xlib и не использует \n"
"квалификатор пакета xlib. (Я уже не так уверен в этом. Почему бы \n"
"не написать оболочку <tt>alan:font-ascent</tt>, которая извлекает \n"
"шрифт из графического контекста? Почему бы не написать оболочку \n"
"<tt>alan:draw-line</tt> на <tt>xlib:draw-line</tt>, которая \n"
"запоминает строку, готовую к событиям последовательности expose?)\n"
"<p></p>"

#: in_ed/SimpleCLX.html:929
msgid ""
"<p>There is a more general point here about the difference\n"
"between programming in statically typed languages and\n"
"programming in dynamically typed languages such as CL.\n"
"I'm used to writing statically typed code such as\n"
"</p>"
msgstr ""
"<p>Здесь есть более общий момент о разнице между программированием \n"
"на статически типизированных языках и программированием на динамически \n"
"типизированных языках, таких как CL. Я привык писать статически \n"
"типизированный код, такой как\n"
"</p>"

#: in_ed/SimpleCLX.html:945
msgid ""
"<pre>(eat-fruit apple)\n"
"(eat-fruit (peel bananna))\n"
"</pre>\n"
"and getting a type error if I forget to extract a component\n"
"part from an aggregate before passing it to a routine that\n"
"expects a component part. In CL I can clean up my code by\n"
"pushing the extraction of components from aggregates into\n"
"the code that processes the components. The generic\n"
"functions in CLOS provide a convenient way to code this. But\n"
"I think that I only win if I can be more thorough than Xlib.\n"
"Being able to write (eat-fruit bananna) is only an advantage\n"
"if one can also write (eat-fruit orange). I don't want to\n"
"have to remember that I can write (eat-fruit bananna) but\n"
"still have to write (eat-fruit (peel orange))\n"
"<p></p>"
msgstr ""
"<pre>(eat-fruit apple)\n"
"(eat-fruit (peel bananna))\n"
"</pre>\n"
"и получаю ошибку типа, если я забываю извлечь компонентную \n"
"часть из агрегата перед передачей ее подпрограмме, которая \n"
"ожидает компонентную часть. В CL я могу очистить свой код, \n"
"вставив извлечение компонентов из агрегатов в код, \n"
"обрабатывающий компоненты. Универсальные функции в CLOS \n"
"предоставляют удобный способ кодировать это. Но я думаю, \n"
"что выиграю, только если смогу быть более основательным, \n"
"чем Xlib. Умение писать (eat-fruit bananna) является преимуществом \n"
"только в том случае, если можно также писать (eat-fruit orange). \n"
"Я не хочу вспоминать, что могу писать (eat-fruit bananna), \n"
"но все равно писать (eat-fruit (peel orange)) \n"
"<p></p>"

#: in_ed/SimpleCLX.html:951
msgid ""
"<p>Enough of coder's chit-chat, back to running actual\n"
"code.</p>"
msgstr ""
"<p>Хватит болтовни кодера, вернемся к запуску настоящего кода.\n"
"</p>"

#: in_ed/SimpleCLX.html:963
msgid ""
"<p>The point of setting text is to allow the user of the\n"
"program to resize the text window and have the text reflow\n"
"to suit, but the positions of the words in the window are\n"
"computed in the X-client (think: big machine in basement)\n"
"while the window size is controlled by the X-server, the\n"
"machine you are touching and seeing. The X-server must\n"
"notify the X-client of changes to the configuration of the\n"
"window.</p>"
msgstr ""
"<p>Смысл установки текста состоит в том, чтобы позволить \n"
"пользователю программы изменять размер текстового окна и \n"
"перекомпоновывать текст в соответствии с требованиями, \n"
"но позиции слов в окне вычисляются в X-клиенте (подумайте: \n"
"большая машина в подвале) в то время как размер окна \n"
"контролируется X-сервером, машиной, к которой вы прикасаетесь \n"
"и видите. X-сервер должен уведомлять X-клиент об изменениях \n"
"в конфигурации окна.</p>"

#: in_ed/SimpleCLX.html:970
msgid ""
"<p>We add <tt>:structure-notify</tt> to the event mask of our window, so\n"
"that it is listening. We also put\n"
"</p>"
msgstr ""
"<p>Мы добавляем: <tt>:structure-notify</tt> к маске событий нашего окна, \n"
"чтобы оно слушало(listening). Мы также положили\n"
"</p>"

#: in_ed/SimpleCLX.html:979
msgid ""
"<pre>(:configure-notify (width height)\n"
"\t (setf actual-width width actual-height height)\n"
"\t nil)\n"
"</pre>\n"
"in the event-loop so that the client porgram stays up to\n"
"date with the window size as the user changes it via the\n"
"window manager running on the X-server.\n"
"<p></p>"
msgstr ""
"<pre>(:configure-notify (width height)\n"
"\t (setf actual-width width actual-height height)\n"
"\t nil)\n"
"</pre>\n"
"в цикле событий, чтобы клиентская программа оставалась \n"
"актуальной с размером окна, когда пользователь изменяет \n"
"его через оконный менеджер, запущенный на X-сервере. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:991
msgid ""
"<p>The Xlib manual is explicit that if the window manager\n"
"resizes the window before it is mapped, the Configure-Notify\n"
"event appears on the queue before the first Expose event.\n"
"My code depends on the Configure-Notify event to initialise\n"
"the actual width and height, even if the window manager\n"
"gives me the size I ask for. I've not tracked down\n"
"documentation on whether I'm allowed to do this. Please\n"
"email me if you find it.</p>"
msgstr ""
"<p>В руководстве Xlib четко указано, что если оконный менеджер \n"
"изменяет размер окна перед его отображением, событие Configure-Notify \n"
"появляется в очереди перед первым событием Expose. Мой код зависит \n"
"от события Configure-Notify для инициализации фактической ширины и \n"
"высоты, даже если оконный менеджер дает мне размер, который я прошу. \n"
"Я не нашел документации о том, разрешено ли мне это делать. \n"
"Пожалуйста, напишите мне, если найдете.</p>"

#: in_ed/SimpleCLX.html:997
msgid ""
"<p>The function expects the text as a list of words, so\n"
"</p>"
msgstr ""
"<p>Функция ожидает текст в виде списка слов, поэтому\n"
"</p>"

#: in_ed/SimpleCLX.html:1003
msgid ""
"<pre>(ragged-right '(\"The\" \"cat\" \"sat\" \"on\" \"the\" \"mat.\"))\n"
"</pre>\n"
"displays a particularly banal sentence. Resize the window\n"
"and see the text flow.\n"
"<p></p>"
msgstr ""
"<pre>(ragged-right '(\"The\" \"cat\" \"sat\" \"on\" \"the\" \"mat.\"))\n"
"</pre>\n"
"показывает особенно банальную фразу. Измените размер окна и\n"
"посмотрите, как идет текст. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:1010
msgid ""
"<p>Representing the text as a list of words makes it trivial to\n"
"write a non-breaking space.\n"
"</p>"
msgstr ""
"<p>Представление текста в виде списка слов упрощает запись \n"
"неразрывного пробела.\n"
"</p>"

#: in_ed/SimpleCLX.html:1028
msgid ""
"<pre>(ragged-right '(\"The cat\" \"sat\" \"on\" \"the mat.\"))\n"
"</pre>\n"
"prevents breaks after the word \"the\". However, the\n"
"representation is painful to type in. So ragged-right.lisp\n"
"includes a routine to break a string at internal white space\n"
"characters. Cut and paste\n"
"<pre>(ragged-right (white-space-split\n"
"\"Ragged right setting is easier than justified setting.\n"
"This is both a strength and a weakness.  Although the\n"
"regular word spacing of ragged right setting is easier on\n"
"the reader's eye, in craft work there is honour and glory in\n"
"doing things the hard way. The reader of justified text\n"
"knows of the labour and expense, and is flattered to get\n"
"something for nothing, even if it is worth what he paid.\"))\n"
"</pre>\n"
"to see a larger example. \n"
"<p></p>"
msgstr ""
"<pre>(ragged-right '(\"The cat\" \"sat\" \"on\" \"the mat.\"))\n"
"</pre>\n"
"предотвращает разрывы после слова «the». Однако это \n"
"представление болезненно вводить. Итак, ragged-right.lisp \n"
"включает подпрограмму для разбиения строки по внутренним \n"
"знакам - пробелам. Вырежте и вставьте\n"
"<pre>(ragged-right (white-space-split\n"
"\"Ragged right setting is easier than justified setting.\n"
"This is both a strength and a weakness.  Although the\n"
"regular word spacing of ragged right setting is easier on\n"
"the reader's eye, in craft work there is honour and glory in\n"
"doing things the hard way. The reader of justified text\n"
"knows of the labour and expense, and is flattered to get\n"
"something for nothing, even if it is worth what he paid.\"))\n"
"</pre>\n"
"чтобы увидеть более крупный пример. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:1040
msgid ""
"<p>Notice that every expose event is generating oodles of\n"
"network traffic. An xlib:draw-glyph for every word in the\n"
"text, even if it doesn't fit in the window and is just\n"
"discarded by the X-server. On my 166MHz Pentium, you can see\n"
"slight lags. I doubt you can see the problem on your shiny\n"
"modern machine. However, one cool idea is to deploy web\n"
"services using X11, instead of HTTP. That would need much\n"
"better code.</p>"
msgstr ""
"<p>Обратите внимание, что каждое событие expose генерирует \n"
"огромное количество сетевого трафика. xlib:draw-glyph для \n"
"каждого слова в тексте, даже если оно не помещается в окне \n"
"и просто отбрасывается X-сервером. На моем Pentium 166 МГц \n"
"можно заметить небольшие задержки. Сомневаюсь, что вы заметите \n"
"проблему на своей блестящей современной машине. Однако есть одна \n"
"интересная идея - развернуть веб-службы с использованием X11 \n"
"вместо HTTP. Для этого потребуется гораздо лучший код. </p>"

#: in_ed/SimpleCLX.html:1044
msgid "<h2>Coloured rectangles</h2>"
msgstr "<h2>Цветные прямоугольники(Coloured rectangles)</h2>"

#: in_ed/SimpleCLX.html:1047
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"mondrian.txt\">Mondrian</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"mondrian.txt\">Mondrian</a></p>"

#: in_ed/SimpleCLX.html:1057
msgid ""
"<p>Turning away from text for a few minutes, let us look at\n"
"colour. An obvious demonstration program for colour is to\n"
"display some coloured rectangles, so the source file starts\n"
"in a fairly obvious way, with a structure of a coloured\n"
"rectangle. Obviously the random-choice routine is to choose\n"
"a colour from a list of colours. </p>"
msgstr ""
"<p>Отойдя от текста на несколько минут, давайте посмотрим на цвет. \n"
"Очевидная демонстрационная программа для цвета - это отображение \n"
"нескольких цветных прямоугольников, поэтому исходный файл начинается \n"
"довольно очевидным образом со структуры цветного прямоугольника. \n"
"Очевидно, что процедура random-choice(случайного выбора) заключается \n"
"в выборе цвета из списка цветов. </p>"

#: in_ed/SimpleCLX.html:1065
msgid ""
"<p>Common Lisp's built in make-list function doesn't quite suit\n"
"our needs because it evaluates the initial item form just\n"
"the once, so we define our own version, cons-up, to call a\n"
"constructor repeatedly.</p>"
msgstr ""
"<p>Встроенная функция make-list в Common Lisp не совсем соответствует \n"
"нашим потребностям, потому что она вычисляет исходную форму элемента \n"
"только один раз, поэтому мы определяем нашу собственную версию cons-up \n"
"для многократного вызова конструктора. </p>"

#: in_ed/SimpleCLX.html:1076
msgid ""
"<p>Well, we have a list of colours, '(red green blue ... ), and\n"
"we want a graphics context for each colour, so that we can\n"
"swap from context to context as we go down the list of\n"
"rectangles drawing each in its own colour. There are lots of\n"
"ways to map from symbols to graphics contexts. I've chosen to\n"
"put the graphics context onto the symbol's property list as\n"
"its grackon property.</p>"
msgstr ""
"<p>Что ж, у нас есть список цветов '(red green blue ... ), \n"
"и нам нужен графический контекст для каждого цвета, чтобы \n"
"мы могли переключаться от контекста к контексту, когда мы \n"
"спускаемся вниз по списку прямоугольников, рисуя каждый в \n"
"своем собственном цвете. Есть много способов сопоставить \n"
"символы с графическими контекстами. Я решил поместить \n"
"графический контекст в список свойств символа как его \n"
"свойство grackon.</p>"

#: in_ed/SimpleCLX.html:1083
msgid ""
"<p>First we make additions to the propery lists\n"
"I should have used mapc, or better yet, dolist.\n"
"</p>"
msgstr ""
"<p>Сначала мы вносим дополнения в списки свойств, \n"
"я должен был использовать mapc или, еще лучше, dolist. \n"
"</p>"

#: in_ed/SimpleCLX.html:1109
msgid ""
"<pre>    (mapcar\n"
"     #'(lambda(colour-symbol)\n"
"\t (setf (get colour-symbol 'grackon)\n"
"\t       (xlib:create-gcontext\n"
"\t\t   :drawable root-window\n"
"\t\t   :foreground (xlib:alloc-color\n"
"\t\t\t\t(xlib:window-colormap root-window)\n"
"\t\t\t\t(symbol-name colour-symbol))\n"
"\t\t   :background black)))\n"
"     *colour-list*)\n"
"</pre>\n"
"The important new call is xlib:alloc-color. It takes a\n"
"specification of a colour as so much red, so much green, so\n"
"much blue, and tells you the pixel value to send to the\n"
"graphics card to get that colour. The inner workings of X11\n"
"contain some text files saying that \"yellow\" is red and green and\n"
"\"avocado\" is mostly green, and so on, so you can pass\n"
"alloc-color a string and it will look up the red, green, and\n"
"blue components for you. Indeed you can pass it a symbol and\n"
"it will use symbol-name to get a string to look up. Also,\n"
"some graphics cards let you vary the colour map, so X\n"
"regards colour maps as belonging to windows. xalloc-color\n"
"needs to be told which window to use. We use the\n"
"root-window.\n"
"<p></p>"
msgstr ""
"<pre>    (mapcar\n"
"     #'(lambda(colour-symbol)\n"
"\t (setf (get colour-symbol 'grackon)\n"
"\t       (xlib:create-gcontext\n"
"\t\t   :drawable root-window\n"
"\t\t   :foreground (xlib:alloc-color\n"
"\t\t\t\t(xlib:window-colormap root-window)\n"
"\t\t\t\t(symbol-name colour-symbol))\n"
"\t\t   :background black)))\n"
"     *colour-list*)\n"
"</pre>\n"
"Важным новым вызовом является xlib:alloc-color. Он принимает \n"
"спецификацию цвета: столько красного, столько зеленого, столько синего \n"
"и сообщает вам значение пикселя, которое нужно отправить на видеокарту \n"
"для получения этого цвета. Внутренняя работа X11 содержит некоторые \n"
"текстовые файлы, в которых говорится, что «желтый» - это красный и \n"
"зеленый, а «авокадо» - в основном зеленый, и так далее, поэтому вы \n"
"можете передать строку alloc-color, и она будет искать красный, \n"
"зеленый и синие компоненты для вас. В самом деле, вы можете передать \n"
"ему символ, и он будет использовать имя символа для поиска строки. \n"
"Кроме того, некоторые видеокарты позволяют изменять карту цветов, \n"
"поэтому X считает карты цветов принадлежащими окнам. xalloc-color \n"
"нужно указать, какое окно использовать. Мы используем root-window(корневое-"
"окно).\n"
"<p></p>"

#: in_ed/SimpleCLX.html:1121
msgid ""
"<p>The call to <tt>xlib:draw-rectangle</tt> is mostly how you\n"
"expect. The optional <tt>fill-p</tt> parameter could have just been\n"
"<tt>t</tt>, but I find it annoying to have  annonymous constants at\n"
"the end of parameter lists. <tt>'fill</tt> does just as well at\n"
"saying \"yes\" to the computer, and also reminds the\n"
"programmer what he was saying yes to.</p>"
msgstr ""
"<p>Вызов <tt>xlib:draw-rectangle</tt> в основном соответствует вашим \n"
"ожиданиям. Необязательный параметр <tt>fill-p</tt> мог быть просто \n"
"<tt>t</tt>, но меня раздражает наличие анонимных констант в конце \n"
"списков параметров. <tt>'fill</tt> так же хорошо говорит \"да\" "
"компьютеру, \n"
"а также напоминает программисту о том, что он сказал \"да\". </p>"

#: in_ed/SimpleCLX.html:1125
msgid "<h2>More coloured rectangles</h2>"
msgstr "<h2>Более цветные прямоугольники</h2>"

#: in_ed/SimpleCLX.html:1128
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"subwindow.txt\">subwindow</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"subwindow.txt\">subwindow</a></p>"

#: in_ed/SimpleCLX.html:1135
msgid ""
"<p>Windows live in heirarchical trees. So far our sole window\n"
"has been childless. Let us change that, creating some\n"
"subwindows distinguished by their background colours.</p>"
msgstr ""
"<p>Окна живут в иерархических деревьях. Пока что наше единственное \n"
"окно бездетно. Давайте изменим это, создав несколько подокон, \n"
"отличающихся цветом фона.</p>"

#: in_ed/SimpleCLX.html:1144
msgid ""
"<p>The first thing that strikes you is the omission of expose\n"
"events. You only ever omit expose events in simple example\n"
"code. I'm making a point here. The X-server looks after\n"
"window backgrounds for you. A command line such as\n"
"</p>"
msgstr ""
"<p>Первое, что бросается в глаза, - это отсутствие  событий expose. \n"
"Вы всегда опускаете события expose только в простом примере кода. \n"
"Я здесь говорю. X-сервер заботится о фонах окон за вас. Командная строка, \n"
"например \n"
"</p>"

#: in_ed/SimpleCLX.html:1150
msgid ""
"<pre>(graphic-x 300 300 50 50)\n"
"</pre>\n"
"makes the windows overlap, so you can see the effect of\n"
"circulating them by pressing a key.\n"
"<p></p>"
msgstr ""
"<pre>(graphic-x 300 300 50 50)\n"
"</pre>\n"
"заставляет окна накладываться друг на друга, поэтому вы можете \n"
"увидеть эффект их перемещения, нажав клавишу.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:1158
msgid ""
"<p>Also notice that the X-server is keeping track of which of\n"
"your windows the cursor is in. Although X is quite low\n"
"level, there are some important house keeping tasks that it\n"
"does keep off your back.</p>"
msgstr ""
"<p>Также обратите внимание, что X-сервер отслеживает, в каком из \n"
"ваших окон находится курсор. Хотя X находится на довольно низком \n"
"уровне, есть некоторые важные домашние задачи, которые он скрывает \n"
"от вас. </p>"

#: in_ed/SimpleCLX.html:1168
msgid ""
"<h2>Paragraphs, or Ragged Right continued</h2>\n"
"<dl>\n"
"<dt>Source file\n"
"</dt><dd> <a href=\"http://alan.sdf-eu.org/clx/simple/examples/paragraphs.txt"
"\">paragraphs</a>\n"
"</dd><dt>Sample text\n"
"</dt><dd> <a href=\"http://alan.sdf-eu.org/clx/simple/examples/escape.txt"
"\">escape</a>\n"
"</dd></dl>"
msgstr ""
"<h2>Параграфы(Paragraphs), или продолжение Ragged Right</h2>\n"
"<dl>\n"
"<dt>Исходный файл\n"
"</dt><dd> <a href=\"http://alan.sdf-eu.org/clx/simple/examples/paragraphs.txt"
"\">paragraphs</a>\n"
"</dd><dt>Пример текста\n"
"</dt><dd> <a href=\"http://alan.sdf-eu.org/clx/simple/examples/escape.txt"
"\">escape</a>\n"
"</dd></dl>"

#: in_ed/SimpleCLX.html:1174
msgid ""
"<p>I've made incremental improvements to ragged-right.lisp,\n"
"re-arranging the code, and improving it to display more than\n"
"one paragraph. One evaluates\n"
"</p>"
msgstr ""
"<p>Я внес постепенные улучшения в ragged-right.lisp, изменив порядок \n"
"кода и улучшив его для отображения более одного параграфа. \n"
"Одно вычисление\n"
"</p>"

#: in_ed/SimpleCLX.html:1182
msgid ""
"<pre>(paragraphs \"escape\")\n"
"</pre>\n"
"to read the text in the sample file. There is an interesting\n"
"point to be made if I get round to evolving this code on two\n"
"more steps. This step doesn't introduce any new feature of\n"
"CLX.\n"
"<p></p>"
msgstr ""
"<pre>(paragraphs \"escape\")\n"
"</pre>\n"
"чтобы прочитать текст в образце файла. Если я сделаю еще два шага \n"
"для развития этого кода, это будет интересный момент. Этот шаг не \n"
"вводит никаких новых функций CLX.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:1186
msgid "<h2>Analogue input</h2>"
msgstr "<h2>Аналоговый ввод</h2>"

#: in_ed/SimpleCLX.html:1189
msgid ""
"<p>Source file: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"analogue-input.txt\">analogue-input</a></p>"
msgstr ""
"<p>Исходный файл: <a href=\"http://alan.sdf-eu.org/clx/simple/examples/"
"analogue-input.txt\">analogue-input</a></p>"

#: in_ed/SimpleCLX.html:1198
msgid ""
"<p>One of the points of learning CLX is to get pointer\n"
"positions, so that you can equip your programs with analogue\n"
"controls. Then the positions of the pointer on the screen\n"
"can represent numbers, higher up the screen for a bigger\n"
"number, further to the right for a bigger number.</p>"
msgstr ""
"<p>Одним из пунктов изучения CLX является определение положения "
"указателей, \n"
"чтобы вы могли оснастить свои программы аналоговыми элементами управления. \n"
"Затем положения указателя на экране могут представлять числа, выше по "
"экрану \n"
"для большего числа, дальше вправо для большего числа.\n"
"</p>"

#: in_ed/SimpleCLX.html:1205
msgid ""
"<p>This little routine lets the user input two numbers by\n"
"clicking in the window. For example\n"
"</p>"
msgstr ""
"<p>Эта небольшая процедура позволяет пользователю вводить два числа, \n"
"щелкая по окну. Например \n"
"</p>"

#: in_ed/SimpleCLX.html:1211
msgid ""
"<pre>(pick2numbers 400 100)\n"
"</pre>\n"
"pops up a window 400 pixels wide and 100 pixels tall. Can\n"
"you input (200 . 50) by clicking exactly in the middle?\n"
"<p></p>"
msgstr ""
"<pre>(pick2numbers 400 100)\n"
"</pre>\n"
"всплывает окно шириной 400 пикселей и высотой 100 пикселей. \n"
"Можете ли вы ввести (200 . 50), щелкнув точно посередине?\n"
"<p></p>"

#: in_ed/SimpleCLX.html:1219
msgid ""
"<p>In <a href=\"http://alan.sdf-eu.org/clx/simple/examples/understanding-"
"exposure.txt\">understanding-exposure</a>\n"
" we extracted some parameters from\n"
"the exposure event with\n"
"</p>"
msgstr ""
"<p>Для <a href=\"http://alan.sdf-eu.org/clx/simple/examples/understanding-"
"exposure.txt\">понимания\n"
" экспозиции(exposure)</a> мы извлекли некоторые параметры из события \n"
"exposure(экспозиции) с помощью \n"
"</p>"

#: in_ed/SimpleCLX.html:1234
msgid ""
"<pre>(:exposure (count x y width height)\n"
"</pre>\n"
"Now we obtain the pointer postion by extracting it from the \n"
"button-press event.\n"
"<pre>(:button-press(x y)\n"
"</pre>\n"
"X11 numbers its pixels as though it is using the registers\n"
"in the video controller integrated circuit that is scanning\n"
"the electron beam from left to right and from top to\n"
"bottom. This passed unremarked in\n"
"ragged-right.lisp. Incrementing the line count caused higher\n"
"numbered lines to appear low down the page, in a perfectly\n"
"natural top to bottom reading order.\n"
"<p></p>"
msgstr ""
"<pre>(:exposure (count x y width height)\n"
"</pre>\n"
"Теперь мы получаем положение указателя, извлекая его из \n"
"события button-press(нажатия кнопки). \n"
"<pre>(:button-press(x y)\n"
"</pre>\n"
"X11 нумерует свои пиксели, как если бы он использовал регистры \n"
"в интегральной схеме видеоконтроллера, которая сканирует электронный \n"
"луч слева направо и сверху вниз. Это прошло незамеченным в ragged-right."
"lisp. \n"
"Увеличение количества строк приводило к тому, что строки с более \n"
"высокими номерами отображались внизу страницы в совершенно естественном \n"
"порядке чтения сверху вниз.\n"
"<p></p>"

#: in_ed/SimpleCLX.html:1244
msgid ""
"<p>Here though we have a clash of intuitions. If the display is\n"
"some kind of mathematical graph, y should increase up the\n"
"screen. The top to bottom numbering that X11 uses and is so\n"
"natural for text, is the wrong way up for analogue input, so\n"
"we correct it, just managing to avoid an off-by-one error.\n"
"</p>"
msgstr ""
"<p>Однако здесь мы сталкиваемся с конфликтом  интуиций. Если на дисплее \n"
"отображается какой-то математический график, y должен увеличиваться на \n"
"экране. Нумерация сверху вниз, которую использует X11 и которая так \n"
"естественна для текста, является неправильной для аналогового ввода, \n"
"поэтому мы исправляем ее, просто избегая ошибок по одной.\n"
"</p>"

#: in_ed/SimpleCLX.html:1248
msgid ""
"<pre>(cons x (- y-range (+ y 1))\n"
"</pre>\n"
"<p></p>"
msgstr ""

#: in_ed/SimpleCLX.html:1259
msgid ""
"<p>We have also put a title in the title bar of the window.\n"
"This is a important cosmetic touch. It is worth pondering\n"
"that it ought to be impossible. Certainly we can draw text\n"
"inside our window, but X11 windows our drawing commands to\n"
"fit inside the window, and the window manager fits its frame\n"
"around our window, strictly outside it. How did we manage to\n"
"write outside our own window?</p>"
msgstr ""
"<p>Мы также поместили заголовок в строку заголовка окна. \n"
"Это важный косметический штрих. Стоит задуматься, что это должно \n"
"быть невозможно. Конечно, мы можем рисовать текст внутри нашего окна, \n"
"но X11 окна наши команды рисования помещаются внутри окна, а оконный \n"
"менеджер помещает свою рамку вокруг нашего окна, строго за его пределами. \n"
"Как нам удалось писать за пределами собственного окна?</p>"

#: in_ed/SimpleCLX.html:1266
msgid ""
"<p>We didn't. We talked to the window manager, and it put the\n"
"our title on for use. Hence the new command\n"
"</p>"
msgstr ""
"<p>Мы этого не делали. Мы поговорили с оконным менеджером, и он \n"
"разместил наш заголовок для использования. Отсюда новая команда \n"
"</p>"

#: in_ed/SimpleCLX.html:1279
msgid ""
"<pre>xlib:change-property\n"
"</pre>\n"
"It attaches arbitary properties to windows. Obviously we\n"
"attach the property to our own window. The window manager\n"
"looks for the :wm_name property on each of the windows it is\n"
"managing, to see it they have a name. We have supplied the\n"
"name \"Pick two numbers\", the type :string, the format\n"
"8bit-bytes, and we have specified the string is to be\n"
"represented by its character code. This is supposed to\n"
"happen by default, but defaulting doesn't work on my\n"
"machine.\n"
"<p></p>"
msgstr ""
"<pre>xlib:change-property\n"
"</pre>\n"
"Она придает окнам произвольные свойства. Очевидно, мы прикрепляем \n"
"свойство к нашему собственному окну. Диспетчер окон ищет свойство\n"
":wm_name  в каждом из окон, которыми он управляет, чтобы увидеть, \n"
"что у них есть имя. Мы предоставили имя \"Pick two numbers\"(Выбор \n"
"двух чисел», типа :string, формат 8-битных байтов, и мы указали, \n"
"что строка должна быть представлена своим символьным кодом. Это \n"
"должно происходить по умолчанию, но на моем компьютере это не работает. \n"
"<p></p>"

#: in_ed/SimpleCLX.html:1284
msgid "</p.if></body></html>"
msgstr ""
