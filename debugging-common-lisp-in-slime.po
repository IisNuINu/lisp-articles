#
# NuINu <don't@send.my>, 2021.
#
#. extracted from in_ed/debugging-common-lisp-in-slime.html
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-15 15:14+0300\n"
"PO-Revision-Date: 2021-08-15 15:49+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in_ed/debugging-common-lisp-in-slime.html:27
msgid ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T13:16:36.428942312\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:18:03.689883281\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\taddress.cjk { font-style: italic }\n"
"\t\taddress.ctl { font-style: italic }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Debugging Common Lisp in Slime</h1>\n"
"<p style=\"margin-bottom: 0cm\">by \n"
"</p>"
msgstr ""
"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n"
"<html>\n"
"<head>\n"
"\t<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"/>\n"
"\t<title></title>\n"
"\t<meta name=\"generator\" content=\"LibreOffice 6.0.7.3 (Linux)\"/>\n"
"\t<meta name=\"created\" content=\"2021-08-14T13:16:36.428942312\"/>\n"
"\t<meta name=\"changed\" content=\"2021-08-14T13:18:03.689883281\"/>\n"
"\t<style type=\"text/css\">\n"
"\t\t@page { margin: 2cm }\n"
"\t\tp { margin-bottom: 0.25cm; line-height: 115% }\n"
"\t\th1 { margin-bottom: 0.21cm }\n"
"\t\th1.western { font-family: \"Liberation Serif\", serif }\n"
"\t\th1.cjk { font-family: \"Noto Sans CJK SC\"; font-size: 24pt }\n"
"\t\th1.ctl { font-family: \"Lohit Devanagari\"; font-size: 24pt }\n"
"\t\taddress.cjk { font-style: italic }\n"
"\t\taddress.ctl { font-style: italic }\n"
"\t\tpre.cjk { font-family: \"Courier New\", monospace }\n"
"\t\ta:link { so-language: zxx }\n"
"\t\tcode.cjk { font-family: \"Courier New\", monospace }\n"
"\t</style>\n"
"</head>\n"
"<body lang=\"en-US\" dir=\"ltr\">\n"
"<h1 class=\"western\">Отладка Common Lisp в Slime</h1>\n"
"<p style=\"margin-bottom: 0cm\">by \n"
"</p>"

#: in_ed/debugging-common-lisp-in-slime.html:32
msgid ""
"<address class=\"western\">kqr</address>\n"
"<p style=\"margin-bottom: 0cm\">, published \n"
"</p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:37
msgid ""
"<p>Tags: \n"
"</p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:41
msgid ""
"<ul>\n"
"\t<li/>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:43
msgid "<p><a href=\"https://two-wrongs.com/tags.html#lisp\">lisp</a></p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:46
msgid "</ul>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:55
msgid ""
"<p>I was making a little âgameâ in Lisp to help me understand a\n"
"concept better. Basically, it shows me a grid of Xâs, Oâs and\n"
"_âs. I get to remove one each turn, and then the final\n"
"configuration should follow some rules. The goal of the game is not\n"
"actually to reach such a final configuration, but rather determine,\n"
"in as few moves as possible, whether or not that configuration is\n"
"possible. \n"
"</p>"
msgstr ""
"<p>Я сделал небольшую «игру» на Лиспе, чтобы помочь мне лучше понять "
"концепцию. \n"
"По сути, она показывает мне сетку из X, O и _. Я убираю по одному каждый "
"ход, \n"
"а затем окончательная конфигурация должна соответствовать некоторым "
"правилам. \n"
"Цель игры состоит не в том, чтобы достичь такой окончательной "
"конфигурации, \n"
"а в том, чтобы определить за как можно меньшее количество ходов, возможна "
"ли \n"
"такая конфигурация.\n"
"</p>"

#: in_ed/debugging-common-lisp-in-slime.html:60
msgid ""
"<p>However, the following happened. \n"
"</p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:64
msgid ""
"<pre class=\"western\">Remove? e\n"
"_ (a)    O (b)    X (c)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:66
msgctxt "in_ed/debugging-common-lisp-in-slime.html:66"
msgid "X (d)    _ (e)    X (f)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:68
msgctxt "in_ed/debugging-common-lisp-in-slime.html:68"
msgid "X (g)    O (h)    X (i)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:75
msgid ""
"Remove?</pre>\n"
"<p>\n"
"See how the columns are all either <code class=\"western\">_</code> or\n"
"the same letter? Thatâs supposed to be a win, but it wasnât\n"
"counting it. It just let me keep playing. \n"
"</p>"
msgstr ""
"Remove?</pre>\n"
"<p>\n"
"Видите, все столбцы имеют либо <code class=\"western\">_</code>, либо \n"
"одну и ту же букву? Предполагалось, что это будет победа, но она ее не "
"считала. \n"
"Это просто позволяло мне продолжать играть.\n"
"</p>"

#: in_ed/debugging-common-lisp-in-slime.html:79
msgid ""
"<h1 class=\"western\"><a name=\"org952e4f4\"></a>Interactive Stack Trace</"
"h1>\n"
"<div id=\"text-org952e4f4\" dir=\"ltr\">"
msgstr ""
"<h1 class=\"western\"><a name=\"org952e4f4\"></a>Интерактивная трассировка "
"стека </h1>\n"
"<div id=\"text-org952e4f4\" dir=\"ltr\">"

#: in_ed/debugging-common-lisp-in-slime.html:87
msgid ""
"<p><a name=\"fnr.1\"></a>Debugging this the Lisp way was a pleasure,\n"
"\tthough. I hit <code class=\"western\">C-c C-c</code> to trigger a\n"
"\tcondition at the current point of evaluation, which naturally throws\n"
"\tme into the debugger. It presented me with this screen<sup><a href="
"\"https://two-wrongs.com/debugging-common-lisp-in-slime.html#fn.1\">1</a>1</"
"sup>\n"
"\tWhich I have abbreviated mostly because it is hard(er) to read\n"
"\twithout the correct typography â¦. \n"
"\t</p>"
msgstr ""
"<p><a name=\"fnr.1\"></a>Однако отладка этого способа Lisp была "
"удовольствием. \n"
"\tЯ нажимаю C-c C-c, чтобы вызвать условие в текущей точке вычисления, \n"
"\tкоторое, естественно, бросает меня в отладчик. Он представил мне этот "
"экран\n"
"\t<sup><a href=\"https://two-wrongs.com/debugging-common-lisp-in-slime."
"html#fn.1\">1</a>1</sup>, \t\tкоторый я сократил в основном потому, что его "
"трудно читать без правильной \n"
"\tтипографики…. \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:91
msgid ""
"\t<pre class=\"western\">Interrupt from Emacs\n"
"   [Condition of type SIMPLE-ERROR]"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:98
msgid ""
"Restarts:\n"
" 0: [CONTINUE] Continue from break.\n"
" 1: [ABORT-READ] Abort reading input from Emacs.\n"
" 2: [RETRY] Retry SLIME REPL evaluation request.\n"
" 3: [*ABORT] Return to SLIME's top level.\n"
" 4: [ABORT] abort thread (#&lt;THREAD &quot;repl-thread&quot; RUNNING "
"{1001A8FFA3}&gt;)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:121
msgid ""
"Backtrace:\n"
"  1: (SWANK::DEBUG-IN-EMACS #&lt;SIMPLE-ERROR &quot;Interrupt from "
"Emacs&quot; {10057293D3}&gt;)\n"
"  2: (SWANK:INVOKE-SLIME-DEBUGGER #&lt;SIMPLE-ERROR &quot;Interrupt from "
"Emacs&quot; {10057293D3}&gt;)\n"
"  3: (SWANK:SIMPLE-BREAK &quot;Interrupt from Emacs&quot;)\n"
"  4: (SWANK/BACKEND:CHECK-SLIME-INTERRUPTS)\n"
" ...\n"
" 13: ((:METHOD STREAM-READ-CHAR (SWANK/GRAY::SLIME-INPUT-STREAM)) #&lt;SWANK/"
"GRAY::SLIME-INPUT-STREAM {1001997A13}&gt;) [fast-method]\n"
" 14: (READ-CHAR #&lt;SWANK/GRAY::SLIME-INPUT-STREAM {1001997A13}&gt; NIL NIL "
"#&lt;unused argument&gt;)\n"
" 15: (READ-LINE #&lt;TWO-WAY-STREAM :INPUT-STREAM #&lt;SWANK/GRAY::SLIME-"
"INPUT-STREAM {1001997A13}&gt; :OUTPUT-STREAM #&lt;SWANK/GRAY::SLIME-OUTPUT-"
"STREAM {1001A77973}&gt;&gt; T NIL #&lt;unused argument&gt;)\n"
" 16: (GAME-ROUND 3 3)\n"
" 17: (PLAY 3 3)\n"
" 18: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PLAY 3 3) #&lt;NULL-LEXENV&gt;)\n"
" 19: (EVAL (PLAY 3 3))\n"
" 20: (SWANK::EVAL-REGION &quot;(play 3 3) ..)&quot;\n"
" 21: ((LAMBDA NIL :IN SWANK-REPL::REPL-EVAL))\n"
" ...</pre>\n"
"<p>\n"
"\tI know the check for a winning game happens in the <code class=\"western"
"\">game-round</code>\n"
"\tfunction, so I expanded that stack frame in the backtrace seen\n"
"\tabove. It showed me the local variables, none of which were\n"
"\tparticularly surprising. \n"
"\t</p>"
msgstr ""
"Backtrace:\n"
"  1: (SWANK::DEBUG-IN-EMACS #&lt;SIMPLE-ERROR &quot;Interrupt from "
"Emacs&quot; {10057293D3}&gt;)\n"
"  2: (SWANK:INVOKE-SLIME-DEBUGGER #&lt;SIMPLE-ERROR &quot;Interrupt from "
"Emacs&quot; {10057293D3}&gt;)\n"
"  3: (SWANK:SIMPLE-BREAK &quot;Interrupt from Emacs&quot;)\n"
"  4: (SWANK/BACKEND:CHECK-SLIME-INTERRUPTS)\n"
" ...\n"
" 13: ((:METHOD STREAM-READ-CHAR (SWANK/GRAY::SLIME-INPUT-STREAM)) #&lt;SWANK/"
"GRAY::SLIME-INPUT-STREAM {1001997A13}&gt;) [fast-method]\n"
" 14: (READ-CHAR #&lt;SWANK/GRAY::SLIME-INPUT-STREAM {1001997A13}&gt; NIL NIL "
"#&lt;unused argument&gt;)\n"
" 15: (READ-LINE #&lt;TWO-WAY-STREAM :INPUT-STREAM #&lt;SWANK/GRAY::SLIME-"
"INPUT-STREAM {1001997A13}&gt; :OUTPUT-STREAM #&lt;SWANK/GRAY::SLIME-OUTPUT-"
"STREAM {1001A77973}&gt;&gt; T NIL #&lt;unused argument&gt;)\n"
" 16: (GAME-ROUND 3 3)\n"
" 17: (PLAY 3 3)\n"
" 18: (SB-INT:SIMPLE-EVAL-IN-LEXENV (PLAY 3 3) #&lt;NULL-LEXENV&gt;)\n"
" 19: (EVAL (PLAY 3 3))\n"
" 20: (SWANK::EVAL-REGION &quot;(play 3 3) ..)&quot;\n"
" 21: ((LAMBDA NIL :IN SWANK-REPL::REPL-EVAL))\n"
" ...</pre>\n"
"<p>\n"
"\tЯ знаю, что проверка выигрыша в игре происходит в функции <code class="
"\"western\">game-round</code>, поэтому я расширил этот кадр стека в "
"трассировке, показанной выше. \n"
"\tОн показал мне локальные переменные, ни одна из которых не вызвала особого "
"удивления. \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:137
msgid ""
"\t<pre class=\"western\">16: (GAME-ROUND 3 3)\n"
"     Locals:\n"
"       BOARD = #2A((_ O X) (X _ X) (X O X))\n"
"       M = 3\n"
"       N = 3\n"
"       REMOVALS = 2</pre>\n"
"<p>\n"
"\tTo get to the root of the problem, I wanted to run the won-game\n"
"\tcheck manually, with the values in that stack frame. Doing so is\n"
"\ttrivial in : I simply put the cursor somewhere in the frame and\n"
"\tpressed <code class=\"western\">e</code> for eval. I entered <code class="
"\"western\">(print\n"
"\t(unit-columns? board))</code> and it gave me back <code class=\"western"
"\">NIL</code>,\n"
"\tmeaning it didnât detect the situation as it should have. \n"
"\t</p>"
msgstr ""
"\t<pre class=\"western\">16: (GAME-ROUND 3 3)\n"
"     Locals:\n"
"       BOARD = #2A((_ O X) (X _ X) (X O X))\n"
"       M = 3\n"
"       N = 3\n"
"       REMOVALS = 2</pre>\n"
"<p>\n"
"\tЧтобы разобраться в корне проблемы, я хотел запустить проверку \n"
"\tвыигранной игры вручную со значениями в этом кадре стека. \n"
"\tСделать это просто: я просто помещаю курсор где-нибудь в кадре и \n"
"\tнажимаю <code class=\"western\">e</code> для вычисления(eval). \n"
"\tЯ ввел <code class=\"western\">(print (unit-columns? board))</code>, \n"
"\tи она вернула мне <code class=\"western\">NIL</code>, что означает, \n"
"\tчто она не распознала ситуацию должным образом.\n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:142
msgid ""
"<p>A quick look at the function, \n"
"\t</p>"
msgstr ""
"<p>Быстрый взгляд на функцию,  \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:163
msgid ""
"\t<pre class=\"western\">(defun unit-columns? (board)\n"
"  &quot;If all columns are single-coloured, the game is won!&quot;\n"
"  (loop for i from 0 below (array-dimension board 0)\n"
"     always\n"
"       (loop\n"
"          for j from 0 below (array-dimension board 1)\n"
"          for elem = (aref board i j)\n"
"          for previous = elem then\n"
"            (if (tile? previous) previous elem)\n"
"          always (same-colour previous elem))))</pre>\n"
"<p>\n"
"\tand it was clear that I had accidentally swapped the dimensions of\n"
"\tthe board for this check! I normally iterate the board in row-major\n"
"\torder, but this was the one case where I needed to do it in\n"
"\tcolumn-major order. I swapped the two <code class=\"western\">(loop\n"
"\tfor i â¦ board 0)</code> and <code class=\"western\">(loop for j â¦\n"
"\tboard 1)</code> lines, and pressed <code class=\"western\">C-c C-c</code>\n"
"\tto recompile the function and replace the old one. \n"
"\t</p>"
msgstr ""
"\t<pre class=\"western\">(defun unit-columns? (board)\n"
"  &quot;If all columns are single-coloured, the game is won!&quot;\n"
"  (loop for i from 0 below (array-dimension board 0)\n"
"     always\n"
"       (loop\n"
"          for j from 0 below (array-dimension board 1)\n"
"          for elem = (aref board i j)\n"
"          for previous = elem then\n"
"            (if (tile? previous) previous elem)\n"
"          always (same-colour previous elem))))</pre>\n"
"<p>\n"
"\tи было ясно, что я случайно поменял размеры игровой доски \n"
"\tдля этой проверки! Обычно я перебираю доску в порядке строк, \n"
"\tно это был единственный случай, когда мне нужно было сделать \n"
"\tэто в порядке столбцов. Я поменял местами две строки <code class=\"western"
"\">(loop for i … board 0)</code> и <code class=\"western\">(цикл для j… "
"плата 1)</code> и нажал \n"
"\t<code class=\"western\">C-c C-c</code>, \n"
"\tчтобы перекомпилировать функцию и заменить старую. \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:171
msgid ""
"<p>In the debugger, the old stack frame was still highlighted, so\n"
"\tjust to make sure I pressed <code class=\"western\">e</code> again,\n"
"\tand evaluated the same print as before. This time it detected the\n"
"\tsituation correctly! \n"
"\t</p>"
msgstr ""
"<p>В отладчике старый кадр стека все еще был выделен, поэтому просто чтобы "
"убедиться, \n"
"\tчто я снова нажал <code class=\"western\">e</code> и вычислил тот же "
"отпечаток, \n"
"\tчто и раньше. На этот раз она правильно определила ситуацию! \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:180
msgid ""
"<p>The only thing now that remains is to continue running the\n"
"\tprogram with the correct function. Still with the cursor on the\n"
"\tstack frame of interest, I press <code class=\"western\">r</code> and\n"
"\tit restarts <i>that specific stack frame</i> but now with the\n"
"\tcorrect definitions in place. \n"
"\t</p>"
msgstr ""
"<p>Теперь остается только продолжить выполнение программы с правильной "
"функцией. \n"
"\tВсе еще удерживая курсор на интересующем кадре стека, я нажимаю <code "
"class=\"western\">r</code>, и она перезапускает <i>этот конкретный кадр "
"стека</i>, но теперь с \n"
"\tправильными определениями.\n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:185
msgid ""
"<p>Then this happened. \n"
"\t</p>"
msgstr ""
"<p>Потом случилось это.\n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:189
msgid ""
"\t<pre class=\"western\">Remove? e\n"
"_ (a)    O (b)    X (c)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:191
msgctxt "in_ed/debugging-common-lisp-in-slime.html:191"
msgid "X (d)    _ (e)    X (f)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:193
msgctxt "in_ed/debugging-common-lisp-in-slime.html:193"
msgid "X (g)    O (h)    X (i)"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:198
msgid ""
"You won the game! It took 2 removals.</pre>\n"
"<p>\n"
"\tI guess it works! \n"
"\t</p>"
msgstr ""
"You won the game! It took 2 removals.</pre>\n"
"<p>\n"
"\tЯ думаю, это работает! \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:203
msgid ""
"</div>\n"
"<h1 class=\"western\"><a name=\"orgbd6bbb6\"></a>Epilogue</h1>\n"
"<div id=\"text-orgbd6bbb6\" dir=\"ltr\">"
msgstr ""
"</div>\n"
"<h1 class=\"western\"><a name=\"orgbd6bbb6\"></a>Эпилог</h1>\n"
"<div id=\"text-orgbd6bbb6\" dir=\"ltr\">"

#: in_ed/debugging-common-lisp-in-slime.html:211
msgid ""
"<p>What makes this so pleasant is the interactive, keyboard-driven\n"
"\tstack trace. With , you donât merely <i>look</i> at the stack\n"
"\ttrace; you play around with it. You inspect every part of the\n"
"\trunning state of the program, you evaluate expressions inside\n"
"\tvarious stack frames, you reassign local variables, and then you\n"
"\trestart execution at an arbitrary stack frame. \n"
"\t</p>"
msgstr ""
"<p>Что делает это таким приятным, так это интерактивная трассировка стека, \n"
"\tуправляемая клавиатурой. С помощью вы не просто смотрите на трассировку "
"стека; \n"
"\tвы играете с ним. Вы проверяете каждую часть текущего состояния "
"программы, \n"
"\tвычисляете выражения внутри различных фреймов стека, переназначаете "
"локальные \n"
"\tпеременные, а затем перезапускаете выполнение с произвольного фрейма "
"стека. \n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:219
msgid ""
"<p>This is generally not possible in exception-driven languages,\n"
"\tbecause by the time the expression has bubbled up to the debugger,\n"
"\tthe <i>stack has already been unwound</i>. Itâs still there to\n"
"\tobserve, but it no longer has any connection to your program. \n"
"\t</p>"
msgstr ""
"<p>Обычно это невозможно в языках, управляемых исключениями, потому что к "
"тому времени, \n"
"\tкогда выражение попало в отладчик, <i>стек уже будет развернут</i>. Его "
"все еще \n"
"\tможно наблюдать, но он больше не связан с вашей программой.\n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:226
msgid ""
"<p>In Common Lisp, with its condition system, the traceback forms a\n"
"\tlive snapshot of the current running state of the program, which can\n"
"\tbe modified to your delight before continuing to run the program. \n"
"\t</p>"
msgstr ""
"<p>В Common Lisp с его системой условий трассировка формирует оперативный "
"снимок \n"
"\tтекущего состояния выполнения программы, который можно изменить к вашему \n"
"\tудовольствию, прежде чем продолжить выполнение программы.\n"
"\t</p>"

#: in_ed/debugging-common-lisp-in-slime.html:229
msgid "</div>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:234
msgid ""
"<p>Feel free to <a href=\"https://buymeacoff.ee/kqr\">show your support\n"
"by buying me a coffee</a>, <em>iff</em> you want to.<br/>\n"
"Or <a href=\"https://two-wrongs.com/about\">send\n"
"me an email</a>. Emails show nearly as much support as coffee.</p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:237
msgid "<p style=\"margin-bottom: 0cm; line-height: 100%\"><br/>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:239
msgid "</p>"
msgstr ""

#: in_ed/debugging-common-lisp-in-slime.html:242
msgid ""
"</body>\n"
"</html>"
msgstr ""
